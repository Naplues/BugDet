File,Line_number,SRC
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,24,import java.io.FileNotFoundException;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,27,import java.util.Enumeration;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,28,import java.util.HashMap;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,30,import org.apache.bookkeeper.client.AsyncCallback.AddCallback;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,34,import org.apache.bookkeeper.client.LedgerEntry;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,37,import org.slf4j.Logger;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,38,import org.slf4j.LoggerFactory;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java,40,import org.apache.zookeeper.KeeperException;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,19,import java.util.EnumSet;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,20,import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,34,static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,112,synchronized private void connect() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,113,if (state == ConnectionState.CONNECTING) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,114,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,117,state = ConnectionState.CONNECTING;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,151,PerChannelBookieClient.this.channel = channel;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,169,boolean doOpNow;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,99,long startTime = System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,117,long delay = startTime + (long) (1000 * myPublishCount / rate) - System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,121,long startTime = System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,35,return 1000. * count / (System.currentTimeMillis() - startTime);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,132,earliest.compareAndSet(0, System.currentTimeMillis());
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,157,startTime = System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,161,agg.reportLatency(System.currentTimeMillis() - startTime);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,171,long curTime = System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,177,pubSubData.requestWriteTime = System.currentTimeMillis();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,354,pubSubData.requestWriteTime = System.currentTimeMillis();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,60,totalLatency.addAndGet(System.currentTimeMillis() - (Long)ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,74,long startTime = System.currentTimeMillis();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,82,logger.info("Phase: " + phase + " Avg latency : " + totalLatency.get() / numOps + ", tput = " + (numOps * 1000/ (System.currentTimeMillis() - startTime)));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,86,bkc.addEntry(addr, ledgerId, passwd, i, toSend, callback, System.currentTimeMillis(), 0);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,76,lh[rand.nextInt(lh.length)].asyncAddEntry(msg, callback, System.currentTimeMillis());
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,170,subscriber.setLastScanErrorTime(System.currentTimeMillis());
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,225,long lastInterestingFailureTime = System.currentTimeMillis() - cfg.getScanBackoffPeriodMs();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,612,addMessageToCache(cacheKey, message, System.currentTimeMillis());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,1012,long start = System.currentTimeMillis();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,1023,long end = System.currentTimeMillis();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,25,import java.util.concurrent.Executors;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,27,import org.apache.bookkeeper.meta.LedgerManager;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,28,import org.apache.bookkeeper.meta.LedgerManagerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,29,import org.apache.bookkeeper.conf.ClientConfiguration;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,36,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,37,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,1,package org.apache.bookkeeper.proto;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,1,package org.apache.bookkeeper.proto;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,29,import org.apache.bookkeeper.conf.ClientConfiguration;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,32,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,34,import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,37,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,38,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,43,import org.jboss.netty.channel.ChannelFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,432,final int type, rc;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,116,long latency = System.currentTimeMillis() - requestCreateTime;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,1,package org.apache.bookkeeper.util;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,190,long start = System.currentTimeMillis();
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,222,if (System.currentTimeMillis() > start + timeout) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java,1,package org.apache.bookkeeper.util;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,407,private void registerBookie(int port) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,413,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,415,Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,417,LOG.error("ZK exception registering ephemeral Znode for Bookie!", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,421,throw new IOException(e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,68,nioServerFactory = new NIOServerFactory(conf, this);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,34,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,35,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,36,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,37,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,38,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,39,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,105,private void initializeZookeper() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,109,zkc = new ZooKeeper("127.0.0.1", ZooKeeperDefaultPort, new emptyWatcher());
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,122,LOG.error("Exception while creating znodes", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,186,public void process(WatchedEvent event) {}
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,177,bookieWatcher.readBookiesBlocking();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,180,ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,140,bkc = new BookKeeper(conf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,465,if (counter.getrc() != KeeperException.Code.OK.intValue()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,60,Set<InetSocketAddress> knownBookies = new HashSet<InetSocketAddress>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,102,Set<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,575,static class CompletionKey {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java,35,private long firstEntry = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java,106,verifyDigest(-1, dataReceived, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,85,lastAddConfirmed = lastAddPushed = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,438,LedgerHandle.this, -1, ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,51,long maxAddPushed = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,52,long maxAddConfirmed = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,54,this.entryId = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,76,cb.addComplete(BKException.Code.IllegalOpException, this, -1, ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,271,long entryId = -1;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,218,for (Channel channel : pub.host2Channel.values()) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,219,getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,220,channel.close().awaitUninterruptibly();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,222,for (Channel channel : sub.topicSubscriber2Channel.values()) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,223,getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,224,channel.close().awaitUninterruptibly();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,229,pub.host2Channel.clear();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,230,sub.topicSubscriber2Channel.clear();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,197,if (!host2Channel.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,579,topicSubscriber2Channel.put(topic, channel);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,92,static final String BOOKIE_REGISTRATION_PATH = "/ledgers/available/";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,414,zk.create(BOOKIE_REGISTRATION_PATH + InetAddress.getLocalHost().getHostAddress() + ":" + port, new byte[0],
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,176,bookieWatcher = new BookieWatcher(this);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,65,static final String BOOKIES_PATH = BookieWatcher.BOOKIE_REGISTRATION_PATH;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,268,zk.sync(BOOKIES_PATH, new AsyncCallback.VoidCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,308,zk.getChildren(BOOKIES_PATH, null, new AsyncCallback.ChildrenCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,53,public static final String BOOKIE_REGISTRATION_PATH = "/ledgers/available";
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,69,public BookieWatcher(BookKeeper bk) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,83,bk.getZkHandle().getChildren(BOOKIE_REGISTRATION_PATH, this, callback, null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,112,new Thread(new Runnable() {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,81,public PubSubData getOrigSubData() {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,105,subscribeChannel = channel;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,106,subscribeChannel.setReadable(false);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,109,origSubData = pubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,114,TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,115,responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,127,outstandingMsgSet = Collections.newSetFromMap(new ConcurrentHashMap<Message,Boolean>(
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,128,responseHandler.getConfiguration().getMaximumOutstandingMessages(), 1.0f));
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,166,logger.debug("Handling a Subscribe message in response: " + response + ", topic: "
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,167,+ origSubData.topic.toStringUtf8() + ", subscriberId: " + origSubData.subscriberId.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,305,+ ", subscriberId: " + origSubData.subscriberId.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,29,String prefix = "";
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,33,prefix += "/" + comp;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,34,prefixes.add(prefix);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,30,protected static ProtocolVersion serverVersion = ProtocolVersion.VERSION_ONE;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,29,System.exit(1);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,96,new Thread(this, "DeliveryManagerThread").start();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,298,MessageFilter filter;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,308,this.filter = filter;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,272,throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,280,ThreadGroup tg = new ThreadGroup("hedwig") {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,380,new PubSubServer(conf);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,251,Statement stmt = conn.createStatement();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,254,+ tableName + " PRIMARY KEY," + MSG_FIELD_NAME + " BLOB(2M) NOT NULL)");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,277,return (topic.toStringUtf8() + "_" + version);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,293,PreparedStatement stmt;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,384,PreparedStatement stmt;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,391,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,442,protected static HashSetCacheKeyFactory instance = new HashSetCacheKeyFactory();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,450,protected static TreeSetLongFactory instance = new TreeSetLongFactory();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,57,throws InterruptedException {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,60,ThreadGroup tg = new ThreadGroup("hedwigproxy") {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,86,public HedwigProxy(ProxyConfiguration conf) throws InterruptedException {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,87,this(conf, new TerminateJVMExceptionHandler());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,154,new HedwigProxy(conf);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,24,protected static String PROXY_PORT = "proxy_port";
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,25,protected static String MAX_MESSAGE_SIZE = "max_message_size";
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java,23,protected static TrueFilter instance = new TrueFilter();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,106,System.exit(1);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,25,protected static UncaughtExceptionHandler uncaughtExceptionHandler = new TerminateJVMExceptionHandler();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,48,protected final static String READAHEAD_ENABLED = "readhead_enabled";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,183,return conf.getBoolean(READAHEAD_ENABLED, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,102,for(File f: dirs) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,103,long lastLogId = getLastLogId(f);
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java,181,return getString(ZK_SERVERS, "localhost");
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,342,return getString(ZK_SERVERS, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,485,callbackWorker.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,64,this.bookie = new Bookie(conf);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,175,startReadingFrom(request.startSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,265,startReadingFrom(imlr.startSeqIdIncluded + entry.getEntryId() + 1);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,86,logger.debug("Calling a sync subUnsub request for topic: " + topic.toStringUtf8() + ", subscriberId: "
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,87,+ subscriberId.toStringUtf8() + ", operationType: " + operationType + ", createOrAttach: "
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,138,logger.debug("Calling an async subUnsub request for topic: " + topic.toStringUtf8() + ", subscriberId: "
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,139,+ subscriberId.toStringUtf8() + ", operationType: " + operationType + ", createOrAttach: "
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,190,throws ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,51,private final MessageHandler messageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,54,public SubscribeReconnectCallback(PubSubData origSubData, HedwigClientImpl client, MessageHandler messageHandler) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,59,this.messageHandler = messageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,80,if (messageHandler != null) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,81,try {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,82,sub.startDelivery(origSubData.topic, origSubData.subscriberId, messageHandler);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,86,logger.error("Subscribe was successful but error starting delivery for topic: "
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,87,+ origSubData.topic.toStringUtf8() + ", subscriberId: "
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,88,+ origSubData.subscriberId.toStringUtf8(), e);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java,89,retrySubscribeRequest();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,444,throws ClientNotSubscribedException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,321,origSubData.callback = new SubscribeReconnectCallback(origSubData, client, subHandler.getMessageHandler());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,92,ChannelTracker tracker = new ChannelTracker(client.getSubscriber());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,53,final ByteString subscriberId = request.getStartDeliveryRequest().getSubscriberId();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,75,OrderedSafeExecutor callbackWorker = new OrderedSafeExecutor(Runtime
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,76,.getRuntime().availableProcessors());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,78,.getRuntime().availableProcessors());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,962,public void fenceLedger(long ledgerId) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,144,if (rc != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,145,cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,107,this, entry, BookieProtocol.FLAG_NONE);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,95,final ReadEntryCallback cb, final Object ctx, final int options) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,106,client.readEntry(ledgerId, entryId, cb, ctx, options);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java,40,public static final byte CURRENT_PROTOCOL_VERSION = 1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,276,masterKey = new byte[20];
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,277,packet.get(masterKey, 0, 20);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,279,case BookieProtocol.READENTRY:
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,324,bookie.fenceLedger(ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,233,+ masterKey.length; // for the master key
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,261,public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx, final int options) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,483,default:
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,429,DigestType digestType = getLedgerDigestType(lId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,430,byte[] passwd = getLedgerPasswd(lId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,606,final MultiCallback ledgerFragmentEntryMcb,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,662,final MultiCallback ledgerFragmentsMcb;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,668,SingleFragmentCallback(MultiCallback ledgerFragmentsMcb, LedgerHandle lh,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,703,public void processResult(int rc, String path, Object ctx, Stat stat) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,709,lh.writeLedgerConfig(new WriteCb(), null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,265,writeLedgerConfig(new StatCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,267,public void processResult(int rc, String path, Object subctx,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,268,Stat stat) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,269,if (rc != KeeperException.Code.OK.intValue()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,582,metadata.addEnsemble(lastAddConfirmed + 1, newEnsemble);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,584,writeLedgerConfig(new StatCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,591,if (rc != KeeperException.Code.OK.intValue()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,611,void rereadMetadata(final GenericCallback<Void> cb) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,613,new DataCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,614,public void processResult(int rc, String path,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,615,Object ctx, byte[] data, Stat stat) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,616,if (rc != KeeperException.Code.OK.intValue()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,617,LOG.error("Error reading metadata from ledger, code =" + rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,618,cb.operationComplete(BKException.Code.ZKException, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,619,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,622,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,623,metadata = LedgerMetadata.parseConfig(data, stat.getVersion());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,625,LOG.error("Error parsing ledger metadata for ledger", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,626,cb.operationComplete(BKException.Code.ZKException, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,628,cb.operationComplete(BKException.Code.OK, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,649,rereadMetadata(new GenericCallback<Void>() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,651,public void operationComplete(int rc, Void result) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,175,LOG.error("Failure " + BKException.getMessage(rc) + " while reading entry: " + lh.lastAddConfirmed + 1
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,186,LOG.error("Failure " + BKException.getMessage(rc) + " while writing entry: " + lh.lastAddConfirmed + 1
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,22,import java.util.concurrent.ConcurrentMap;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,23,import java.util.concurrent.ConcurrentHashMap;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,69,private ConcurrentMap<Long, Boolean> activeLedgers;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,93,activeLedgers = new ConcurrentHashMap<Long, Boolean>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,158,HashSet<Long> zkActiveLedgers = getLedgersInSingleNode(ledgerRootPath);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,159,ConcurrentMap<Long, Boolean> bkActiveLedgers = activeLedgers;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,182,void doGc(GarbageCollector gc, ConcurrentMap<Long, Boolean> bkActiveLedgers, HashSet<Long> zkAllLedgers) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,184,for (Long bkLid : bkActiveLedgers.keySet()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,185,if (!zkAllLedgers.contains(bkLid)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,187,bkActiveLedgers.remove(bkLid);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,188,gc.gc(bkLid);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,22,import java.util.concurrent.ConcurrentMap;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,23,import java.util.concurrent.ConcurrentSkipListMap;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,93,private ConcurrentSkipListMap<Long, Boolean> activeLedgers;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,120,this.activeLedgers = new ConcurrentSkipListMap<Long, Boolean>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,373,doGcByLevel(gc, l1Node, l2Node);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,405,HashSet<Long> zkActiveLedgers = getLedgersInSingleNode(nodePath);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,409,ConcurrentMap<Long, Boolean> bkActiveLedgers =
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,410,activeLedgers.subMap(startLedgerId, true, endLedgerId, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,431,void doGc(GarbageCollector gc, ConcurrentMap<Long, Boolean> bkActiveLedgers,
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,432,HashSet<Long> zkAllLedgers) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,434,for (Long lid : bkActiveLedgers.keySet()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,435,if (!zkAllLedgers.contains(lid)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,437,bkActiveLedgers.remove(lid);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,438,gc.gc(lid);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,302,bookie.recoveryAddEntry(packet.slice(), this, src, masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,304,bookie.addEntry(packet.slice(), this, src, masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,379,Cnxn src = (Cnxn) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,154,synchronized public void close() throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,86,static final String IDGENERATION_PREFIX = "/idgen/ID-";
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,377,+ " of " + ledgerRootPath);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,381,LOG.warn("Exception during garbage collecting inactive/deleted ledgers");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,61,private long logId;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,397,continue;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,401,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,104,if (lastLogId >= logId) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,105,logId = lastLogId+1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,108,createLogId(logId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,215,private void createLogId(long logId) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,218,File firstDir = list.get(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,222,logChannel = new BufferedChannel(new RandomAccessFile(new File(firstDir, Long.toHexString(logId)+".log"), "rw").getChannel(), 64*1024);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,254,private long getLastLogId(File f) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,277,private void openNewChannel() throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,278,createLogId(++logId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,288,openNewChannel();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,350,FileChannel newFc = new RandomAccessFile(file, "rw").getChannel();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,89,static final String VERSION_FILENAME = "VERSION";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,249,this.journalDirectory = conf.getJournalDir();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,250,this.ledgerDirectories = conf.getLedgerDirs();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,255,checkDirectoryLayoutVersion(journalDirectory);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,256,for (File dir : ledgerDirectories) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,257,checkDirectoryLayoutVersion(dir);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,393,private ZooKeeper instantiateZookeeperClient(String zkServers) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,394,if (zkServers == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,399,int zkTimeout = conf.getZkTimeout();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,401,return newZookeeper(zkServers, zkTimeout);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,489,throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,490,if (!dir.isDirectory()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,491,throw new IOException("Directory("+dir+") isn't a directory");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,493,File versionFile = new File(dir, VERSION_FILENAME);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,495,FileInputStream fis;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,496,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,497,fis = new FileInputStream(versionFile);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,505,LOG.info("No version file found, creating");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,506,createDirectoryLayoutVersionFile(dir);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,507,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,510,BufferedReader br = new BufferedReader(new InputStreamReader(fis));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,511,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,512,String layoutVersionStr = br.readLine();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,513,int layoutVersion = Integer.parseInt(layoutVersionStr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,516,+ CURRENT_DIRECTORY_LAYOUT_VERSION + ", found " + layoutVersion;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,517,LOG.error(errmsg);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,518,throw new IOException(errmsg);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,521,throw new IOException("Version file has invalid content", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,523,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,524,fis.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,526,LOG.warn("Error closing version file", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,535,private void createDirectoryLayoutVersionFile(File dir) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,536,File versionFile = new File(dir, VERSION_FILENAME);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,538,FileOutputStream fos = new FileOutputStream(versionFile);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,539,BufferedWriter bw = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,540,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,541,bw = new BufferedWriter(new OutputStreamWriter(fos));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,542,bw.write(String.valueOf(CURRENT_DIRECTORY_LAYOUT_VERSION));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,544,if (bw != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,545,bw.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,547,fos.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java,65,return "No problem";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java,67,return "Error while reading ledger";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java,69,return "Ledger has been fenced; No more entries can be added";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java,70,default:
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java,71,return "Invalid operation";
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,90,this.dirs = conf.getLedgerDirs();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,53,this.ledgerDirectories = conf.getLedgerDirs();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,467,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,468,shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,470,System.exit(-1);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,842,LOG.error("Bookie thread exiting", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,862,public synchronized void shutdown() throws InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,863,if (!running) { // avoid shutdown twice
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,864,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,867,if(zk != null) zk.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,868,this.interrupt();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,869,this.join();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,870,syncThread.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,871,for(LedgerDescriptor d: ledgers.values()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,872,d.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,875,entryLogger.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,877,ledgerManager.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,879,running = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,82,public synchronized void shutdown() throws InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,87,bookie.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,137,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,138,shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,140,System.exit(-1);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,232,throw iae;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,249,final BookieServer bs = new BookieServer(conf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,250,bs.start();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,251,Runtime.getRuntime().addShutdownHook(new Thread() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,253,public void run() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,254,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,258,LOG.warn("Exception when shutting down bookie server : ", ie);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,262,LOG.info("Register shutdown hook successfully");
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,263,bs.join();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,62,ZooKeeper zk = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,65,boolean ownZKHandle = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,67,ClientSocketChannelFactory channelFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,72,BookieClient bookieClient;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,73,BookieWatcher bookieWatcher;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,77,OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,83,ClientConfiguration conf;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,114,public BookKeeper(ClientConfiguration conf) throws IOException, InterruptedException,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,115,KeeperException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,116,this(conf, new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,118,public void process(WatchedEvent event) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,120,if (LOG.isDebugEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,121,LOG.debug("Process: " + event.getType() + " " + event.getPath());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,125,Executors.newCachedThreadPool()));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,127,ownZKHandle = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,238,public void asyncCreateLedger(int ensSize, int qSize, DigestType digestType,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,239,byte[] passwd, CreateCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,242,.initiate();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,325,public void asyncOpenLedger(long lId, DigestType digestType, byte passwd[],
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,326,OpenCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,327,new LedgerOpenOp(this, lId, digestType, passwd, cb, ctx).initiate();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,357,public void asyncOpenLedgerNoRecovery(long lId, DigestType digestType, byte passwd[],
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,358,OpenCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,359,new LedgerOpenOp(this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,444,public void asyncDeleteLedger(long lId, DeleteCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,445,new LedgerDeleteOp(this, lId, cb, ctx).initiate();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,26,import java.util.ArrayDeque;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,73,final Queue<PendingAddOp> pendingAddOps = new ArrayDeque<PendingAddOp>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,171,if (Code.OK.intValue() != ctx.rc && null != ctx.ledgers) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,235,ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,236,header.writeInt(totalHeaderSize - 4 + entrySize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,237,header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,238,BookieProtocol.ADDENTRY, (short)options).toInt());
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,239,header.writeBytes(masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,241,ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,243,ChannelFuture future = channel.write(wrappedBuffer);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,244,future.addListener(new ChannelFutureListener() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,246,public void operationComplete(ChannelFuture future) throws Exception {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,247,if (future.isSuccess()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,248,if (LOG.isDebugEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,249,LOG.debug("Successfully wrote request for adding entry: " + entryId + " ledger-id: " + ledgerId
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,250,+ " bookie: " + channel.getRemoteAddress() + " entry length: " + entrySize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,254,errorOutAddKey(completionKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,270,ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,271,tmpEntry.writeInt(totalHeaderSize - 4);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,273,tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,274,BookieProtocol.READENTRY, (short)options).toInt());
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,275,tmpEntry.writeLong(ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,276,tmpEntry.writeLong(entryId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,278,ChannelFuture future = channel.write(tmpEntry);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,279,future.addListener(new ChannelFutureListener() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,281,public void operationComplete(ChannelFuture future) throws Exception {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,282,if (future.isSuccess()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,283,if (LOG.isDebugEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,284,LOG.debug("Successfully wrote request for reading entry: " + entryId + " ledger-id: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,285,+ ledgerId + " bookie: " + channel.getRemoteAddress());
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,288,errorOutReadKey(key);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,201,lastLogMark.rollLog();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,204,List<Long> logs = listJournalIds(journalDirectory, new JournalIdFilter() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,206,public boolean accept(long journalId) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,207,if (journalId < lastLogMark.lastMark.txnLogId) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,208,return true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,210,return false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,216,if (logs.size() >= maxBackupJournals) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,217,int maxIdx = logs.size() - maxBackupJournals;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,218,for (int i=0; i<maxIdx; i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,219,long id = logs.get(i);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,221,if (id < lastLogMark.lastMark.txnLogId) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,222,File journalFile = new File(journalDirectory, Long.toHexString(id) + ".txn");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,223,journalFile.delete();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,224,LOG.info("garbage collected journal " + journalFile.getName());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,175,updatePage(lep);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,292,LinkedList<Long> firstEntryList;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,293,synchronized(this) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,294,HashMap<Long, LedgerEntryPage> pageMap = pages.get(l);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,295,if (pageMap == null || pageMap.isEmpty()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,296,continue;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,298,firstEntryList = new LinkedList<Long>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,299,for(Map.Entry<Long, LedgerEntryPage> entry: pageMap.entrySet()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,300,LedgerEntryPage lep = entry.getValue();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,301,if (lep.isClean()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,302,if (LOG.isTraceEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,303,LOG.trace("Page is clean " + lep);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,305,continue;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,307,firstEntryList.add(lep.getFirstEntry());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,311,List<LedgerEntryPage> entries = new ArrayList<LedgerEntryPage>(firstEntryList.size());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,312,FileInfo fi = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,313,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,314,for(Long firstEntry: firstEntryList) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,315,LedgerEntryPage lep = getLedgerEntryPage(l, firstEntry, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,316,if (lep != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,317,entries.add(lep);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,320,Collections.sort(entries, new Comparator<LedgerEntryPage>() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,322,public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,323,return (int)(o1.getFirstEntry()-o2.getFirstEntry());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,326,ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,328,int start = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,329,long lastOffset = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,330,for(int i = 0; i < entries.size(); i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,331,versions.add(i, entries.get(i).getVersion());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,332,if (lastOffset != -1 && (entries.get(i).getFirstEntry() - lastOffset) != entriesPerPage) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,334,int count = i - start;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,335,if (count == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,336,System.out.println("Count cannot possibly be zero!");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,338,writeBuffers(l, entries, fi, start, count);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,339,start = i;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,341,lastOffset = entries.get(i).getFirstEntry();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,343,if (entries.size()-start == 0 && entries.size() != 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,344,System.out.println("Nothing to write, but there were entries!");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,346,writeBuffers(l, entries, fi, start, entries.size()-start);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,347,synchronized(this) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,348,for(int i = 0; i < entries.size(); i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,349,LedgerEntryPage lep = entries.get(i);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,350,lep.setClean(versions.get(i));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,354,for(LedgerEntryPage lep: entries) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,355,lep.releasePage();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,357,if (fi != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,358,fi.release();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,329,if (LOG.isDebugEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,330,LOG.debug("Relay journal - ledger id : " + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,261,ZooKeeper newZk = instantiateZookeeperClient(conf.getZkServers());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,262,ledgerManager = LedgerManagerFactory.newLedgerManager(conf, newZk);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,344,this.zk = newZk;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,346,registerBookie(conf.getBookiePort());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,349,start();
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,22,import org.apache.commons.lang.StringUtils;
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,55,protected final static String SEP = ",";
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,276,String ledgerDirs = this.getString(LEDGER_DIRS, "/tmp/bk-data");
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,278,return null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,280,return ledgerDirs.split(SEP);
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,294,this.setProperty(LEDGER_DIRS, StringUtils.join(ledgerDirs, SEP));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java,168,public RecoveryData(long lastAddConfirmed, long entryId) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java,182,return new RecoveryData(lastAddConfirmed, entryId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java,60,public boolean canProceedWithRecovery(int bookieIndexHeardFrom);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,475,public void asyncReadLastConfirmed(ReadLastConfirmedCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,476,new ReadLastConfirmedOp(this, cb, ctx).initiate();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,30,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,46,class LedgerRecoveryOp implements ReadEntryCallback, ReadCallback, AddCallback {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,69,int flags = BookieProtocol.FLAG_DO_FENCING;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,70,for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,71,lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i), lh.ledgerId,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,76,public synchronized void readEntryComplete(final int rc, final long ledgerId, final long entryId,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,77,final ChannelBuffer buffer, final Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,80,if (proceedingWithRecovery) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,81,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,84,int bookieIndex = (Integer) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,86,numResponsesPending--;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,88,boolean heardValidResponse = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,90,if (rc == BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,91,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,92,RecoveryData recoveryData = lh.macManager.verifyDigestAndReturnLastConfirmed(buffer);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,93,maxAddConfirmed = Math.max(maxAddConfirmed, recoveryData.lastAddConfirmed);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,94,maxAddPushed = Math.max(maxAddPushed, recoveryData.entryId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,95,heardValidResponse = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,99,LOG.error("Mac mismatch while reading last entry from bookie: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,100,+ lh.metadata.currentEnsemble.get(bookieIndex));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,104,if (rc == BKException.Code.NoSuchLedgerExistsException || rc == BKException.Code.NoSuchEntryException) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,108,heardValidResponse = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,112,if (heardValidResponse && lh.distributionSchedule.canProceedWithRecovery(bookieIndex)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,113,proceedingWithRecovery = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,114,lh.lastAddPushed = lh.lastAddConfirmed = maxAddConfirmed;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,115,lh.length = maxLength;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,116,doRecoveryRead();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,117,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,120,if (numResponsesPending == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,124,LOG.error("While recovering ledger: " + ledgerId + " did not hear success responses from all quorums");
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,125,cb.operationComplete(BKException.Code.LedgerRecoveryException, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,166,LOG.debug("After closing length is: " + lh.getLength());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,36,Object ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,38,int validResponses;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,39,long maxAddConfirmed;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,40,long maxLength = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,43,ReadLastConfirmedCallback cb;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,45,public ReadLastConfirmedOp(LedgerHandle lh, ReadLastConfirmedCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,47,this.ctx = ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,49,this.validResponses = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,56,this, i, BookieProtocol.FLAG_NONE);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,69,maxAddConfirmed = Math.max(maxAddConfirmed, recoveryData.lastAddConfirmed);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,70,validResponses++;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,81,validResponses++;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,85,if ((validResponses >= lh.metadata.quorumSize) &&
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,86,!completed) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,91,cb.readLastConfirmedComplete(BKException.Code.OK, maxAddConfirmed, this.ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,96,completed = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,99,cb.readLastConfirmedComplete(BKException.Code.LedgerRecoveryException, maxAddConfirmed, this.ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,36,boolean[] covered = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,37,int numQuorumsUncovered;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,60,public synchronized boolean canProceedWithRecovery(int bookieIndexHeardFrom) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,61,if (covered == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,66,if (numQuorumsUncovered == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,67,return true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,70,for (int i = 0; i < quorumSize; i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,71,int quorumStartIndex = MathUtils.signSafeMod(bookieIndexHeardFrom - i, ensembleSize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,72,if (!covered[quorumStartIndex]) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,73,covered[quorumStartIndex] = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,74,numQuorumsUncovered--;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,76,if (numQuorumsUncovered == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,77,return true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,83,return false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,58,final static long LAST_ADD_CONFIRMED = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,488,this.response = -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,508,return (this.response != -1);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,72,LedgerHandle.LAST_ADD_CONFIRMED, this, i, flags);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,55,lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i), lh.ledgerId, LedgerHandle.LAST_ADD_CONFIRMED,
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,534,readCompletion = readCompletions.remove(new CompletionKey(ledgerId, -1));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,88,static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,247,throws IOException, KeeperException, InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,332,LedgerDescriptor handle = getHandle(ledgerId, false);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,333,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,334,recBuff.rewind();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,335,handle.addEntry(recBuff);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,337,putHandle(handle);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,514,if (layoutVersion != CURRENT_DIRECTORY_LAYOUT_VERSION) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,515,String errmsg = "Directory has an invalid version, expected "
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,568,private LedgerDescriptor getHandle(long ledgerId, boolean readonly, byte[] masterKey) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,573,FileInfo fi = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,574,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,576,fi = ledgerCache.getFileInfo(ledgerId, !readonly);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,580,byte[] existingMasterKey = fi.readMasterKey();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,581,ByteBuffer masterKeyToSet = ByteBuffer.wrap(masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,582,if (existingMasterKey == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,584,fi.writeMasterKey(masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,586,throw new IOException("Wrong master key for ledger " + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,588,handle = createHandle(ledgerId, readonly);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,589,ledgers.put(ledgerId, handle);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,590,handle.setMasterKey(masterKeyToSet);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,592,if (fi != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,593,fi.release();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,602,private LedgerDescriptor getHandle(long ledgerId, boolean readonly) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,607,FileInfo fi = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,608,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,610,fi = ledgerCache.getFileInfo(ledgerId, !readonly);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,614,byte[] existingMasterKey = fi.readMasterKey();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,615,if (existingMasterKey == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,616,throw new IOException("Weird! No master key found in ledger " + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,619,handle = createHandle(ledgerId, readonly);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,620,ledgers.put(ledgerId, handle);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,621,handle.setMasterKey(ByteBuffer.wrap(existingMasterKey));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,623,if (fi != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,624,fi.release();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,634,private LedgerDescriptor createHandle(long ledgerId, boolean readOnly) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,892,LedgerDescriptor handle = getHandle(ledgerId, false, masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,894,if(!handle.cmpMasterKey(ByteBuffer.wrap(masterKey))) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,895,putHandle(handle);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,896,throw BookieException.create(BookieException.Code.UnauthorizedAccessException);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,898,return handle;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,963,LedgerDescriptor handle = getHandle(ledgerId, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,970,LedgerDescriptor handle = getHandle(ledgerId, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,60,private byte header[] = "BKLE\0\0\0\0".getBytes();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,65,public FileInfo(File lf) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,67,fc = new RandomAccessFile(lf, "rws").getChannel();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,68,size = fc.size();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,69,if (size == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,70,fc.write(ByteBuffer.wrap(header));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,72,ByteBuffer buf = ByteBuffer.allocate(4);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,73,buf.putInt(NO_MASTER_KEY);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,74,buf.flip();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,75,fc.write(buf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,86,synchronized public void writeMasterKey(byte[] masterKey) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,88,if (masterKey == null ||
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,89,masterKey.length + 4 + header.length > START_OF_DATA) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,90,throw new IOException("master key is more than " + (START_OF_DATA - 4 - header.length));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,93,int len = masterKey.length;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,94,ByteBuffer lenBuf = ByteBuffer.allocate(4);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,95,lenBuf.putInt(len);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,96,lenBuf.flip();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,97,fc.position(header.length);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,98,fc.write(lenBuf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,99,fc.write(ByteBuffer.wrap(masterKey));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,108,synchronized public byte[] readMasterKey() throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,109,ByteBuffer lenBuf = ByteBuffer.allocate(4);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,110,int total = readAbsolute(lenBuf, header.length);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,111,if (total != 4) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,112,throw new IOException("Short read during reading master key length");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,114,lenBuf.rewind();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,115,int len = lenBuf.getInt();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,116,if (len == NO_MASTER_KEY) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,117,return null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,120,byte[] masterKey = new byte[len];
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,121,total = readAbsolute(ByteBuffer.wrap(masterKey), header.length + 4);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,122,if (total != len) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,123,throw new IOException("Short read during reading master key");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,125,return masterKey;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,128,synchronized public long size() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,156,if (useCount == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,187,if (isClosed && useCount == 0) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,200,File getFile() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java,201,return lf;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,215,FileInfo getFileInfo(Long ledger, boolean create) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,229,if (!create) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,245,fi = new FileInfo(lf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,261,fi = getFileInfo(lep.getLedger(), true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,327,fi = getFileInfo(l, true);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,525,FileInfo fi = getFileInfo(ledgerId, false);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java,526,fi.getFile().delete();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,46,private ByteBuffer masterKey = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,49,void setMasterKey(ByteBuffer masterKey) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,50,this.masterKey = masterKey;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,53,boolean cmpMasterKey(ByteBuffer masterKey) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,54,return this.masterKey.equals(masterKey);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java,112,fi = ledgerCache.getFileInfo(ledgerId, false);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,62,throws IOException, KeeperException, InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,224,throws IOException, KeeperException, InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,126,throws IOException, KeeperException, InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,153,throws IOException, KeeperException, InterruptedException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,68,channel = new PerChannelBookieClient(executor, channelFactory, addr, totalBytesOutstanding);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,35,import org.apache.zookeeper.AsyncCallback.StatCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,42,class LedgerCreateOp implements GenericCallback<String>, StatCallback {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,86,bk.getLedgerManager().newLedgerPath(this);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,118,ArrayList<InetSocketAddress> ensemble;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,119,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,120,ensemble = bk.bookieWatcher.getNewBookies(metadata.ensembleSize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,122,LOG.error("Not enough bookies to create ledger" + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,123,cb.createComplete(e.getCode(), null, this.ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,124,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,130,metadata.addEnsemble(new Long(0), ensemble);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,143,lh.writeLedgerConfig(this, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,152,public void processResult(int rc, String path, Object ctx, Stat stat) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,153,metadata.znodeVersion = stat.getVersion();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java,154,cb.createComplete(rc, lh, this.ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,97,public void newLedgerPath(final GenericCallback<String> cb) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,109,ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, new byte[0],
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,138,public void newLedgerPath(final GenericCallback<String> ledgerCb) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,172,ZkUtils.createFullPathOptimistic(zk, ledgerPath, new byte[0],
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java,63,public abstract void newLedgerPath(GenericCallback<String> cb);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,72,import org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,225,zk.close();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,235,rm.stop();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,242,if (pm instanceof ReadAheadCache) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,243,((ReadAheadCache) pm).stop();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,245,if (dm instanceof FIFODeliveryManager) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,246,((FIFODeliveryManager) dm).stop();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,250,if (sm instanceof AbstractSubscriptionManager) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,251,((AbstractSubscriptionManager) sm).stop();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,220,top2sub2seq.remove(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,54,this.lastConsumeSeqId = lastConsumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,56,if (lastConsumeSeqId.getLocalComponent() - subscriptionState.getMsgId().getLocalComponent() < consumeInterval) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,23,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,24,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,79,final HedwigSubscriber sub = client.getSubscriber();
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,80,sub.asyncSubscribe(topic, mySubId, CreateOrAttach.CREATE_OR_ATTACH, new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,82,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,84,LOGGER.debug("cross-region subscription done for topic " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,85,try {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,86,sub.startDelivery(topic, mySubId, new MessageHandler() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,88,public void deliver(final ByteString topic, ByteString subscriberId, Message msg,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,89,final Callback<Void> callback, final Object context) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,93,if (msg.hasSrcRegion()) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,94,Message.newBuilder(msg).setMsgId(
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,95,MessageSeqId.newBuilder(msg.getMsgId()).addRemoteComponents(
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,96,RegionSpecificSeqId.newBuilder().setRegion(
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,97,msg.getSrcRegion()).setSeqId(
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,98,msg.getMsgId().getLocalComponent())));
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,100,pm.persistMessage(new PersistRequest(topic, msg, new Callback<Long>() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,102,public void operationFinished(Object ctx, Long resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,104,LOGGER.debug("cross-region recv-fwd succeeded for topic "
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,105,+ topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,106,callback.operationFinished(context, null);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,110,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,112,LOGGER.error("cross-region recv-fwd failed for topic "
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,113,+ topic.toStringUtf8(), exception);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,114,callback.operationFailed(context, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,120,LOGGER.debug("cross-region start-delivery succeeded for topic "
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,121,+ topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,122,mcb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,125,LOGGER.error(
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,127,mcb.operationFailed(ctx, ex);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,132,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,134,LOGGER.error("cross-region subscribe failed for topic " + topic.toStringUtf8(),
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,135,exception);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,136,mcb.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,156,LOGGER.debug("cross-region unsubscribes succeeded for topic " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,162,LOGGER.error("cross-region unsubscribes failed for topic " + topic.toStringUtf8(), exception);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,170,client.getSubscriber().asyncUnsubscribe(topic, mySubId, mcb, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,221,AtomicInteger count = topic2LocalCounts.remove(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,224,notifyUnsubcribe(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,303,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,306,cb.operationFailed(ctx, exception);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,264,return Long.parseLong(lastIdString);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Main.java,32,System.err.println("USAGE: bookeeper client|bookie");
bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java,73,if (args.length < 3) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,277,if (null == ledgerDirs) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,144,bsConfs[i].setJournalDirName(tmpDirs[i].getPath());
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,145,bsConfs[i].setLedgerDirNames(new String[] { tmpDirs[i].getPath() });
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,128,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,130,queue.put(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,132,logger.error("Interruped when trying to read bookies in a blocking fashion");
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,133,throw new RuntimeException(e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,220,final int entrySize = toSend.readableBytes();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,428,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,891,long ledgerId = entry.getLong();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,170,long addToLength(long delta) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,265,return null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,380,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,381,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,391,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,393,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,395,return counter.getLh();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,415,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,416,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,427,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,429,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,431,return counter.getLh();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,459,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,460,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,464,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,501,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,502,counter.setLh(lh);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,503,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,504,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,520,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,521,counter.setLh(lh);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,525,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,526,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,540,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,541,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,542,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,209,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,210,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,214,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,215,if (counter.getrc() != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,216,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,295,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,296,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,300,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,301,if (counter.getrc() != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,302,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,305,return counter.getSequence();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,359,SyncCounter counter = new SyncCounter();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,360,counter.inc();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,363,counter.block(0);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,365,if (counter.getrc() != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,366,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,699,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,700,synchronized (counter) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,701,counter.setSequence(seq);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,702,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,703,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,704,counter.notify();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,723,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,725,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,726,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,754,SyncCounter counter = (SyncCounter) ctx;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,755,counter.setrc(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,756,synchronized (counter) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,757,counter.dec();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,758,counter.notify();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,49,final DigestType digestType;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,69,this.digestType = digestType;
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java,42,addConfiguration(new SystemConfiguration());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,222,lc.addEnsemble(new Long(parts[0]), addrs);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java,159,int layoutFormatVersion = new Integer(lines[0]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java,176,int managerVersion = new Integer(parts[1]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,65,private final String HOSTPORT = "127.0.0.1:2181";
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,94,serverFactory.configure(new InetSocketAddress(ZooKeeperDefaultPort), maxCC);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,101,boolean b = waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,142,bsConfs[i].setZkServers(InetAddress.getLocalHost().getHostAddress() + ":"
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,143,+ ZooKeeperDefaultPort);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,173,lb.initializeZookeper();
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,92,zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperDefaultPort);
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,18,package org.apache.hedwig.client;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,20,import org.apache.hedwig.client.api.Client;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,21,import org.apache.hedwig.client.api.Publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,22,import org.apache.hedwig.client.api.Subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,23,import org.apache.hedwig.client.netty.HedwigClientImpl;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,25,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,26,import org.jboss.netty.channel.ChannelFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,34,public class HedwigClient implements Client {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,35,private final Client impl;
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,43,public HedwigClient(ClientConfiguration cfg) {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,44,impl = HedwigClientImpl.create(cfg);
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,54,public HedwigClient(ClientConfiguration cfg, ChannelFactory socketFactory) {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,55,impl = HedwigClientImpl.create(cfg, socketFactory);
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,59,public Publisher getPublisher() {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,60,return impl.getPublisher();
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,64,public Subscriber getSubscriber() {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,65,return impl.getSubscriber();
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,69,public void close() {
hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java,70,impl.close();
hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java,18,package org.apache.hedwig.client.api;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java,23,public interface Client {
hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java,29,public Publisher getPublisher();
hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java,36,public Subscriber getSubscriber();
hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java,41,public void close();
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,18,package org.apache.hedwig.client.api;
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,20,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,21,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,22,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,29,public interface MessageHandler {
hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java,46,public void deliver(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback, Object context);
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,18,package org.apache.hedwig.client.api;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,20,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,21,import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,22,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,23,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,24,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,30,public interface Publisher {
hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java,61,public void asyncPublish(ByteString topic, Message msg, Callback<Void> callback, Object context);
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,18,package org.apache.hedwig.client.api;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,20,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,22,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,23,import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,24,import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,25,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,26,import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,27,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,28,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,29,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,30,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,36,public interface Subscriber {
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,60,throws CouldNotConnectException, ClientAlreadySubscribedException, ServiceDownException,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,61,InvalidSubscriberIdException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,82,public void asyncSubscribe(ByteString topic, ByteString subscriberId, CreateOrAttach mode, Callback<Void> callback,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,83,Object context);
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,104,public void unsubscribe(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,105,ClientNotSubscribedException, ServiceDownException, InvalidSubscriberIdException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,123,public void asyncUnsubscribe(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object context);
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,141,throws ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,158,public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,159,ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,173,public List<ByteString> getSubscriptionList(ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,174,ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,202,public void stopDelivery(ByteString topic, ByteString subscriberId) throws ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,217,public void closeSubscription(ByteString topic, ByteString subscriberId) throws ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,234,public void asyncCloseSubscription(ByteString topic, ByteString subscriberId, Callback<Void> callback,
hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java,235,Object context);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,18,package org.apache.hedwig.client.benchmark;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,20,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,21,import org.apache.hedwig.client.api.MessageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,22,import org.apache.hedwig.client.api.Publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,23,import org.apache.hedwig.client.api.Subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,24,import org.apache.hedwig.client.benchmark.BenchmarkUtils.BenchmarkCallback;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,25,import org.apache.hedwig.client.benchmark.BenchmarkUtils.ThroughputLatencyAggregator;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,26,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,27,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,28,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,30,public class BenchmarkPublisher extends BenchmarkWorker {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,31,Publisher publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,32,Subscriber subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,33,int msgSize;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,34,int nParallel;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,35,double rate;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,37,public BenchmarkPublisher(int numTopics, int numMessages, int numRegions, int startTopicLabel, int partitionIndex,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,38,int numPartitions, Publisher publisher, Subscriber subscriber, int msgSize, int nParallel, int rate) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,39,super(numTopics, numMessages, numRegions, startTopicLabel, partitionIndex, numPartitions);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,40,this.publisher = publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,41,this.msgSize = msgSize;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,42,this.subscriber = subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,43,this.nParallel = nParallel;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,45,this.rate = rate / (numRegions * numPartitions + 0.0);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,48,public void warmup(int nWarmup) throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,49,ByteString topic = ByteString.copyFromUtf8("warmup" + partitionIndex);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,50,ByteString subId = ByteString.copyFromUtf8("sub");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,53,subscriber.startDelivery(topic, subId, new MessageHandler() {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,55,public void deliver(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,56,Object context) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,58,callback.operationFinished(context, null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,63,ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator("acked pubs", nWarmup, 100);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,64,Message msg = getMsg(1024);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,65,for (int i = 0; i < nWarmup; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,66,publisher.asyncPublish(topic, msg, new BenchmarkCallback(agg), null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,69,if (agg.tpAgg.queue.take() > 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,70,throw new RuntimeException("Warmup publishes failed!");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,75,public Message getMsg(int size) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,76,StringBuilder sb = new StringBuilder();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,77,for (int i = 0; i < size; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,78,sb.append('a');
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,80,final ByteString body = ByteString.copyFromUtf8(sb.toString());
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,81,Message msg = Message.newBuilder().setBody(body).build();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,82,return msg;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,85,public Void call() throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,86,Message msg = getMsg(msgSize);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,89,int myPublishCount = 0;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,90,for (int i = 0; i < numTopics; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,91,if (!HedwigBenchmark.amIResponsibleForTopic(startTopicLabel + i, partitionIndex, numPartitions)) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,92,continue;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,94,ByteString topic = ByteString.copyFromUtf8(HedwigBenchmark.TOPIC_PREFIX + (startTopicLabel + i));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,95,publisher.publish(topic, msg);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,96,myPublishCount++;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,100,int myPublishLimit = numMessages / numRegions / numPartitions - myPublishCount;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,101,myPublishCount = 0;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,102,ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator("acked pubs", myPublishLimit, nParallel);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,104,int topicLabel = 0;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,106,while (myPublishCount < myPublishLimit) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,107,int topicNum = startTopicLabel + topicLabel;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,108,topicLabel = (topicLabel + 1) % numTopics;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,110,if (!HedwigBenchmark.amIResponsibleForTopic(topicNum, partitionIndex, numPartitions)) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,111,continue;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,114,ByteString topic = ByteString.copyFromUtf8(HedwigBenchmark.TOPIC_PREFIX + topicNum);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,116,if (rate > 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,119,Thread.sleep(delay);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,121,publisher.asyncPublish(topic, msg, new BenchmarkCallback(agg), null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,122,myPublishCount++;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,126,+ " ops/s");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,128,agg.tpAgg.queue.take();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,129,System.out.println(agg.summarize(startTime));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,130,return null;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,18,package org.apache.hedwig.client.benchmark;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,20,import java.util.HashMap;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,21,import java.util.Map;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,22,import java.util.concurrent.Callable;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,24,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,25,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,27,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,28,import org.apache.hedwig.client.api.MessageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,29,import org.apache.hedwig.client.api.Subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,30,import org.apache.hedwig.client.benchmark.BenchmarkUtils.BenchmarkCallback;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,31,import org.apache.hedwig.client.benchmark.BenchmarkUtils.ThroughputAggregator;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,32,import org.apache.hedwig.client.benchmark.BenchmarkUtils.ThroughputLatencyAggregator;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,33,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,34,import org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,35,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,36,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,38,public class BenchmarkSubscriber extends BenchmarkWorker implements Callable<Void> {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,40,Subscriber subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,41,ByteString subId;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,44,public BenchmarkSubscriber(int numTopics, int numMessages, int numRegions,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,45,int startTopicLabel, int partitionIndex, int numPartitions, Subscriber subscriber, ByteString subId) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,46,super(numTopics, numMessages, numRegions, startTopicLabel, partitionIndex, numPartitions);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,47,this.subscriber = subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,48,this.subId = subId;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,51,public void warmup(int numWarmup) throws InterruptedException {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,56,multiSub("warmup", "warmup", 0, numWarmup, numWarmup * numPartitions);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,59,public Void call() throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,61,final ThroughputAggregator agg = new ThroughputAggregator("recvs", numMessages);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,62,final Map<String, Long> lastSeqIdSeenMap = new HashMap<String, Long>();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,64,for (int i = startTopicLabel; i < startTopicLabel + numTopics; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,66,if (!HedwigBenchmark.amIResponsibleForTopic(i, partitionIndex, numPartitions)) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,67,continue;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,70,final String topic = HedwigBenchmark.TOPIC_PREFIX + i;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,73,subscriber.startDelivery(ByteString.copyFromUtf8(topic), subId, new MessageHandler() {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,76,public void deliver(ByteString thisTopic, ByteString subscriberId, Message msg,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,77,Callback<Void> callback, Object context) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,82,String mapKey = topic + msg.getSrcRegion().toStringUtf8();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,83,Long lastSeqIdSeen = lastSeqIdSeenMap.get(mapKey);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,84,if (lastSeqIdSeen == null) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,85,lastSeqIdSeen = (long) 0;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,88,if (getSrcSeqId(msg) <= lastSeqIdSeen) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,89,logger.info("Redelivery of message, src-region: " + msg.getSrcRegion() + "seq-id: "
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,90,+ msg.getMsgId());
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,92,agg.ding(false);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,95,callback.operationFinished(context, null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,99,System.out.println("Finished subscribing to topics and now waiting for messages to come in...");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,101,agg.queue.take();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,102,System.out.println(agg.summarize(agg.earliest.get()));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,103,return null;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,106,long getSrcSeqId(Message msg) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,107,if (msg.getMsgId().getRemoteComponentsCount() == 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,108,return msg.getMsgId().getLocalComponent();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,111,for (RegionSpecificSeqId rseqId : msg.getMsgId().getRemoteComponentsList()) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,113,return rseqId.getSeqId();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,116,return msg.getMsgId().getLocalComponent();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,120,throws InterruptedException {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,122,ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(label, count / numPartitions, npar);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,123,int end = start + count;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,124,for (int i = start; i < end; ++i) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,125,if (!HedwigBenchmark.amIResponsibleForTopic(i, partitionIndex, numPartitions)) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,126,continue;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,129,new BenchmarkCallback(agg), null);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,132,agg.tpAgg.queue.take();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,134,System.out.println(agg.summarize(startTime));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,18,package org.apache.hedwig.client.benchmark;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,20,import java.util.concurrent.LinkedBlockingQueue;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,21,import java.util.concurrent.Semaphore;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,22,import java.util.concurrent.atomic.AtomicInteger;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,23,import java.util.concurrent.atomic.AtomicLong;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,25,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,26,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,28,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,29,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,31,public class BenchmarkUtils {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,32,static final Logger logger = LoggerFactory.getLogger(BenchmarkUtils.class);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,34,public static double calcTp(final int count, long startTime) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,42,public static class ThroughputLatencyAggregator {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,43,int numBuckets;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,44,final ThroughputAggregator tpAgg;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,45,final Semaphore outstanding;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,46,final AtomicLong sum = new AtomicLong();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,48,final AtomicLong[] latencyBuckets;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,53,public ThroughputLatencyAggregator(String label, int count, int limit) throws InterruptedException {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,54,numBuckets = Integer.getInteger("numBuckets", 101);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,55,latencyBuckets = new AtomicLong[numBuckets];
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,56,tpAgg = new ThroughputAggregator(label, count);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,57,outstanding = new Semaphore(limit);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,58,for (int i = 0; i < numBuckets; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,59,latencyBuckets[i] = new AtomicLong();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,63,public void reportLatency(long latency) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,64,sum.addAndGet(latency);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,66,int bucketIndex;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,67,if (latency >= numBuckets) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,68,bucketIndex = (int) numBuckets - 1;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,70,bucketIndex = (int) latency;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,72,latencyBuckets[bucketIndex].incrementAndGet();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,75,private String getPercentile(double percentile) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,76,int numInliersNeeded = (int) (percentile / 100 * tpAgg.count);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,77,int numInliersFound = 0;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,78,for (int i = 0; i < numBuckets - 1; i++) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,79,numInliersFound += latencyBuckets[i].intValue();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,80,if (numInliersFound > numInliersNeeded) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,81,return i + "";
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,84,return " >= " + (numBuckets - 1);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,87,public String summarize(long startTime) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,88,double percentile = Double.parseDouble(System.getProperty("percentile", "99.9"));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,89,return tpAgg.summarize(startTime) + ", avg latency = " + sum.get() / tpAgg.count + ", " + percentile
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,90,+ "%ile latency = " + getPercentile(percentile);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,98,public static class ThroughputAggregator {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,99,final String label;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,100,final int count;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,101,final AtomicInteger done = new AtomicInteger();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,102,final AtomicLong earliest = new AtomicLong();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,103,final AtomicInteger numFailed = new AtomicInteger();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,104,final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,106,public ThroughputAggregator(final String label, final int count) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,107,this.label = label;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,108,this.count = count;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,110,queue.add(0);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,111,if (Boolean.getBoolean("progress")) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,114,public void run() {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,115,try {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,116,for (int doneSnap = 0, prev = 0; doneSnap < count; prev = doneSnap, doneSnap = done.get()) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,117,if (doneSnap > prev) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,118,System.out.println(label + " progress: " + doneSnap + " of " + count);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,120,Thread.sleep(1000);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,123,throw new RuntimeException(ex);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,130,public void ding(boolean failed) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,131,int snapDone = done.incrementAndGet();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,134,numFailed.incrementAndGet();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,136,logger.debug(label + " " + (failed ? "failed" : "succeeded") + ", done so far = " + snapDone);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,137,if (snapDone == count) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,138,queue.add(numFailed.get());
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,142,public String summarize(long startTime) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,144,+ " ops/s, numFailed = " + numFailed;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,148,public static class BenchmarkCallback implements Callback<Void> {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,150,final ThroughputLatencyAggregator agg;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,151,final long startTime;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,153,public BenchmarkCallback(ThroughputLatencyAggregator agg) throws InterruptedException {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,154,this.agg = agg;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,155,agg.outstanding.acquire();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,160,private void finish(boolean failed) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,162,agg.tpAgg.ding(failed);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,163,agg.outstanding.release();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,167,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,168,finish(false);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,172,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java,173,finish(true);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,18,package org.apache.hedwig.client.benchmark;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,20,public class BenchmarkWorker {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,21,int numTopics;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,22,int numMessages;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,23,int numRegions;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,24,int startTopicLabel;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,25,int partitionIndex;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,26,int numPartitions;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,28,public BenchmarkWorker(int numTopics, int numMessages, int numRegions,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,29,int startTopicLabel, int partitionIndex, int numPartitions) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,30,this.numTopics = numTopics;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,31,this.numMessages = numMessages;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,32,this.numRegions = numRegions;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,33,this.startTopicLabel = startTopicLabel;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,34,this.partitionIndex = partitionIndex;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,35,this.numPartitions = numPartitions;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,37,if (numMessages % (numTopics * numRegions) != 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,38,throw new RuntimeException("Number of messages not equally divisible among regions and topics");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,41,if (numTopics % numPartitions != 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java,42,throw new RuntimeException("Number of topics not equally divisible among partitions");
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,18,package org.apache.hedwig.client.benchmark;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,20,import java.io.File;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,21,import java.util.concurrent.Callable;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,23,import org.apache.commons.configuration.ConfigurationException;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,24,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,25,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,26,import org.jboss.netty.logging.InternalLoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,27,import org.jboss.netty.logging.Log4JLoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,29,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,30,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,31,import org.apache.hedwig.client.HedwigClient;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,32,import org.apache.hedwig.client.api.Publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,33,import org.apache.hedwig.client.api.Subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,35,public class HedwigBenchmark implements Callable<Void> {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,36,protected static final Logger logger = LoggerFactory.getLogger(HedwigBenchmark.class);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,38,static final String TOPIC_PREFIX = "topic";
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,40,private final HedwigClient client;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,41,private final Publisher publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,42,private final Subscriber subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,45,client = new HedwigClient(cfg);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,46,publisher = client.getPublisher();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,47,subscriber = client.getSubscriber();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,50,static boolean amIResponsibleForTopic(int topicNum, int partitionIndex, int numPartitions) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,51,return topicNum % numPartitions == partitionIndex;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,55,public Void call() throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,81,if (mode.equals("sub")) {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,82,BenchmarkSubscriber benchmarkSub = new BenchmarkSubscriber(numTopics, 0, 1, startTopicLabel, 0, 1,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,83,subscriber, ByteString.copyFromUtf8("mySub"));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,85,benchmarkSub.warmup(nWarmups);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,86,benchmarkSub.call();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,90,BenchmarkSubscriber benchmarkSub = new BenchmarkSubscriber(numTopics, numMessages, numRegions,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,91,startTopicLabel, partitionIndex, numPartitions, subscriber, ByteString.copyFromUtf8("sub-"
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,92,+ replicaIndex));
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,94,benchmarkSub.call();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,98,BenchmarkPublisher benchmarkPub = new BenchmarkPublisher(numTopics, numMessages, numRegions,
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,99,startTopicLabel, partitionIndex, numPartitions, publisher, subscriber, msgSize, nParallel, rate);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,100,benchmarkPub.warmup(nWarmups);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,101,benchmarkPub.call();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,104,throw new Exception("unknown mode: " + mode);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,107,return null;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,110,public static void main(String[] args) throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,121,InternalLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,124,app.call();
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java,125,System.exit(0);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,18,package org.apache.hedwig.client.conf;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,20,import java.net.InetSocketAddress;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,22,import org.apache.commons.configuration.ConfigurationException;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,23,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,24,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,26,import org.apache.hedwig.conf.AbstractConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,27,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,29,public class ClientConfiguration extends AbstractConfiguration {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,33,protected static final String DEFAULT_SERVER_HOST = "default_server_host";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,34,protected static final String MAX_MESSAGE_SIZE = "max_message_size";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,35,protected static final String MAX_SERVER_REDIRECTS = "max_server_redirects";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,36,protected static final String AUTO_SEND_CONSUME_MESSAGE_ENABLED = "auto_send_consume_message_enabled";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,37,protected static final String CONSUMED_MESSAGES_BUFFER_SIZE = "consumed_messages_buffer_size";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,38,protected static final String MESSAGE_CONSUME_RETRY_WAIT_TIME = "message_consume_retry_wait_time";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,39,protected static final String SUBSCRIBE_RECONNECT_RETRY_WAIT_TIME = "subscribe_reconnect_retry_wait_time";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,40,protected static final String MAX_OUTSTANDING_MESSAGES = "max_outstanding_messages";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,41,protected static final String SERVER_ACK_RESPONSE_TIMEOUT = "server_ack_response_timeout";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,42,protected static final String TIMEOUT_THREAD_RUN_INTERVAL = "timeout_thread_run_interval";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,43,protected static final String SSL_ENABLED = "ssl_enabled";
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,46,protected HedwigSocketAddress myDefaultServerAddress = null;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,52,protected HedwigSocketAddress getDefaultServerHedwigSocketAddress() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,54,myDefaultServerAddress = new HedwigSocketAddress(conf.getString(DEFAULT_SERVER_HOST, "localhost:4080:9876"));
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,55,return myDefaultServerAddress;
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,60,public InetSocketAddress getDefaultServerHost() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,62,return getDefaultServerHedwigSocketAddress().getSSLSocketAddress();
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,63,else
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,64,return getDefaultServerHedwigSocketAddress().getSocketAddress();
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,67,public int getMaximumMessageSize() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,68,return conf.getInt(MAX_MESSAGE_SIZE, 2 * 1024 * 1024);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,75,public int getMaximumServerRedirects() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,76,return conf.getInt(MAX_SERVER_REDIRECTS, 2);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,85,public boolean isAutoSendConsumeMessageEnabled() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,86,return conf.getBoolean(AUTO_SEND_CONSUME_MESSAGE_ENABLED, true);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,93,public int getConsumedMessagesBufferSize() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,94,return conf.getInt(CONSUMED_MESSAGES_BUFFER_SIZE, 5);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,100,public long getMessageConsumeRetryWaitTime() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,101,return conf.getLong(MESSAGE_CONSUME_RETRY_WAIT_TIME, 10000);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,110,public long getSubscribeReconnectRetryWaitTime() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,111,return conf.getLong(SUBSCRIBE_RECONNECT_RETRY_WAIT_TIME, 10000);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,117,public int getMaximumOutstandingMessages() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,118,return conf.getInt(MAX_OUTSTANDING_MESSAGES, 10);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,124,public long getServerAckResponseTimeout() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,125,return conf.getLong(SERVER_ACK_RESPONSE_TIMEOUT, 30000);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,130,public long getTimeoutThreadRunInterval() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,131,return conf.getLong(TIMEOUT_THREAD_RUN_INTERVAL, 60000);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,137,public boolean isSSLEnabled() {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,138,return conf.getBoolean(SSL_ENABLED, false);
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,142,public void validate() throws ConfigurationException {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,143,if (isSSLEnabled() && getDefaultServerHedwigSocketAddress().getSSLSocketAddress() == null) {
hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java,144,throw new ConfigurationException("SSL is enabled but a default server SSL port not given!");
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,18,package org.apache.hedwig.client.data;
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,21,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,31,public class MessageConsumeData {
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,38,public final Message msg;
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,44,this.msg = msg;
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,48,public String toString() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,49,StringBuilder sb = new StringBuilder();
hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java,56,return sb.toString();
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,18,package org.apache.hedwig.client.data;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,20,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,22,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,23,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,24,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,26,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,37,public class PubSubData {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,39,protected static final String COMMA = ", ";
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,42,public final ByteString topic;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,43,public final Message msg;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,44,public final ByteString subscriberId;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,47,public final OperationType operationType;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,55,public Object context;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,60,public List<ByteString> triedServers;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,65,public List<ByteString> connectFailedServers;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,66,public List<ByteString> writeFailedServers;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,70,public boolean shouldClaim = false;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,77,public long txnId;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,80,public long requestWriteTime;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,83,public boolean isDone = false;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,86,public PubSubData(final ByteString topic, final Message msg, final ByteString subscriberId,
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,89,this.topic = topic;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,90,this.msg = msg;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,91,this.subscriberId = subscriberId;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,92,this.operationType = operationType;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,94,this.callback = callback;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,95,this.context = context;
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,100,public void clearServersList() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,102,triedServers.clear();
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,104,connectFailedServers.clear();
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,106,writeFailedServers.clear();
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,110,public String toString() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,111,StringBuilder sb = new StringBuilder();
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,113,sb.append("Topic: " + topic.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,115,sb.append(COMMA).append("Message: " + msg);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,117,sb.append(COMMA).append("SubscriberId: " + subscriberId.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,119,sb.append(COMMA).append("Operation Type: " + operationType.toString());
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,122,if (triedServers != null && triedServers.size() > 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,123,sb.append(COMMA).append("Tried Servers: ");
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,124,for (ByteString triedServer : triedServers) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,125,sb.append(triedServer.toStringUtf8()).append(COMMA);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,128,if (connectFailedServers != null && connectFailedServers.size() > 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,129,sb.append(COMMA).append("Connect Failed Servers: ");
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,130,for (ByteString connectFailedServer : connectFailedServers) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,131,sb.append(connectFailedServer.toStringUtf8()).append(COMMA);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,134,if (writeFailedServers != null && writeFailedServers.size() > 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,135,sb.append(COMMA).append("Write Failed Servers: ");
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,136,for (ByteString writeFailedServer : writeFailedServers) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,137,sb.append(writeFailedServer.toStringUtf8()).append(COMMA);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,140,sb.append(COMMA).append("Should Claim: " + shouldClaim);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,142,sb.append(COMMA).append("TxnID: " + txnId);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,144,sb.append(COMMA).append("Request Write Time: " + requestWriteTime);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,145,sb.append(COMMA).append("Is Done: " + isDone);
hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java,146,return sb.toString();
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,18,package org.apache.hedwig.client.data;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,20,import org.apache.commons.lang.builder.HashCodeBuilder;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,22,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,30,public class TopicSubscriber {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,31,private final ByteString topic;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,32,private final ByteString subscriberId;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,33,private final int hashCode;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,35,public TopicSubscriber(final ByteString topic, final ByteString subscriberId) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,36,this.topic = topic;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,37,this.subscriberId = subscriberId;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,38,hashCode = new HashCodeBuilder().append(topic).append(subscriberId).toHashCode();
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,42,public boolean equals(final Object o) {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,44,return true;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,46,return false;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,47,final TopicSubscriber obj = (TopicSubscriber) o;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,48,return topic.equals(obj.topic) && subscriberId.equals(obj.subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,52,public int hashCode() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,53,return hashCode;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,57,public String toString() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,58,StringBuilder sb = new StringBuilder();
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,60,sb.append("Topic: " + topic.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,62,sb.append(PubSubData.COMMA).append("SubscriberId: " + subscriberId.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,63,return sb.toString();
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,66,public ByteString getTopic() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,67,return topic;
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,70,public ByteString getSubscriberId() {
hedwig-client/src/main/java/org/apache/hedwig/client/data/TopicSubscriber.java,71,return subscriberId;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,18,package org.apache.hedwig.client.exceptions;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,25,public class InvalidSubscriberIdException extends Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,27,private static final long serialVersionUID = 873259807218723523L;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,29,public InvalidSubscriberIdException(String message) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,30,super(message);
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,33,public InvalidSubscriberIdException(String message, Throwable t) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/InvalidSubscriberIdException.java,34,super(message, t);
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,18,package org.apache.hedwig.client.exceptions;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,26,public class ServerRedirectLoopException extends Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,28,private static final long serialVersionUID = 98723508723152897L;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,30,public ServerRedirectLoopException(String message) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,31,super(message);
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,34,public ServerRedirectLoopException(String message, Throwable t) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ServerRedirectLoopException.java,35,super(message, t);
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,18,package org.apache.hedwig.client.exceptions;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,27,public class TooManyServerRedirectsException extends Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,29,private static final long serialVersionUID = 2341192937965635310L;
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,31,public TooManyServerRedirectsException(String message) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,32,super(message);
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,35,public TooManyServerRedirectsException(String message, Throwable t) {
hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/TooManyServerRedirectsException.java,36,super(message, t);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,18,package org.apache.hedwig.client.handlers;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,20,import java.util.TimerTask;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,22,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,23,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,26,import org.apache.hedwig.client.data.MessageConsumeData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,29,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,30,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,41,public class MessageConsumeCallback implements Callback<Void> {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,51,class MessageConsumeRetryTask extends TimerTask {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,52,private final MessageConsumeData messageConsumeData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,56,this.messageConsumeData = messageConsumeData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,61,public void run() {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,69,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,70,MessageConsumeData messageConsumeData = (MessageConsumeData) ctx;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,79,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,83,MessageConsumeData messageConsumeData = (MessageConsumeData) ctx;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,18,package org.apache.hedwig.client.handlers;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,20,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,21,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,23,import org.apache.hedwig.client.data.PubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,24,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,25,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,40,private boolean isCallSuccessful;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,44,private PubSubException failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,47,public PubSubCallback(PubSubData pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,48,this.pubSubData = pubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,56,synchronized (pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,57,isCallSuccessful = true;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,58,pubSubData.isDone = true;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,59,pubSubData.notify();
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,63,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,68,synchronized (pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,69,isCallSuccessful = false;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,70,failureException = exception;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,71,pubSubData.isDone = true;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,72,pubSubData.notify();
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,78,public boolean getIsCallSuccessful() {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,79,return isCallSuccessful;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,84,public PubSubException getFailureException() {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java,85,return failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,18,package org.apache.hedwig.client.handlers;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,20,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,24,import org.apache.hedwig.client.data.PubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,27,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,28,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,45,switch (response.getStatusCode()) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,46,case SUCCESS:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,50,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,51,case SERVICE_DOWN:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,56,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,57,case NOT_RESPONSIBLE_FOR_TOPIC:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,61,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,62,default:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,65,logger.error("Unexpected error response from server for PubSubResponse: " + response);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java,68,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,18,package org.apache.hedwig.client.handlers;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,28,import org.jboss.netty.channel.Channel;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,30,import org.apache.hedwig.client.api.MessageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,33,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,38,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,39,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,40,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,18,package org.apache.hedwig.client.handlers;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,20,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,24,import org.apache.hedwig.client.data.PubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,27,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,28,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,29,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,43,throws Exception {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,47,switch (response.getStatusCode()) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,48,case SUCCESS:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,55,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,56,case CLIENT_NOT_SUBSCRIBED:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,62,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,63,case SERVICE_DOWN:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,68,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,69,case NOT_RESPONSIBLE_FOR_TOPIC:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,73,break;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,74,default:
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,77,logger.error("Unexpected error response from server for PubSubResponse: " + response);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java,80,break;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,18,package org.apache.hedwig.client.netty;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,27,import java.util.concurrent.Executors;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,30,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,31,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,34,import org.jboss.netty.channel.ChannelFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,36,import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,39,import org.apache.hedwig.client.api.Client;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,40,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,51,public class HedwigClientImpl implements Client {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,53,private static final Logger logger = LoggerFactory.getLogger(HedwigClientImpl.class);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,62,protected final ChannelFactory socketFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,65,protected boolean ownChannelFactory = false;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,88,private HedwigSubscriber sub;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,89,private final HedwigPublisher pub;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,90,private final ClientConfiguration cfg;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,94,public static Client create(ClientConfiguration cfg) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,95,return new HedwigClientImpl(cfg);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,98,public static Client create(ClientConfiguration cfg, ChannelFactory socketFactory) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,99,return new HedwigClientImpl(cfg, socketFactory);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,104,protected HedwigClientImpl(ClientConfiguration cfg) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,106,ownChannelFactory = true;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,111,protected HedwigClientImpl(ClientConfiguration cfg, ChannelFactory socketFactory) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,112,this.cfg = cfg;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,113,this.socketFactory = socketFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,114,pub = new HedwigPublisher(this);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,115,sub = new HedwigSubscriber(this);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,127,public ClientConfiguration getConfiguration() {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,128,return cfg;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,131,public HedwigSubscriber getSubscriber() {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,132,return sub;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,137,protected void setSubscriber(HedwigSubscriber sub) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,138,this.sub = sub;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,141,public HedwigPublisher getPublisher() {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,142,return pub;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,211,public void close() {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,212,logger.info("Stopping the client!");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,233,if (ownChannelFactory) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,234,socketFactory.releaseExternalResources();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,236,logger.info("Completed stopping the client!");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,18,package org.apache.hedwig.client.netty;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,24,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,25,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,29,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,30,import org.apache.hedwig.client.api.Publisher;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,32,import org.apache.hedwig.client.data.PubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,33,import org.apache.hedwig.client.handlers.PubSubCallback;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,34,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,35,import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,36,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,37,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,38,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,42,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,48,public class HedwigPublisher implements Publisher {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,62,protected HedwigPublisher(HedwigClientImpl client) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,70,PubSubData pubSubData = new PubSubData(topic, msg, null, OperationType.PUBLISH, null, null, null);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,71,synchronized (pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,72,PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,74,try {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,76,pubSubData.wait();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,78,throw new ServiceDownException("Interrupted Exception while waiting for async publish call");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,81,if (!pubSubCallback.getIsCallSuccessful()) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,84,PubSubException failureException = pubSubCallback.getFailureException();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,85,if (failureException == null) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,89,logger.error("Sync Publish operation failed but no PubSubException was passed!");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,90,throw new ServiceDownException("Server ack response to publish request is not successful");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,94,else if (failureException instanceof CouldNotConnectException) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,95,throw (CouldNotConnectException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,97,throw (ServiceDownException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,102,throw new ServiceDownException("Server ack response to publish request is not successful");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,18,package org.apache.hedwig.client.netty;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,21,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,25,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,26,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,31,import com.google.protobuf.ByteString;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,32,import org.apache.hedwig.client.api.MessageHandler;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,33,import org.apache.hedwig.client.api.Subscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,34,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,35,import org.apache.hedwig.client.data.PubSubData;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,36,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,37,import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,38,import org.apache.hedwig.client.handlers.PubSubCallback;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,39,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,40,import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,41,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,42,import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,43,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,45,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,46,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,51,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,52,import org.apache.hedwig.protoextensions.SubscriptionStateUtils;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,53,import org.apache.hedwig.util.Callback;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,59,public class HedwigSubscriber implements Subscriber {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,71,protected final ClientConfiguration cfg;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,73,public HedwigSubscriber(HedwigClientImpl client) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,75,this.cfg = client.getConfiguration();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,82,private void subUnsub(ByteString topic, ByteString subscriberId, OperationType operationType,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,84,ClientNotSubscribedException, ServiceDownException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,90,synchronized (pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,91,PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,93,try {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,95,pubSubData.wait();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,97,throw new ServiceDownException("Interrupted Exception while waiting for async subUnsub call");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,100,if (!pubSubCallback.getIsCallSuccessful()) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,103,PubSubException failureException = pubSubCallback.getFailureException();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,104,if (failureException == null) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,108,logger.error("Sync SubUnsub operation failed but no PubSubException was passed!");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,109,throw new ServiceDownException("Server ack response to SubUnsub request is not successful");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,114,throw (CouldNotConnectException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,116,throw (ClientAlreadySubscribedException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,118,throw (ClientNotSubscribedException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,120,throw (ServiceDownException) failureException;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,121,else {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,125,throw new ServiceDownException(failureException);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,176,throws CouldNotConnectException, ClientAlreadySubscribedException, ServiceDownException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,177,InvalidSubscriberIdException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,182,throws CouldNotConnectException, ClientAlreadySubscribedException, ServiceDownException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,183,InvalidSubscriberIdException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,186,if (!isValidSubscriberId(subscriberId, isHub)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,188,+ ", isHub: " + isHub);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,190,try {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,197,throw new ServiceDownException(e);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,201,public void asyncSubscribe(ByteString topic, ByteString subscriberId, CreateOrAttach mode, Callback<Void> callback,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,202,Object context) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,207,Callback<Void> callback, Object context, boolean isHub) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,210,if (!isValidSubscriberId(subscriberId, isHub)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,211,callback.operationFailed(context, new ServiceDownException(new InvalidSubscriberIdException(
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,213,return;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,218,public void unsubscribe(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,219,ClientNotSubscribedException, ServiceDownException, InvalidSubscriberIdException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,220,unsubscribe(topic, subscriberId, false);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,224,throws CouldNotConnectException, ClientNotSubscribedException, ServiceDownException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,225,InvalidSubscriberIdException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,228,if (!isValidSubscriberId(subscriberId, isHub)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,230,+ ", isHub: " + isHub);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,237,closeSubscription(topic, subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,238,try {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,239,subUnsub(topic, subscriberId, OperationType.UNSUBSCRIBE, null);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,245,throw new ServiceDownException(e);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,254,protected void asyncUnsubscribe(final ByteString topic, final ByteString subscriberId,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,255,final Callback<Void> callback, final Object context, boolean isHub) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,258,if (!isValidSubscriberId(subscriberId, isHub)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,259,callback.operationFailed(context, new ServiceDownException(new InvalidSubscriberIdException(
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,261,return;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,268,asyncSubUnsub(topic, subscriberId, callback, context, OperationType.UNSUBSCRIBE, null);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,272,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,273,callback.operationFailed(context, exception);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,280,private boolean isValidSubscriberId(ByteString subscriberId, boolean isHub) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,283,return false;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,284,else
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,285,return true;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,289,throws ClientNotSubscribedException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,293,TopicSubscriber topicSubscriber = new TopicSubscriber(topic, subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,296,throw new ClientNotSubscribedException(
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,423,public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,424,ServiceDownException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,436,public List<ByteString> getSubscriptionList(ByteString subscriberId) throws CouldNotConnectException,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,437,ServiceDownException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,440,return null;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,485,TopicSubscriber topicSubscriber = new TopicSubscriber(topic, subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,518,public void closeSubscription(ByteString topic, ByteString subscriberId) throws ServiceDownException {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,519,PubSubData pubSubData = new PubSubData(topic, null, subscriberId, null, null, null, null);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,520,synchronized (pubSubData) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,521,PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,523,try {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,525,pubSubData.wait();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,527,throw new ServiceDownException("Interrupted Exception while waiting for asyncCloseSubscription call");
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,530,if (!pubSubCallback.getIsCallSuccessful()) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,531,throw new ServiceDownException("Exception while trying to close the subscription for topic: "
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,532,+ topic.toStringUtf8() + ", subscriberId: " + subscriberId.toStringUtf8());
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,537,public void asyncCloseSubscription(final ByteString topic, final ByteString subscriberId,
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,538,final Callback<Void> callback, final Object context) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,542,TopicSubscriber topicSubscriber = new TopicSubscriber(topic, subscriberId);
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,18,package org.apache.hedwig.client.ssl;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,20,import javax.net.ssl.SSLContext;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,22,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,24,public class SslClientContextFactory extends SslContextFactory {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,26,public SslClientContextFactory(ClientConfiguration cfg) {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,27,try {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,29,ctx = SSLContext.getInstance("TLS");
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,30,ctx.init(null, getTrustManagers(), null);
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,32,throw new RuntimeException(ex);
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,37,protected boolean isClient() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslClientContextFactory.java,38,return true;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,18,package org.apache.hedwig.client.ssl;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,20,import java.security.cert.CertificateException;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,21,import java.security.cert.X509Certificate;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,23,import javax.net.ssl.SSLContext;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,24,import javax.net.ssl.SSLEngine;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,25,import javax.net.ssl.TrustManager;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,26,import javax.net.ssl.X509TrustManager;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,28,public abstract class SslContextFactory {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,30,protected SSLContext ctx;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,32,public SSLContext getContext() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,33,return ctx;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,36,protected abstract boolean isClient();
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,38,public SSLEngine getEngine() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,39,SSLEngine engine = ctx.createSSLEngine();
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,40,engine.setUseClientMode(isClient());
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,41,return engine;
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,44,protected TrustManager[] getTrustManagers() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,45,return new TrustManager[] { new X509TrustManager() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,49,public X509Certificate[] getAcceptedIssuers() {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,50,return new X509Certificate[0];
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,54,public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
hedwig-client/src/main/java/org/apache/hedwig/client/ssl/SslContextFactory.java,59,public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,18,package org.apache.hedwig.conf;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,20,import java.net.URL;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,22,import org.apache.commons.configuration.CompositeConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,23,import org.apache.commons.configuration.Configuration;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,24,import org.apache.commons.configuration.ConfigurationException;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,25,import org.apache.commons.configuration.PropertiesConfiguration;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,27,public abstract class AbstractConfiguration {
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,28,protected CompositeConfiguration conf;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,30,protected AbstractConfiguration() {
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,31,conf = new CompositeConfiguration();
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,39,public Configuration getConf() {
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,40,return conf;
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,49,public void loadConf(URL confURL) throws ConfigurationException {
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,50,Configuration loadedConf = new PropertiesConfiguration(confURL);
hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java,51,conf.addConfiguration(loadedConf);
hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java,20,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java,26,public interface Callback<T> {
hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java,34,public abstract void operationFinished(Object ctx, T resultOfOperation);
hedwig-client/src/main/java/org/apache/hedwig/util/Callback.java,45,public abstract void operationFailed(Object ctx, PubSubException exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,20,import java.util.concurrent.LinkedBlockingQueue;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,21,import java.util.concurrent.atomic.AtomicInteger;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,23,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,24,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,26,import org.apache.hedwig.exceptions.PubSubException;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,27,import org.apache.hedwig.exceptions.PubSubException.CompositeException;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,29,public class CallbackUtils {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,56,public static Callback<Void> multiCallback(final int expected, final Callback<Void> cb, final Object ctx,
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,57,final Logger logger, final String successMsg, final String failureMsg,
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,58,Runnable eagerErrorHandler) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,59,if (expected == 0) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,60,cb.operationFinished(ctx, null);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,61,return null;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,63,return new Callback<Void>() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,65,final AtomicInteger done = new AtomicInteger();
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,66,final LinkedBlockingQueue<PubSubException> exceptions = new LinkedBlockingQueue<PubSubException>();
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,68,private void tick() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,69,if (done.incrementAndGet() == expected) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,70,if (exceptions.isEmpty()) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,71,cb.operationFinished(ctx, null);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,73,cb.operationFailed(ctx, new CompositeException(exceptions));
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,79,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,81,logger.error(failureMsg, exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,82,exceptions.add(exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,83,tick();
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,87,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,89,logger.info(successMsg);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,90,tick();
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,101,public static Callback<Void> multiCallback(int expected, Callback<Void> cb, Object ctx) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,102,return multiCallback(expected, cb, ctx, null, null, null, null);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,109,public static Callback<Void> multinCallback(int expected, Callback<Void> cb, Object ctx, Runnable eagerErrorHandler) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,110,return multiCallback(expected, cb, ctx, null, null, null, eagerErrorHandler);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,113,private static Callback<Void> nop = new Callback<Void>() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,116,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,120,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,128,public static Callback<Void> nop() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,129,return nop;
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,135,public static <T> Callback<T> logger(final Logger logger, final String successMsg,
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,136,final String failureMsg, final Callback<T> cont) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,137,return new Callback<T>() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,140,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,141,logger.error(failureMsg, exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,143,cont.operationFailed(ctx, exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,147,public void operationFinished(Object ctx, T resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,148,logger.info(successMsg);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,150,cont.operationFinished(ctx, resultOfOperation);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,159,public static Callback<Void> logger(Logger logger, String successMsg, String failureMsg) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,160,return logger(logger, successMsg, failureMsg, nop());
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,167,public static <T> Callback<Void> curry(final Callback<T> cb, final T result) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,168,return new Callback<Void>() {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,171,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,172,cb.operationFailed(ctx, exception);
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,176,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java,177,cb.operationFinished(ctx, result);
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,20,import java.util.concurrent.BlockingQueue;
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,21,import java.util.concurrent.CyclicBarrier;
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,23,public class ConcurrencyUtils {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,25,public static <T, U extends T, V extends BlockingQueue<T>> void put(V queue, U value) {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,26,try {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,27,queue.put(value);
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,29,throw new RuntimeException(ex);
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,33,public static <T> T take(BlockingQueue<T> queue) {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,34,try {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,35,return queue.take();
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,37,throw new RuntimeException(ex);
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,41,public static void await(CyclicBarrier barrier) {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,42,try {
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,43,barrier.await();
hedwig-client/src/main/java/org/apache/hedwig/util/ConcurrencyUtils.java,45,throw new RuntimeException(ex);
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,20,public class Either<T, U> {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,22,private T x;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,23,private U y;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,25,private Either(T x, U y) {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,26,this.x = x;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,27,this.y = y;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,30,public static <T, U> Either<T, U> of(T x, U y) {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,31,return new Either<T, U>(x, y);
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,34,public static <T, U> Either<T, U> left(T x) {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,35,return new Either<T, U>(x, null);
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,38,public static <T, U> Either<T, U> right(U y) {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,39,return new Either<T, U>(null, y);
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,42,public T left() {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,43,return x;
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,46,public U right() {
hedwig-client/src/main/java/org/apache/hedwig/util/Either.java,47,return y;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,20,import java.io.File;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,21,import java.io.IOException;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,22,import java.util.LinkedList;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,23,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,25,import org.slf4j.Logger;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,26,import org.slf4j.LoggerFactory;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,28,public class FileUtils {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,30,static DirDeleterThred dirDeleterThread;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,33,static {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,34,dirDeleterThread = new DirDeleterThred();
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,35,Runtime.getRuntime().addShutdownHook(dirDeleterThread);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,38,public static File createTempDirectory(String prefix) throws IOException {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,39,return createTempDirectory(prefix, null);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,42,public static File createTempDirectory(String prefix, String suffix) throws IOException {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,43,File tempDir = File.createTempFile(prefix, suffix);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,44,if (!tempDir.delete()) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,45,throw new IOException("Could not delete temp file: " + tempDir.getAbsolutePath());
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,48,if (!tempDir.mkdir()) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,49,throw new IOException("Could not create temp directory: " + tempDir.getAbsolutePath());
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,52,dirDeleterThread.addDirToDelete(tempDir);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,53,return tempDir;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,57,static class DirDeleterThred extends Thread {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,58,List<File> dirsToDelete = new LinkedList<File>();
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,60,public synchronized void addDirToDelete(File dir) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,61,dirsToDelete.add(dir);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,65,public void run() {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,66,synchronized (this) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,67,for (File dir : dirsToDelete) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,68,deleteDirectory(dir);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,73,protected void deleteDirectory(File dir) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,74,if (dir.isFile()) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,75,if (!dir.delete()) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,76,log.error("Could not delete " + dir.getAbsolutePath());
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,78,return;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,81,File[] files = dir.listFiles();
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,82,if (files == null) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,83,return;
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,86,for (File f : files) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,87,deleteDirectory(f);
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,90,if (!dir.delete()) {
hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java,91,log.error("Could not delete directory: " + dir.getAbsolutePath());
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,20,import java.net.InetSocketAddress;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,31,public class HedwigSocketAddress {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,34,private final String hostname;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,35,private final int port;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,36,private final int sslPort;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,38,private final InetSocketAddress socketAddress;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,39,private final InetSocketAddress sslSocketAddress;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,42,public static final String COLON = ":";
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,43,private static final int NO_SSL_PORT = -1;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,46,public HedwigSocketAddress(String hostname, int port, int sslPort) {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,47,this.hostname = hostname;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,48,this.port = port;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,49,this.sslPort = sslPort;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,50,socketAddress = new InetSocketAddress(hostname, port);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,52,sslSocketAddress = new InetSocketAddress(hostname, sslPort);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,53,else
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,54,sslSocketAddress = null;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,58,public HedwigSocketAddress(String hostname, int port) {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,59,this(hostname, port, NO_SSL_PORT);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,63,public HedwigSocketAddress(String addr) {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,64,String[] parts = addr.split(COLON);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,65,this.hostname = parts[0];
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,66,this.port = Integer.parseInt(parts[1]);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,68,this.sslPort = Integer.parseInt(parts[2]);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,69,else
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,70,this.sslPort = NO_SSL_PORT;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,71,socketAddress = new InetSocketAddress(hostname, port);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,73,sslSocketAddress = new InetSocketAddress(hostname, sslPort);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,74,else
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,75,sslSocketAddress = null;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,79,public String getHostname() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,80,return hostname;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,83,public int getPort() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,84,return port;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,87,public int getSSLPort() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,88,return sslPort;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,92,public InetSocketAddress getSocketAddress() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,93,return socketAddress;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,100,public InetSocketAddress getSSLSocketAddress() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,101,return sslSocketAddress;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,106,public boolean isSSLEnabled() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,107,return sslPort != NO_SSL_PORT;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,112,public String toString() {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,113,StringBuilder sb = new StringBuilder();
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,114,sb.append(hostname).append(COLON).append(port).append(COLON).append(sslPort);
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,115,return sb.toString();
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,120,public boolean equals(Object obj) {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,122,return false;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,123,HedwigSocketAddress that = (HedwigSocketAddress) obj;
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,124,return (this.hostname.equals(that.hostname) && (this.port == that.port) && (this.sslPort == that.sslPort));
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,134,public static String sockAddrStr(InetSocketAddress addr) {
hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java,135,return addr.getAddress().getHostAddress() + ":" + addr.getPort();
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,20,public class Option<T> {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,22,private T x;
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,24,public static <T> Option<T> of(T x) {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,25,return new Option<T>(x);
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,28,public static <T> Option<T> of() {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,29,return new Option<T>();
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,32,public Option() {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,35,public Option(T x) {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,36,this.x = x;
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,39,public T get() {
hedwig-client/src/main/java/org/apache/hedwig/util/Option.java,40,return x;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,20,public class Pair<T, U> {
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,22,private T x;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,23,private U y;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,25,public Pair(T x, U y) {
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,26,this.x = x;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,27,this.y = y;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,30,public static <T, U> Pair<T, U> of(T x, U y) {
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,31,return new Pair<T, U>(x, y);
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,34,public T first() {
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,35,return x;
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,38,public U second() {
hedwig-client/src/main/java/org/apache/hedwig/util/Pair.java,39,return y;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,18,package org.apache.hedwig.util;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,20,import java.io.File;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,21,import java.util.ArrayList;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,22,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,24,public class PathUtils {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,27,public static List<String> prefixes(String path) {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,28,List<String> prefixes = new ArrayList<String>();
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,30,for (String comp : path.split("/+")) {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,32,if (!comp.equals("")) {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,37,return prefixes;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,41,public static boolean isPrefix(String prefix, String path) {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,42,String[] as = prefix.split("/+"), bs = path.split("/+");
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,44,return false;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,47,return false;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,48,return true;
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,52,public static String parent(String path) {
hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java,53,return new File(path).getParent().replace("\\", "/");
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,18,package org.apache.hedwig.exceptions;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,20,import java.util.Collection;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,22,import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,25,public abstract class PubSubException extends Exception {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,26,protected StatusCode code;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,28,protected PubSubException(StatusCode code, String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,29,super(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,30,this.code = code;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,35,this.code = code;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,38,public static PubSubException create(StatusCode code, String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,39,if (code == StatusCode.CLIENT_ALREADY_SUBSCRIBED) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,40,return new ClientAlreadySubscribedException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,42,return new ClientNotSubscribedException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,44,return new MalformedRequestException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,46,return new NoSuchTopicException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,48,return new ServerNotResponsibleForTopicException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,50,return new ServiceDownException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,52,return new CouldNotConnectException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,57,else if (code == StatusCode.UNCERTAIN_STATE) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,58,return new UncertainStateException(msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,61,else {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,62,return new UnexpectedConditionException("Unknow status code:" + code.getNumber() + ", msg: " + msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,66,public StatusCode getCode() {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,67,return code;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,70,public static class ClientAlreadySubscribedException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,71,public ClientAlreadySubscribedException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,72,super(StatusCode.CLIENT_ALREADY_SUBSCRIBED, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,76,public static class ClientNotSubscribedException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,77,public ClientNotSubscribedException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,78,super(StatusCode.CLIENT_NOT_SUBSCRIBED, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,82,public static class MalformedRequestException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,83,public MalformedRequestException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,84,super(StatusCode.MALFORMED_REQUEST, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,88,public static class NoSuchTopicException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,89,public NoSuchTopicException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,90,super(StatusCode.NO_SUCH_TOPIC, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,94,public static class ServerNotResponsibleForTopicException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,96,public ServerNotResponsibleForTopicException(String responsibleHost) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,97,super(StatusCode.NOT_RESPONSIBLE_FOR_TOPIC, responsibleHost);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,101,public static class TopicBusyException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,102,public TopicBusyException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,103,super(StatusCode.TOPIC_BUSY, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,107,public static class ServiceDownException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,108,public ServiceDownException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,109,super(StatusCode.SERVICE_DOWN, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,112,public ServiceDownException(Exception e) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,113,super(StatusCode.SERVICE_DOWN, e);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,117,public static class CouldNotConnectException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,118,public CouldNotConnectException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,119,super(StatusCode.COULD_NOT_CONNECT, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,126,public static class UncertainStateException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,127,public UncertainStateException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,128,super(StatusCode.UNCERTAIN_STATE, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,133,public static class UnexpectedConditionException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,134,public UnexpectedConditionException(String msg) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,135,super(StatusCode.UNEXPECTED_CONDITION, msg);
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,140,public static class CompositeException extends PubSubException {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,141,private final Collection<PubSubException> exceptions;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,142,public CompositeException(Collection<PubSubException> exceptions) {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,144,this.exceptions = exceptions;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,146,public Collection<PubSubException> getExceptions() {
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,147,return exceptions;
hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java,159,public static class ClientNotSubscribedRuntimeException extends RuntimeException {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,4,package org.apache.hedwig.protocol;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6,public final class PubSubProtocol {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,31,internalGetValueMap() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,35,internalValueMap =
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,37,public ProtocolVersion findValueByNumber(int number) {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,44,getValueDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,48,getDescriptorForType() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,52,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,116,internalGetValueMap() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,120,internalValueMap =
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,122,public OperationType findValueByNumber(int number) {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,129,getValueDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,133,getDescriptorForType() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,137,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,219,internalGetValueMap() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,223,internalValueMap =
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,225,public StatusCode findValueByNumber(int number) {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,232,getValueDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,236,getDescriptorForType() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,240,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,3587,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,3592,internalGetFieldAccessorTable() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,3885,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,3890,internalGetFieldAccessorTable() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,5414,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,5419,internalGetFieldAccessorTable() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,5780,getDescriptor() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,5785,internalGetFieldAccessorTable() {
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6105,internal_static_Hedwig_Message_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6107,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6110,internal_static_Hedwig_RegionSpecificSeqId_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6112,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6115,internal_static_Hedwig_MessageSeqId_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6117,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6120,internal_static_Hedwig_PubSubRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6122,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6125,internal_static_Hedwig_PublishRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6127,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6130,internal_static_Hedwig_SubscribeRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6135,internal_static_Hedwig_ConsumeRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6137,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6140,internal_static_Hedwig_UnsubscribeRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6142,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6145,internal_static_Hedwig_StopDeliveryRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6147,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6150,internal_static_Hedwig_StartDeliveryRequest_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6155,internal_static_Hedwig_PubSubResponse_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6160,internal_static_Hedwig_SubscriptionState_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6165,internal_static_Hedwig_LedgerRange_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6167,com.google.protobuf.GeneratedMessage.FieldAccessorTable
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6170,internal_static_Hedwig_LedgerRanges_descriptor;
hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java,6241,com.google.protobuf.Descriptors.FileDescriptor root) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,18,package org.apache.hedwig.protoextensions;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,20,import java.util.HashMap;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,21,import java.util.List;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,22,import java.util.Map;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,24,import com.google.protobuf.ByteString;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,25,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,26,import org.apache.hedwig.exceptions.PubSubException.UnexpectedConditionException;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,27,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,28,import org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,30,public class MessageIdUtils {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,32,public static String msgIdToReadableString(MessageSeqId seqId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,33,StringBuilder sb = new StringBuilder();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,34,sb.append("local:");
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,35,sb.append(seqId.getLocalComponent());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,37,String separator = ";";
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,38,for (RegionSpecificSeqId regionId : seqId.getRemoteComponentsList()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,39,sb.append(separator);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,40,sb.append(regionId.getRegion().toStringUtf8());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,41,sb.append(':');
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,42,sb.append(regionId.getSeqId());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,44,return sb.toString();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,47,public static Map<ByteString, RegionSpecificSeqId> inMapForm(MessageSeqId msi) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,48,Map<ByteString, RegionSpecificSeqId> map = new HashMap<ByteString, RegionSpecificSeqId>();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,50,for (RegionSpecificSeqId lmsid : msi.getRemoteComponentsList()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,51,map.put(lmsid.getRegion(), lmsid);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,54,return map;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,57,public static boolean areEqual(MessageSeqId m1, MessageSeqId m2) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,59,if (m1.getLocalComponent() != m2.getLocalComponent()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,60,return false;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,63,if (m1.getRemoteComponentsCount() != m2.getRemoteComponentsCount()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,64,return false;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,67,Map<ByteString, RegionSpecificSeqId> m2map = inMapForm(m2);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,69,for (RegionSpecificSeqId lmsid1 : m1.getRemoteComponentsList()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,70,RegionSpecificSeqId lmsid2 = m2map.get(lmsid1.getRegion());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,71,if (lmsid2 == null) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,72,return false;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,74,if (lmsid1.getSeqId() != lmsid2.getSeqId()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,75,return false;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,79,return true;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,83,public static Message mergeLocalSeqId(Message.Builder messageBuilder, long localSeqId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,84,MessageSeqId.Builder msidBuilder = MessageSeqId.newBuilder(messageBuilder.getMsgId());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,85,msidBuilder.setLocalComponent(localSeqId);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,86,messageBuilder.setMsgId(msidBuilder);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,87,return messageBuilder.build();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,90,public static Message mergeLocalSeqId(Message orginalMessage, long localSeqId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,91,return mergeLocalSeqId(Message.newBuilder(orginalMessage), localSeqId);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,103,public static int compare(List<Long> l1, List<Long> l2) throws UnexpectedConditionException {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,104,if (l1.size() != l2.size()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,106,+ " and " + l2.size());
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,109,for (int i = 0; i < l1.size(); i++) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,110,long v1 = l1.get(i);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,111,long v2 = l2.get(i);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,113,if (v1 == v2) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,114,continue;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,117,return v1 > v2 ? 1 : -1;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,121,return 0;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,128,public static void takeRegionMaximum(MessageSeqId.Builder newIdBuilder, MessageSeqId id1, MessageSeqId id2) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,129,Map<ByteString, RegionSpecificSeqId> id2Map = MessageIdUtils.inMapForm(id2);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,131,for (RegionSpecificSeqId rrsid1 : id1.getRemoteComponentsList()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,132,ByteString region = rrsid1.getRegion();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,134,RegionSpecificSeqId rssid2 = id2Map.get(region);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,136,if (rssid2 == null) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,137,newIdBuilder.addRemoteComponents(rrsid1);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,138,continue;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,141,newIdBuilder.addRemoteComponents((rrsid1.getSeqId() > rssid2.getSeqId()) ? rrsid1 : rssid2);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,144,id2Map.remove(region);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,148,for (RegionSpecificSeqId rssid2 : id2Map.values()) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MessageIdUtils.java,149,newIdBuilder.addRemoteComponents(rssid2);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,18,package org.apache.hedwig.protoextensions;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,20,import org.apache.hedwig.exceptions.PubSubException;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,21,import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,22,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,23,import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,25,public class PubSubResponseUtils {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,32,static PubSubResponse.Builder getBasicBuilder(StatusCode status) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,33,return PubSubResponse.newBuilder().setProtocolVersion(serverVersion).setStatusCode(status);
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,36,public static PubSubResponse getSuccessResponse(long txnId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,37,return getBasicBuilder(StatusCode.SUCCESS).setTxnId(txnId).build();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,40,public static PubSubResponse getResponseForException(PubSubException e, long txnId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java,41,return getBasicBuilder(e.getCode()).setStatusMsg(e.getMessage()).setTxnId(txnId).build();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,18,package org.apache.hedwig.protoextensions;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,20,import com.google.protobuf.ByteString;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,21,import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,23,public class SubscriptionStateUtils {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,29,public static final String HUB_SUBSCRIBER_PREFIX = "__";
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,31,public static String toString(SubscriptionState state) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,32,StringBuilder sb = new StringBuilder();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,33,sb.append("consumeSeqId: " + MessageIdUtils.msgIdToReadableString(state.getMsgId()));
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,34,return sb.toString();
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,37,public static boolean isHubSubscriber(ByteString subscriberId) {
hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/SubscriptionStateUtils.java,38,return subscriberId.toStringUtf8().startsWith(HUB_SUBSCRIBER_PREFIX);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,18,package org.apache.hedwig.server.benchmark;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,20,import java.util.concurrent.LinkedBlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,21,import java.util.concurrent.Semaphore;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,22,import java.util.concurrent.atomic.AtomicInteger;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,23,import java.util.concurrent.atomic.AtomicLong;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,25,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,26,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,28,import org.apache.hedwig.util.ConcurrencyUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,30,public abstract class AbstractBenchmark {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,34,AtomicLong totalLatency = new AtomicLong();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,35,LinkedBlockingQueue<Boolean> doneSignalQueue = new LinkedBlockingQueue<Boolean>();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,37,abstract void doOps(int numOps) throws Exception;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,38,abstract void tearDown() throws Exception;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,40,protected class AbstractCallback {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,41,AtomicInteger numDone = new AtomicInteger(0);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,42,Semaphore outstanding;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,43,int numOps;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,44,boolean logging;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,46,public AbstractCallback(Semaphore outstanding, int numOps) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,47,this.outstanding = outstanding;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,48,this.numOps = numOps;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,49,logging = Boolean.getBoolean("progress");
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,52,public void handle(boolean success, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,53,outstanding.release();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,55,if (!success) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,56,ConcurrencyUtils.put(doneSignalQueue, false);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,57,return;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,61,int numDoneInt = numDone.incrementAndGet();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,63,if (logging && numDoneInt % 10000 == 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,64,logger.info("Finished " + numDoneInt + " ops");
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,67,if (numOps == numDoneInt) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,68,ConcurrencyUtils.put(doneSignalQueue, true);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,73,public void runPhase(String phase, int numOps) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,76,doOps(numOps);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,78,if (!doneSignalQueue.take()) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,79,logger.error("One or more operations failed in phase: " + phase);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,80,throw new RuntimeException();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,90,public void run() throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,92,int numWarmup = Integer.getInteger("nWarmup", 50000);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,93,runPhase("warmup", numWarmup);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,95,logger.info("Sleeping for 10 seconds");
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,96,Thread.sleep(10000);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,98,totalLatency.set(0);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,100,int numOps = Integer.getInteger("nOps", 400000);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,101,runPhase("real", numOps);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java,103,tearDown();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,18,package org.apache.hedwig.server.benchmark;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,21,import java.nio.ByteBuffer;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,22,import java.util.concurrent.Executors;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,23,import java.util.concurrent.Semaphore;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,24,import org.apache.bookkeeper.conf.ClientConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,25,import org.apache.bookkeeper.client.BKException;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,26,import org.apache.bookkeeper.proto.BookieClient;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,27,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,28,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,29,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,30,import org.apache.bookkeeper.util.OrderedSafeExecutor;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,31,import org.jboss.netty.buffer.ChannelBuffer;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,32,import org.jboss.netty.buffer.ChannelBuffers;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,33,import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,34,import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,36,public class BookieBenchmark extends AbstractBenchmark {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,40,BookieClient bkc;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,42,ClientSocketChannelFactory channelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,46,public BookieBenchmark(String bookieHostPort)  throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,47,channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,48,bkc = new BookieClient(new ClientConfiguration(), channelFactory, executor);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,49,String[] hostPort = bookieHostPort.split(":");
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,56,void doOps(final int numOps) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,57,int numOutstanding = Integer.getInteger("nPars",1000);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,58,final Semaphore outstanding = new Semaphore(numOutstanding);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,61,WriteCallback callback = new WriteCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,62,AbstractCallback handler = new AbstractCallback(outstanding, numOps);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,65,public void writeComplete(int rc, long ledgerId, long entryId,
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,67,handler.handle(rc == BKException.Code.OK, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,71,byte[] passwd = new byte[20];
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,72,int size = Integer.getInteger("size", 1024);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,73,byte[] data = new byte[size];
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,75,for (int i=0; i<numOps; i++) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,76,outstanding.acquire();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,78,ByteBuffer buffer = ByteBuffer.allocate(44);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,79,long ledgerId = 1000;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,80,buffer.putLong(ledgerId);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,81,buffer.putLong(i);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,82,buffer.putLong(0);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,83,buffer.put(passwd);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,84,buffer.rewind();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,85,ChannelBuffer toSend = ChannelBuffers.wrappedBuffer(ChannelBuffers.wrappedBuffer(buffer.slice()), ChannelBuffers.wrappedBuffer(data));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,92,public void tearDown() {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,93,bkc.close();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,94,channelFactory.releaseExternalResources();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,95,executor.shutdown();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,99,public static void main(String[] args) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,100,BookieBenchmark benchmark = new BookieBenchmark(args[0]);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java,101,benchmark.run();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,18,package org.apache.hedwig.server.benchmark;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,20,import java.util.Random;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,21,import java.util.concurrent.Semaphore;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,22,import org.apache.bookkeeper.client.BKException;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,23,import org.apache.bookkeeper.client.BookKeeper;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,24,import org.apache.bookkeeper.client.LedgerHandle;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,25,import org.apache.bookkeeper.client.AsyncCallback.AddCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,26,import org.apache.bookkeeper.client.BookKeeper.DigestType;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,27,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,28,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,30,public class BookkeeperBenchmark extends AbstractBenchmark {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,32,static final Logger logger = LoggerFactory.getLogger(BookkeeperBenchmark.class);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,34,BookKeeper bk;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,35,LedgerHandle[] lh;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,37,public BookkeeperBenchmark(String zkHostPort) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,38,bk = new BookKeeper(zkHostPort);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,39,int numLedgers = Integer.getInteger("nLedgers",5);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,40,lh = new LedgerHandle[numLedgers];
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,41,int quorumSize = Integer.getInteger("quorum", 2);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,42,int ensembleSize = Integer.getInteger("ensemble", 4);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,43,DigestType digestType = DigestType.valueOf(System.getProperty("digestType", "CRC32"));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,44,for (int i=0; i< numLedgers; i++) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,52,void doOps(final int numOps) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,53,int size = Integer.getInteger("size", 1024);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,54,byte[] msg = new byte[size];
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,56,int numOutstanding = Integer.getInteger("nPars",1000);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,57,final Semaphore outstanding = new Semaphore(numOutstanding);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,59,AddCallback callback = new AddCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,60,AbstractCallback handler = new AbstractCallback(outstanding, numOps);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,64,public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,65,handler.handle(rc == BKException.Code.OK, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,72,Random rand = new Random();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,74,for (int i=0; i<numOps; i++) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,75,outstanding.acquire();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,83,public void tearDown() throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,84,bk.close();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,88,public static void main(String[] args) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,89,BookkeeperBenchmark benchmark = new BookkeeperBenchmark(args[0]);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,90,benchmark.run();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,18,package org.apache.hedwig.server.benchmark;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,20,import java.net.InetSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,21,import java.util.concurrent.Executors;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,23,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,24,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,25,import org.jboss.netty.bootstrap.ServerBootstrap;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,26,import org.jboss.netty.buffer.ChannelBuffer;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,27,import org.jboss.netty.channel.ChannelHandlerContext;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,28,import org.jboss.netty.channel.ChannelPipeline;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,30,import org.jboss.netty.channel.ChannelPipelineFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,31,import org.jboss.netty.channel.Channels;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,32,import org.jboss.netty.channel.MessageEvent;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,33,import org.jboss.netty.channel.SimpleChannelHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,34,import org.jboss.netty.channel.socket.ServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,35,import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,36,import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,37,import org.jboss.netty.handler.codec.frame.LengthFieldPrepender;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,38,import org.jboss.netty.logging.InternalLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,39,import org.jboss.netty.logging.Log4JLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,42,public class FakeBookie extends SimpleChannelHandler implements
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,43,ChannelPipelineFactory {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,45,ServerSocketChannelFactory serverChannelFactory = new NioServerSocketChannelFactory(
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,46,Executors.newCachedThreadPool(), Executors.newCachedThreadPool());
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,48,public FakeBookie(int port) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,49,InternalLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,50,ServerBootstrap bootstrap = new ServerBootstrap(serverChannelFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,52,bootstrap.setPipelineFactory(this);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,53,bootstrap.setOption("child.tcpNoDelay", true);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,54,bootstrap.setOption("child.keepAlive", true);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,55,bootstrap.setOption("reuseAddress", true);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,57,logger.info("Going into receive loop");
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,59,bootstrap.bind(new InetSocketAddress(port));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,63,public ChannelPipeline getPipeline() throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,64,ChannelPipeline pipeline = Channels.pipeline();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,65,pipeline.addLast("lengthbaseddecoder",
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,66,new LengthFieldBasedFrameDecoder(1024 * 1024, 0, 4, 0, 4));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,67,pipeline.addLast("lengthprepender", new LengthFieldPrepender(4));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,68,pipeline.addLast("main", this);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,69,return pipeline;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,74,throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,75,if (!(e.getMessage() instanceof ChannelBuffer)) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,76,ctx.sendUpstream(e);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,77,return;
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,80,ChannelBuffer buffer = (ChannelBuffer) e.getMessage();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,82,int type = buffer.readInt();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,83,buffer.readerIndex(24);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,84,long ledgerId = buffer.readLong();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,85,long entryId = buffer.readLong();
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,88,.getBuffer(24);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,89,outBuf.writeInt(type);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,90,outBuf.writeInt(0); // rc
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,91,outBuf.writeLong(ledgerId);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,92,outBuf.writeLong(entryId);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,93,e.getChannel().write(outBuf);
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,98,public static void main(String args[]) {
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,99,new FakeBookie(Integer.parseInt(args[0]));
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,18,package org.apache.hedwig.server.common;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,20,import java.util.concurrent.ConcurrentHashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,21,import java.util.concurrent.ConcurrentMap;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,23,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,25,public class ByteStringInterner {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,31,public static ByteString intern(ByteString in) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,33,if (presentValueInMap != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,34,return presentValueInMap;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,42,return in;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,18,package org.apache.hedwig.server.common;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,20,import java.io.FileInputStream;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,21,import java.io.FileNotFoundException;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,22,import java.io.InputStream;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,23,import java.net.InetAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,24,import java.net.URL;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,25,import java.net.UnknownHostException;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,26,import java.util.Arrays;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,27,import java.util.LinkedList;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,28,import java.util.List;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,30,import org.apache.commons.configuration.ConfigurationException;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,36,public class ServerConfiguration extends AbstractConfiguration {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,38,protected final static String MAX_MESSAGE_SIZE = "max_message_size";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,39,protected final static String READAHEAD_COUNT = "readahead_count";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,40,protected final static String READAHEAD_SIZE = "readahead_size";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,41,protected final static String CACHE_SIZE = "cache_size";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,42,protected final static String SCAN_BACKOFF_MSEC = "scan_backoff_ms";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,43,protected final static String SERVER_PORT = "server_port";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,44,protected final static String SSL_SERVER_PORT = "ssl_server_port";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,45,protected final static String ZK_PREFIX = "zk_prefix";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,46,protected final static String ZK_HOST = "zk_host";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,47,protected final static String ZK_TIMEOUT = "zk_timeout";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,49,protected final static String STANDALONE = "standalone";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,50,protected final static String REGIONS = "regions";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,51,protected final static String CERT_NAME = "cert_name";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,52,protected final static String CERT_PATH = "cert_path";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,53,protected final static String PASSWORD = "password";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,54,protected final static String SSL_ENABLED = "ssl_enabled";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,55,protected final static String CONSUME_INTERVAL = "consume_interval";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,56,protected final static String RETENTION_SECS = "retention_secs";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,57,protected final static String INTER_REGION_SSL_ENABLED = "inter_region_ssl_enabled";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,58,protected final static String MESSAGES_CONSUMED_THREAD_RUN_INTERVAL = "messages_consumed_thread_run_interval";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,59,protected final static String BK_ENSEMBLE_SIZE = "bk_ensemble_size";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,60,protected final static String BK_QUORUM_SIZE = "bk_quorum_size";
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,63,protected ByteString myRegionByteString = null;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,64,protected HedwigSocketAddress myServerAddress = null;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,65,protected List<String> regionList = null;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,69,protected void refreshDerivedAttributes() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,70,refreshMyRegionByteString();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,71,refreshMyServerAddress();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,72,refreshRegionList();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,76,public void loadConf(URL confURL) throws ConfigurationException {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,77,super.loadConf(confURL);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,78,refreshDerivedAttributes();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,81,public int getMaximumMessageSize() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,85,public String getMyRegion() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,86,return conf.getString(REGION, "standalone");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,89,protected void refreshMyRegionByteString() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,90,myRegionByteString = ByteString.copyFromUtf8(getMyRegion());
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,93,protected void refreshMyServerAddress() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,94,try {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,96,myServerAddress = new HedwigSocketAddress(InetAddress.getLocalHost().getHostAddress(), getServerPort(),
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,97,getSSLServerPort());
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,99,throw new RuntimeException(e);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,105,protected void refreshRegionList() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,106,String regions = conf.getString(REGIONS, "");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,107,if (regions.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,108,regionList = new LinkedList<String>();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,110,regionList = Arrays.asList(regions.split(" "));
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,114,public ByteString getMyRegionByteString() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,115,if (myRegionByteString == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,116,refreshMyRegionByteString();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,118,return myRegionByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,121,public int getReadAheadCount() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,122,return conf.getInt(READAHEAD_COUNT, 10);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,125,public long getReadAheadSizeBytes() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,126,return conf.getLong(READAHEAD_SIZE, 4 * 1024 * 1024); // 4M
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,129,public long getMaximumCacheSize() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,131,return conf.getLong(CACHE_SIZE, Math.min(2 * 1024L * 1024L * 1024L, Runtime.getRuntime().maxMemory() / 2));
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,135,public long getScanBackoffPeriodMs() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,136,return conf.getLong(SCAN_BACKOFF_MSEC, 1000);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,139,public int getServerPort() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,140,return conf.getInt(SERVER_PORT, 4080);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,143,public int getSSLServerPort() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,144,return conf.getInt(SSL_SERVER_PORT, 9876);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,147,public String getZkPrefix() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,148,return conf.getString(ZK_PREFIX, "/hedwig");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,151,public StringBuilder getZkRegionPrefix(StringBuilder sb) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,152,return sb.append(getZkPrefix()).append("/").append(getMyRegion());
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,155,public StringBuilder getZkTopicsPrefix(StringBuilder sb) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,156,return getZkRegionPrefix(sb).append("/topics");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,159,public StringBuilder getZkTopicPath(StringBuilder sb, ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,160,return getZkTopicsPrefix(sb).append("/").append(topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,163,public StringBuilder getZkHostsPrefix(StringBuilder sb) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,164,return getZkRegionPrefix(sb).append("/hosts");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,167,public HedwigSocketAddress getServerAddr() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,168,if (myServerAddress == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,169,refreshMyServerAddress();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,171,return myServerAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,174,public String getZkHost() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,178,public int getZkTimeout() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,179,return conf.getInt(ZK_TIMEOUT, 2000);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,182,public boolean getReadAheadEnabled() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,186,public boolean isStandalone() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,187,return conf.getBoolean(STANDALONE, false);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,190,public List<String> getRegions() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,191,if (regionList == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,192,refreshRegionList();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,194,return regionList;
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,198,public String getCertName() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,199,return conf.getString(CERT_NAME, "");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,203,public String getCertPath() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,204,return conf.getString(CERT_PATH, "");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,211,public InputStream getCertStream() throws FileNotFoundException, ConfigurationException {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,212,String certName = getCertName();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,213,String certPath = getCertPath();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,214,if (certName != null && !certName.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,215,return getClass().getResourceAsStream(certName);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,217,return new FileInputStream(certPath);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,219,throw new ConfigurationException("SSL Certificate configuration does not have resource name or path set!");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,222,public String getPassword() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,223,return conf.getString(PASSWORD, "");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,226,public boolean isSSLEnabled() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,227,return conf.getBoolean(SSL_ENABLED, false);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,230,public int getConsumeInterval() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,231,return conf.getInt(CONSUME_INTERVAL, 50);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,234,public int getRetentionSecs() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,235,return conf.getInt(RETENTION_SECS, 0);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,238,public boolean isInterRegionSSLEnabled() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,239,return conf.getBoolean(INTER_REGION_SSL_ENABLED, false);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,245,public int getMessagesConsumedThreadRunInterval() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,246,return conf.getInt(MESSAGES_CONSUMED_THREAD_RUN_INTERVAL, 60000);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,252,public int getBkEnsembleSize() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,253,return conf.getInt(BK_ENSEMBLE_SIZE, 3);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,260,return conf.getInt(BK_QUORUM_SIZE, 2);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,267,public void validate() throws ConfigurationException {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,268,if (!getZkPrefix().startsWith("/")) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,269,throw new ConfigurationException(ZK_PREFIX + " must start with a /");
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,274,if (isInterRegionSSLEnabled() && getRegions().size() > 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,275,for (String hubString : getRegions()) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,276,HedwigSocketAddress hub = new HedwigSocketAddress(hubString);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,278,throw new ConfigurationException("Region defined does not have required SSL port: " + hubString);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,18,package org.apache.hedwig.server.common;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,20,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,23,public class TerminateJVMExceptionHandler implements Thread.UncaughtExceptionHandler {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,27,public void uncaughtException(Thread t, Throwable e) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java,28,logger.error("Uncaught exception in thread " + t.getName(), e);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,18,package org.apache.hedwig.server.common;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,20,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,21,import java.util.LinkedList;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,22,import java.util.Queue;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,23,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,25,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,26,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,27,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,29,public class TopicOpQueuer {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,33,protected HashMap<ByteString, Queue<Runnable>> topic2ops = new HashMap<ByteString, Queue<Runnable>>();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,35,protected final ScheduledExecutorService scheduler;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,37,public TopicOpQueuer(ScheduledExecutorService scheduler) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,38,this.scheduler = scheduler;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,41,public interface Op extends Runnable {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,44,public abstract class AsynchronousOp<T> implements Op {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,45,final public ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,46,final public Callback<T> cb;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,47,final public Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,49,public AsynchronousOp(final ByteString topic, final Callback<T> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,50,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,51,this.cb = new Callback<T>() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,53,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,54,cb.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,55,popAndRunNext(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,59,public void operationFinished(Object ctx, T resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,60,cb.operationFinished(ctx, resultOfOperation);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,61,popAndRunNext(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,64,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,68,public abstract class SynchronousOp implements Op {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,69,final public ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,71,public SynchronousOp(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,72,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,76,public final void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,77,runInternal();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,78,popAndRunNext(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,81,protected abstract void runInternal();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,85,protected synchronized void popAndRunNext(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,86,Queue<Runnable> ops = topic2ops.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,88,ops.remove();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,90,scheduler.submit(ops.peek());
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,93,public void pushAndMaybeRun(ByteString topic, Op op) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,94,int size;
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,95,synchronized (this) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,96,Queue<Runnable> ops = topic2ops.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,97,if (ops == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,98,ops = new LinkedList<Runnable>();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,99,topic2ops.put(topic, ops);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,101,ops.add(op);
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,102,size = ops.size();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,105,op.run();
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,108,public Runnable peek(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/TopicOpQueuer.java,109,return topic2ops.get(topic).peek();
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,18,package org.apache.hedwig.server.common;
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,20,public class UnexpectedError extends Error {
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,25,private static final long serialVersionUID = 1L;
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,27,public UnexpectedError(String msg) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,28,super(msg);
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,31,public UnexpectedError(Throwable cause) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/UnexpectedError.java,32,super(cause);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,18,package org.apache.hedwig.server.delivery;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,20,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,21,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,23,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,24,import org.jboss.netty.channel.ChannelFuture;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,25,import org.jboss.netty.channel.ChannelFutureListener;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,27,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,28,import org.apache.hedwig.server.common.UnexpectedError;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,30,public class ChannelEndPoint implements DeliveryEndPoint, ChannelFutureListener {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,32,Channel channel;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,34,public Channel getChannel() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,35,return channel;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,38,Map<ChannelFuture, DeliveryCallback> callbacks = new HashMap<ChannelFuture, DeliveryCallback>();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,40,public ChannelEndPoint(Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,41,this.channel = channel;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,44,public void close() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,45,channel.close();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,48,public void send(PubSubResponse response, DeliveryCallback callback) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,49,ChannelFuture future = channel.write(response);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,50,callbacks.put(future, callback);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,51,future.addListener(this);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,54,public void operationComplete(ChannelFuture future) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,55,DeliveryCallback callback = callbacks.get(future);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,56,callbacks.remove(future);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,58,if (callback == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,59,throw new UnexpectedError("Could not locate callback for channel future");
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,62,if (future.isSuccess()) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,63,callback.sendingFinished();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,66,callback.permanentErrorOnSend();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,72,public boolean equals(Object obj) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,73,if (obj instanceof ChannelEndPoint) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,74,ChannelEndPoint channelEndPoint = (ChannelEndPoint) obj;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,75,return channel.equals(channelEndPoint.channel);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java,77,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java,18,package org.apache.hedwig.server.delivery;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java,20,public interface DeliveryCallback {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java,22,public void sendingFinished();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java,24,public void transientErrorOnSend();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryCallback.java,26,public void permanentErrorOnSend();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java,18,package org.apache.hedwig.server.delivery;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java,20,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java,22,public interface DeliveryEndPoint {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java,24,public void send(PubSubResponse response, DeliveryCallback callback);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryEndPoint.java,26,public void close();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java,18,package org.apache.hedwig.server.delivery;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java,21,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java,24,public interface DeliveryManager {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,18,package org.apache.hedwig.server.delivery;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,21,import java.util.HashSet;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,23,import java.util.Queue;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,24,import java.util.Set;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,25,import java.util.SortedMap;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,26,import java.util.TreeMap;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,27,import java.util.concurrent.BlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,29,import java.util.concurrent.LinkedBlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,30,import java.util.concurrent.TimeUnit;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,32,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,33,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,35,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,36,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,37,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,38,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,39,import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,40,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,41,import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,42,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,43,import org.apache.hedwig.server.common.UnexpectedError;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,44,import org.apache.hedwig.server.persistence.Factory;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,45,import org.apache.hedwig.server.persistence.MapMethods;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,46,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,47,import org.apache.hedwig.server.persistence.ScanCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,48,import org.apache.hedwig.server.persistence.ScanRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,53,protected static final Logger logger = LoggerFactory.getLogger(FIFODeliveryManager.class);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,55,protected interface DeliveryManagerRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,56,public void performRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,93,this.persistenceMgr = persistenceMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,97,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,168,public void retryErroredSubscriberAfterDelay(ActiveSubscriberState subscriber) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,185,public void moveDeliveryPtrForward(ActiveSubscriberState subscriber, long prevSeqId, long newSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,241,protected void removeDeliveryPtr(ActiveSubscriberState subscriber, Long seqId, boolean isAbsenceOk,
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,242,boolean pruneTopic) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,244,assert seqId != null;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,247,ByteString topic = subscriber.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,248,SortedMap<Long, Set<ActiveSubscriberState>> deliveryPtrs = perTopicDeliveryPtrs.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,250,if (deliveryPtrs == null && !isAbsenceOk) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,251,throw new UnexpectedError("No delivery pointers found while disconnecting " + "channel for topic:" + topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,254,if(null == deliveryPtrs) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,255,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,258,if (!MapMethods.removeFromMultiMap(deliveryPtrs, seqId, subscriber) && !isAbsenceOk) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,260,throw new UnexpectedError("Could not find subscriber:" + subscriber + " at the expected delivery pointer");
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,263,if (pruneTopic && deliveryPtrs.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,264,perTopicDeliveryPtrs.remove(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,269,protected long getMinimumSeqId(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,270,SortedMap<Long, Set<ActiveSubscriberState>> deliveryPtrs = perTopicDeliveryPtrs.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,272,if (deliveryPtrs == null || deliveryPtrs.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,273,return Long.MAX_VALUE - 1;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,275,return deliveryPtrs.firstKey();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,278,protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,282,SortedMap<Long, Set<ActiveSubscriberState>> deliveryPtrs = MapMethods.getAfterInsertingIfAbsent(
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,283,perTopicDeliveryPtrs, subscriber.getTopic(), TreeMapLongToSetSubscriberFactory.instance);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,285,MapMethods.addToMultiMap(deliveryPtrs, seqId, subscriber, HashMapSubscriberFactory.instance);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,289,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,290,ByteString subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,291,long lastLocalSeqIdDelivered;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,292,boolean connected = true;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,293,DeliveryEndPoint deliveryEndPoint;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,294,long lastScanErrorTime = -1;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,295,long localSeqIdDeliveringNow;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,296,long lastSeqIdCommunicatedExternally;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,300,final static int SEQ_ID_SLACK = 10;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,304,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,305,this.subscriberId = subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,306,this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,307,this.deliveryEndPoint = deliveryEndPoint;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,317,public ByteString getTopic() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,318,return topic;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,333,protected boolean isConnected() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,337,public void deliverNextMessage() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,340,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,356,public void messageScanned(Object ctx, Message message) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,358,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,368,sendingFinished();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,369,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,379,deliveryEndPoint.send(response, //
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,381,this);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,385,public void scanFailed(Object ctx, Exception exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,387,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,391,retryErroredSubscriberAfterDelay(this);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,394,public void scanFinished(Object ctx, ReasonForFinish reason) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,402,public void sendingFinished() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,404,return;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,419,deliverNextMessage();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,423,return lastSeqIdCommunicatedExternally;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,427,public void permanentErrorOnSend() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,431,public void transientErrorOnSend() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,432,retryErroredSubscriberAfterDelay(this);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,439,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,444,if (prevSubscriber != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,451,deliverNextMessage();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,455,public String toString() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,456,StringBuilder sb = new StringBuilder();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,457,sb.append("Topic: ");
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,458,sb.append(topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,460,sb.append(lastLocalSeqIdDelivered);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,461,return sb.toString();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,466,protected class StopServingSubscriber implements DeliveryManagerRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,474,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,492,protected class DeliveryPtrMove implements DeliveryManagerRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,494,ActiveSubscriberState subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,495,Long oldSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,496,Long newSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,498,public DeliveryPtrMove(ActiveSubscriberState subscriber, Long oldSeqId, Long newSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,499,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,500,this.oldSeqId = oldSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,501,this.newSeqId = newSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,505,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,506,ByteString topic = subscriber.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,507,long prevMinSeqId = getMinimumSeqId(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,509,if (subscriber.isConnected()) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,510,removeDeliveryPtr(subscriber, oldSeqId, //
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,512,false,
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,514,false);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,516,addDeliveryPtr(subscriber, newSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,518,removeDeliveryPtr(subscriber, oldSeqId, //
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,520,true,
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,522,true);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,525,long nowMinSeqId = getMinimumSeqId(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,527,if (nowMinSeqId > prevMinSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,528,persistenceMgr.deliveredUntil(topic, nowMinSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,547,protected static class TreeMapLongToSetSubscriberFactory implements
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,548,Factory<SortedMap<Long, Set<ActiveSubscriberState>>> {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,549,static TreeMapLongToSetSubscriberFactory instance = new TreeMapLongToSetSubscriberFactory();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,552,public SortedMap<Long, Set<ActiveSubscriberState>> newInstance() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,553,return new TreeMap<Long, Set<ActiveSubscriberState>>();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,557,protected static class HashMapSubscriberFactory implements Factory<Set<ActiveSubscriberState>> {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,558,static HashMapSubscriberFactory instance = new HashMapSubscriberFactory();
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,561,public Set<ActiveSubscriberState> newInstance() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,562,return new HashSet<ActiveSubscriberState>();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,22,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,23,import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,24,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,25,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,26,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,27,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,28,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,29,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,31,public abstract class BaseHandler implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,33,protected TopicManager topicMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,34,protected ServerConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,36,protected BaseHandler(TopicManager tm, ServerConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,37,this.topicMgr = tm;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,38,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,42,public void handleRequest(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,43,topicMgr.getOwner(request.getTopic(), request.getShouldClaim(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,44,new Callback<HedwigSocketAddress>() {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,46,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,47,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,51,public void operationFinished(Object ctx, HedwigSocketAddress owner) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,52,if (!owner.equals(cfg.getServerAddr())) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,53,channel.write(PubSubResponseUtils.getResponseForException(
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,54,new ServerNotResponsibleForTopicException(owner.toString()), request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,55,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,57,handleRequestAtOwner(request, channel);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java,62,public abstract void handleRequestAtOwner(PubSubRequest request, Channel channel);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ChannelDisconnectListener.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ChannelDisconnectListener.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ChannelDisconnectListener.java,22,public interface ChannelDisconnectListener {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ChannelDisconnectListener.java,28,public void channelDisconnected(Channel channel);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,22,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,23,import org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,24,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,25,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,26,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,27,import org.apache.hedwig.server.subscriptions.SubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,28,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,29,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,31,public class ConsumeHandler extends BaseHandler {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,33,SubscriptionManager sm;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,34,Callback<Void> noopCallback = new NoopCallback<Void>();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,36,class NoopCallback<T> implements Callback<T> {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,38,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,41,public void operationFinished(Object ctx, T resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,46,public void handleRequestAtOwner(PubSubRequest request, Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,47,if (!request.hasConsumeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,48,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,50,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,53,ConsumeRequest consumeRequest = request.getConsumeRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,55,sm.setConsumeSeqIdForSubscriber(request.getTopic(), consumeRequest.getSubscriberId(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,56,consumeRequest.getMsgId(), noopCallback, null);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,60,public ConsumeHandler(TopicManager tm, SubscriptionManager sm, ServerConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,61,super(tm, cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java,62,this.sm = sm;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java,22,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java,24,public interface Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/Handler.java,36,public void handleRequest(final PubSubRequest request, final Channel channel);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,21,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,22,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,23,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,24,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,25,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,26,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,27,import org.apache.hedwig.server.persistence.PersistRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,28,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,29,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,30,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,32,public class PublishHandler extends BaseHandler {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,34,private PersistenceManager persistenceMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,36,public PublishHandler(TopicManager topicMgr, PersistenceManager persistenceMgr, ServerConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,37,super(topicMgr, cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,38,this.persistenceMgr = persistenceMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,42,public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,43,if (!request.hasPublishRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,44,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,46,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,49,Message msgToSerialize = Message.newBuilder(request.getPublishRequest().getMsg()).setSrcRegion(
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,50,cfg.getMyRegionByteString()).build();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,52,PersistRequest persistRequest = new PersistRequest(request.getTopic(), msgToSerialize,
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,55,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,56,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java,65,persistenceMgr.persistMessage(persistRequest);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,22,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,23,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,24,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,25,import org.jboss.netty.channel.ChannelFutureListener;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,27,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,28,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,29,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,30,import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,31,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,32,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,33,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,34,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,35,import org.apache.hedwig.protoextensions.SubscriptionStateUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,36,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,37,import org.apache.hedwig.server.delivery.ChannelEndPoint;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,38,import org.apache.hedwig.server.delivery.DeliveryManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,39,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,40,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,41,import org.apache.hedwig.server.subscriptions.SubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,43,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,44,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,57,super(topicMgr, cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,58,this.deliveryMgr = deliveryManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,59,this.persistenceMgr = persistenceMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,60,this.subMgr = subMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,78,public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,80,if (!request.hasSubscribeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,81,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,83,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,86,final ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,88,MessageSeqId seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,89,try {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,90,seqId = persistenceMgr.getCurrentSeqIdForTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,92,channel.write(PubSubResponseUtils.getResponseForException(e, request.getTxnId())).addListener(
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,93,ChannelFutureListener.CLOSE);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,94,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,97,final SubscribeRequest subRequest = request.getSubscribeRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,98,final ByteString subscriberId = subRequest.getSubscriberId();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,100,MessageSeqId lastSeqIdPublished = MessageSeqId.newBuilder(seqId).setLocalComponent(seqId.getLocalComponent()).build();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,105,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,106,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId())).addListener(
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,107,ChannelFutureListener.CLOSE);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,113,TopicSubscriber topicSub = new TopicSubscriber(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,117,synchronized (channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,118,if (!channel.isConnected()) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java,122,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,18,package org.apache.hedwig.server.handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,21,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,22,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,23,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,24,import org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,25,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,26,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,27,import org.apache.hedwig.server.delivery.DeliveryManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,28,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,29,import org.apache.hedwig.server.subscriptions.SubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,30,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,31,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,33,public class UnsubscribeHandler extends BaseHandler {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,34,SubscriptionManager subMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,35,DeliveryManager deliveryMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,39,super(tm, cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,40,this.subMgr = subMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,41,this.deliveryMgr = deliveryMgr;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,45,public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,46,if (!request.hasUnsubscribeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,47,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,49,return;
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,52,final UnsubscribeRequest unsubRequest = request.getUnsubscribeRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,53,final ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,54,final ByteString subscriberId = unsubRequest.getSubscriberId();
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,56,subMgr.unsubscribe(topic, subscriberId, new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,58,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,59,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java,63,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,18,package org.apache.hedwig.server.netty;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,20,import java.io.File;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,21,import java.io.IOException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,22,import java.net.InetSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,23,import java.net.MalformedURLException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,24,import java.util.Collections;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,25,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,26,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,27,import java.util.concurrent.CountDownLatch;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,28,import java.util.concurrent.Executors;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,29,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,30,import java.util.concurrent.SynchronousQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,31,import java.util.concurrent.TimeUnit;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,33,import org.apache.bookkeeper.conf.ClientConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,34,import org.apache.bookkeeper.client.BookKeeper;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,35,import org.apache.bookkeeper.client.BKException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,36,import org.apache.commons.configuration.ConfigurationException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,37,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,38,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,39,import org.apache.zookeeper.KeeperException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,40,import org.apache.zookeeper.WatchedEvent;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,41,import org.apache.zookeeper.Watcher;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,42,import org.apache.zookeeper.ZooKeeper;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,43,import org.jboss.netty.bootstrap.ServerBootstrap;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,44,import org.jboss.netty.channel.group.ChannelGroup;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,45,import org.jboss.netty.channel.group.DefaultChannelGroup;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,46,import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,47,import org.jboss.netty.channel.socket.ServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,48,import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,49,import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,50,import org.jboss.netty.logging.InternalLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,51,import org.jboss.netty.logging.Log4JLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,53,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,54,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,55,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,56,import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,57,import org.apache.hedwig.server.delivery.DeliveryManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,58,import org.apache.hedwig.server.delivery.FIFODeliveryManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,59,import org.apache.hedwig.server.handlers.ConsumeHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,60,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,61,import org.apache.hedwig.server.handlers.PublishHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,62,import org.apache.hedwig.server.handlers.SubscribeHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,63,import org.apache.hedwig.server.handlers.UnsubscribeHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,64,import org.apache.hedwig.server.persistence.BookkeeperPersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,65,import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,66,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,67,import org.apache.hedwig.server.persistence.PersistenceManagerWithRangeScan;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,68,import org.apache.hedwig.server.persistence.ReadAheadCache;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,69,import org.apache.hedwig.server.regions.HedwigHubClientFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,70,import org.apache.hedwig.server.regions.RegionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,71,import org.apache.hedwig.server.ssl.SslServerContextFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,73,import org.apache.hedwig.server.subscriptions.InMemorySubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,74,import org.apache.hedwig.server.subscriptions.SubscriptionManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,76,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,77,import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,78,import org.apache.hedwig.server.topics.ZkTopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,79,import org.apache.hedwig.util.ConcurrencyUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,80,import org.apache.hedwig.util.Either;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,81,import org.apache.hedwig.zookeeper.SafeAsyncCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,83,public class PubSubServer {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,88,ServerSocketChannelFactory serverChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,89,ClientSocketChannelFactory clientChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,90,ServerConfiguration conf;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,91,ChannelGroup allChannels;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,94,PersistenceManager pm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,95,DeliveryManager dm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,96,TopicManager tm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,97,SubscriptionManager sm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,98,RegionManager rm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,100,ZooKeeper zk; // null if we are in standalone mode
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,101,BookKeeper bk; // null if we are in standalone mode
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,104,ScheduledExecutorService scheduler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,106,protected PersistenceManager instantiatePersistenceManager(TopicManager topicMgr) throws IOException,
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,107,InterruptedException {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,109,PersistenceManagerWithRangeScan underlyingPM;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,111,if (conf.isStandalone()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,113,underlyingPM = LocalDBPersistenceManager.instance();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,116,try {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,117,ClientConfiguration bkConf = new ClientConfiguration();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,118,bkConf.addConfiguration(conf.getConf());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,119,bk = new BookKeeper(bkConf, zk, clientChannelFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,121,logger.error("Could not instantiate bookkeeper client", e);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,122,throw new IOException(e);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,128,PersistenceManager pm = underlyingPM;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,130,if (conf.getReadAheadEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,131,pm = new ReadAheadCache(underlyingPM, conf).start();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,134,return pm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,138,if (conf.isStandalone()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,146,protected RegionManager instantiateRegionManager(PersistenceManager pm, ScheduledExecutorService scheduler) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,150,protected void instantiateZookeeperClient() throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,151,if (!conf.isStandalone()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,152,final CountDownLatch signalZkReady = new CountDownLatch(1);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,154,zk = new ZooKeeper(conf.getZkHost(), conf.getZkTimeout(), new Watcher() {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,156,public void process(WatchedEvent event) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,157,if(Event.KeeperState.SyncConnected.equals(event.getState())) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,158,signalZkReady.countDown();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,163,if (!signalZkReady.await(conf.getZkTimeout()*2, TimeUnit.MILLISECONDS)) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,164,logger.error("Could not establish connection with ZooKeeper after zk_timeout*2 = " +
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,165,conf.getZkTimeout()*2 + " ms. (Default value for zk_timeout is 2000).");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,166,throw new Exception("Could not establish connection with ZooKeeper after zk_timeout*2 = " +
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,167,conf.getZkTimeout()*2 + " ms. (Default value for zk_timeout is 2000).");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,172,protected TopicManager instantiateTopicManager() throws IOException {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,173,TopicManager tm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,175,if (conf.isStandalone()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,176,tm = new TrivialOwnAllTopicManager(conf, scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,178,try {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,182,throw new IOException(e);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,185,return tm;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,190,Map<OperationType, Handler> handlers = new HashMap<OperationType, Handler>();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,191,handlers.put(OperationType.PUBLISH, new PublishHandler(tm, pm, conf));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,194,handlers.put(OperationType.CONSUME, new ConsumeHandler(tm, sm, conf));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,195,handlers = Collections.unmodifiableMap(handlers);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,196,return handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,200,boolean isSSLEnabled = (sslFactory != null) ? true : false;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,201,InternalLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,202,ServerBootstrap bootstrap = new ServerBootstrap(serverChannelFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,207,bootstrap.setPipelineFactory(pipeline);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,208,bootstrap.setOption("child.tcpNoDelay", true);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,209,bootstrap.setOption("child.keepAlive", true);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,210,bootstrap.setOption("reuseAddress", true);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,214,: new InetSocketAddress(conf.getServerPort())));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,215,logger.info("Going into receive loop");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,218,public void shutdown() {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,255,allChannels.close().awaitUninterruptibly();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,256,serverChannelFactory.releaseExternalResources();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,257,clientChannelFactory.releaseExternalResources();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,258,scheduler.shutdown();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,282,public void uncaughtException(Thread t, Throwable e) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,283,exceptionHandler.uncaughtException(t, e);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,289,SafeAsyncCallback.setUncaughtExceptionHandler(exceptionHandler);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,291,final SynchronousQueue<Either<Object, Exception>> queue = new SynchronousQueue<Either<Object, Exception>>();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,293,new Thread(tg, new Runnable() {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,295,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,296,try {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,305,instantiateZookeeperClient();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,306,tm = instantiateTopicManager();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,307,pm = instantiatePersistenceManager(tm);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,310,rm = instantiateRegionManager(pm, scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,311,sm.addListener(rm);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,313,allChannels = new DefaultChannelGroup("hedwig");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,320,if (conf.isSSLEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,324,ConcurrencyUtils.put(queue, Either.right(e));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,325,return;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,328,ConcurrencyUtils.put(queue, Either.of(new Object(), (Exception) null));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,333,Either<Object, Exception> either = ConcurrencyUtils.take(queue);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,334,if (either.left() == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,335,throw either.right();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,349,public static void errorMsgAndExit(String msg, Throwable t, int rc) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,350,logger.error(msg, t);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,351,System.err.println(msg);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,352,System.exit(rc);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,355,public final static int RC_INVALID_CONF_FILE = 1;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,356,public final static int RC_MISCONFIGURED = 2;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,357,public final static int RC_OTHER = 3;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,362,public static void main(String[] args) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,364,logger.info("Attempting to start Hedwig");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,366,if (args.length > 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,367,String confFile = args[0];
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,368,try {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,372,errorMsgAndExit(msg, e, RC_INVALID_CONF_FILE);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,375,errorMsgAndExit(msg, e, RC_MISCONFIGURED);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,377,logger.info("Using configuration file " + confFile);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,379,try {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,382,errorMsgAndExit("Error during startup", t, RC_OTHER);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,18,package org.apache.hedwig.server.netty;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,20,import org.jboss.netty.channel.ChannelPipeline;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,21,import org.jboss.netty.channel.ChannelPipelineFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,22,import org.jboss.netty.channel.Channels;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,23,import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,24,import org.jboss.netty.handler.codec.frame.LengthFieldPrepender;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,25,import org.jboss.netty.handler.codec.protobuf.ProtobufDecoder;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,26,import org.jboss.netty.handler.codec.protobuf.ProtobufEncoder;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,27,import org.jboss.netty.handler.ssl.SslHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,29,import org.apache.hedwig.protocol.PubSubProtocol;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,30,import org.apache.hedwig.server.ssl.SslServerContextFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,32,public class PubSubServerPipelineFactory implements ChannelPipelineFactory {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,35,final static int MAX_WORKER_THREADS = 32;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,36,final static int MAX_CHANNEL_MEMORY_SIZE = 10 * 1024 * 1024;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,37,final static int MAX_TOTAL_MEMORY_SIZE = 100 * 1024 * 1024;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,39,private UmbrellaHandler uh;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,40,private SslServerContextFactory sslFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,41,private int maxMessageSize;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,50,public PubSubServerPipelineFactory(UmbrellaHandler uh, SslServerContextFactory sslFactory, int maxMessageSize) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,51,this.uh = uh;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,52,this.sslFactory = sslFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,53,this.maxMessageSize = maxMessageSize;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,56,public ChannelPipeline getPipeline() throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,57,ChannelPipeline pipeline = Channels.pipeline();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,58,if (sslFactory != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,59,pipeline.addLast("ssl", new SslHandler(sslFactory.getEngine()));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,61,pipeline.addLast("lengthbaseddecoder",
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,62,new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,63,pipeline.addLast("lengthprepender", new LengthFieldPrepender(4));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,65,pipeline.addLast("protobufdecoder", new ProtobufDecoder(PubSubProtocol.PubSubRequest.getDefaultInstance()));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,66,pipeline.addLast("protobufencoder", new ProtobufEncoder());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,73,pipeline.addLast("umbrellahandler", uh);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerPipelineFactory.java,74,return pipeline;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,18,package org.apache.hedwig.server.netty;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,20,import java.io.IOException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,21,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,23,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,24,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,25,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,26,import org.jboss.netty.channel.ChannelFuture;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,27,import org.jboss.netty.channel.ChannelFutureListener;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,28,import org.jboss.netty.channel.ChannelHandlerContext;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,30,import org.jboss.netty.channel.ChannelStateEvent;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,31,import org.jboss.netty.channel.ExceptionEvent;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,32,import org.jboss.netty.channel.MessageEvent;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,33,import org.jboss.netty.channel.SimpleChannelHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,34,import org.jboss.netty.channel.group.ChannelGroup;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,35,import org.jboss.netty.handler.codec.frame.CorruptedFrameException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,36,import org.jboss.netty.handler.codec.frame.TooLongFrameException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,37,import org.jboss.netty.handler.ssl.SslHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,39,import org.apache.hedwig.exceptions.PubSubException.MalformedRequestException;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,40,import org.apache.hedwig.protocol.PubSubProtocol;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,41,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,42,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,43,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,44,import org.apache.hedwig.server.handlers.ChannelDisconnectListener;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,45,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,48,public class UmbrellaHandler extends SimpleChannelHandler {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,56,public UmbrellaHandler(ChannelGroup allChannels, Map<OperationType, Handler> handlers,
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,57,boolean isSSLEnabled) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,58,this.allChannels = allChannels;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,59,this.isSSLEnabled = isSSLEnabled;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,60,this.handlers = handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,65,public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,66,Throwable throwable = e.getCause();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,76,if (throwable instanceof IOException || throwable instanceof TooLongFrameException
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,77,|| throwable instanceof CorruptedFrameException) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,78,e.getChannel().close();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,85,Thread thread = Thread.currentThread();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,86,thread.getUncaughtExceptionHandler().uncaughtException(thread, throwable);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,92,public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,96,if (!isSSLEnabled) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,97,allChannels.add(ctx.getChannel());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,102,public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,103,if (isSSLEnabled) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,105,public void operationComplete(ChannelFuture future) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,106,if (future.isSuccess()) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,110,allChannels.add(future.getChannel());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,112,future.getChannel().close();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,120,public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,121,Channel channel = ctx.getChannel();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,124,channel.close();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,127,public static void sendErrorResponseToMalformedRequest(Channel channel, long txnId, String msg) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,131,MalformedRequestException mre = new MalformedRequestException(msg);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,132,PubSubResponse response = PubSubResponseUtils.getResponseForException(mre, txnId);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,133,channel.write(response);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,137,public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,139,if (!(e.getMessage() instanceof PubSubProtocol.PubSubRequest)) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,140,ctx.sendUpstream(e);
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,141,return;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,144,PubSubProtocol.PubSubRequest request = (PubSubProtocol.PubSubRequest) e.getMessage();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,146,Handler handler = handlers.get(request.getType());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,147,Channel channel = ctx.getChannel();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,148,long txnId = request.getTxnId();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,150,if (handler == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,152,+ " unknown");
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,153,return;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,156,handler.handleRequest(request, channel);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,20,import java.io.IOException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,21,import java.util.Enumeration;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,22,import java.util.Iterator;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,23,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,24,import java.util.TreeMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,25,import java.util.concurrent.ConcurrentHashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,26,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,28,import org.apache.bookkeeper.client.BKException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,29,import org.apache.bookkeeper.client.BookKeeper;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,30,import org.apache.bookkeeper.client.LedgerEntry;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,31,import org.apache.bookkeeper.client.LedgerHandle;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,32,import org.apache.bookkeeper.client.BookKeeper.DigestType;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,33,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,34,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,42,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,43,import com.google.protobuf.InvalidProtocolBufferException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,44,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,45,import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,46,import org.apache.hedwig.protocol.PubSubProtocol.LedgerRange;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,47,import org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,48,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,49,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,50,import org.apache.hedwig.protoextensions.MessageIdUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,51,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,52,import org.apache.hedwig.server.common.TopicOpQueuer;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,53,import org.apache.hedwig.server.common.UnexpectedError;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,54,import org.apache.hedwig.server.persistence.ScanCallback.ReasonForFinish;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,55,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,56,import org.apache.hedwig.server.topics.TopicOwnershipChangeListener;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,57,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,58,import org.apache.hedwig.zookeeper.SafeAsynBKCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,74,public class BookkeeperPersistenceManager implements PersistenceManagerWithRangeScan, TopicOwnershipChangeListener {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,77,private BookKeeper bk;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,79,private ServerConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,81,static class InMemoryLedgerRange {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,82,LedgerRange range;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,85,LedgerHandle handle;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,88,this.range = range;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,90,this.handle = handle;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,99,static class TopicInfo {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,105,MessageSeqId lastSeqIdPushed;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,112,long lastEntryIdAckedInCurrentLedger = -1; // because BK ledgers starts
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,120,TreeMap<Long, InMemoryLedgerRange> ledgerRanges = new TreeMap<Long, InMemoryLedgerRange>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,126,InMemoryLedgerRange currentLedgerRange;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,130,Map<ByteString, TopicInfo> topicInfos = new ConcurrentHashMap<ByteString, TopicInfo>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,132,TopicOpQueuer queuer;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,147,ScheduledExecutorService executor) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,148,this.bk = bk;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,150,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,151,queuer = new TopicOpQueuer(executor);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,152,tm.addTopicOwnershipChangeListener(this);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,155,class RangeScanOp extends TopicOpQueuer.SynchronousOp {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,156,RangeScanRequest request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,157,int numMessagesRead = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,158,long totalSizeRead = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,159,TopicInfo topicInfo;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,161,public RangeScanOp(RangeScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,162,queuer.super(request.topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,163,this.request = request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,167,protected void runInternal() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,168,topicInfo = topicInfos.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,170,if (topicInfo == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,171,request.callback.scanFailed(request.ctx, new PubSubException.ServerNotResponsibleForTopicException(""));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,172,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,179,protected void read(final InMemoryLedgerRange imlr, final long startSeqId, final long endSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,181,if (imlr.handle == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,183,bk.asyncOpenLedger(imlr.range.getLedgerId(), DigestType.CRC32, passwd,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,184,new SafeAsynBKCallback.OpenCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,186,public void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,187,if (rc == BKException.Code.OK) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,188,imlr.handle = ledgerHandle;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,189,read(imlr, startSeqId, endSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,190,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,192,BKException bke = BKException.create(rc);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,193,logger.error("Could not open ledger: " + imlr.range.getLedgerId() + " for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,194,+ topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,195,request.callback.scanFailed(ctx, new PubSubException.ServiceDownException(bke));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,196,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,199,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,203,long correctedEndSeqId = Math.min(startSeqId + request.messageLimit - numMessagesRead - 1, endSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,205,if (logger.isDebugEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,206,logger.debug("Issuing a bk read for ledger: " + imlr.handle.getId() + " from entry-id: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,217,public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,218,if (rc != BKException.Code.OK || !seq.hasMoreElements()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,219,BKException bke = BKException.create(rc);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,220,logger.error("Error while reading from ledger: " + imlr.range.getLedgerId() + " for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,221,+ topic.toStringUtf8(), bke);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,222,request.callback.scanFailed(request.ctx, new PubSubException.ServiceDownException(bke));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,223,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,226,LedgerEntry entry = null;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,227,while (seq.hasMoreElements()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,228,entry = seq.nextElement();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,229,Message message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,230,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,231,message = Message.parseFrom(entry.getEntryInputStream());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,234,+ " for topic: " + topic.toStringUtf8();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,235,logger.error(msg, e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,236,request.callback.scanFailed(ctx, new PubSubException.UnexpectedConditionException(msg));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,237,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,245,assert expectedEntryId == entry.getEntryId() : "expectedEntryId (" + expectedEntryId
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,246,+ ") != entry.getEntryId() (" + entry.getEntryId() + ")";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,249,expectedEntryId++;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,250,request.callback.messageScanned(ctx, message);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,251,numMessagesRead++;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,252,totalSizeRead += message.getBody().size();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,254,if (numMessagesRead >= request.messageLimit) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,255,request.callback.scanFinished(ctx, ReasonForFinish.NUM_MESSAGES_LIMIT_EXCEEDED);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,256,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,259,if (totalSizeRead >= request.sizeLimit) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,260,request.callback.scanFinished(ctx, ReasonForFinish.SIZE_LIMIT_EXCEEDED);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,261,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,271,protected void startReadingFrom(long startSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,273,Map.Entry<Long, InMemoryLedgerRange> entry = topicInfo.ledgerRanges.ceilingEntry(startSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,275,if (entry == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,279,+ topicInfo.lastEntryIdAckedInCurrentLedger;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,281,if (endSeqId < startSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,282,request.callback.scanFinished(request.ctx, ReasonForFinish.NO_MORE_MESSAGES);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,283,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,286,read(topicInfo.currentLedgerRange, startSeqId, endSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,288,read(entry.getValue(), startSeqId, entry.getValue().range.getEndSeqIdIncluded().getLocalComponent());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,296,public void scanMessages(RangeScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,297,queuer.pushAndMaybeRun(request.topic, new RangeScanOp(request));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,300,public void deliveredUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,304,public void consumedUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,305,TopicInfo topicInfo = topicInfos.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,308,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,330,public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotResponsibleForTopicException {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,331,TopicInfo topicInfo = topicInfos.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,333,if (topicInfo == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,334,throw new PubSubException.ServerNotResponsibleForTopicException("");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,337,return topicInfo.lastSeqIdPushed;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,340,public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,344,public class PersistOp extends TopicOpQueuer.SynchronousOp {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,345,PersistRequest request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,347,public PersistOp(PersistRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,348,queuer.super(request.topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,349,this.request = request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,353,public void runInternal() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,407,public void persistMessage(PersistRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,408,queuer.pushAndMaybeRun(request.topic, new PersistOp(request));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,411,public void scanSingleMessage(ScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,412,throw new RuntimeException("Not implemented");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,415,static SafeAsynBKCallback.CloseCallback noOpCloseCallback = new SafeAsynBKCallback.CloseCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,417,public void safeCloseComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,425,class AcquireOp extends TopicOpQueuer.AsynchronousOp<Void> {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,426,public AcquireOp(ByteString topic, Callback<Void> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,427,queuer.super(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,431,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,432,if (topicInfos.containsKey(topic)) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,434,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,435,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,496,while (lrIterator.hasNext()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,497,LedgerRange range = lrIterator.next();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,499,if (range.hasEndSeqIdIncluded()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,501,long endOfLedger = range.getEndSeqIdIncluded().getLocalComponent();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,504,continue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,508,if (lrIterator.hasNext()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,510,+ " is not the last one but still does not have an end seq-id";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,511,logger.error(msg);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,512,cb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(msg));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,513,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,519,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,536,bk.asyncOpenLedger(ledgerId, DigestType.CRC32, passwd, new SafeAsynBKCallback.OpenCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,538,public void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,540,if (rc != BKException.Code.OK) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,541,BKException bke = BKException.create(rc);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,543,+ ", could not open unrecovered ledger: " + ledgerId, bke);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,544,cb.operationFailed(ctx, new PubSubException.ServiceDownException(bke));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,545,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,548,final long numEntriesInLastLedger = ledgerHandle.getLastAddConfirmed() + 1;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,550,if (numEntriesInLastLedger <= 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,553,logger.info("Pruning empty ledger: " + ledgerId + " for topic: " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,554,closeLedger(ledgerHandle);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,556,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,562,ledgerHandle.asyncReadEntries(numEntriesInLastLedger - 1, numEntriesInLastLedger - 1,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,563,new SafeAsynBKCallback.ReadCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,565,public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,566,Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,567,if (rc != BKException.Code.OK || !seq.hasMoreElements()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,568,BKException bke = BKException.create(rc);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,569,logger.error("While recovering ledger: " + ledgerId + " for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,570,+ topic.toStringUtf8() + ", could not read last entry", bke);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,571,cb.operationFailed(ctx, new PubSubException.ServiceDownException(bke));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,572,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,575,Message lastMessage;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,576,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,577,lastMessage = Message.parseFrom(seq.nextElement().getEntry());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,579,String msg = "While recovering ledger: " + ledgerId + " for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,580,+ topic.toStringUtf8() + ", could not deserialize last message";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,581,logger.error(msg, e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,582,cb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(msg));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,583,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,634,.getEndSeqIdIncluded();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,691,public void closeLedger(LedgerHandle lh) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,700,class ReleaseOp extends TopicOpQueuer.SynchronousOp {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,702,public ReleaseOp(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,703,queuer.super(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,707,public void runInternal() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,708,TopicInfo topicInfo = topicInfos.remove(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,710,if (topicInfo == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,711,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,714,for (InMemoryLedgerRange imlr : topicInfo.ledgerRanges.values()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,715,if (imlr.handle != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,716,closeLedger(imlr.handle);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,720,if (topicInfo.currentLedgerRange != null && topicInfo.currentLedgerRange.handle != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,721,closeLedger(topicInfo.currentLedgerRange.handle);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,733,public void lostTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,734,queuer.pushAndMaybeRun(topic, new ReleaseOp(topic));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,21,import org.apache.hedwig.server.common.ByteStringInterner;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,23,public class CacheKey {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,25,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,26,long seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,28,public CacheKey(ByteString topic, long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,29,this.topic = ByteStringInterner.intern(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,30,this.seqId = seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,33,public ByteString getTopic() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,34,return topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,37,public long getSeqId() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,38,return seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,42,public int hashCode() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,43,final int prime = 31;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,44,int result = 1;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,45,result = prime * result + (int) (seqId ^ (seqId >>> 32));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,46,result = prime * result + ((topic == null) ? 0 : topic.hashCode());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,47,return result;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,51,public boolean equals(Object obj) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,53,return true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,55,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,57,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,58,CacheKey other = (CacheKey) obj;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,60,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,61,if (topic == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,63,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,65,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,66,return true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,70,public String toString() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheKey.java,71,return "(" + topic.toStringUtf8() + "," + seqId + ")";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,23,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,24,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,26,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,27,import org.apache.hedwig.server.common.UnexpectedError;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,34,public class CacheValue {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,39,Message message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,40,long timeOfAddition = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,42,public CacheValue() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,45,public boolean isStub() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,46,return message == null;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,49,public long getTimeOfAddition() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,50,if (message == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,51,throw new UnexpectedError("Time of add requested from a stub");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,53,return timeOfAddition;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,56,public void setMessageAndInvokeCallbacks(Message message, long currTime) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,57,if (this.message != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,59,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,62,this.message = message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,63,this.timeOfAddition = currTime;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,73,public void addCallback(ScanCallback callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,74,if (!isStub()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,76,callback.messageScanned(ctx, message);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,77,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,80,callbacks.add(new ScanCallbackWithContext(callback, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,83,public Message getMessage() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,84,return message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java,87,public void setErrorAndInvokeCallbacks(Exception exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/Factory.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/Factory.java,20,public interface Factory<T> {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/Factory.java,21,public T newInstance();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,20,import java.io.File;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,21,import java.io.IOException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,22,import java.sql.Connection;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,23,import java.sql.DriverManager;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,24,import java.sql.PreparedStatement;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,25,import java.sql.ResultSet;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,26,import java.sql.SQLException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,27,import java.sql.Statement;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,28,import java.util.concurrent.ConcurrentHashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,29,import java.util.concurrent.ConcurrentMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,31,import javax.sql.rowset.serial.SerialBlob;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,33,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,34,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,36,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,37,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,38,import org.apache.hedwig.exceptions.PubSubException.UnexpectedConditionException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,39,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,40,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,41,import org.apache.hedwig.protoextensions.MessageIdUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,42,import org.apache.hedwig.server.persistence.ScanCallback.ReasonForFinish;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,43,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,44,import org.apache.hedwig.util.FileUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,46,public class LocalDBPersistenceManager implements PersistenceManagerWithRangeScan {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,49,static String connectionURL;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,51,static {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,52,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,53,File tempDir = FileUtils.createTempDirectory("derby", null);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,56,if (!tempDir.delete()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,57,throw new IOException("Could not delete dir: " + tempDir.getAbsolutePath());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,59,connectionURL = "jdbc:derby:" + tempDir.getAbsolutePath() + ";create=true";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,61,throw new RuntimeException(e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,66,private static final ThreadLocal<Connection> threadLocalConnection = new ThreadLocal<Connection>() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,68,protected Connection initialValue() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,69,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,70,return DriverManager.getConnection(connectionURL);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,72,logger.error("Could not connect to derby", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,73,return null;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,77,static final String ID_FIELD_NAME = "id";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,78,static final String MSG_FIELD_NAME = "msg";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,79,static final String driver = "org.apache.derby.jdbc.EmbeddedDriver";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,81,static final int SCAN_CHUNK = 1000;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,91,private int version = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,93,ConcurrentMap<ByteString, MessageSeqId> currTopicSeqIds = new ConcurrentHashMap<ByteString, MessageSeqId>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,95,static LocalDBPersistenceManager instance = new LocalDBPersistenceManager();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,97,public static LocalDBPersistenceManager instance() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,98,return instance;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,101,private LocalDBPersistenceManager() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,103,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,104,Class.forName(driver).newInstance();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,105,logger.info("Derby Driver loaded");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,107,logger.error("Derby driver not found", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,109,logger.error("Could not instantiate derby driver", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,111,logger.error("Could not instantiate derby driver", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,123,private MessageSeqId ensureSeqIdExistsForTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,124,MessageSeqId presentSeqIdInMap = currTopicSeqIds.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,126,if (presentSeqIdInMap != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,127,return presentSeqIdInMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,130,presentSeqIdInMap = MessageSeqId.newBuilder().setLocalComponent(0).build();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,131,MessageSeqId oldSeqIdInMap = currTopicSeqIds.putIfAbsent(topic, presentSeqIdInMap);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,133,if (oldSeqIdInMap != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,134,return oldSeqIdInMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,136,return presentSeqIdInMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,159,throws UnexpectedConditionException {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,160,long retValue = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,161,MessageSeqId oldId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,162,MessageSeqId.Builder newIdBuilder = MessageSeqId.newBuilder();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,164,do {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,165,oldId = ensureSeqIdExistsForTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,168,retValue = oldId.getLocalComponent() + 1;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,169,newIdBuilder.setLocalComponent(retValue);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,171,if (messageToPublish.hasMsgId()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,173,MessageIdUtils.takeRegionMaximum(newIdBuilder, messageToPublish.getMsgId(), oldId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,176,newIdBuilder.addAllRemoteComponents(oldId.getRemoteComponentsList());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,180,return retValue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,184,public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,185,return seqId + skipAmount;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,188,public void persistMessage(PersistRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,190,Connection conn = threadLocalConnection.get();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,193,Object ctx = request.getCtx();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,194,ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,195,Message message = request.getMessage();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,197,if (conn == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,198,callback.operationFailed(ctx, new ServiceDownException("Not connected to derby"));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,199,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,202,long seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,204,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,205,seqId = adjustTopicSeqIdForPublish(topic, message);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,207,callback.operationFailed(ctx, e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,208,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,210,PreparedStatement stmt;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,212,boolean triedCreatingTable = false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,213,while (true) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,214,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,215,message.getBody();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,216,stmt = conn.prepareStatement("INSERT INTO " + getTableNameForTopic(topic) + " VALUES(?,?)");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,217,stmt.setLong(1, seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,218,stmt.setBlob(2, new SerialBlob(message.toByteArray()));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,220,int rowCount = stmt.executeUpdate();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,221,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,222,if (rowCount != 1) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,223,logger.error("Unexpected number of affected rows from derby");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,224,callback.operationFailed(ctx, new ServiceDownException("Unexpected response from derby"));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,225,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,227,break;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,229,String theError = (sqle).getSQLState();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,230,if (theError.equals("42X05") && !triedCreatingTable) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,231,createTable(conn, topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,232,triedCreatingTable = true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,233,continue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,236,logger.error("Error while executing derby insert", sqle);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,237,callback.operationFailed(ctx, new ServiceDownException(sqle));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,238,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,248,private void createTable(Connection conn, ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,250,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,252,String tableName = getTableNameForTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,253,stmt.execute("CREATE TABLE " + tableName + " (" + ID_FIELD_NAME + " BIGINT NOT NULL CONSTRAINT ID_PK_"
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,256,logger.debug("Could not create table", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,260,public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,261,return ensureSeqIdExistsForTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,264,public void scanSingleMessage(ScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,265,scanMessagesInternal(request.getTopic(), request.getStartSeqId(), 1, Long.MAX_VALUE, request.getCallback(),
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,266,request.getCtx(), 1);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,267,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,270,public void scanMessages(RangeScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,271,scanMessagesInternal(request.getTopic(), request.getStartSeqId(), request.getMessageLimit(), request
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,272,.getSizeLimit(), request.getCallback(), request.getCtx(), SCAN_CHUNK);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,273,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,276,private String getTableNameForTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,280,private void scanMessagesInternal(ByteString topic, long startSeqId, int messageLimit, long sizeLimit,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,281,ScanCallback callback, Object ctx, int scanChunk) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,283,Connection conn = threadLocalConnection.get();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,285,if (conn == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,286,callback.scanFailed(ctx, new ServiceDownException("Not connected to derby"));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,287,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,290,long currentSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,291,currentSeqId = startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,294,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,295,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,296,stmt = conn.prepareStatement("SELECT * FROM " + getTableNameForTopic(topic) + " WHERE " + ID_FIELD_NAME
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,297,+ " >= ?  AND " + ID_FIELD_NAME + " <= ?");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,300,String theError = (sqle).getSQLState();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,301,if (theError.equals("42X05")) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,303,callback.scanFinished(ctx, ReasonForFinish.NO_MORE_MESSAGES);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,304,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,306,throw sqle;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,310,int numMessages = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,311,long totalSize = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,313,while (true) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,315,stmt.setLong(1, currentSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,316,stmt.setLong(2, currentSeqId + scanChunk);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,318,if (!stmt.execute()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,319,String errorMsg = "Select query did not return a result set";
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,320,logger.error(errorMsg);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,321,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,322,callback.scanFailed(ctx, new ServiceDownException(errorMsg));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,323,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,326,ResultSet resultSet = stmt.getResultSet();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,328,if (!resultSet.next()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,329,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,330,callback.scanFinished(ctx, ReasonForFinish.NO_MORE_MESSAGES);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,331,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,334,do {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,336,long localSeqId = resultSet.getLong(1);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,338,Message.Builder messageBuilder = Message.newBuilder().mergeFrom(resultSet.getBinaryStream(2));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,342,Message message = MessageIdUtils.mergeLocalSeqId(messageBuilder, localSeqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,344,callback.messageScanned(ctx, message);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,345,numMessages++;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,346,totalSize += message.getBody().size();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,348,if (numMessages > messageLimit) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,349,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,350,callback.scanFinished(ctx, ReasonForFinish.NUM_MESSAGES_LIMIT_EXCEEDED);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,351,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,353,stmt.close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,354,callback.scanFinished(ctx, ReasonForFinish.SIZE_LIMIT_EXCEEDED);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,355,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,360,currentSeqId += SCAN_CHUNK;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,363,logger.error("SQL Exception", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,364,callback.scanFailed(ctx, new ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,365,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,367,logger.error("Message stored in derby is not parseable", e);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,368,callback.scanFailed(ctx, new ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,369,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,374,public void deliveredUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,378,public void consumedUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,379,Connection conn = threadLocalConnection.get();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,380,if (conn == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,381,logger.error("Not connected to derby");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,382,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,385,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,386,stmt = conn.prepareStatement("DELETE FROM " + getTableNameForTopic(topic) + " WHERE " + ID_FIELD_NAME
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,387,+ " <= ?");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,388,stmt.setLong(1, seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,389,int rowCount = stmt.executeUpdate();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,393,String theError = (sqle).getSQLState();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,394,if (theError.equals("42X05")) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,395,logger.warn("Table for topic (" + topic + ") does not exist so no consumed messages to delete!");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,397,logger.error("Error while executing derby delete for consumed messages", sqle);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,402,protected void finalize() throws Throwable {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,403,if (driver.equals("org.apache.derby.jdbc.EmbeddedDriver")) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,404,boolean gotSQLExc = false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,406,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,407,DriverManager.getConnection("jdbc:derby:;shutdown=true").close();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,409,if (se.getSQLState().equals("XJ015")) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,410,gotSQLExc = true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,413,if (!gotSQLExc) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,414,logger.error("Database did not shut down normally");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,416,logger.info("Database shut down normally");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,419,super.finalize();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,422,public void reset() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,424,version++;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java,425,currTopicSeqIds.clear();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,20,import java.util.Collection;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,21,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,23,public class MapMethods {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,25,public static <K, V> V getAfterInsertingIfAbsent(Map<K, V> map, K key, Factory<V> valueFactory) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,26,V value = map.get(key);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,28,if (value == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,29,value = valueFactory.newInstance();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,30,map.put(key, value);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,33,return value;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,36,public static <K, V, Z extends Collection<V>> void addToMultiMap(Map<K, Z> map, K key, V value,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,37,Factory<Z> valueFactory) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,38,Collection<V> collection = getAfterInsertingIfAbsent(map, key, valueFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,40,collection.add(value);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,44,public static <K, V, Z extends Collection<V>> boolean removeFromMultiMap(Map<K, Z> map, K key, V value) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,45,Collection<V> collection = map.get(key);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,47,if (collection == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,48,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,51,if (!collection.remove(value)) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,52,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,54,if (collection.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,55,map.remove(key);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/MapMethods.java,57,return true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,21,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,22,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,29,public class PersistRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,30,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,31,Message message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,33,Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,36,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,37,this.message = message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,38,this.callback = callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,39,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,42,public ByteString getTopic() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,43,return topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,46,public Message getMessage() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,47,return message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,51,return callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,54,public Object getCtx() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java,55,return ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,21,import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,22,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,33,public interface PersistenceManager {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,41,public void persistMessage(PersistRequest request);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,59,public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,65,public void scanSingleMessage(ScanRequest request);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,70,public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,76,public void deliveredUntil(ByteString topic, Long seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManager.java,89,public void consumedUntil(ByteString topic, Long seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManagerWithRangeScan.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManagerWithRangeScan.java,20,public interface PersistenceManagerWithRangeScan extends PersistenceManager {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistenceManagerWithRangeScan.java,26,public void scanMessages(RangeScanRequest request);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,35,public class RangeScanRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,36,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,37,long startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,38,int messageLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,39,long sizeLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,40,ScanCallback callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,41,Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,43,public RangeScanRequest(ByteString topic, long startSeqId, int messageLimit, long sizeLimit, ScanCallback callback,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,44,Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,45,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,46,this.startSeqId = startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,47,this.messageLimit = messageLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,48,this.sizeLimit = sizeLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,49,this.callback = callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,50,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,53,public ByteString getTopic() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,54,return topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,57,public long getStartSeqId() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,58,return startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,61,public int getMessageLimit() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,62,return messageLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,65,public long getSizeLimit() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,66,return sizeLimit;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,69,public ScanCallback getCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,70,return callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,73,public Object getCtx() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/RangeScanRequest.java,74,return ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,21,import java.util.HashSet;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,22,import java.util.Iterator;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,23,import java.util.LinkedList;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,25,import java.util.Queue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,26,import java.util.Set;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,27,import java.util.SortedMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,28,import java.util.SortedSet;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,29,import java.util.TreeMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,30,import java.util.TreeSet;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,38,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,39,import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,40,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,41,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,42,import org.apache.hedwig.protoextensions.MessageIdUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,43,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,45,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,51,protected interface CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,52,public void performRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,59,protected PersistenceManagerWithRangeScan realPersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,95,protected PersistCallback persistCallbackInstance = new PersistCallback();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,100,protected NoSuchSeqIdException noSuchSeqIdExceptionInstance = new NoSuchSeqIdException();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,101,protected ReadAheadException readAheadExceptionInstance = new ReadAheadException();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,103,protected ServerConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,114,public ReadAheadCache(PersistenceManagerWithRangeScan realPersistenceManager, ServerConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,115,this.realPersistenceManager = realPersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,116,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,120,public ReadAheadCache start() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,122,return this;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,131,public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,132,return realPersistenceManager.getSeqIdAfterSkipping(topic, seqId, skipAmount);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,135,public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotResponsibleForTopicException {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,136,return realPersistenceManager.getCurrentSeqIdForTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,148,public void persistMessage(PersistRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,153,PersistRequest newRequest = new PersistRequest(request.getTopic(), request.getMessage(),
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,154,persistCallbackInstance, request);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,155,realPersistenceManager.persistMessage(newRequest);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,170,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,171,PersistRequest originalRequest = (PersistRequest) ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,173,Object originalContext = originalRequest.getCtx();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,174,originalCallback.operationFailed(originalContext, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,183,PersistRequest originalRequest = (PersistRequest) ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,187,originalRequest.getCallback().operationFinished(originalRequest.getCtx(), resultOfOperation);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,191,Message messageWithLocalSeqId = MessageIdUtils.mergeLocalSeqId(originalRequest.getMessage(),
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,225,public void scanSingleMessage(ScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,236,public void deliveredUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,249,public void consumedUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,250,realPersistenceManager.consumedUntil(topic, seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,277,public void stop() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,291,protected RangeScanRequest doReadAhead(ScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,292,ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,293,Long seqId = request.getStartSeqId();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,295,int readAheadCount = cfg.getReadAheadCount();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,297,readAheadCount = Math.max(1, readAheadCount);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,299,RangeScanRequest readAheadRequest = doReadAheadStartingFrom(topic, seqId, readAheadCount);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,301,if (readAheadRequest != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,302,return readAheadRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,307,seqId = realPersistenceManager.getSeqIdAfterSkipping(topic, seqId, readAheadCount / 2);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,309,readAheadRequest = doReadAheadStartingFrom(topic, seqId, readAheadCount / 2);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,311,return readAheadRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,323,protected RangeScanRequest doReadAheadStartingFrom(ByteString topic, long seqId, int readAheadCount) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,325,long startSeqId = seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,326,Queue<CacheKey> installedStubs = new LinkedList<CacheKey>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,328,int i = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,330,for (; i < readAheadCount; i++) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,331,CacheKey cacheKey = new CacheKey(topic, seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,335,if (cache.containsKey(cacheKey)) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,336,break;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,338,CacheValue cacheValue = new CacheValue();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,344,installedStubs.add(cacheKey);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,346,seqId = realPersistenceManager.getSeqIdAfterSkipping(topic, seqId, 1);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,350,if (i == 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,352,return null;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,355,long readAheadSizeLimit = cfg.getReadAheadSizeBytes();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,356,ReadAheadScanCallback callback = new ReadAheadScanCallback(installedStubs, topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,357,RangeScanRequest rangeScanRequest = new RangeScanRequest(topic, startSeqId, i, readAheadSizeLimit, callback,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,358,null);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,360,return rangeScanRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,367,protected class ReadAheadScanCallback implements ScanCallback {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,368,Queue<CacheKey> installedStubs;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,369,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,378,public ReadAheadScanCallback(Queue<CacheKey> installedStubs, ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,379,this.installedStubs = installedStubs;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,380,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,383,public void messageScanned(Object ctx, Message message) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,387,CacheKey cacheKey = new CacheKey(topic, message.getMsgId().getLocalComponent());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,391,CacheKey expectedKey = installedStubs.peek();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,393,if (expectedKey == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,396,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,399,if (expectedKey.equals(cacheKey)) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,402,installedStubs.poll();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,403,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,410,logger.warn("Unexpected message seq-id: " + message.getMsgId().getLocalComponent() + " on topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,411,+ topic.toStringUtf8() + " from readahead scan, was expecting seq-id: " + expectedKey.seqId
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,412,+ " topic: " + expectedKey.topic.toStringUtf8() + " installedStubs: " + installedStubs);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,413,enqueueDeleteOfRemainingStubs(noSuchSeqIdExceptionInstance);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,417,public void scanFailed(Object ctx, Exception exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,418,enqueueDeleteOfRemainingStubs(exception);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,421,public void scanFinished(Object ctx, ReasonForFinish reason) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,428,if (reason != ReasonForFinish.NO_MORE_MESSAGES) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,429,enqueueDeleteOfRemainingStubs(readAheadExceptionInstance);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,433,private void enqueueDeleteOfRemainingStubs(Exception reason) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,434,CacheKey installedStub;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,435,while ((installedStub = installedStubs.poll()) != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,441,protected static class HashSetCacheKeyFactory implements Factory<Set<CacheKey>> {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,444,public Set<CacheKey> newInstance() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,445,return new HashSet<CacheKey>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,449,protected static class TreeSetLongFactory implements Factory<SortedSet<Long>> {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,452,public SortedSet<Long> newInstance() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,453,return new TreeSet<Long>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,471,CacheValue cacheValue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,473,if ((cacheValue = cache.get(cacheKey)) == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,474,cacheValue = new CacheValue();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,497,CacheValue cacheValue = cache.remove(cacheKey);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,499,if (cacheValue == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,500,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,561,protected class ExceptionOnCacheKey implements CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,562,CacheKey cacheKey;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,563,Exception exception;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,565,public ExceptionOnCacheKey(CacheKey cacheKey, Exception exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,566,this.cacheKey = cacheKey;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,567,this.exception = exception;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,577,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,578,removeMessageFromCache(cacheKey, exception,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,580,true,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,582,true);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,588,protected static class NoSuchSeqIdException extends Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,590,public NoSuchSeqIdException() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,591,super("No such seq-id");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,596,protected static class ReadAheadException extends Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,597,public ReadAheadException() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,598,super("Readahead failed");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,602,protected class ScanResponse implements CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,603,CacheKey cacheKey;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,604,Message message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,606,public ScanResponse(CacheKey cacheKey, Message message) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,607,this.cacheKey = cacheKey;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,608,this.message = message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,611,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,617,protected class DeliveredUntil implements CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,618,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,619,Long seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,621,public DeliveredUntil(ByteString topic, Long seqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,622,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,623,this.seqId = seqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,626,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,627,SortedSet<Long> orderedSeqIds = orderedIndexOnSeqId.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,628,if (orderedSeqIds == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,629,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,634,SortedSet<Long> headSet = orderedSeqIds.headSet(seqId + 1);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,636,for (Iterator<Long> iter = headSet.iterator(); iter.hasNext();) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,637,Long seqId = iter.next();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,638,CacheKey cacheKey = new CacheKey(topic, seqId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,646,removeMessageFromCache(cacheKey, readAheadExceptionInstance, //
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,648,true,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,650,false);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,651,iter.remove();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,654,if (orderedSeqIds.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,655,orderedIndexOnSeqId.remove(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,660,protected class ScanRequestWrapper implements CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,661,ScanRequest request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,663,public ScanRequestWrapper(ScanRequest request) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,664,this.request = request;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,677,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,679,RangeScanRequest readAheadRequest = doReadAhead(request);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,689,if (readAheadRequest != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,690,realPersistenceManager.scanMessages(readAheadRequest);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,20,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,22,public interface ScanCallback {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,24,enum ReasonForFinish {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,25,NO_MORE_MESSAGES, SIZE_LIMIT_EXCEEDED, NUM_MESSAGES_LIMIT_EXCEEDED
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,40,public void messageScanned(Object ctx, Message message);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,50,public abstract void scanFinished(Object ctx, ReasonForFinish reason);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallback.java,61,public abstract void scanFailed(Object ctx, Exception exception);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,20,public class ScanCallbackWithContext {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,21,ScanCallback scanCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,22,Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,24,public ScanCallbackWithContext(ScanCallback callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,25,this.scanCallback = callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,26,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,29,public ScanCallback getScanCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,30,return scanCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,33,public Object getCtx() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanCallbackWithContext.java,34,return ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,18,package org.apache.hedwig.server.persistence;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,21,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,35,public class ScanRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,36,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,37,long startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,38,ScanCallback callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,39,Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,41,public ScanRequest(ByteString topic, long startSeqId, ScanCallback callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,42,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,43,this.startSeqId = startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,44,this.callback = callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,45,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,48,public ByteString getTopic() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,49,return topic;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,52,public long getStartSeqId() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,53,return startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,56,public ScanCallback getCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,57,return callback;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,60,public Object getCtx() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ScanRequest.java,61,return ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,20,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,21,import java.util.LinkedList;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,22,import java.util.List;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,24,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,26,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,27,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,28,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,29,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,30,import org.apache.hedwig.exceptions.PubSubException.TopicBusyException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,31,import org.apache.hedwig.server.handlers.ChannelDisconnectListener;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,32,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,34,public class ChannelTracker implements ChannelDisconnectListener {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,35,HashMap<TopicSubscriber, Channel> topicSub2Channel = new HashMap<TopicSubscriber, Channel>();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,36,HashMap<Channel, List<TopicSubscriber>> channel2TopicSubs = new HashMap<Channel, List<TopicSubscriber>>();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,37,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,39,public ChannelTracker(Subscriber subscriber) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,40,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,43,static Callback<Void> noOpCallback = new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,44,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,47,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,51,public synchronized void channelDisconnected(Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,52,List<TopicSubscriber> topicSubs = channel2TopicSubs.remove(channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,54,if (topicSubs == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,55,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,58,for (TopicSubscriber topicSub : topicSubs) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,59,topicSub2Channel.remove(topicSub);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,60,subscriber.asyncCloseSubscription(topicSub.getTopic(), topicSub.getSubscriberId(), noOpCallback, null);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,65,throws TopicBusyException {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,67,if (!channel.isConnected()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,70,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,73,if (topicSub2Channel.containsKey(topicSubscriber)) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,74,TopicBusyException pse = new PubSubException.TopicBusyException(
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,76,throw pse;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,79,topicSub2Channel.put(topicSubscriber, channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,81,List<TopicSubscriber> topicSubs = channel2TopicSubs.get(channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,83,if (topicSubs == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,84,topicSubs = new LinkedList<TopicSubscriber>();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,85,channel2TopicSubs.put(channel, topicSubs);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,87,topicSubs.add(topicSubscriber);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,92,TopicSubscriber topicSub = new TopicSubscriber(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,94,Channel channel = topicSub2Channel.remove(topicSub);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,96,if (channel != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,97,List<TopicSubscriber> topicSubs = channel2TopicSubs.get(channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,98,if (topicSubs != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,99,topicSubs.remove(topicSub);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,105,throws PubSubException {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,106,Channel subscribedChannel = getChannel(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,108,if (subscribedChannel == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,109,throw new PubSubException.ClientNotSubscribedException(
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,113,if (subscribedChannel != channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,114,throw new PubSubException.TopicBusyException(
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,120,public synchronized Channel getChannel(ByteString topic, ByteString subscriberId) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ChannelTracker.java,121,return topicSub2Channel.get(new TopicSubscriber(topic, subscriberId));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,20,import java.io.File;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,21,import java.lang.Thread.UncaughtExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,22,import java.net.InetSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,23,import java.net.MalformedURLException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,24,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,25,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,26,import java.util.concurrent.Executors;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,27,import java.util.concurrent.LinkedBlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,28,import org.apache.commons.configuration.ConfigurationException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,29,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,30,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,31,import org.jboss.netty.bootstrap.ServerBootstrap;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,32,import org.jboss.netty.channel.group.ChannelGroup;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,33,import org.jboss.netty.channel.group.DefaultChannelGroup;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,34,import org.jboss.netty.channel.socket.ServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,35,import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,36,import org.jboss.netty.logging.InternalLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,37,import org.jboss.netty.logging.Log4JLoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,39,import org.apache.hedwig.client.HedwigClient;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,40,import org.apache.hedwig.protocol.PubSubProtocol.OperationType;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,41,import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,42,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,43,import org.apache.hedwig.server.netty.PubSubServer;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,44,import org.apache.hedwig.server.netty.PubSubServerPipelineFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,45,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,47,public class HedwigProxy {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,50,HedwigClient client;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,51,ServerSocketChannelFactory serverSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,52,ChannelGroup allChannels;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,53,Map<OperationType, Handler> handlers;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,54,ProxyConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,58,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,62,public void uncaughtException(Thread t, Throwable e) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,63,exceptionHandler.uncaughtException(t, e);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,67,final LinkedBlockingQueue<Boolean> queue = new LinkedBlockingQueue<Boolean>();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,69,new Thread(tg, new Runnable() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,71,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,72,client = new HedwigClient(cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,76,initializeHandlers();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,77,initializeNetty();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,79,queue.offer(true);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,83,queue.take();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,90,protected void initializeHandlers() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,91,handlers = new HashMap<OperationType, Handler>();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,94,handlers.put(OperationType.PUBLISH, new ProxyPublishHander(client.getPublisher()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,95,handlers.put(OperationType.SUBSCRIBE, new ProxySubscribeHandler(client.getSubscriber(), tracker));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,96,handlers.put(OperationType.UNSUBSCRIBE, new ProxyUnsubscribeHandler(client.getSubscriber(), tracker));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,97,handlers.put(OperationType.CONSUME, new ProxyConsumeHandler(client.getSubscriber()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,98,handlers.put(OperationType.STOP_DELIVERY, new ProxyStopDeliveryHandler(client.getSubscriber(), tracker));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,99,handlers.put(OperationType.START_DELIVERY, new ProxyStartDeliveryHandler(client.getSubscriber(), tracker));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,103,protected void initializeNetty() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,104,InternalLoggerFactory.setDefaultFactory(new Log4JLoggerFactory());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,105,allChannels = new DefaultChannelGroup("hedwigproxy");
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,106,ServerBootstrap bootstrap = new ServerBootstrap(serverSocketChannelFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,108,PubSubServerPipelineFactory pipeline = new PubSubServerPipelineFactory(umbrellaHandler, null, cfg
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,109,.getMaximumMessageSize());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,111,bootstrap.setPipelineFactory(pipeline);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,112,bootstrap.setOption("child.tcpNoDelay", true);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,113,bootstrap.setOption("child.keepAlive", true);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,114,bootstrap.setOption("reuseAddress", true);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,117,allChannels.add(bootstrap.bind(new InetSocketAddress(cfg.getProxyPort())));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,118,logger.info("Going into receive loop");
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,121,public void shutdown() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,122,allChannels.close().awaitUninterruptibly();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,123,client.close();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,124,serverSocketChannelFactory.releaseExternalResources();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,129,public Handler getStartDeliveryHandler() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,130,return handlers.get(OperationType.START_DELIVERY);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,136,public static void main(String[] args) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,138,logger.info("Attempting to start Hedwig Proxy");
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,139,ProxyConfiguration conf = new ProxyConfiguration();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,140,if (args.length > 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,141,String confFile = args[0];
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,142,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,143,conf.loadConf(new File(confFile).toURI().toURL());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,145,String msg = "Could not open configuration file: " + confFile;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,146,PubSubServer.errorMsgAndExit(msg, e, PubSubServer.RC_INVALID_CONF_FILE);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,148,String msg = "Malformed configuration file: " + confFile;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,149,PubSubServer.errorMsgAndExit(msg, e, PubSubServer.RC_MISCONFIGURED);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,151,logger.info("Using configuration file " + confFile);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,153,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java,156,PubSubServer.errorMsgAndExit("Error during startup", t, PubSubServer.RC_OTHER);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,20,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,22,public class ProxyConfiguration extends ClientConfiguration {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,27,public int getProxyPort() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,28,return conf.getInt(PROXY_PORT, 9099);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java,32,public int getMaximumMessageSize() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,20,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,24,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,25,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,26,import org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,27,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,28,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,29,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,31,public class ProxyConsumeHandler implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,35,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,37,public ProxyConsumeHandler(Subscriber subscriber) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,38,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,42,public void handleRequest(PubSubRequest request, Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,43,if (!request.hasConsumeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,44,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,46,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,49,ConsumeRequest consumeRequest = request.getConsumeRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,50,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,51,subscriber.consume(request.getTopic(), consumeRequest.getSubscriberId(), consumeRequest.getMsgId());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java,54,logger.warn("Unexpected consume request", e);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,22,import org.apache.hedwig.client.api.Publisher;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,23,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,24,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,25,import org.apache.hedwig.protocol.PubSubProtocol.PublishRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,26,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,27,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,28,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,29,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,31,public class ProxyPublishHander implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,32,Publisher publisher;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,34,public ProxyPublishHander(Publisher publisher) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,35,this.publisher = publisher;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,39,public void handleRequest(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,40,if (!request.hasPublishRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,41,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,43,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,46,final PublishRequest publishRequest = request.getPublishRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,48,publisher.asyncPublish(request.getTopic(), publishRequest.getMsg(), new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,50,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,51,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,55,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyPublishHander.java,56,channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,20,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,23,import org.jboss.netty.channel.ChannelFuture;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,24,import org.jboss.netty.channel.ChannelFutureListener;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,26,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,27,import org.apache.hedwig.client.api.MessageHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,28,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,29,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,30,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,31,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,32,import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,33,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,34,import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,35,import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,36,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,37,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,38,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,39,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,41,public class ProxyStartDeliveryHandler implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,45,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,46,ChannelTracker tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,48,public ProxyStartDeliveryHandler(Subscriber subscriber, ChannelTracker tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,49,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,50,this.tracker = tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,54,public void handleRequest(PubSubRequest request, Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,56,if (!request.hasStartDeliveryRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,57,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,59,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,62,final ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,63,final ByteString subscriberId = request.getStartDeliveryRequest().getSubscriberId();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,65,synchronized (tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,74,final Channel subscribedChannel = tracker.getChannel(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,76,if (subscribedChannel == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,77,channel.write(PubSubResponseUtils.getResponseForException(
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,78,new PubSubException.ClientNotSubscribedException("no subscription to start delivery on"),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,79,request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,80,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,83,MessageHandler handler = new MessageHandler() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,85,public void deliver(ByteString topic, ByteString subscriberId, Message msg,
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,86,final Callback<Void> callback, final Object context) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,88,PubSubResponse response = PubSubResponse.newBuilder().setProtocolVersion(
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,90,.setTopic(topic).setSubscriberId(subscriberId).build();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,92,ChannelFuture future = subscribedChannel.write(response);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,94,future.addListener(new ChannelFutureListener() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,96,public void operationComplete(ChannelFuture future) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,97,if (!future.isSuccess()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,102,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,107,callback.operationFinished(context, null);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,113,channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,115,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,116,subscriber.startDelivery(topic, subscriberId, handler);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,120,logger.error("Unexpected: No subscription when attempting to start delivery", e);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java,121,throw new RuntimeException(e);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,20,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,24,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,25,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,26,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,27,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,28,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,29,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,30,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,32,public class ProxyStopDeliveryHandler implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,36,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,37,ChannelTracker tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,39,public ProxyStopDeliveryHandler(Subscriber subscriber, ChannelTracker tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,40,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,41,this.tracker = tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,45,public void handleRequest(PubSubRequest request, Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,46,if (!request.hasStopDeliveryRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,47,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,49,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,52,final ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,55,synchronized (tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,56,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,57,tracker.checkChannelMatches(topic, subscriberId, channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,61,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,64,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,65,subscriber.stopDelivery(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java,69,logger.warn("Unexpected: No subscription when attempting to stop delivery", e);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,20,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,21,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,22,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,23,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,24,import org.apache.hedwig.client.data.TopicSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,25,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,26,import org.apache.hedwig.exceptions.PubSubException.TopicBusyException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,27,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,28,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,29,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,30,import org.apache.hedwig.server.handlers.ChannelDisconnectListener;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,31,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,32,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,33,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,35,public class ProxySubscribeHandler implements Handler, ChannelDisconnectListener {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,39,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,40,ChannelTracker tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,42,public ProxySubscribeHandler(Subscriber subscriber, ChannelTracker tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,43,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,44,this.tracker = tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,48,public void channelDisconnected(Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,49,tracker.channelDisconnected(channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,53,public void handleRequest(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,54,if (!request.hasSubscribeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,55,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,57,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,60,SubscribeRequest subRequest = request.getSubscribeRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,61,final TopicSubscriber topicSubscriber = new TopicSubscriber(request.getTopic(), subRequest.getSubscriberId());
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,66,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,67,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,71,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,72,try {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,73,tracker.subscribeSucceeded(topicSubscriber, channel);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,75,channel.write(PubSubResponseUtils.getResponseForException(e, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,76,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,78,channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,18,package org.apache.hedwig.server.proxy;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,20,import org.jboss.netty.channel.Channel;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,22,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,23,import org.apache.hedwig.client.api.Subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,24,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,25,import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,26,import org.apache.hedwig.protoextensions.PubSubResponseUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,27,import org.apache.hedwig.server.handlers.Handler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,28,import org.apache.hedwig.server.netty.UmbrellaHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,29,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,31,public class ProxyUnsubscribeHandler implements Handler {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,33,Subscriber subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,34,ChannelTracker tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,36,public ProxyUnsubscribeHandler(Subscriber subscriber, ChannelTracker tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,37,this.subscriber = subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,38,this.tracker = tracker;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,42,public void handleRequest(final PubSubRequest request, final Channel channel) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,43,if (!request.hasUnsubscribeRequest()) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,44,UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,46,return;
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,49,ByteString topic = request.getTopic();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,50,ByteString subscriberId = request.getUnsubscribeRequest().getSubscriberId();
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,52,synchronized (tracker) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,57,tracker.aboutToUnsubscribe(topic, subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,59,subscriber.asyncUnsubscribe(topic, subscriberId, new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,61,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,62,channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,66,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyUnsubscribeHandler.java,67,channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,18,package org.apache.hedwig.server.regions;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,20,import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,22,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,23,import org.apache.hedwig.client.netty.HedwigClientImpl;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,31,public class HedwigHubClient extends HedwigClientImpl {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,34,public HedwigHubClient(ClientConfiguration cfg, ClientSocketChannelFactory channelFactory) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,35,super(cfg, channelFactory);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,37,setSubscriber(new HedwigHubSubscriber(this));
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,42,public HedwigHubClient(ClientConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,43,super(cfg);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java,45,setSubscriber(new HedwigHubSubscriber(this));
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,18,package org.apache.hedwig.server.regions;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,20,import org.jboss.netty.channel.socket.ClientSocketChannelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,22,import org.apache.hedwig.client.conf.ClientConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,23,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,24,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,26,public class HedwigHubClientFactory {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,28,private final ServerConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,29,private final ClientSocketChannelFactory channelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,34,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,35,this.channelFactory = channelFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,45,HedwigHubClient create(final HedwigSocketAddress hub) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,49,protected HedwigSocketAddress getDefaultServerHedwigSocketAddress() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,50,return hub;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,54,public boolean isSSLEnabled() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,18,package org.apache.hedwig.server.regions;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,21,import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,22,import org.apache.hedwig.client.netty.HedwigClientImpl;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,23,import org.apache.hedwig.client.netty.HedwigSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,24,import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,25,import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,26,import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,27,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,28,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,29,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,39,public class HedwigHubSubscriber extends HedwigSubscriber {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,41,public HedwigHubSubscriber(HedwigClientImpl client) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,42,super(client);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,47,throws CouldNotConnectException, ClientAlreadySubscribedException, ServiceDownException,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,48,InvalidSubscriberIdException {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,53,public void asyncSubscribe(ByteString topic, ByteString subscriberId, CreateOrAttach mode, Callback<Void> callback,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,54,Object context) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,59,public void unsubscribe(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,60,ClientNotSubscribedException, ServiceDownException, InvalidSubscriberIdException {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,61,unsubscribe(topic, subscriberId, true);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,65,public void asyncUnsubscribe(final ByteString topic, final ByteString subscriberId, final Callback<Void> callback,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,66,final Object context) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java,67,asyncUnsubscribe(topic, subscriberId, callback, context, true);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,18,package org.apache.hedwig.server.regions;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,20,import java.util.ArrayList;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,21,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,25,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,26,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,27,import org.apache.zookeeper.ZooKeeper;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,29,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,30,import org.apache.hedwig.client.api.MessageHandler;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,31,import org.apache.hedwig.client.netty.HedwigSubscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,32,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,33,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,34,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,35,import org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,36,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,37,import org.apache.hedwig.protoextensions.SubscriptionStateUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,38,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,39,import org.apache.hedwig.server.common.TopicOpQueuer;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,40,import org.apache.hedwig.server.persistence.PersistRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,41,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,42,import org.apache.hedwig.server.subscriptions.SubscriptionEventListener;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,43,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,44,import org.apache.hedwig.util.CallbackUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,45,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,47,public class RegionManager implements SubscriptionEventListener {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,49,protected static final Logger LOGGER = LoggerFactory.getLogger(RegionManager.class);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,51,private final ByteString mySubId;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,52,private final PersistenceManager pm;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,53,private final ArrayList<HedwigHubClient> clients = new ArrayList<HedwigHubClient>();
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,54,private final TopicOpQueuer queue;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,56,public RegionManager(final PersistenceManager pm, final ServerConfiguration cfg, final ZooKeeper zk,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,57,ScheduledExecutorService scheduler, HedwigHubClientFactory hubClientFactory) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,58,this.pm = pm;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,59,mySubId = ByteString.copyFromUtf8(SubscriptionStateUtils.HUB_SUBSCRIBER_PREFIX + cfg.getMyRegion());
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,60,queue = new TopicOpQueuer(scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,61,for (final String hub : cfg.getRegions()) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,62,clients.add(hubClientFactory.create(new HedwigSocketAddress(hub)));
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,67,public void onFirstLocalSubscribe(final ByteString topic, final boolean synchronous, final Callback<Void> cb) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,71,queue.pushAndMaybeRun(topic, queue.new AsynchronousOp<Void>(topic, cb, null) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,73,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,74,Callback<Void> postCb = synchronous ? cb : CallbackUtils.logger(LOGGER,
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,77,final Callback<Void> mcb = CallbackUtils.multiCallback(clients.size(), postCb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,78,for (final HedwigHubClient client : clients) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,141,cb.operationFinished(null, null);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,148,public void onLastLocalUnsubscribe(final ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,151,queue.pushAndMaybeRun(topic, queue.new AsynchronousOp<Void>(topic, new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,154,public void operationFinished(Object ctx, Void result) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,160,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,167,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,168,Callback<Void> mcb = CallbackUtils.multiCallback(clients.size(), cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,169,for (final HedwigHubClient client : clients) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,177,public void stop() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,178,for (HedwigHubClient client : clients) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java,179,client.close();
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,18,package org.apache.hedwig.server.ssl;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,20,import java.security.KeyStore;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,22,import javax.net.ssl.KeyManagerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,23,import javax.net.ssl.SSLContext;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,25,import org.apache.hedwig.client.ssl.SslContextFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,26,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,28,public class SslServerContextFactory extends SslContextFactory {
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,30,public SslServerContextFactory(ServerConfiguration cfg) {
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,31,try {
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,33,KeyStore ks = KeyStore.getInstance("pkcs12");
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,34,ks.load(cfg.getCertStream(), cfg.getPassword().toCharArray());
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,37,KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,38,kmf.init(ks, cfg.getPassword().toCharArray());
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,41,ctx = SSLContext.getInstance("TLS");
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,42,ctx.init(kmf.getKeyManagers(), getTrustManagers(), null);
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,44,throw new RuntimeException(ex);
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,49,protected boolean isClient() {
hedwig-server/src/main/java/org/apache/hedwig/server/ssl/SslServerContextFactory.java,50,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,20,import java.util.ArrayList;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,21,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,22,import java.util.Timer;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,23,import java.util.TimerTask;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,24,import java.util.concurrent.ConcurrentHashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,25,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,28,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,29,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,31,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,32,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,33,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,34,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,35,import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,36,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,37,import org.apache.hedwig.protoextensions.MessageIdUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,38,import org.apache.hedwig.protoextensions.SubscriptionStateUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,39,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,40,import org.apache.hedwig.server.common.TopicOpQueuer;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,41,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,42,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,43,import org.apache.hedwig.server.topics.TopicOwnershipChangeListener;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,44,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,45,import org.apache.hedwig.util.CallbackUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,47,public abstract class AbstractSubscriptionManager implements SubscriptionManager, TopicOwnershipChangeListener {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,54,private final ArrayList<SubscriptionEventListener> listeners = new ArrayList<SubscriptionEventListener>();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,59,private final PersistenceManager pm;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,64,private final Timer timer = new Timer(true);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,67,private final ConcurrentHashMap<ByteString, Long> topic2MinConsumedMessagesMap = new ConcurrentHashMap<ByteString, Long>();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,70,ScheduledExecutorService scheduler) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,71,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,72,queuer = new TopicOpQueuer(scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,73,tm.addTopicOwnershipChangeListener(this);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,74,this.pm = pm;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,77,if (pm != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,78,timer.schedule(new MessagesConsumedTask(), 0, cfg.getMessagesConsumedThreadRunInterval());
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,88,class MessagesConsumedTask extends TimerTask {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,93,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,96,for (ByteString topic : top2sub2seq.keySet()) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,97,final Map<ByteString, InMemorySubscriptionState> topicSubscriptions = top2sub2seq.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,98,long minConsumedMessage = Long.MAX_VALUE;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,104,for (InMemorySubscriptionState curSubscription : topicSubscriptions.values()) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,108,boolean callPersistenceManager = true;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,126,private class AcquireOp extends TopicOpQueuer.AsynchronousOp<Void> {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,127,public AcquireOp(ByteString topic, Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,128,queuer.super(topic, callback, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,132,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,133,if (top2sub2seq.containsKey(topic)) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,134,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,137,readSubscriptions(topic, new Callback<Map<ByteString, InMemorySubscriptionState>>() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,139,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,140,cb.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,144,public void operationFinished(final Object ctx,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,145,final Map<ByteString, InMemorySubscriptionState> resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,162,final Callback<Void> cb2 = new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,165,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,166,logger.error("Subscription manager failed to acquired topic " + topic.toStringUtf8(),
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,167,exception);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,168,cb.operationFailed(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,172,public void operationFinished(Object ctx, Void voidObj) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,173,top2sub2seq.put(topic, resultOfOperation);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,174,logger.info("Subscription manager successfully acquired topic: " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,175,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,184,cb2.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,195,Callback<Void> mcb = CallbackUtils.multiCallback(listeners.size(), cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,196,for (SubscriptionEventListener listener : listeners) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,197,listener.onFirstLocalSubscribe(topic, synchronous, mcb);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,211,public void acquiredTopic(final ByteString topic, final Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,212,queuer.pushAndMaybeRun(topic, new AcquireOp(topic, callback, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,219,public void lostTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,229,listener.onLastLocalUnsubscribe(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,232,protected abstract void readSubscriptions(final ByteString topic,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,233,final Callback<Map<ByteString, InMemorySubscriptionState>> cb, final Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,236,SubscribeRequest subRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,237,MessageSeqId consumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,239,public SubscribeOp(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,241,queuer.super(topic, callback, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,242,this.subRequest = subRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,243,this.consumeSeqId = consumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,247,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,249,final Map<ByteString, InMemorySubscriptionState> topicSubscriptions = top2sub2seq.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,250,if (topicSubscriptions == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,251,cb.operationFailed(ctx, new PubSubException.ServerNotResponsibleForTopicException(""));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,252,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,255,final ByteString subscriberId = subRequest.getSubscriberId();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,257,CreateOrAttach createOrAttach = subRequest.getCreateOrAttach();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,259,if (subscriptionState != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,261,if (createOrAttach.equals(CreateOrAttach.CREATE)) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,263,+ " requested creating a subscription but it is already subscribed with state: "
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,264,+ SubscriptionStateUtils.toString(subscriptionState.getSubscriptionState());
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,266,cb.operationFailed(ctx, new PubSubException.ClientAlreadySubscribedException(msg));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,267,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,271,if (logger.isDebugEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,273,+ " attaching to subscription with state: "
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,278,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,282,if (createOrAttach.equals(CreateOrAttach.ATTACH)) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,284,+ " requested attaching to an existing subscription but it is not subscribed";
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,286,cb.operationFailed(ctx, new PubSubException.ClientNotSubscribedException(msg));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,287,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,294,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,295,cb.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,300,Callback<Void> cb2 = new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,304,logger.error("subscription for subscriber " + subscriberId.toStringUtf8() + " to topic "
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,305,+ topic.toStringUtf8() + " failed due to failed listener callback", exception);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,310,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,320,else
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,328,public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,330,queuer.pushAndMaybeRun(topic, new SubscribeOp(topic, subRequest, consumeSeqId, callback, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,333,private class ConsumeOp extends TopicOpQueuer.AsynchronousOp<Void> {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,334,ByteString subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,335,MessageSeqId consumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,337,public ConsumeOp(ByteString topic, ByteString subscriberId, MessageSeqId consumeSeqId, Callback<Void> callback,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,338,Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,339,queuer.super(topic, callback, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,340,this.subscriberId = subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,341,this.consumeSeqId = consumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,345,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,346,Map<ByteString, InMemorySubscriptionState> topicSubs = top2sub2seq.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,347,if (topicSubs == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,348,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,349,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,353,if (subState == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,354,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,355,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,358,if (subState.setLastConsumeSeqId(consumeSeqId, cfg.getConsumeInterval())) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,361,if (logger.isDebugEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,362,logger.debug("Only advanced consume pointer in memory, will persist later, topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,365,+ " in-memory consume-id: "
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,366,+ MessageIdUtils.msgIdToReadableString(subState.getLastConsumeSeqId()));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,368,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,375,public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriberId, MessageSeqId consumeSeqId,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,376,Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,377,queuer.pushAndMaybeRun(topic, new ConsumeOp(topic, subscriberId, consumeSeqId, callback, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,380,private class UnsubscribeOp extends TopicOpQueuer.AsynchronousOp<Void> {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,381,ByteString subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,383,public UnsubscribeOp(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,384,queuer.super(topic, callback, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,385,this.subscriberId = subscriberId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,389,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,390,final Map<ByteString, InMemorySubscriptionState> topicSubscriptions = top2sub2seq.get(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,391,if (topicSubscriptions == null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,392,cb.operationFailed(ctx, new PubSubException.ServerNotResponsibleForTopicException(""));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,393,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,396,if (!topicSubscriptions.containsKey(subscriberId)) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,397,cb.operationFailed(ctx, new PubSubException.ClientNotSubscribedException(""));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,398,return;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,403,public void operationFailed(Object ctx, PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,404,cb.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,408,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,409,topicSubscriptions.remove(subscriberId);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,414,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,423,public void unsubscribe(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,424,queuer.pushAndMaybeRun(topic, new UnsubscribeOp(topic, subscriberId, callback, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,431,public void addListener(SubscriptionEventListener listener) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,432,listeners.add(listener);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,439,public void stop() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,440,timer.cancel();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,450,Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,21,import org.apache.hedwig.protocol.PubSubProtocol.Message;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,25,ByteString subscriberRegion;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,31,public boolean testMessage(Message message) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,33,return false;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java,35,return true;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,20,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,21,import java.util.concurrent.ConcurrentHashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,22,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,24,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,26,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,27,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,28,import org.apache.hedwig.server.topics.TopicManager;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,29,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,31,public class InMemorySubscriptionManager extends AbstractSubscriptionManager {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,41,callback.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,48,callback.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,55,callback.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,59,public void lostTopic(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,64,protected void readSubscriptions(ByteString topic,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,65,Callback<Map<ByteString, InMemorySubscriptionState>> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,70,if (topicSubs != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,71,cb.operationFinished(ctx, topicSubs);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,73,cb.operationFinished(ctx, new ConcurrentHashMap<ByteString, InMemorySubscriptionState>());
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,20,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,21,import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,23,public class InMemorySubscriptionState {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,24,SubscriptionState subscriptionState;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,25,MessageSeqId lastConsumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,29,this.lastConsumeSeqId = lastConsumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,36,public SubscriptionState getSubscriptionState() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,37,return subscriptionState;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,40,public MessageSeqId getLastConsumeSeqId() {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,41,return lastConsumeSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,53,public boolean setLastConsumeSeqId(MessageSeqId lastConsumeSeqId, int consumeInterval) {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,60,subscriptionState = SubscriptionState.newBuilder(subscriptionState).setMsgId(lastConsumeSeqId).build();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java,61,return true;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,21,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,27,public interface SubscriptionEventListener {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,45,public void onFirstLocalSubscribe(ByteString topic, boolean synchronous, Callback<Void> cb);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionEventListener.java,55,public void onLastLocalUnsubscribe(ByteString topic);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,18,package org.apache.hedwig.server.subscriptions;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,21,import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,22,import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,23,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,28,public interface SubscriptionManager {
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,50,public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,63,public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriberId, MessageSeqId consumeSeqId,
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,64,Callback<Void> callback, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,72,public void unsubscribe(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java,102,public void addListener(SubscriptionEventListener listener);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,18,package org.apache.hedwig.server.topics;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,20,import java.net.UnknownHostException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,21,import java.util.ArrayList;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,22,import java.util.Collections;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,25,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,26,import java.util.concurrent.TimeUnit;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,39,public abstract class AbstractTopicManager implements TopicManager {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,43,protected HedwigSocketAddress addr;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,48,protected ArrayList<TopicOwnershipChangeListener> listeners = new ArrayList<TopicOwnershipChangeListener>();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,55,protected TopicOpQueuer queuer;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,56,protected ServerConfiguration cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,57,protected ScheduledExecutorService scheduler;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,59,private static final Logger logger = LoggerFactory.getLogger(AbstractTopicManager.class);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,61,private class GetOwnerOp extends TopicOpQueuer.AsynchronousOp<HedwigSocketAddress> {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,62,public boolean shouldClaim;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,64,public GetOwnerOp(final ByteString topic, boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,65,final Callback<HedwigSocketAddress> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,66,queuer.super(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,67,this.shouldClaim = shouldClaim;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,71,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,72,realGetOwner(topic, shouldClaim, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,76,private class ReleaseOp extends TopicOpQueuer.AsynchronousOp<Void> {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,77,public ReleaseOp(ByteString topic, Callback<Void> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,78,queuer.super(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,82,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,87,realReleaseTopic(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,92,throws UnknownHostException {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,93,this.cfg = cfg;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,94,this.queuer = new TopicOpQueuer(scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,95,this.scheduler = scheduler;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,96,addr = cfg.getServerAddr();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,100,public synchronized void addTopicOwnershipChangeListener(TopicOwnershipChangeListener listener) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,101,listeners.add(listener);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,104,protected final synchronized void notifyListenersAndAddToOwnedTopics(final ByteString topic,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,105,final Callback<HedwigSocketAddress> originalCallback, final Object originalContext) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,107,Callback<Void> postCb = new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,110,public void operationFinished(Object ctx, Void resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,112,if (cfg.getRetentionSecs() > 0) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,113,scheduler.schedule(new Runnable() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,115,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,135,originalCallback.operationFinished(originalContext, addr);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,139,public void operationFailed(final Object ctx, final PubSubException exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,141,Callback<Void> cb = new Callback<Void>() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,142,public void operationFinished(Object _ctx, Void _resultOfOperation) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,143,originalCallback.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,145,public void operationFailed(Object _ctx, PubSubException _exception) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,146,logger.error("Exception releasing topic", _exception);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,147,originalCallback.operationFailed(ctx, exception);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,151,realReleaseTopic(topic, cb, originalContext);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,155,Callback<Void> mcb = CallbackUtils.multiCallback(listeners.size(), postCb, null);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,156,for (TopicOwnershipChangeListener listener : listeners) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,157,listener.acquiredTopic(topic, mcb, null);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,161,private void realReleaseTopic(ByteString topic, Callback<Void> callback, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,163,listener.lostTopic(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,165,postReleaseCleanup(topic, callback, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,169,public final void getOwner(ByteString topic, boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,170,Callback<HedwigSocketAddress> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,171,queuer.pushAndMaybeRun(topic, new GetOwnerOp(topic, shouldClaim, cb, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,175,public final void releaseTopic(ByteString topic, Callback<Void> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,176,queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, cb, ctx));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,188,protected abstract void realGetOwner(ByteString topic, boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,189,Callback<HedwigSocketAddress> cb, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,195,protected abstract void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,18,package org.apache.hedwig.server.topics;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,21,import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,22,import org.apache.hedwig.server.persistence.PersistenceManager;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,23,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,24,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,36,public interface TopicManager {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,48,public void getOwner(ByteString topic, boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,49,Callback<HedwigSocketAddress> cb, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,65,public void addTopicOwnershipChangeListener(TopicOwnershipChangeListener listener);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java,73,public void releaseTopic(ByteString topic, Callback<Void> cb, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,18,package org.apache.hedwig.server.topics;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,20,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,21,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,23,public interface TopicOwnershipChangeListener {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,25,public void acquiredTopic(ByteString topic, Callback<Void> callback, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicOwnershipChangeListener.java,27,public void lostTopic(ByteString topic);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,18,package org.apache.hedwig.server.topics;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,20,import java.net.UnknownHostException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,21,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,23,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,24,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,25,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,26,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,28,public class TrivialOwnAllTopicManager extends AbstractTopicManager {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,31,throws UnknownHostException {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,32,super(cfg, scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,36,protected void realGetOwner(ByteString topic, boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,37,Callback<HedwigSocketAddress> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,40,cb.operationFinished(ctx, addr);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,41,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,44,notifyListenersAndAddToOwnedTopics(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,48,protected void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java,50,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,18,package org.apache.hedwig.server.topics;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,20,import java.net.UnknownHostException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,23,import java.util.concurrent.ScheduledExecutorService;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,24,import java.util.concurrent.SynchronousQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,26,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,27,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,28,import org.apache.zookeeper.CreateMode;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,29,import org.apache.zookeeper.KeeperException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,34,import org.apache.zookeeper.ZooDefs.Ids;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,35,import org.apache.zookeeper.data.Stat;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,37,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,38,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,39,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,40,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,41,import org.apache.hedwig.util.ConcurrencyUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,42,import org.apache.hedwig.util.Either;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,43,import org.apache.hedwig.util.HedwigSocketAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,44,import org.apache.hedwig.zookeeper.SafeAsyncZKCallback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,45,import org.apache.hedwig.zookeeper.ZkUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,53,public class ZkTopicManager extends AbstractTopicManager implements TopicManager {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,61,private ZooKeeper zk;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,75,protected volatile boolean isSuspended = false;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,83,throws UnknownHostException, PubSubException {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,85,super(cfg, scheduler);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,86,this.zk = zk;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,128,if (pse != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,129,throw pse;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,173,String hubPath(ByteString topic) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,174,return cfg.getZkTopicPath(new StringBuilder(), topic).append("/hub").toString();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,178,protected void realGetOwner(final ByteString topic, final boolean shouldClaim,
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,179,final Callback<HedwigSocketAddress> cb, final Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,182,if (isSuspended) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,183,cb.operationFailed(ctx, new PubSubException.ServiceDownException(
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,185,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,189,cb.operationFinished(ctx, addr);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,190,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,193,new ZkGetOwnerOp(topic, shouldClaim, cb, ctx).read();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,197,class ZkGetOwnerOp {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,198,ByteString topic;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,199,boolean shouldClaim;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,200,Callback<HedwigSocketAddress> cb;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,201,Object ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,202,String hubPath;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,204,public ZkGetOwnerOp(ByteString topic, boolean shouldClaim, Callback<HedwigSocketAddress> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,205,this.topic = topic;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,206,this.shouldClaim = shouldClaim;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,207,this.cb = cb;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,208,this.ctx = ctx;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,209,hubPath = hubPath(topic);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,213,public void choose() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,281,public void claimOrChoose() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,283,claim();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,284,else
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,285,choose();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,288,public void read() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,289,zk.getData(hubPath, false, new SafeAsyncZKCallback.DataCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,291,public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat stat) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,293,if (rc == Code.NONODE.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,294,claimOrChoose();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,295,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,298,if (rc != Code.OK.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,299,KeeperException e = ZkUtils.logErrorAndCreateZKException("Could not read ownership for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,300,+ topic.toStringUtf8(), path, rc);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,301,cb.operationFailed(ctx, new PubSubException.ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,302,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,321,zk.delete(hubPath, stat.getVersion(), new VoidCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,323,public void processResult(int rc, String path, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,324,if (Code.OK.intValue() == rc || Code.NONODE.intValue() == rc) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,325,claimOrChoose();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,327,KeeperException e = ZkUtils.logErrorAndCreateZKException(
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,329,cb.operationFailed(ctx, new PubSubException.ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,337,public void claim() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,338,if (logger.isDebugEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,339,logger.debug("claiming topic: " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,346,public void safeProcessResult(int rc, String path, Object ctx, String name) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,347,if (rc == Code.OK.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,348,if (logger.isDebugEnabled()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,349,logger.debug("claimed topic: " + topic.toStringUtf8());
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,351,notifyListenersAndAddToOwnedTopics(topic, cb, ctx);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,354,read();
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,356,KeeperException e = ZkUtils.logErrorAndCreateZKException(
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,358,+ topic.toStringUtf8(), path, rc);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,359,cb.operationFailed(ctx, new PubSubException.ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,382,protected void postReleaseCleanup(final ByteString topic, final Callback<Void> cb, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,384,zk.getData(hubPath(topic), false, new SafeAsyncZKCallback.DataCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,386,public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat stat) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,387,if (rc == Code.NONODE.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,390,logger.warn("While deleting self-node for topic: " + topic.toStringUtf8() + ", node not found");
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,391,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,392,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,395,if (rc != Code.OK.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,396,KeeperException e = ZkUtils.logErrorAndCreateZKException(
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,398,cb.operationFailed(ctx, new PubSubException.ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,399,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,407,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,408,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,411,zk.delete(path, stat.getVersion(), new SafeAsyncZKCallback.VoidCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,413,public void safeProcessResult(int rc, String path, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,414,if (rc != Code.OK.intValue() && rc != Code.NONODE.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,415,KeeperException e = ZkUtils
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,416,.logErrorAndCreateZKException("Failed to delete self-ownership node for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,417,+ topic.toStringUtf8(), path, rc);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,418,cb.operationFailed(ctx, new PubSubException.ServiceDownException(e));
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,419,return;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,422,cb.operationFinished(ctx, null);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,18,package org.apache.hedwig.zookeeper;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,20,import java.util.Enumeration;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,22,import org.apache.bookkeeper.client.AsyncCallback;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,23,import org.apache.bookkeeper.client.LedgerEntry;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,24,import org.apache.bookkeeper.client.LedgerHandle;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,27,public class SafeAsynBKCallback extends SafeAsyncCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,29,public static abstract class OpenCallback implements AsyncCallback.OpenCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,31,public void openComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,32,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,33,safeOpenComplete(rc, ledgerHandle, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,35,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,39,public abstract void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,43,public static abstract class CloseCallback implements AsyncCallback.CloseCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,45,public void closeComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,46,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,47,safeCloseComplete(rc, ledgerHandle, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,49,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,53,public abstract void safeCloseComplete(int rc, LedgerHandle ledgerHandle, Object ctx) ;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,56,public static abstract class ReadCallback implements AsyncCallback.ReadCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,59,public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,60,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,61,safeReadComplete(rc, lh, seq, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,63,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,68,public abstract void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,71,public static abstract class CreateCallback implements AsyncCallback.CreateCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,74,public void createComplete(int rc, LedgerHandle lh, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,75,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,76,safeCreateComplete(rc, lh, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,78,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,83,public abstract void safeCreateComplete(int rc, LedgerHandle lh, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,88,public static abstract class AddCallback implements AsyncCallback.AddCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,91,public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,92,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,93,safeAddComplete(rc, lh, entryId, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,95,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsynBKCallback.java,99,public abstract void safeAddComplete(int rc, LedgerHandle lh, long entryId, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,18,package org.apache.hedwig.zookeeper;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,20,import java.lang.Thread.UncaughtExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,22,import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,24,public class SafeAsyncCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,27,public static void setUncaughtExceptionHandler(UncaughtExceptionHandler uncaughtExceptionHandler) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,28,SafeAsyncCallback.uncaughtExceptionHandler = uncaughtExceptionHandler;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,31,static void invokeUncaughtExceptionHandler(Throwable t) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,32,Thread thread = Thread.currentThread();
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java,33,uncaughtExceptionHandler.uncaughtException(thread, t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,18,package org.apache.hedwig.zookeeper;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,20,import java.util.List;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,22,import org.apache.zookeeper.AsyncCallback;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,23,import org.apache.zookeeper.data.ACL;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,24,import org.apache.zookeeper.data.Stat;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,26,public class SafeAsyncZKCallback extends SafeAsyncCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,27,public static abstract class StatCallback implements AsyncCallback.StatCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,28,public void processResult(int rc, String path, Object ctx, Stat stat) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,29,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,30,safeProcessResult(rc, path, ctx, stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,32,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,36,public abstract void safeProcessResult(int rc, String path, Object ctx, Stat stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,39,public static abstract class DataCallback implements AsyncCallback.DataCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,40,public void processResult(int rc, String path, Object ctx, byte data[], Stat stat) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,41,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,42,safeProcessResult(rc, path, ctx, data, stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,44,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,48,public abstract void safeProcessResult(int rc, String path, Object ctx, byte data[], Stat stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,51,public static abstract class ACLCallback implements AsyncCallback.ACLCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,52,public void processResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,53,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,54,safeProcessResult(rc, path, ctx, acl, stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,56,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,60,public abstract void safeProcessResult(int rc, String path, Object ctx, List<ACL> acl, Stat stat);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,63,public static abstract class ChildrenCallback implements AsyncCallback.ChildrenCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,64,public void processResult(int rc, String path, Object ctx, List<String> children) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,65,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,66,safeProcessResult(rc, path, ctx, children);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,68,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,72,public abstract void safeProcessResult(int rc, String path, Object ctx, List<String> children);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,75,public static abstract class StringCallback implements AsyncCallback.StringCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,76,public void processResult(int rc, String path, Object ctx, String name) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,77,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,78,safeProcessResult(rc, path, ctx, name);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,80,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,84,public abstract void safeProcessResult(int rc, String path, Object ctx, String name);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,87,public static abstract class VoidCallback implements AsyncCallback.VoidCallback {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,88,public void processResult(int rc, String path, Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,89,try {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,90,safeProcessResult(rc, path, ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,92,invokeUncaughtExceptionHandler(t);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncZKCallback.java,96,public abstract void safeProcessResult(int rc, String path, Object ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,18,package org.apache.hedwig.zookeeper;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,20,import java.util.List;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,22,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,23,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,24,import org.apache.zookeeper.AsyncCallback;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,25,import org.apache.zookeeper.CreateMode;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,26,import org.apache.zookeeper.KeeperException;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,27,import org.apache.zookeeper.ZooKeeper;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,28,import org.apache.zookeeper.KeeperException.Code;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,29,import org.apache.zookeeper.data.ACL;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,31,import org.apache.hedwig.util.PathUtils;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,33,public class ZkUtils {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,37,public static void createFullPathOptimistic(final ZooKeeper zk, final String originalPath, final byte[] data,
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,38,final List<ACL> acl, final CreateMode createMode, final AsyncCallback.StringCallback callback,
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,39,final Object ctx) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,41,zk.create(originalPath, data, acl, createMode, new SafeAsyncZKCallback.StringCallback() {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,43,public void safeProcessResult(int rc, String path, Object ctx, String name) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,45,if (rc != Code.NONODE.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,46,callback.processResult(rc, path, ctx, name);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,47,return;
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,53,ZkUtils.createFullPathOptimistic(zk, PathUtils.parent(originalPath), new byte[0], acl,
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,54,CreateMode.PERSISTENT, new SafeAsyncZKCallback.StringCallback() {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,57,public void safeProcessResult(int rc, String path, Object ctx, String name) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,58,if (rc == Code.OK.intValue() || rc == Code.NODEEXISTS.intValue()) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,61,ZkUtils.createFullPathOptimistic(zk, originalPath, data, acl, createMode, callback,
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,62,ctx);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,64,callback.processResult(rc, path, ctx, name);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,73,public static KeeperException logErrorAndCreateZKException(String msg, String path, int rc) {
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,74,KeeperException ke = KeeperException.create(Code.get(rc), path);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,75,logger.error(msg + ",zkPath: " + path, ke);
hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java,76,return ke;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,93,this.logSizeLimit = conf.getEntryLogSizeLimit();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,65,long lastAddConfirmed;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,87,ZkTmpDir = File.createTempFile("zookeeper", "test");
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,174,lb.runBookies(conf);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,175,while (true) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,176,Thread.sleep(5000);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,62,covered = new boolean[ensembleSize];
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java,63,numQuorumsUncovered = ensembleSize;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,534,pendingAddOp.submitCallback(rc);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,634,if (metadata.isClosed()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,643,metadata.markLedgerInRecovery();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,32,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,23,import java.util.HashSet;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,24,import java.util.Set;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,31,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,32,import org.apache.hedwig.exceptions.PubSubException;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,33,import org.apache.hedwig.server.common.ServerConfiguration;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,34,import org.apache.hedwig.server.common.TopicOpQueuer;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,35,import org.apache.hedwig.util.Callback;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,36,import org.apache.hedwig.util.CallbackUtils;
hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java,37,import org.apache.hedwig.util.HedwigSocketAddress;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,33,import org.apache.bookkeeper.client.BKException.Code;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java,369,cb.recoverComplete(rc, ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,97,scheduler.schedule(reReadTask, ZK_CONNECT_BACKOFF_SEC, TimeUnit.SECONDS);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,246,void asyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,80,final PerChannelBookieClient client = lookupClient(addr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,82,client.connectIfNeededAndDoOp(new GenericCallback<Void>() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,85,if (rc != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,87,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,89,client.addEntry(ledgerId, masterKey, entryId, toSend, cb, ctx, options);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,102,if (rc != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,104,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,71,static final long maxMemory = Runtime.getRuntime().maxMemory() / 5;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,162,pendingOp.operationComplete(rc, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,312,readCompletion.cb.readEntryComplete(BKException.Code.BookieHandleNotAvailableException,
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,334,addCompletion.cb.writeComplete(BKException.Code.BookieHandleNotAvailableException, key.ledgerId,
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,351,void errorOutOutstandingEntries() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,361,errorOutAddKey(key);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,365,errorOutReadKey(key);
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java,1,package org.apache.bookkeeper.util;
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java,42,ExecutorService threads[];
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java,43,Random rand = new Random();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,123,lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,36,class ReadOnlyLedgerHandle extends LedgerHandle {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,62,LOG.error("Tried to add entry on a Read-Only ledger handle, ledgerid=" + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,1,package org.apache.bookkeeper.meta;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,96,ScheduledExecutorService scheduler;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,128,public void close() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,129,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,130,scheduler.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,132,LOG.warn("Error when closing HierarchicalLedgerManager : ", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,134,super.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,29,import org.apache.bookkeeper.conf.ClientConfiguration;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,31,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,35,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,36,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,50,AtomicLong totalBytesOutstanding = new AtomicLong();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,52,OrderedSafeExecutor executor;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,53,ClientSocketChannelFactory channelFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,54,ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient> channels = new ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient>();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,26,import java.util.concurrent.Semaphore;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,41,import org.jboss.netty.buffer.ChannelBuffers;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,98,InetSocketAddress addr, AtomicLong totalBytesOutstanding) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,99,this(new ClientConfiguration(), executor, channelFactory, addr, totalBytesOutstanding);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,102,public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,302,long entryLogId = location >> 32L;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,459,op.initiate(toSend);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,113,void initiate(ChannelBuffer toSend) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,49,int numResponsesPending;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,50,boolean proceedingWithRecovery = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,53,long maxLength = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,158,lh.asyncCloseInternal(new CloseCallback() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,160,public void closeComplete(int rc, LedgerHandle lh, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,162,LOG.warn("Close failed: " + BKException.getMessage(rc));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,165,cb.operationComplete(BKException.Code.OK, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,188,cb.operationComplete(rc, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,192,doRecoveryRead();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java,81,default:
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java,159,default:
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,291,if (counter.getLh() == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,292,LOG.error("ZooKeeper error: " + counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,293,throw BKException.create(Code.ZKException);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,161,if (rc != KeeperException.Code.OK.intValue()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,163,cb.operationComplete(BKException.Code.ZKException, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java,103,cb.operationComplete(rc, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,146,ledgerCb.operationComplete(rc, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,157,ledgerCb.operationComplete(KeeperException.Code.SYSTEMERROR.intValue(), null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,165,ledgerCb.operationComplete(rc, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,139,ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java,57,public static void createFullPathOptimistic(
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java,74,createFullPathOptimistic(zk, new File(originalPath).getParent().replace("\\", "/"), new byte[0], acl,
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java,82,createFullPathOptimistic(zk, originalPath, data, acl, createMode, callback,
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java,83,ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,309,LOG.error("Could not write  request for reading entry: " + key.entryId + " ledger-id: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,310,+ key.ledgerId + " bookie: " + channel.getRemoteAddress());
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,330,bAddress = channel.getRemoteAddress().toString();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,331,LOG.error("Could not write request for adding entry: " + key.entryId + " ledger-id: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,332,+ key.ledgerId + " bookie: " + bAddress);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,25,import org.apache.bookkeeper.conf.AbstractConfiguration;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,26,import org.apache.bookkeeper.meta.LedgerManager;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,30,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,31,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,24,import java.util.concurrent.Executors;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,25,import java.util.concurrent.ScheduledExecutorService;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,26,import java.util.concurrent.atomic.AtomicInteger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,34,import java.net.InetAddress;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,22,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,20,import java.util.HashMap;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,24,import java.util.Map;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,31,import java.util.concurrent.BlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,32,import java.util.concurrent.LinkedBlockingQueue;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,34,import org.slf4j.Logger;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,35,import org.slf4j.LoggerFactory;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,37,import com.google.protobuf.ByteString;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,44,import org.apache.hedwig.server.common.UnexpectedError;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,120,class DeathWatcher extends Thread {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,122,final int watchInterval;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,90,private enum ConnectionState {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,140,LOG.info("Successfully connected to bookie: " + addr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,145,LOG.error("Could not connect to bookie: " + addr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,296,if (channel != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,297,channel.close().awaitUninterruptibly();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,388,LOG.info("Disconnected from bookie: " + addr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,389,errorOutOutstandingEntries();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,32,import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,33,import org.apache.bookkeeper.client.BKException;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,37,import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,39,import org.apache.bookkeeper.client.LedgerMetadata;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,40,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,50,import org.jboss.netty.buffer.ChannelBuffer;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,23,import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,27,import org.jboss.netty.buffer.ChannelBuffer;
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java,22,import java.util.HashSet;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,26,import org.apache.bookkeeper.client.BKException.BKDigestMatchException;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,27,import org.apache.bookkeeper.client.LedgerHandle.NoopCloseCallback;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,29,import org.apache.bookkeeper.proto.BookieProtocol;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,36,import org.jboss.netty.buffer.ChannelBuffer;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,134,lh.lastAddConfirmed++;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,135,lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, this, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,141,lh.lastAddConfirmed--;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,35,import org.slf4j.Logger;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,36,import org.slf4j.LoggerFactory;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,85,ensemble = lh.metadata.getEnsemble(i);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,86,nextEnsembleChange = lh.metadata.getNextEnsembleChange(i);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,48,import org.jboss.netty.channel.ChannelPipelineCoverage;
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java,51,subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,72,subscriber.subscribe(ByteString.copyFromUtf8(topic), subId, CreateOrAttach.CREATE_OR_ATTACH);
hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java,128,subscriber.asyncSubscribe(ByteString.copyFromUtf8(topicPrefix + i), subId, CreateOrAttach.CREATE_OR_ATTACH,
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java,29,import org.jboss.netty.channel.ChannelPipelineCoverage;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,29,import org.jboss.netty.channel.ChannelPipelineCoverage;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java,104,ctx.getPipeline().get(SslHandler.class).handshake(e.getChannel()).addListener(new ChannelFutureListener() {
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,63,subscriber.asyncSubscribe(topicSubscriber.getTopic(), subRequest.getSubscriberId(), subRequest
hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java,64,.getCreateOrAttach(), new Callback<Void>() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,26,public interface Provider {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,27,public long getOutstandingRequests();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,29,public long getLastProcessedZxid();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,32,private Provider provider = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,33,private Object mutex = new Object();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,39,static public void registerAsConcrete() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,40,setInstance(new ServerStats());
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,43,static synchronized public void unregister() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,44,instance = null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,47,static synchronized protected void setInstance(ServerStats newInstance) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,48,assert instance == null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,49,instance = newInstance;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,70,public long getOutstandingRequests() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,71,synchronized (mutex) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,72,return (provider != null) ? provider.getOutstandingRequests() : -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,76,public long getLastProcessedZxid() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,77,synchronized (mutex) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,78,return (provider != null) ? provider.getLastProcessedZxid() : -1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,90,public String getServerState() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,91,return "standalone";
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,100,if (provider != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,101,sb.append("Outstanding: " + getOutstandingRequests() + "\n");
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,102,sb.append("Zxid: 0x" + Long.toHexString(getLastProcessedZxid()) + "\n");
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,104,sb.append("Mode: " + getServerState() + "\n");
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,109,public void setStatsProvider(Provider zk) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,110,synchronized (mutex) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java,111,provider = zk;
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java,93,c.writeSameEntryBatch(sb.toString().getBytes(), Integer.parseInt(args[0]));
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java,94,c.writeSameEntry(sb.toString().getBytes(), Integer.parseInt(args[0]));
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java,113,String content = new String(data);
bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java,128,String content = new String(data);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,100,LOGFILE_HEADER.put("BKLO".getBytes());
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,239,BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,261,BufferedReader br = new BufferedReader(new InputStreamReader(fis));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,161,return s.toString().getBytes();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java,45,digest.update(pad.getBytes());
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java,123,return this.getString(PASSWD, "").getBytes();
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java,141,setProperty(PASSWD, new String(passwd));
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,305,if (null == ledgerDirNames) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java,306,return null;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,164,byte hello[] = "hello".getBytes();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,586,if (!(obj instanceof CompletionKey) || obj == null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,200,outstream.write("stat".getBytes());
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java,205,new InputStreamReader(sock.getInputStream()));
hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java,45,lh[i] = bk.createLedger(ensembleSize, quorumSize, digestType, "blah".getBytes());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,76,static byte[] passwd = "sillysecret".getBytes();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,119,topic2MinConsumedMessagesMap.put(topic, minConsumedMessage);
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,120,pm.consumedUntil(topic, minConsumedMessage);
hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java,343,CreateMode.EPHEMERAL, new SafeAsyncZKCallback.StringCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,321,public long getLastLocalSeqIdDelivered() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,322,return lastLocalSeqIdDelivered;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,325,public long getLastScanErrorTime() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,329,public void setLastScanErrorTime(long lastScanErrorTime) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,343,localSeqIdDeliveringNow = persistenceMgr.getSeqIdAfterSkipping(topic, lastLocalSeqIdDelivered, 1);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,407,lastLocalSeqIdDelivered = localSeqIdDeliveringNow;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,409,if (lastLocalSeqIdDelivered > lastSeqIdCommunicatedExternally + SEQ_ID_SLACK) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,415,long prevId = lastSeqIdCommunicatedExternally;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,416,lastSeqIdCommunicatedExternally = lastLocalSeqIdDelivered;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,417,moveDeliveryPtrForward(this, prevId, lastLocalSeqIdDelivered);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,422,public long getLastSeqIdCommunicatedExternally() {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,448,lastSeqIdCommunicatedExternally = lastLocalSeqIdDelivered;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,449,addDeliveryPtr(this, lastLocalSeqIdDelivered);
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,459,sb.append("DeliveryPtr: ");
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,146,if (subState != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,467,ActiveSubscriberState subscriber;
hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java,470,this.subscriber = subscriber;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,486,mainWorkerPool.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,69,PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,70,if (prevChannel != null) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,71,channel = prevChannel;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,112,for (PerChannelBookieClient channel: channels.values()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,113,channel.close();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,91,DISCONNECTED, CONNECTING, CONNECTED
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,148,state = ConnectionState.DISCONNECTED;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,199,if (doOpNow) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,200,op.operationComplete(BKException.Code.OK, null);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,390,channel.close();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java,175,return conf.getString(ZK_HOST, "localhost");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,71,protected BlockingQueue<CacheRequest> requestQueue = new LinkedBlockingQueue<CacheRequest>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,77,protected SortedMap<Long, Set<CacheKey>> timeIndexOfAddition = new TreeMap<Long, Set<CacheKey>>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,104,protected Thread cacheThread;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,117,cacheThread = new Thread(this, "CacheThread");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,121,cacheThread.start();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,211,protected void enqueueWithoutFailure(CacheRequest obj) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,212,if (!requestQueue.offer(obj)) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,214,+ " to cache request queue. Exiting.");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,237,enqueueWithoutFailure(new DeliveredUntil(topic, seqId));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,260,public void run() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,261,while (keepRunning) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,262,CacheRequest obj;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,263,try {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,264,obj = requestQueue.take();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,266,Thread.currentThread().interrupt();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,267,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,269,obj.performRequest();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,278,enqueueWithoutFailure(new ShutdownCacheRequest());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,526,protected void collectOldCacheEntries() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,530,Long earliestTime = timeIndexOfAddition.firstKey();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,531,Set<CacheKey> oldCacheEntries = timeIndexOfAddition.get(earliestTime);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,536,for (Iterator<CacheKey> iter = oldCacheEntries.iterator(); iter.hasNext();) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,543,removeMessageFromCache(cacheKey, readAheadExceptionInstance, //
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,545,false,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,547,true);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,550,timeIndexOfAddition.remove(earliestTime);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,695,protected class ShutdownCacheRequest implements CacheRequest {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,699,public void performRequest() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,700,keepRunning = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,167,while(running) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,168,synchronized(this) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,169,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,170,wait(flushInterval);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,175,Thread.currentThread().interrupt();
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,176,continue;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,184,if (!flushing.compareAndSet(false, true)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,187,break;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,191,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,194,LOG.error("Exception flushing Ledger", e);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,230,flushing.set(false);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,30,import java.util.concurrent.Semaphore;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,70,final Semaphore opCounterSem;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,71,private final Integer throttling;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,91,this.throttling = bk.getConf().getThrottleValue();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,92,this.opCounterSem = new Semaphore(throttling);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,160,Semaphore getAvailablePermits() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,161,return this.opCounterSem;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,434,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,435,opCounterSem.acquire();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,437,cb.addComplete(BKException.Code.InterruptedException,
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,463,opCounterSem.release();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,162,lh.opCounterSem.release();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,75,Semaphore opCounterSem = new Semaphore(2000);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,1,package org.apache.bookkeeper.client;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,155,lh.sendAddSuccessCallbacks();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,84,public void operationComplete(int rc, Void result) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,86,cb.writeComplete(rc, ledgerId, entryId, addr, ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,100,public void operationComplete(int rc, Void result) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java,103,cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,116,super("Entry " + entryId + " not found in " + ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,301,byte[] readEntry(long ledgerId, long entryId, long location) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,315,throw new IOException("Short read from entrylog " + entryLogId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,329,throw new IOException("Short read for " + ledgerId + "@" + entryId + " in " + entryLogId + "@" + pos + "("+rc+"!="+data.length+")");
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,127,if (!lh.metadata.currentEnsemble.get(bookieIndex).equals(addr)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,129,LOG.warn("Write did not succeed: " + ledgerId + ", " + entryId + ". But we have already fixed it.");
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,130,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,328,errorCode = BookieProtocol.EOK;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,146,submitCallback(BKException.Code.OK);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,478,bookieWatcher.halt();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,28,import java.util.concurrent.Executors;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,57,BookKeeper bk;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,58,ScheduledExecutorService scheduler;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,71,this.scheduler = Executors.newSingleThreadScheduledExecutor();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,74,public void halt() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java,75,scheduler.shutdown();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,330,new PendingReadOp(this, firstEntry, lastEntry, cb, ctx).initiate();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,61,PendingReadOp(LedgerHandle lh, long startEntryId, long endEntryId, ReadCallback cb, Object ctx) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java,226,setLastLogId(f, logId);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,64,protected Map<CacheKey, CacheValue> cache = new HashMap<CacheKey, CacheValue>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,83,protected Map<ByteString, SortedSet<Long>> orderedIndexOnSeqId = new HashMap<ByteString, SortedSet<Long>>();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,89,protected long presentCacheSize = 0;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,107,protected boolean keepRunning = true;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,198,enqueueWithoutFailure(new ScanResponse(cacheKey, messageWithLocalSeqId));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,227,enqueueWithoutFailure(new ScanRequestWrapper(request));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,339,cache.put(cacheKey, cacheValue);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,388,enqueueWithoutFailure(new ScanResponse(cacheKey, message));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,436,enqueueWithoutFailure(new ExceptionOnCacheKey(installedStub, reason));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,465,protected void addMessageToCache(CacheKey cacheKey, Message message, long currTime) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,475,cache.put(cacheKey, cacheValue);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,479,presentCacheSize += message.getBody().size();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,482,MapMethods.addToMultiMap(timeIndexOfAddition, currTime, cacheKey, HashSetCacheKeyFactory.instance);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,485,MapMethods.addToMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(), cacheKey.getSeqId(),
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,486,TreeSetLongFactory.instance);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,489,cacheValue.setMessageAndInvokeCallbacks(message, currTime);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,492,collectOldCacheEntries();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,495,protected void removeMessageFromCache(CacheKey cacheKey, Exception exception, boolean maintainTimeIndex,
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,496,boolean maintainSeqIdIndex) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,503,if (cacheValue.isStub()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,504,cacheValue.setErrorAndInvokeCallbacks(exception);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,507,return;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,510,presentCacheSize -= cacheValue.getMessage().getBody().size();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,514,if (maintainSeqIdIndex) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,515,MapMethods.removeFromMultiMap(orderedIndexOnSeqId, cacheKey.getTopic(), cacheKey.getSeqId());
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,517,if (maintainTimeIndex) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,518,MapMethods.removeFromMultiMap(timeIndexOfAddition, cacheValue.getTimeOfAddition(), cacheKey);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,527,long maxCacheSize = cfg.getMaximumCacheSize();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,529,while (presentCacheSize > maxCacheSize && !timeIndexOfAddition.isEmpty()) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,537,CacheKey cacheKey = iter.next();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,683,CacheValue cacheValue = cache.get(new CacheKey(request.getTopic(), request.getStartSeqId()));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java,687,cacheValue.addCallback(request.getCallback(), request.getCtx());
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,106,minConsumedMessage = curSubscription.getSubscriptionState().getMsgId().getLocalComponent();
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java,352,InMemorySubscriptionState subState = topicSubs.get(subscriberId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,26,import java.util.ArrayDeque;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,76,do {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,464,throw e;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java,139,if (future.isSuccess()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,149,StringUtils.addrToString(s, addr);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java,76,return new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), conf.getBookiePort());
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java,55,public static StringBuilder addrToString(StringBuilder sb, InetSocketAddress addr) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java,56,return sb.append(addr.getAddress().getHostAddress()).append(":").append(addr.getPort());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java,467,throw BKException.create(Code.ZKException);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,83,long startSeqIdIncluded; // included, for the very first ledger, this
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,87,public InMemoryLedgerRange(LedgerRange range, long startSeqId, LedgerHandle handle) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,89,this.startSeqIdIncluded = startSeqId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,93,public InMemoryLedgerRange(LedgerRange range, long startSeqId) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,94,this(range, startSeqId, null);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,207,+ (startSeqId - imlr.startSeqIdIncluded) + " to entry-id: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,208,+ (correctedEndSeqId - imlr.startSeqIdIncluded));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,211,imlr.handle.asyncReadEntries(startSeqId - imlr.startSeqIdIncluded, correctedEndSeqId
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,212,- imlr.startSeqIdIncluded, new SafeAsynBKCallback.ReadCallback() {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,214,long expectedEntryId = startSeqId - imlr.startSeqIdIncluded;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,247,assert (message.getMsgId().getLocalComponent() - imlr.startSeqIdIncluded) == expectedEntryId;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,278,long endSeqId = topicInfo.currentLedgerRange.startSeqIdIncluded
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,491,Iterator<LedgerRange> lrIterator = ranges.getRangesList().iterator();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,492,TopicInfo topicInfo = new TopicInfo();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,494,long startOfLedger = 1;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,502,topicInfo.ledgerRanges.put(endOfLedger, new InMemoryLedgerRange(range, startOfLedger));
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,503,startOfLedger = endOfLedger + 1;
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,518,recoverLastTopicLedgerAndOpenNewOne(range.getLedgerId(), version, topicInfo);
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,534,final TopicInfo topicInfo) {
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,586,long prevLedgerEnd = topicInfo.ledgerRanges.isEmpty() ? 0 : topicInfo.ledgerRanges
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,587,.lastKey();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,589,.setEndSeqIdIncluded(lastMessage.getMsgId()).build();
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,590,topicInfo.ledgerRanges.put(lr.getEndSeqIdIncluded().getLocalComponent(),
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,593,logger.info("Recovered unclosed ledger: " + ledgerId + " for topic: "
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,594,+ topic.toStringUtf8() + " with " + numEntriesInLastLedger + " entries");
hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java,633,.setLocalComponent(0).build() : topicInfo.ledgerRanges.lastEntry().getValue().range
hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java,68,Map<ByteString, InMemorySubscriptionState> topicSubs = top2sub2seq.get(topic);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,96,private volatile boolean isZkExpired = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,396,isZkExpired = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,446,final int sessionTimeout) throws IOException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,447,ZooKeeper newZk = new ZooKeeper(zkServers, sessionTimeout,
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,448,new Watcher() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,453,.equals(Watcher.Event.EventType.None)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,454,if (event.getState().equals(
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,455,Watcher.Event.KeeperState.Disconnected)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,456,LOG.warn("ZK client has been disconnected to the ZK server!");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,458,Watcher.Event.KeeperState.SyncConnected)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,459,LOG.info("ZK client has been reconnected to the ZK server!");
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,463,if (event.getState().equals(
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,464,Watcher.Event.KeeperState.Expired)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,466,isZkExpired = true;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,475,isZkExpired = false;
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,476,return newZk;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,147,return new RegionManager(pm, conf, zk, scheduler, new HedwigHubClientFactory(conf, clientChannelFactory));
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,275,this.conf = conf;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,276,conf.validate();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,339,public PubSubServer(ServerConfiguration conf) throws Exception {
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,340,this(conf, new TerminateJVMExceptionHandler());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,365,ServerConfiguration conf = new ServerConfiguration();
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,369,conf.loadConf(new File(confFile).toURI().toURL());
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,371,String msg = "Could not open configuration file: " + confFile;
hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java,374,String msg = "Malformed configuration file: " + confFile;
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,33,public HedwigHubClientFactory(ServerConfiguration cfg, ClientSocketChannelFactory channelFactory) {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,47,return new HedwigHubClient(new ClientConfiguration() {
hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClientFactory.java,55,return cfg.isInterRegionSSLEnabled();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,141,lh.recover(new GenericCallback<Void>() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java,143,public void operationComplete(int rc, Void result) {
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java,283,if (!subscribeChannel.isReadable() && outstandingMsgSet.size() == 0) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,21,import java.util.LinkedList;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,22,import java.util.List;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,76,private final ConcurrentMap<InetSocketAddress, List<ByteString>> host2Topics = new ConcurrentHashMap<InetSocketAddress, List<ByteString>>();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,286,if (topic2Host.containsKey(pubSubData.topic) && topic2Host.get(pubSubData.topic).equals(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,294,logger.debug("Storing info for topic: " + pubSubData.topic.toStringUtf8() + ", old host: "
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,295,+ topic2Host.get(pubSubData.topic) + ", new host: " + host);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,296,topic2Host.put(pubSubData.topic, host);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,297,if (host2Topics.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,298,host2Topics.get(host).add(pubSubData.topic);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,300,LinkedList<ByteString> topicsList = new LinkedList<ByteString>();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,301,topicsList.add(pubSubData.topic);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,302,host2Topics.put(host, topicsList);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,346,if (host2Topics.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,347,for (ByteString topic : host2Topics.get(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,350,topic2Host.remove(topic);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,353,host2Topics.remove(host);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,114,if (client.topic2Host.containsKey(topic)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,115,InetSocketAddress host = client.topic2Host.get(topic);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,116,if (host2Channel.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,121,doPublish(pubSubData, host2Channel.get(host));
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,134,InetSocketAddress host = cfg.getDefaultServerHost();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,135,if (host2Channel.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,137,doPublish(pubSubData, host2Channel.get(host));
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,199,logger.debug("Storing a new Channel mapping for host: " + host);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,200,host2Channel.put(host, channel);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,145,if (client.topic2Host.containsKey(topic)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,146,InetSocketAddress host = client.topic2Host.get(topic);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,147,if (operationType.equals(OperationType.UNSUBSCRIBE) && client.getPublisher().host2Channel.containsKey(host)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,152,doSubUnsub(pubSubData, client.getPublisher().host2Channel.get(host));
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,295,if (!topicSubscriber2Channel.containsKey(topicSubscriber)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,303,doConsume(pubSubData, topicSubscriber2Channel.get(topicSubscriber), messageSeqId);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,453,if (!topicSubscriber2Channel.containsKey(topicSubscriber)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,462,Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,490,if (!topicSubscriber2Channel.containsKey(topicSubscriber)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,499,Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,543,if (topicSubscriber2Channel.containsKey(topicSubscriber)) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,545,Channel channel = topicSubscriber2Channel.get(topicSubscriber);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,546,topicSubscriber2Channel.remove(topicSubscriber);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,130,PubSubData pubSubData = txn2PubSubData.containsKey(response.getTxnId()) ? txn2PubSubData.get(response
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,131,.getTxnId()) : null;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,142,txn2PubSubData.remove(response.getTxnId());
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,245,boolean redirectedHostChannelExists = pub.host2Channel.containsKey(redirectedHost) ? true : false;
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,246,if (pubSubData.operationType.equals(OperationType.SUBSCRIBE) || !redirectedHostChannelExists) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,257,pub.doPublish(pubSubData, pub.host2Channel.get(redirectedHost));
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,259,sub.doSubUnsub(pubSubData, pub.host2Channel.get(redirectedHost));
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,298,if (pub.host2Channel.containsKey(host) && pub.host2Channel.get(host).equals(ctx.getChannel())) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,302,pub.host2Channel.remove(host);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java,303,client.clearAllTopicsForHost(host);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,29,private static ConcurrentMap<ByteString, ByteString> map = new ConcurrentHashMap<ByteString, ByteString>();
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,32,ByteString presentValueInMap = map.get(in);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,37,presentValueInMap = map.putIfAbsent(in, in);
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,38,if (presentValueInMap != null) {
hedwig-server/src/main/java/org/apache/hedwig/server/common/ByteStringInterner.java,39,return presentValueInMap;
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,65,.asyncMessageConsume(messageConsumeData.msg);
hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java,76,.messageConsumed(messageConsumeData.msg);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,178,ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,187,ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,328,public static ResponseHandler getResponseHandlerFromChannel(Channel channel) {
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java,329,return (ResponseHandler) channel.getPipeline().getLast();
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java,182,HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,359,HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,464,.setMessageHandler(messageHandler);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java,501,.setMessageHandler(null);
hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java,66,HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,23,import java.io.IOException;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,553,void handleBookieFailure(InetSocketAddress addr, final int bookieIndex) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,561,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,562,newBookie = bk.bookieWatcher
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,565,LOG
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,566,.error("Could not get additional bookie to remake ensemble, closing ledger: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,567,+ ledgerId);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,568,handleUnrecoverableErrorDuringAdd(e.getCode());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,569,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,572,final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>(
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,573,metadata.currentEnsemble);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,574,newEnsemble.set(bookieIndex, newBookie);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,576,if (LOG.isDebugEnabled()) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,577,LOG.debug("Changing ensemble from: " + metadata.currentEnsemble + " to: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,578,+ newEnsemble + " for ledger: " + ledgerId + " starting at entry: "
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,579,+ (lastAddConfirmed + 1));
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,588,bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,590,public void safeRun() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,596,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,600,for (PendingAddOp pendingAddOp : pendingAddOps) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,601,pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);
bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java,350,syncThread.start();
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,342,public void addEntry(byte[] data) throws InterruptedException, BKException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,343,addEntry(data, 0, data.length);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,362,asyncAddEntry(data, offset, length, new SyncAddCallback(), counter);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,369,if(counter.getrc() != BKException.Code.OK) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,370,throw BKException.create(counter.getrc());
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,55,public void addEntry(byte[] data) throws InterruptedException, BKException {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java,56,addEntry(data, 0, data.length);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,82,lastAddConfirmed = lastAddPushed = metadata.close;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,83,length = metadata.length;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,97,metadata.quorumSize, metadata.ensembleSize);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,262,+ metadata.close + " with this many bytes: " + metadata.length);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,635,lastAddConfirmed = lastAddPushed = metadata.close;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java,636,length = metadata.length;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,47,public static final int NOTCLOSED = -101;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,48,public static final int IN_RECOVERY = -102;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,51,public static final int CURRENT_METADATA_FORMAT_VERSION = 1;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,54,int metadataFormatVersion = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,56,int ensembleSize;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,57,int quorumSize;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,58,long length;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,59,long close;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,73,this.close = NOTCLOSED;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,92,boolean isClosed() {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,93,return close != NOTCLOSED
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,94,&& close != IN_RECOVERY;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,98,close = IN_RECOVERY;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,102,close = entryId;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,153,if (close != NOTCLOSED) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,154,s.append(lSplitter).append(close).append(tSplitter).append(closed);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,183,String lines[] = config.split(lSplitter);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,185,try {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,186,int i = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,187,if (lines[0].startsWith(VERSION_KEY)) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,188,String parts[] = lines[0].split(tSplitter);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,189,lc.metadataFormatVersion = new Integer(parts[1]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,190,i++;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,192,lc.metadataFormatVersion = 0;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,195,if (lc.metadataFormatVersion < LOWEST_COMPAT_METADATA_FORMAT_VERSION
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,196,|| lc.metadataFormatVersion > CURRENT_METADATA_FORMAT_VERSION) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,197,throw new IOException("Metadata version not compatible. Expected between "
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,198,+ LOWEST_COMPAT_METADATA_FORMAT_VERSION + " and " + CURRENT_METADATA_FORMAT_VERSION
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,199,+ ", but got " + lc.metadataFormatVersion);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,201,if ((lines.length+i) < 2) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,202,throw new IOException("Quorum size or ensemble size absent from config: " + config);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,206,lc.quorumSize = new Integer(lines[i++]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,207,lc.ensembleSize = new Integer(lines[i++]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,208,lc.length = new Long(lines[i++]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,210,for (; i < lines.length; i++) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,211,String parts[] = lines[i].split(tSplitter);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java,214,lc.close = new Long(parts[0]);
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java,60,numResponsesPending = lh.metadata.ensembleSize;
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java,56,successesSoFar = new boolean[lh.metadata.quorumSize];
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java,97,if (entry.nextReplicaIndexToReadFrom >= lh.metadata.quorumSize) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java,50,this.numResponsesPending = lh.metadata.ensembleSize;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,473,synchronized public void sendResponse(ByteBuffer... bb) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,474,if (closed) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,475,return;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,477,sendBuffers(bb);
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,479,outstandingRequests--;
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,481,if (outstandingRequests < outstandingLimit) {
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,482,sk.selector().wakeup();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,483,enableRecv();
bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java,121,this.scheduler = Executors.newSingleThreadScheduledExecutor();
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,203,throw new IOException("Read error");
bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java,100,return !ss.socket().isClosed();
