File,Line_number,SRC
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,609,null, getClusterName(topology.getClusterId()), absoluteGroupName, service, "Host Group Configuration",
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,610,new HashSet<String>(groupHosts), serviceConfigs);
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,20,import com.google.gson.JsonElement;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,21,import com.google.gson.JsonObject;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,22,import com.google.gson.JsonParser;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,23,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,24,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,45,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,46,import java.io.FileNotFoundException;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,47,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,48,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,49,import java.io.InputStream;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,50,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,51,import java.util.EnumSet;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,52,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,53,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,54,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,55,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,56,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,20,import org.apache.ambari.server.bootstrap.BootStrapImpl;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,21,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,68,if(BootStrapImpl.DEV_VERSION.equals(version1.trim())) return 0;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,101,if (version1 != null && version1.equals(BootStrapImpl.DEV_VERSION)) return 0;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1585,return checkViewVersion(view, config.getMinAmbariVersion(), serverVersion, "minimum", 1, "less than") &&
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1586,checkViewVersion(view, config.getMaxAmbariVersion(), serverVersion, "maximum", -1, "greater than");
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1608,int compVal = index == -1 ? VersionUtils.compareVersions(version, serverVersion) :
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1609,index > 0 ? VersionUtils.compareVersions(version.substring(0, index), serverVersion, index) : 0;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,92,private static final String CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES = "ranger-knox-plugin-properties";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,96,private static final String PROPERTY_RANGER_KNOX_PLUGIN_ENABLED = "ranger-knox-plugin-enabled";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,196,Config rangerKnoxPluginProperties = cluster.getDesiredConfigByType(CONFIGURATION_TYPE_RANGER_KNOX_PLUGIN_PROPERTIES);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,197,if (rangerKnoxPluginProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,198,String rangerKnoxPluginEnabled = rangerKnoxPluginProperties.getProperties().get(PROPERTY_RANGER_KNOX_PLUGIN_ENABLED);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,199,if (StringUtils.isNotEmpty(rangerKnoxPluginEnabled)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,21,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,22,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,25,import org.apache.ambari.server.actionmanager.Request;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,27,import org.apache.ambari.server.controller.ClusterRequest;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,28,import org.apache.ambari.server.controller.KerberosHelper;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,34,import org.apache.ambari.server.controller.internal.RequestStageContainer;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,46,import org.apache.ambari.server.security.encryption.CredentialStoreService;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,47,import org.apache.ambari.server.serveraction.kerberos.KerberosOperationException;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,48,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,55,import javax.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,56,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,57,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,58,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,59,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,60,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,61,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,62,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,63,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,64,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,65,import java.util.concurrent.Callable;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,66,import java.util.concurrent.ExecutorService;
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,67,import java.util.concurrent.Executors;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,65,private final int STALE_CONFIGS_CACHE_EXPIRATION_TIME = 300;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,108,Map<String, HostConfig> desiredHostConfigs = (host == null) ? null : host.getDesiredHostConfigs(cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,109,return getEffectiveDesiredTags(cluster, desiredHostConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,120,Cluster cluster, Map<String, HostConfig> hostConfigOverrides) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,973,Map<String, Map<String, String>> desired = getEffectiveDesiredTags(cluster,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,974,sch.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1324,Map<String, DesiredConfig> clusterDesiredConfigs = (cluster == null) ? new HashMap<String, DesiredConfig>() : cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1328,: clusterDesiredConfigs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1340,.getConfigurations().entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1359,config.getTag());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,133,new HashSet<String>(Arrays.asList("fs.defaultFS", "hbase.rootdir", "instance.volumes", "policymgr_external_url"));
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,66,URLStreamProvider m_streamProvider;
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,73,m_streamProvider = new URLStreamProvider(2000, 2000, ComponentSSLConfiguration.instance());
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,141,int response = checkLogin(rangerAuthUrl, adminUsername, adminPassword);
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,181,boolean hasUser = checkRangerUser(rangerUserUrl, adminUsername, adminPassword,
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,188,int response = checkLogin(rangerAuthUrl, rangerAdminUsername, rangerAdminPassword);
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,241,private int checkLogin(String url, String username, String password) throws IOException {
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,245,HttpURLConnection conn = m_streamProvider.processURL(url, "GET", (InputStream) null, headers);
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,272,private boolean checkRangerUser(String rangerUserUrl, String username, String password,
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,273,String userToSearch, PrerequisiteCheck check, PrereqCheckRequest request, List<String> warnReasons) {
ambari-server/src/main/java/org/apache/ambari/server/checks/RangerPasswordCheck.java,280,HttpURLConnection conn = m_streamProvider.processURL(url, "GET", (InputStream) null, headers);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,936,throw new KerberosMissingAdminCredentialsException(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,945,);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,994,throw new KerberosMissingAdminCredentialsException(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1003,);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1196,Map<String, Service> services = cluster.getServices();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1198,if ((services != null) && !services.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1199,String clusterName = cluster.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1200,Map<String, Host> hosts = clusters.getHostsForCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1202,if ((hosts != null) && !hosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1203,List<ServiceComponentHost> serviceComponentHostsToProcess = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1204,KerberosDescriptor kerberosDescriptor = getKerberosDescriptor(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1205,KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1206,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1209,Set<String> hostsWithValidKerberosClient = getHostsWithValidKerberosClient(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1215,File dataDirectory = createTemporaryDirectory();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1218,File identityDataFile = new File(dataDirectory, KerberosIdentityDataFileWriter.DATA_FILE_NAME);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1221,KerberosIdentityDescriptor identity = new KerberosIdentityDescriptor(new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1223,put("principal",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1224,new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1226,put("value", "${kerberos-env/service_check_principal_name}@${realm}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1227,put("type", "user");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1230,put("keytab",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1231,new HashMap<String, Object>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1233,put("file", "${keytab_dir}/kerberos.service_check.${short_date}.keytab");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1235,put("owner", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1236,put("name", "${cluster-env/smokeuser}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1237,put("access", "rw");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1240,put("group", new HashMap<String, Object>() {{
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1241,put("name", "${cluster-env/user_group}");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1242,put("access", "r");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1245,put("cachable", "false");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1251,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1255,for (Host host : hosts.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1256,String hostname = host.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1259,List<ServiceComponentHost> serviceComponentHosts = cluster.getServiceComponentHosts(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1261,if ((serviceComponentHosts != null) && !serviceComponentHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1264,Map<String, Map<String, String>> configurations = calculateConfigurations(cluster, hostname, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1267,configurations.get("").put("short_date", new SimpleDateFormat("MMddyy").format(new Date()));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1272,for (ServiceComponentHost sch : serviceComponentHosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1273,String serviceName = sch.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1274,String componentName = sch.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1279,if (Service.Type.KERBEROS.name().equals(serviceName) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1280,Role.KERBEROS_CLIENT.name().equals(componentName) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1281,(sch.getState() == State.INSTALLED)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1282,hostsWithValidKerberosClient.add(hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1284,int identitiesAdded = 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1287,if (kerberosIdentityDataFileWriter == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1288,kerberosIdentityDataFileWriter = kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1292,identitiesAdded += addIdentities(kerberosIdentityDataFileWriter, Collections.singleton(identity),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1293,null, hostname, serviceName, componentName, null, configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1295,if (identitiesAdded > 0) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1297,if (!commandParameters.containsKey("principal_name") || !commandParameters.containsKey("keytab_file")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1298,commandParameters.put("principal_name",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1299,variableReplacementHelper.replaceVariables(identity.getPrincipalDescriptor().getValue(), configurations));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1300,commandParameters.put("keytab_file",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1301,variableReplacementHelper.replaceVariables(identity.getKeytabDescriptor().getFile(), configurations));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1304,serviceComponentHostsToProcess.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1311,String message = String.format("Failed to write index file - %s", identityDataFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1312,LOG.error(message);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1313,throw new AmbariException(message, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1315,if (kerberosIdentityDataFileWriter != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1317,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1318,kerberosIdentityDataFileWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1320,LOG.warn("Failed to close the index file writer", e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1327,if (!serviceComponentHostsToProcess.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1328,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1329,validateKDCCredentials(kerberosDetails, cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1331,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1332,FileUtils.deleteDirectory(dataDirectory);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1334,LOG.warn(String.format("The data directory (%s) was not deleted due to an error condition - {%s}",
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1335,dataDirectory.getAbsolutePath(), t.getMessage()), t);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1338,throw e;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1345,Map<String, Set<String>> clusterHostInfo = StageUtils.getClusterHostInfo(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1346,String clusterHostInfoJson = StageUtils.getGson().toJson(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1347,Map<String, String> hostParams = customCommandExecutionHelper.createDefaultHostParams(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1348,String hostParamsJson = StageUtils.getGson().toJson(hostParams);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1349,String ambariServerHostname = StageUtils.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1350,ServiceComponentHostServerActionEvent event = new ServiceComponentHostServerActionEvent(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1352,ambariServerHostname, // TODO: Choose a random hostname from the cluster. All tasks for the AMBARI_SERVER service will be executed on this Ambari server
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1353,System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1354,RoleCommandOrder roleCommandOrder = ambariManagementController.getRoleCommandOrder(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1357,if (requestStageContainer == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1358,requestStageContainer = new RequestStageContainer(
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1359,actionManager.getNextRequestId(),
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1360,null,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1361,requestFactory,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1362,actionManager);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1368,handler.createStages(cluster,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1369,clusterHostInfoJson, hostParamsJson, event, roleCommandOrder, kerberosDetails,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1370,dataDirectory, requestStageContainer, serviceComponentHostsToProcess,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1371,Collections.<String, Collection<String>>emptyMap(), null, null, hostsWithValidKerberosClient);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1374,handler.addFinalizeOperationStage(cluster, clusterHostInfoJson, hostParamsJson, event,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1375,dataDirectory, roleCommandOrder, requestStageContainer);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,113,boolean regenerateKeytabs = "true".equalsIgnoreCase(getCommandParameterValue(getCommandParameters(), REGENERATE_ALL));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,119,String password = principalPasswordMap.get(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,121,if (password == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,89,String message = String.format("Destroying identity, %s", evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,90,LOG.info(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,91,actionLog.writeStdOut(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,93,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,94,operationHandler.removePrincipal(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,96,message = String.format("Failed to remove identity for %s from the KDC - %s", evaluatedPrincipal, e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,97,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,98,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,101,try {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,102,KerberosPrincipalEntity principalEntity = kerberosPrincipalDAO.find(evaluatedPrincipal);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,104,if(principalEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,105,String cachedKeytabPath = principalEntity.getCachedKeytabPath();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,107,kerberosPrincipalDAO.remove(principalEntity);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,110,if (cachedKeytabPath != null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,111,if (!new File(cachedKeytabPath).delete()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,112,LOG.debug(String.format("Failed to remove cached keytab for %s", evaluatedPrincipal));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,117,catch (Throwable t) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,118,message = String.format("Failed to remove identity for %s from the Ambari database - %s", evaluatedPrincipal, t.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,119,LOG.warn(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/DestroyPrincipalsServerAction.java,120,actionLog.writeStdErr(message);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,231,invokeKAdmin(String.format("change_password -pw \"%s\" %s", password, principal));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/MITKerberosOperationHandler.java,233,return getKeyNumber(principal);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,392,String duplicateMessage = "Duplicate entry for Host"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,393,+ ", hostName= " + hostname;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,396,throw new AmbariException(duplicateMessage);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,726,unmapHostFromClusters(hostname, new HashSet<Cluster>() {{
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,727,add(cluster);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,1353,else
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,60,public void perform(PrerequisiteCheck prerequisiteCheck, PrereqCheckRequest request) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,72,if (!service.isClientOnlyService()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,73,Map<String, ServiceComponent> serviceComponents = service.getServiceComponents();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,75,for (Map.Entry<String, ServiceComponent> component : serviceComponents.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,77,boolean ignoreComponent = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,78,boolean checkThreshold = false;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,80,ServiceComponent serviceComponent = component.getValue();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,82,if (serviceComponent.isClientComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,83,ignoreComponent = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,87,if (!ignoreComponent && !serviceComponent.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,88,ComponentInfo componentInfo = ambariMetaInfo.get().getComponent(
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,89,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,90,serviceComponent.getServiceName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,92,String cardinality = componentInfo.getCardinality();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,94,if (null != cardinality &&
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,95,(cardinality.equals("ALL") || cardinality.matches("[1-9].*"))) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,96,checkThreshold = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,100,if (!serviceComponent.isVersionAdvertised()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,101,ignoreComponent = true;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,109,if (!ignoreComponent) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,110,List<HostComponentSummary> hostComponentSummaries = HostComponentSummary.getHostComponentSummaries(service.getName(), serviceComponent.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,112,if (checkThreshold && !hostComponentSummaries.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,113,int total = hostComponentSummaries.size();
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,114,int up = 0;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,115,int down = 0;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,117,for(HostComponentSummary s : hostComponentSummaries) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,118,if ((s.getDesiredState() == State.INSTALLED || s.getDesiredState() == State.STARTED) && State.STARTED != s.getCurrentState()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,119,down++;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,121,up++;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,125,if ((float) down/total > SLAVE_THRESHOLD) { // arbitrary
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,126,failedServiceNames.add(service.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,127,String message = MessageFormat.format("{0}: {1} out of {2} {3} are started; there should be {4,number,percent} started before upgrading.",
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,128,service.getName(), up, total, serviceComponent.getName(), SLAVE_THRESHOLD);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,129,errorMessages.add(message);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,132,for(HostComponentSummary s : hostComponentSummaries) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,133,if ((s.getDesiredState() == State.INSTALLED || s.getDesiredState() == State.STARTED) && State.STARTED != s.getCurrentState()) {
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,134,failedServiceNames.add(service.getName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,135,String message = MessageFormat.format("{0}: {1} (in {2} on host {3})", service.getName(), serviceComponent.getName(), s.getCurrentState(), s.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,136,errorMessages.add(message);
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,137,break;
ambari-server/src/main/java/org/apache/ambari/server/checks/ServicesUpCheck.java,149,prerequisiteCheck.setFailReason("The following Service Components should be in a started state.  Please invoke a service Stop and full Start and try again. " + StringUtils.join(errorMessages, ", "));
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,31,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,32,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,59,this.hostName = host.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/orm/models/HostComponentSummary.java,67,return (this.hostName == null || this.hostName.isEmpty()) ? "" : this.hostName;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,375,if (!hosts.containsKey(hostId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,379,return hosts.get(hostId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,193,protected static boolean isRangerPluginEnabled(Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,194,boolean isRangerPluginEnabled = false;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,200,isRangerPluginEnabled = rangerKnoxPluginEnabled.toLowerCase().equals("yes");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,204,return isRangerPluginEnabled;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1369,newHiveEnvProperties.put("hive_security_authorization", "None");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1374,updateConfigurationPropertiesForCluster(cluster, "ranger-hive-plugin-properties", new HashMap<String, String>(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1375,removeRangerHiveProperties, false, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1500,if (cluster.getDesiredConfigByType("hive-env").getProperties().containsKey("hive_security_authorization") &&
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1506,updateConfigurationPropertiesForCluster(cluster, "hiveserver2-site", new HashMap<String, String>(), hiveServerSiteRemoveProps, false, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1512,String hive_server2_auth = "";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1513,if (cluster.getDesiredConfigByType("hive-site").getProperties().containsKey("hive.server2.authentication")) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1514,hive_server2_auth = cluster.getDesiredConfigByType("hive-site").getProperties().get("hive.server2.authentication");
ambari-server/src/main/java/org/apache/ambari/server/view/persistence/DataStoreImpl.java,121,protected static final int MAX_ENTITY_STRING_FIELD_LENGTH = 3200;
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,258,persist();
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,347,String reservedHostName = hostGroupEntity.
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,348,getTopologyHostInfoEntities().iterator().next().getFqdn();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/PropertyHelper.java,59,Arrays.asList("._sum", "._max", "._min", "._avg");
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,375,AlertDefinitionEntity entity = entityManagerProvider.get().merge(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDefinitionDAO.java,376,alertDefinition);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,20,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,21,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,22,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,23,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,24,import java.util.concurrent.locks.ReentrantLock;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,26,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,27,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,28,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,29,import javax.persistence.criteria.Order;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,30,import javax.persistence.metamodel.SingularAttribute;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,52,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,53,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,54,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,55,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,687,TypedQuery<AlertNoticeEntity> currentQuery = entityManager.createNamedQuery(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,690,currentQuery.setParameter("definitionId", definitionId);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertDispatchDAO.java,691,currentQuery.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,526,AlertSummaryDTO.class.getName());
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,539,sb.toString(), AlertSummaryDTO.class);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,792,int rowsRemoved = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,824,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,855,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/AlertsDAO.java,909,int removedItems = query.executeUpdate();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,311,hostLevelParams.putAll(managementController.getRcaParameters());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,277,resource.setProperty(STAGE_COMMAND_PARAMS, entity.getCommandParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,282,resource.setProperty(STAGE_HOST_PARAMS, entity.getHostParamsStage());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,227,setResourceProperty(r, STAGE_MAPPED_IDS.get(propertyId),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeItemResourceProvider.java,228,stage.getPropertyValue(propertyId), requestPropertyIds);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/Aggregator.java,180,if ((tezDagId.status.compareToIgnoreCase(Job.JOB_STATE_UNKNOWN) != 0) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,480,if (typeMap.containsKey(config)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,481,return entry.getKey();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,220,int count = 1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,222,if (!timelineClusterMetricMap.containsKey(clusterMetric)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,223,sum = metric.getValue();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AggregatorUtils.java,48,metricCount = metricValues.values().size();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,221,Double sum;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,225,count++;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,226,Double oldValue = timelineClusterMetricMap.get(clusterMetric);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,227,sum = oldValue + metric.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,400,commandParams.put(SERVICE_PACKAGE_FOLDER,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,401,serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,405,ClusterVersionEntity currentClusterVersion = cluster.getCurrentClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,406,if (currentClusterVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,407,commandParams.put(KeyNames.VERSION, currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,592,commandParams.put(SERVICE_PACKAGE_FOLDER,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,593,serviceInfo.getServicePackageFolder());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1991,ClusterVersionEntity currentClusterVersion = cluster.getCurrentClusterVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1992,if (currentClusterVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1993,commandParams.put(VERSION, currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,56,query = "SELECT u FROM UpgradeEntity u WHERE u.clusterId = :clusterId AND u.direction = :direction ORDER BY u.upgradeId DESC"),
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,177,current.setLatestText(alert.getText());
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,178,toMerge.put(alert, current);
ambari-server/src/main/java/org/apache/ambari/server/state/AlertState.java,40,UNKNOWN
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,21,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,76,private static final String STALE_ALERTS_MSG = "There are {0} stale alerts from {1} host(s): {2}";
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,132,Set<String> staleAlerts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,133,Set<String> hostsWithStaleAlerts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/alerts/StaleAlertRunnable.java,190,StringUtils.join(staleAlerts, ", "));
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,317,if( null == clusterName ){
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,322,String ambariServiceName = Services.AMBARI.name();
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,323,if (ambariServiceName.equals(serviceName)) {
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,351,LOG.error("Unable to process alert {} for an invalid host named {}",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,356,LOG.error("Unable to process alert {} for an invalid service named {}",
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,365,LOG.error(
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,22,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,23,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,25,import org.apache.ambari.server.orm.RequiresSession;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,26,import org.apache.ambari.server.orm.entities.HostEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,27,import org.apache.ambari.server.orm.entities.StageEntity;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,32,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,33,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,34,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,117,public void removeByName(String hostName) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostDAO.java,118,remove(findByName(hostName));
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,21,import org.apache.ambari.server.AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,68,public Map<String, Cluster> getClusters();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,74,public List<Host> getHosts();
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,92,public Host getHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,99,public boolean hostExists(String hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,107,public Host getHostById(Long hostId) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,114,public void addHost(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,141,public void updateClusterName(String oldName, String newName);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,149,public Cluster getClusterById(long id) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,155,public void debugDump(StringBuilder sb);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,198,public void updateHostWithClusterAndAttributes(
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,227,public boolean checkPermission(String clusterName, boolean readOnly);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,235,public void addSessionAttributes(String name, Map<String, Object> attributes);
ambari-server/src/main/java/org/apache/ambari/server/state/Clusters.java,244,public Map<String, Object> getSessionAttributes(String name);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,165,if (isLastCheckPointTooOld(lastCheckPointTime)) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,166,LOG.warn("Last Checkpoint is too old, discarding last checkpoint. " +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,168,lastCheckPointTime = -1;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,170,if (lastCheckPointTime == -1) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,174,LOG.info("Saving checkpoint time on first run. " +
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/AbstractTimelineAggregator.java,184,private boolean isLastCheckPointTooOld(long checkpoint) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,110,serviceConfigTypes.put(Service.Type.MAPREDUCE, "mapred-site");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,118,componentServiceMap.put("JOBTRACKER", Service.Type.MAPREDUCE);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,119,componentServiceMap.put("TASKTRACKER", Service.Type.MAPREDUCE);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,131,initPropMap = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,132,initPropMap.put("JOBTRACKER", new String[]{"mapred.job.tracker.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,133,initPropMap.put("TASKTRACKER", new String[]{"mapred.task.tracker.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,134,serviceDesiredProperties.put(Service.Type.MAPREDUCE, initPropMap);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,247,String category = getCategory(bean);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,366,private String getCategory(Map<String, Object> bean) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,372,name = name.replace("ForPort" + port, "");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,140,HostRoleStatus status = calculateSummaryStatus(taskStatusCounts, size, skippable);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,166,calculateSummaryStatus(calculateTaskEntityStatusCounts(stageTasks), stageTasks.size(), stage.isSkippable());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,175,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,202,calculateSummaryStatus(calculateTaskStatusCounts(stageTasks), stageTasks.size(), stage.isSkippable());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,211,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,320,HostRoleStatus stageStatus = calculateSummaryStatus(counts, total, skip);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,378,private static HostRoleStatus calculateSummaryStatus(Map<HostRoleStatus, Integer> counters,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,380,return counters.get(HostRoleStatus.PENDING) == total ? HostRoleStatus.PENDING :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,381,counters.get(HostRoleStatus.HOLDING) > 0 ? HostRoleStatus.HOLDING :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,382,counters.get(HostRoleStatus.HOLDING_FAILED) > 0 ? HostRoleStatus.HOLDING_FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,383,counters.get(HostRoleStatus.HOLDING_TIMEDOUT) > 0 ? HostRoleStatus.HOLDING_TIMEDOUT :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,384,counters.get(HostRoleStatus.FAILED) > 0 && !skippable ? HostRoleStatus.FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,385,counters.get(HostRoleStatus.ABORTED) > 0 ? HostRoleStatus.ABORTED:
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,386,counters.get(HostRoleStatus.TIMEDOUT) > 0 && !skippable ? HostRoleStatus.TIMEDOUT :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,387,counters.get(HostRoleStatus.COMPLETED) == total ? HostRoleStatus.COMPLETED : HostRoleStatus.IN_PROGRESS;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,451,upgradeEntity = s_upgradeDAO.merge(upgradeEntity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1551,if (HostRoleStatus.PENDING == status && internalStatus != HostRoleStatus.ABORTED) {
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/UserLocal.java,137,public static void dropInstanceConnection(String instanceName){
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ViewImpl.java,48,UserLocal.dropInstanceConnection(definition.getInstanceName());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,224,protected static String logException(Throwable throwable) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,225,String msg = "Caught exception getting JMX metrics : " + throwable.getLocalizedMessage();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,227,LOG.debug(msg, throwable);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,145,StackId stackId = service.getCluster().getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,147,stackId.getStackName(), stackId.getStackVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,153,StackId stackId = service.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,154,try {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,155,ComponentInfo compInfo = ambariMetaInfo.getComponent(
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,156,stackId.getStackName(), stackId.getStackVersion(), service.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,157,componentName);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,158,isClientComponent = compInfo.isClient();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,159,isMasterComponent = compInfo.isMaster();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,160,isVersionAdvertised = compInfo.isVersionAdvertised();
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,162,throw new AmbariException("Trying to create a ServiceComponent"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,163,+ " not recognized in stack info"
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,166,+ ", componentName=" + componentName
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,167,+ ", stackInfo=" + stackId.getStackId());
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,206,dfs.copyFromLocalFile(new Path(resource.getSource()), pathHadoop);// copy
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,21,import org.apache.commons.logging.Log;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,22,import org.apache.commons.logging.LogFactory;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,77,List<Long[]> timeSlices = getTimeSlices(startTime - serverTimeShiftAdjustment, endTime);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,100,condition.addOrderByColumn("SERVER_TIME");
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,108,private List<Long[]> getTimeSlices(long startTime, long endTime) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,119,throws SQLException, IOException {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,186,private Map<TimelineClusterMetric, Double> sliceFromTimelineMetric(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,187,TimelineMetric timelineMetric, List<Long[]> timeSlices) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricClusterAggregatorSecond.java,229,timelineClusterMetricMap.put(clusterMetric, (sum / count));
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/UpgradeEntity.java,220,this.downgrade_allowed = (!canDowngrade ? (short)0 : (short)1);
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/ambari/RemoteCluster.java,80,return (String) properties.get(key);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,22,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ExecutionCommandWrapper.java,34,import org.apache.ambari.server.state.DesiredConfig;
ambari-server/src/main/java/org/apache/ambari/server/controller/StackServiceResponse.java,111,public String getServiceDisplayName() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,411,LOG.error("Failed to run generate client configs script for a component " + componentName, e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClientConfigResourceProvider.java,412,throw new SystemException("Failed to run generate client configs script for a component " + componentName, e);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceInfo.java,257,public String getVersion() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2538,String error = "Updating configs for multiple services by a " +
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2541,LOG.error(error + ", config version not created");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,984,return propertyValue.contains("0.0.0.0");
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,37,public Long getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,44,public void setClusterId(Long clusterId);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,51,public Blueprint getBlueprint();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,60,public Configuration getConfiguration();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,67,public Map<String, HostGroupInfo> getHostGroupInfo();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,76,public Collection<String> getHostGroupsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,86,public String getHostGroupForHost(String hostname);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,96,public Collection<String> getHostAssignmentsForComponent(String component);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,106,public void update(TopologyRequest topologyRequest) throws InvalidTopologyException;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,117,public void addHostToTopology(String hostGroupName, String host) throws InvalidTopologyException, NoSuchHostGroupException;
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,124,public boolean isNameNodeHAEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,131,public boolean isYarnResourceManagerHAEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,138,public boolean isClusterKerberosEnabled();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,146,public RequestStatusResponse installHost(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,154,public RequestStatusResponse startHost(String hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,156,public void setConfigRecommendationStrategy(ConfigRecommendationStrategy strategy);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,158,public ConfigRecommendationStrategy getConfigRecommendationStrategy();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,160,public Map<String, AdvisedConfiguration> getAdvisedConfigurations();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopology.java,163,public AmbariContext getAmbariContext();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,577,private void processAcceptedHostOffer(ClusterTopology topology, final HostOfferResponse response, HostImpl host) {
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,131,private Map<String, String> properties;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,135,private Map<String, ValueAttributesInfo> propertyAttributes;
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/recommendations/RecommendationResponse.java,146,this.properties = properties;
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1729,DEFAULT_REQUEST_CONNECT_TIMEOUT,
ambari-server/src/main/java/org/apache/ambari/server/view/ViewRegistry.java,1730,DEFAULT_REQUEST_READ_TIMEOUT,
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Utils.java,71,nonEmptyStrings.add(str);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,303,Collection<HostRoleStatus> stageStatuses = new HashSet<HostRoleStatus>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,304,Collection<HostRoleStatus> taskStatuses = new ArrayList<HostRoleStatus>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,306,HostRoleStatus displayStatus = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,328,HostRoleStatus status = calculateSummaryStatus(calculateStatusCounts(stageStatuses), stageStatuses.size(), false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,401,private static HostRoleStatus calculateDisplayStatus(Map<HostRoleStatus, Integer> counters, HostRoleStatus previousStatus) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,402,return previousStatus != null && previousStatus.equals(HostRoleStatus.SKIPPED_FAILED) || counters.get(HostRoleStatus.SKIPPED_FAILED) > 0 ? HostRoleStatus.SKIPPED_FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,24,import com.rits.cloning.Cloner;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,61,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,601,private Map<String, Map<String, List<MetricDefinition>>> removeAggregateFunctions(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,605,Cloner cloner = new Cloner();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,606,filteredServiceMetrics = cloner.deepClone(serviceMetrics);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,608,for (Map<String, List<MetricDefinition>> componentMetricDef :  filteredServiceMetrics.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,610,for (Map.Entry<String, List<MetricDefinition>> metricDefEntry : componentMetricDef.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,612,for (MetricDefinition metricDefinition : metricDefEntry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,614,if (metricDefinition.getType().equals("ganglia")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,616,for (Map<String, Metric> metricByCategory : metricDefinition.getMetricsByCategory().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,617,Iterator<Map.Entry<String, Metric>> iterator = metricByCategory.entrySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,618,while (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,619,Map.Entry<String, Metric> entry = iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,620,String metricName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,621,if (PropertyHelper.hasAggregateFunctionSuffix(metricName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,622,iterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,634,private List<MetricDefinition> removeAggregateFunctions(List<MetricDefinition> componentMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,636,if (componentMetrics != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,637,Cloner cloner = new Cloner();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,638,filteredComponentMetrics = cloner.deepClone(componentMetrics);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,640,for (MetricDefinition metricDefinition : filteredComponentMetrics) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,642,if (metricDefinition.getType().equals("ganglia")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,644,for (Map<String, Metric> metricByCategory : metricDefinition.getMetricsByCategory().values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,645,Iterator<Map.Entry<String, Metric>> iterator = metricByCategory.entrySet().iterator();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,646,while (iterator.hasNext()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,647,Map.Entry<String, Metric> entry = iterator.next();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,648,String metricName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,649,if (PropertyHelper.hasAggregateFunctionSuffix(metricName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,650,iterator.remove();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackArtifactResourceProvider.java,657,return  filteredComponentMetrics;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,519,setRestartRequiredServices(s, request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,660,Service service, String hostName) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,671,if (serviceComponent.isMasterComponent()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,672,Map<String, ServiceComponentHost> schMap = serviceComponent.getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,674,if(schMap.containsKey(hostName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,675,for (Entry<String, ServiceComponentHost> sch : schMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,676,ServiceComponentHost serviceComponentHost = sch.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,677,serviceComponentHost.setRestartRequired(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2892,setRestartRequiredServices(service, request.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,535,LOG.error("Exception initializing jmx port maps. " + e);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StackDefinedPropertyProvider.java,210,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1087,Map<String, String> createDefaultHostParams(Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,1092,Map<String, String> createDefaultHostParams(Cluster cluster, StackId stackId) {
ambari-server/src/main/java/org/apache/ambari/server/state/PropertyInfo.java,237,DONT_ADD_ON_UPGRADE
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,137,+ ", changePermissionforParents=" + changePermissionforParents + "]";
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java,58,private Root<T> m_root;
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaPredicateVisitor.java,63,private CriteriaQuery<T> m_query;
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaSortBuilder.java,88,path = query.from(visitor.getEntityClass()).get(
ambari-server/src/main/java/org/apache/ambari/server/api/query/JpaSortBuilder.java,89,singularAttribute.getName());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,44,import org.apache.phoenix.exception.SQLExceptionCode;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,76,import static org.apache.hadoop.yarn.server.applicationhistoryservice.metrics.timeline.query.PhoenixTransactSQL.ALTER_SQL;
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,263,encoding, precisionTtl, compression);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,270,METRICS_AGGREGATE_MINUTE_TABLE_NAME, encoding, hostMinTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,272,METRICS_AGGREGATE_HOURLY_TABLE_NAME, encoding, hostHourTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,274,METRICS_AGGREGATE_DAILY_TABLE_NAME, encoding, hostDailyTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,278,METRICS_CLUSTER_AGGREGATE_TABLE_NAME, encoding, clusterMinTtl, compression);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,285,METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME, encoding, clusterHourTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,287,METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME, encoding, clusterHourTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,289,METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME, encoding, clusterDailyTtl, compression));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,292,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,293,METRICS_RECORD_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,294,precisionTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,295,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,296,METRICS_AGGREGATE_MINUTE_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,297,hostMinTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,298,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,299,METRICS_AGGREGATE_HOURLY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,300,hostHourTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,301,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,302,METRICS_AGGREGATE_DAILY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,303,hostDailyTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,304,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,305,METRICS_CLUSTER_AGGREGATE_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,306,clusterSecTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,307,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,308,METRICS_CLUSTER_AGGREGATE_MINUTE_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,309,clusterMinTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,310,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,311,METRICS_CLUSTER_AGGREGATE_HOURLY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,312,clusterHourTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,313,stmt.executeUpdate(String.format(ALTER_SQL,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,314,METRICS_CLUSTER_AGGREGATE_DAILY_TABLE_NAME,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,315,clusterDailyTtl));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,321,if (sql.getErrorCode() ==
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,322,SQLExceptionCode.SET_UNSUPPORTED_PROP_ON_ALTER_TABLE.getErrorCode()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,323,LOG.warn("Cannot update TTL on tables. " + sql.getMessage());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,325,LOG.error("Error creating Metrics Schema in HBase using Phoenix.", sql);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,326,throw new MetricsSystemInitializationException(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,330,LOG.error("Error creating Metrics Schema in HBase using Phoenix.", e);
ambari-server/src/main/java/org/apache/ambari/server/events/listeners/alerts/AlertReceivedListener.java,168,current.setMaintenanceState(MaintenanceState.OFF);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,682,if((configType != null) && (updates != null) && !updates.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,683,Config oldConfig = cluster.getDesiredConfigByType(configType);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,684,Map<String, String> oldConfigProperties;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,685,Map<String, String> properties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,686,Map<String, Map<String, String>> propertiesAttributes =
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,687,new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,689,if (oldConfig == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,690,oldConfigProperties = null;
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,692,oldConfigProperties = oldConfig.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,693,if (oldConfigProperties != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,694,properties.putAll(oldConfigProperties);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,696,if (oldConfig.getPropertiesAttributes() != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,697,propertiesAttributes.putAll(oldConfig.getPropertiesAttributes());
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,704,if(removals != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,705,for (String propertyName : removals) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,706,properties.remove(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,707,for (Map<String, String> attributesMap: propertiesAttributes.values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,708,attributesMap.remove(propertyName);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,714,|| !Maps.difference(oldConfigProperties, properties).areEqual()) {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,715,createConfigType(cluster, controller, configType, properties,
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,716,propertiesAttributes, authenticatedUserName, serviceVersionNote);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2242,configGroup == null ? "default" : configGroup.getName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2417,groupName = "deleted";
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2420,groupName = "default";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,171,parseConfigurations(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/Stack.java,653,private void parseConfigurations(String service) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,122,Map<String, DesiredConfig> clusterDesired = (cluster == null) ? new HashMap<String, DesiredConfig>() : cluster.getDesiredConfigs();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2103,return getDesiredConfigs(true);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2112,Map<String, Set<DesiredConfig>> activeConfigsByType = getDesiredConfigs(false);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2132,private Map<String, Set<DesiredConfig>> getDesiredConfigs(boolean allVersions) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,20,import com.google.common.collect.Maps;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,22,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,23,import com.google.inject.Provider;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,24,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,51,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,52,import javax.xml.parsers.DocumentBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,53,import javax.xml.parsers.DocumentBuilderFactory;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,54,import java.io.StringReader;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,55,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,56,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,57,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,58,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,59,import java.util.Comparator;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,60,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,61,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,62,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,63,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,64,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/AbstractUpgradeCatalog.java,65,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,21,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,22,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,23,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,24,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,25,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,26,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,27,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,28,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,29,import java.util.concurrent.ConcurrentHashMap;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,30,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,31,import java.util.concurrent.locks.ReentrantReadWriteLock;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,33,import javax.persistence.RollbackException;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,87,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,88,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,89,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,337,r.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,338,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,339,if(!hostClusterMap.containsKey(hostname)){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,340,throw new HostNotFoundException(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,342,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,343,LOG.debug("Looking up clusters for hostname"
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,344,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,345,+ ", mappedClusters=" + hostClusterMap.get(hostname).size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,347,return Collections.unmodifiableSet(hostClusterMap.get(hostname));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,349,r.unlock();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,32,import org.apache.commons.io.IOUtils;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,229,String[] env = new String[envVariables.size()];
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,230,int iVar = 0;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,233,env[iVar++] = pair.getKey() + "=" + pair.getValue();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,243,Process process = Runtime.getRuntime().exec(command, env);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,245,PrintWriter stdOutWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,246,PrintWriter stdErrWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,248,try {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,249,stdOutWriter = new PrintWriter(bootStrapOutputFilePath);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,250,stdErrWriter = new PrintWriter(bootStrapErrorFilePath);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,251,IOUtils.copy(process.getInputStream(), stdOutWriter);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,252,IOUtils.copy(process.getErrorStream(), stdErrWriter);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,255,stdOutWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,258,stdErrWriter.close();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,265,int exitCode = process.waitFor();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,377,PrintWriter setupAgentLogWriter  = null;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,380,for (String host : sshHostInfo.getHosts()) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,381,setupAgentDoneWriter = new PrintWriter(new File(requestIdDir, host + BSHostStatusCollector.doneFileFilter));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,382,setupAgentLogWriter = new PrintWriter(new File(requestIdDir, host + BSHostStatusCollector.logFileFilter));
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,383,setupAgentLogWriter.print("Error while bootstrapping:\n" + errMesg);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,386,setupAgentLogWriter.close();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,288,String json = context.getInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,289,if (json == null) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,290,throw new NotFoundFormattedException("Request is old", null);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,292,DownloadRequest request = gson.fromJson(json, DownloadRequest.class);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,293,context.removeInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,313,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,314,String requestId = generateUniqueIdentifer(request);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,315,JSONObject json = new JSONObject();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,316,json.put("requestId", requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,317,return Response.ok(json).build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,319,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,321,throw new ServiceFormattedException(ex.getMessage(), ex);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,336,String json = context.getInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,337,DownloadRequest request = gson.fromJson(json, DownloadRequest.class);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,338,context.removeInstanceData(requestId);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/DownloadService.java,375,context.putInstanceData(uuid, json);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,323,throw new InvalidTopologyException("The following hosts are mapped to multiple host groups: " + duplicates);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupInfo.java,120,hostNames.add(hostName);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,716,hostRoleCommandCache.invalidateAll(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,734,LOG.info("Invalidating command cache on host delete event." );
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,735,LOG.debug("HostRemovedEvent => " + event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,36,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,60,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,405,addRepoInfoToHostLevelParams(cluster, execCmd.getHostLevelParams(), hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceConfigVersionResponse.java,24,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2246,String configGroupName = configGroup != null ? configGroup.getName() : null;
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessor.java,29,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,63,final EntityTransaction txn = em.getTransaction();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,64,txn.begin();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,67,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,68,result = methodInvocation.proceed();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,72,if (rollbackIfNecessary(transactional, e, txn)) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,76,detailedLogForPersistenceError(e);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,79,throw e;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,82,if (null != didWeStartWork.get() && !txn.isActive()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,83,didWeStartWork.remove();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,84,unitOfWork.end();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,90,try {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,91,txn.commit();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,93,detailedLogForPersistenceError(e);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,94,throw e;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,97,if (null != didWeStartWork.get()) {
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,98,didWeStartWork.remove();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,99,unitOfWork.end();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,104,return result;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/client/Row.java,60,return Arrays.equals(row, row1.row);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,24,import org.apache.ambari.view.hive.client.ColumnDescription;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,25,import org.apache.ambari.view.hive.client.HiveClientException;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,27,import org.apache.ambari.view.hive.resources.jobs.NoOperationStatusSetException;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,37,import org.json.simple.JSONArray;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,39,import org.json.simple.JSONValue;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,46,import java.util.ArrayList;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,47,import java.util.HashMap;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,48,import java.util.List;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,49,import java.util.Map;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,65,final private String HIVE_META_STORE_LOCATION_KEY = "hive.metastore.warehouse.dir";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,66,final private String HIVE_SITE = "hive-site";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,67,final private String HIVE_DEFAULT_DB = "default";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,76,ParseOptions parseOptions = new ParseOptions();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,77,parseOptions.setOption(ParseOptions.OPTIONS_FILE_TYPE, ParseOptions.FILE_TYPE_CSV);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,78,parseOptions.setOption(ParseOptions.OPTIONS_HEADER, ParseOptions.HEADER_FIRST_RECORD);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,81,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream), parseOptions);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,83,dataParser.parsePreview();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,85,Map<String, Object> retData = new HashMap<String, Object>();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,86,retData.put("header", dataParser.getHeader());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,87,retData.put("rows", dataParser.getPreviewRows());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,88,retData.put("isFirstRowHeader", true);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,90,JSONObject jsonObject = new JSONObject(retData);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,91,return Response.ok(jsonObject).build();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,97,public static class TableInput {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,98,public Boolean isFirstRowHeader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,99,public String header;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,100,public String tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,101,public String databaseName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,103,public TableInput() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,106,public Boolean getIsFirstRowHeader() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,107,return isFirstRowHeader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,110,public void setIsFirstRowHeader(Boolean isFirstRowHeader) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,111,this.isFirstRowHeader = isFirstRowHeader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,114,public String getHeader() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,115,return header;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,118,public void setHeader(String header) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,119,this.header = header;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,122,public String getTableName() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,123,return tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,126,public void setTableName(String tableName) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,127,this.tableName = tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,130,public String getDatabaseName() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,131,return databaseName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,134,public void setDatabaseName(String databaseName) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,135,this.databaseName = databaseName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,143,public Response createTable(TableInput tableInput) throws IllegalAccessException, InvocationTargetException, ItemNotFound, NoSuchMethodException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,144,String header = tableInput.getHeader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,145,String databaseName = tableInput.getDatabaseName();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,146,String tableName = tableInput.getTableName();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,147,Boolean isFirstRowHeader = (Boolean) tableInput.getIsFirstRowHeader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,149,Object headerObj = JSONValue.parse(header);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,150,JSONArray array = (JSONArray) headerObj;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,151,List<ColumnDescription> cdList = new ArrayList<ColumnDescription>(array.size());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,152,for (Object o : array) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,153,JSONObject jo = (JSONObject) o;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,154,String name = (String) jo.get("name");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,155,String type = (String) jo.get("type");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,156,Long p = (Long) jo.get("position");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,157,Integer position = p != null ? p.intValue() : 0;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,159,ColumnDescriptionImpl cdi = new ColumnDescriptionImpl(name, type, position);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,160,cdList.add(cdi);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,163,Map jobInfo = new HashMap<String, String>();//PropertyUtils.describe(request.job);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,165,jobInfo.put("forcedContent", generateCreateQuery(databaseName, tableName, cdList));
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,177,String filePath = (databaseName == null || databaseName.equals(HIVE_DEFAULT_DB)) ? "" : databaseName + ".db/";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,178,filePath += tableName + "/" + tableName + ".csv";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,180,JSONObject jobObject = new JSONObject();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,181,jobObject.put("jobId", job.getId());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,182,jobObject.put("filePath", filePath);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,184,LOG.info("Create table query submitted : file should be uploaded at location : {}", filePath);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,185,return Response.ok(jobObject).status(201).build();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,192,public Response isTableCreated(@QueryParam("jobId") int jobId) throws IllegalAccessException, NoSuchMethodException, InvocationTargetException, ItemNotFound, HiveClientException, NoOperationStatusSetException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,193,JobController jobController = getResourceManager().readController(jobId + "");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,194,LOG.info("jobController.getStatus().status : {} for job : {}", jobController.getStatus().status, jobController.getJob().getId());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,195,JSONObject jsonObject = new JSONObject();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,196,jsonObject.put("status", jobController.getStatus().status);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,197,return Response.ok(jsonObject).build();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,203,public Response uploadFile(
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,209,) throws IOException, InterruptedException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,210,LOG.info("inside uploadFile : isFirstRowHeader : {} , filePath : {}", isFirstRowHeader, filePath);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,213,parseOptions.setOption(ParseOptions.OPTIONS_FILE_TYPE, ParseOptions.FILE_TYPE_CSV);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,214,parseOptions.setOption(ParseOptions.HEADERS,cdList);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,217,parseOptions.setOption(ParseOptions.OPTIONS_HEADER,ParseOptions.HEADER_FIRST_RECORD);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,219,parseOptions.setOption(ParseOptions.OPTIONS_HEADER,ParseOptions.HEADER_PROVIDED_BY_USER);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,221,DataParser dataParser = new DataParser(new InputStreamReader(uploadedInputStream),parseOptions);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,224,if(isFirstRowHeader){
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,225,if( dataParser.iterator().hasNext() ){
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,226,dataParser.iterator().next();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,230,Reader csvReader = dataParser.getCSVReader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,235,Reader r = new InputStreamReader(uploadedInputStream);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,236,if (isFirstRowHeader) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,237,BufferedReader br = new BufferedReader(r, 1); //
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,238,br.readLine(); // TODO : remove the header line. Wrong if first record is beyond first endline
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,241,String basePath = getHiveMetaStoreLocation();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,243,basePath = "/apps/hive/warehouse";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,246,basePath = basePath + "/";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,248,String fullPath = basePath + filePath;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,250,uploadTable(new ReaderInputStream(r), fullPath);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,252,LOG.info("create the table successfully at : {}", fullPath);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,253,return Response.ok().build();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,256,private String getHiveMetaStoreLocation() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,257,return this.getAmbariApi().getCluster().getConfigurationValue(HIVE_SITE, HIVE_META_STORE_LOCATION_KEY);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,260,private void uploadTable(InputStream is, String path) throws IOException, InterruptedException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,261,if (!path.endsWith("/")) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,262,path = path + "/";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,265,uploadFile(path, is);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,269,throws IOException, InterruptedException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,270,byte[] chunk = new byte[1024];
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,271,FSDataOutputStream out = getSharedObjectsFactory().getHdfsApi().create(filePath, false);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,272,while (uploadedInputStream.read(chunk) != -1) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,273,out.write(chunk);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,275,out.close();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,279,protected synchronized JobResourceManager getResourceManager() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,280,if (resourceManager == null) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,281,SharedObjectsFactory connectionsFactory = getSharedObjectsFactory();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,282,resourceManager = new JobResourceManager(connectionsFactory, context);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,284,return resourceManager;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,287,protected synchronized AmbariApi getAmbariApi() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,288,if (null == ambariApi) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,289,ambariApi = new AmbariApi(this.context);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,291,return ambariApi;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,294,private String generateCreateQuery(String databaseName, String tableName, List<ColumnDescription> cdList) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/UploadService.java,295,return new QueryGenerator().generateCreateQuery(new TableInfo(databaseName, tableName, cdList));
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/IParser.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/IParser.java,30,public Reader getCSVReader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/IParser.java,32,public List<ColumnDescription> getHeader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/IParser.java,34,public List<Row> getPreviewRows();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/IParser.java,36,public void parsePreview();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,28,final public static String FILE_TYPE_CSV = "CSV";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,29,final public static String FILE_TYPE_JSON = "JSON";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,30,final public static String XML = "XML";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,32,final public static String HEADER_FIRST_RECORD = "FIRST_RECORD";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,33,final public static String HEADER_PROVIDED_BY_USER = "PROVIDED_BY_USER";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,35,final public static String HEADERS = "HEADERS";
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseOptions.java,37,private HashMap<String, Object> options = new HashMap<String, Object>();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/ParseUtils.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,18,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,21,import org.apache.ambari.view.hive.client.ColumnDescriptionShort;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,23,import org.apache.commons.csv.CSVFormat;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,24,import org.apache.commons.csv.CSVRecord;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,26,import java.io.*;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,27,import java.util.*;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,32,public class CSVParser implements IParser {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,34,static class CSVIterator implements Iterator<Row> {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,36,private Iterator<CSVRecord> iterator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,38,public CSVIterator(Iterator<CSVRecord> iterator) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,39,this.iterator = iterator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,43,public boolean hasNext() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,44,return iterator.hasNext();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,48,public Row next() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,49,CSVRecord row = iterator.next();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,50,Object[] values = new Object[row.size()];
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,51,for (int i = 0; i < values.length; i++) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,52,values[i] = row.get(i);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,54,Row r = new Row(values);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,55,return r;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,59,public void remove() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,60,this.iterator.remove();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,64,private Reader originalReader; // same as CSV reader in this case
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,65,private ParseOptions parseOptions;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,66,private CSVIterator iterator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,67,private List<Row> previewRows;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,68,private List<ColumnDescription> header;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,69,private boolean isHeaderFirstRow = false;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,70,private int numberOfPreviewRows = 10;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,71,private org.apache.commons.csv.CSVParser parser;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,73,public CSVParser(Reader reader, ParseOptions parseOptions) throws IOException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,74,this.originalReader = reader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,75,this.parseOptions = parseOptions;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,77,parser = new org.apache.commons.csv.CSVParser(reader, CSVFormat.EXCEL);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,78,iterator = new CSVIterator(parser.iterator());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,81,public void parsePreview() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,88,previewRows = new ArrayList<Row>(numberOfPreviewRows); // size including the header.
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,91,if (parseOptions.getOption(ParseOptions.OPTIONS_HEADER).equals(ParseOptions.HEADER_FIRST_RECORD)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,95,isHeaderFirstRow = true;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,96,headerRow = iterator().next();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,101,int[][] typeCounts = null;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,102,Row r = null;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,103,int numOfCols = 0;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,106,numOfCols = r.getRow().length;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,107,typeCounts = new int[numOfCols][ColumnDescription.DataTypes.values().length];
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,109,throw new NoSuchElementException("No rows in the csv.");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,115,previewRows.add(r);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,118,throw new IllegalArgumentException("Illegal number of cols for row : " + r);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,120,for (int colNum = 0; colNum < values.length; colNum++) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,122,ColumnDescription.DataTypes type = ParseUtils.detectHiveDataType(values[colNum]);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,123,typeCounts[colNum][type.ordinal()]++;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,131,;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,136,header = new ArrayList<ColumnDescription>(numOfCols);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,155,private int getLikelyDataType(int[][] typeCounts, int colNum) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,156,int[] colArray = typeCounts[colNum];
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,157,int maxIndex = 0;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,158,int i = 1;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,159,for (; i < colArray.length; i++) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,161,maxIndex = i;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,164,return maxIndex;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,168,public Reader getCSVReader() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,169,return originalReader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,173,public List<ColumnDescription> getHeader() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,174,return header;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,178,public List<Row> getPreviewRows() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,179,return this.previewRows;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,182,public Iterator<Row> iterator() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/CSVParser.java,183,return iterator; // only one iterator per parser.
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,24,import java.io.IOException;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,25,import java.io.Reader;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,26,import java.util.Iterator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,29,public class DataParser implements IParser {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,31,private IParser parser;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,33,public DataParser(Reader reader, ParseOptions parseOptions) throws IOException {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,34,if (parseOptions.getOption(ParseOptions.OPTIONS_FILE_TYPE).equals(ParseOptions.FILE_TYPE_CSV)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,35,parser = new CSVParser(reader, parseOptions);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,40,public Reader getCSVReader() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,41,return parser.getCSVReader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,46,return parser.getHeader();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,50,public List<Row> getPreviewRows() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,51,return parser.getPreviewRows();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,55,public void parsePreview() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,56,parser.parsePreview();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,60,public Iterator<Row> iterator() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/DataParser.java,61,return parser.iterator();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,21,import org.apache.ambari.view.hive.client.ColumnDescription;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,23,import java.util.List;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,25,public class TableInfo {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,26,private String tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,28,private List<ColumnDescription> columns;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,30,public String getTableName() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,31,return tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,34,public void setTableName(String tableName) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,35,this.tableName = tableName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,46,public List<ColumnDescription> getColumns() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,47,return columns;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,50,public void setColumns(List<ColumnDescription> columns) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,51,this.columns = columns;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,54,public TableInfo(String databaseName, String tableName, List<ColumnDescription> columns) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,56,this.databaseName = databaseName;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,57,this.columns = columns;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/TableInfo.java,60,public TableInfo() {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/QueryGenerator.java,19,package org.apache.ambari.view.hive.resources.uploads;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/QueryGenerator.java,38,List<ColumnDescription> cdList = tableInfo.getColumns();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/QueryGenerator.java,50,for (ColumnDescription cd : cdList) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/QueryGenerator.java,60,query.append(") ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE;");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/uploads/QueryGenerator.java,63,LOG.info("Query : %S", queryString);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,27,import java.util.LinkedHashMap;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,66,public void putMetric(TimelineMetric metric) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,71,public long getTimeDiff() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,75,public TimelineMetric getTimelineMetric() {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,81,class TimelineMetricHolder extends LinkedHashMap<String, TimelineMetricWrapper> {//
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,82,private static final long serialVersionUID = 1L;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,83,private boolean gotOverflow = false;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,89,protected boolean removeEldestEntry(Map.Entry<String, TimelineMetricWrapper> eldest) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,90,boolean overflow = size() > maxRecsPerName;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,91,if (overflow && !gotOverflow) {
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,92,LOG.warn("Metrics cache overflow at "+ size() +" for "+ eldest);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,93,gotOverflow = true;
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/cache/TimelineMetricsCache.java,95,return overflow;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,94,private static Set<String> pkPropertyIds = new HashSet<String>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,96,add(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,97,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,98,add(HOST_STACK_VERSION_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,99,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,100,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,101,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,106,private static Set<String> propertyIds = new HashSet<String>() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,108,add(HOST_STACK_VERSION_ID_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,109,add(HOST_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,110,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,111,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,112,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,113,add(HOST_STACK_VERSION_STATE_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,114,add(HOST_STACK_VERSION_REPOSITORIES_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,115,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,163,final Set<Resource> resources = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,174,List<HostVersionEntity> requestedEntities = new ArrayList<HostVersionEntity>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,175,if (propertyMap.get(HOST_STACK_VERSION_ID_PROPERTY_ID) == null && propertyMaps.size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,191,requestedEntities.add(entity);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,195,addRequestedEntities(resources, requestedEntities, requestedIds, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,257,Set<String> requiredProperties = new HashSet<String>(){{
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,258,add(HOST_STACK_VERSION_HOST_NAME_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,259,add(HOST_STACK_VERSION_REPO_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,260,add(HOST_STACK_VERSION_STACK_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,261,add(HOST_STACK_VERSION_VERSION_PROPERTY_ID);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,265,if (! propertyMap.containsKey(requiredProperty)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,266,throw new IllegalArgumentException(
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,267,String.format("The required property %s is not defined",
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,268,requiredProperty));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,351,Map<String, List<RepositoryEntity>> perOsRepos = new HashMap<String, List<RepositoryEntity>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,364,List<ServiceOsSpecific.Package> packages = new ArrayList<ServiceOsSpecific.Package>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,365,Set<String> servicesOnHost = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,419,Map<String, String> hostLevelParams = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,448,StackId desiredStackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,463,requestStages.setRequestContext(String.format(caption));
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,20,import com.google.common.collect.Lists;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,22,import com.google.inject.Singleton;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,23,import com.google.inject.persist.PersistModule;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,24,import com.google.inject.persist.PersistService;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,25,import com.google.inject.persist.UnitOfWork;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,26,import com.google.inject.persist.finder.DynamicFinder;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,27,import com.google.inject.persist.finder.Finder;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,28,import com.google.inject.util.Providers;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,29,import org.aopalliance.intercept.MethodInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,30,import org.aopalliance.intercept.MethodInvocation;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,31,import org.apache.ambari.server.orm.AmbariJpaLocalTxnInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,32,import org.apache.ambari.server.orm.AmbariLocalSessionInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,33,import org.apache.ambari.server.orm.RequiresSession;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,38,import javax.persistence.EntityManager;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,39,import javax.persistence.EntityManagerFactory;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,63,private MethodInterceptor sessionInterceptor;
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,72,.toProvider(Providers.<Properties>of(null));
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,81,.toProvider(JpaPersistService.EntityManagerFactoryProvider.class);
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,87,sessionInterceptor = new AmbariLocalSessionInterceptor();
ambari-server/src/main/java/com/google/inject/persist/jpa/AmbariJpaPersistModule.java,88,requestInjection(sessionInterceptor);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,201,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,217,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,477,hostRoleCommandDAO.mergeAll(commandEntities);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,528,hostRoleCommandDAO.mergeAll(commands);
ambari-server/src/main/java/org/apache/ambari/server/actionmanager/ActionDBAccessorImpl.java,725,hostRoleCommandDAO.mergeAll(tasks);
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,21,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,22,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,23,import com.google.inject.persist.UnitOfWork;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,24,import com.google.inject.persist.jpa.AmbariJpaPersistService;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,31,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,32,import javax.persistence.EntityTransaction;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,33,import javax.persistence.PersistenceException;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,34,import java.lang.reflect.Method;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,35,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,56,EntityManager em = this.emProvider.get();
ambari-server/src/main/java/org/apache/ambari/server/orm/AmbariJpaLocalTxnInterceptor.java,66,Object result;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,417,public void create(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,418,entityManagerProvider.get().persist(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,422,public HostRoleCommandEntity merge(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,423,HostRoleCommandEntity entity = entityManagerProvider.get().merge(stageEntity);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,439,managedList.add(entityManagerProvider.get().merge(entity));
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,445,public void remove(HostRoleCommandEntity stageEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostRoleCommandDAO.java,446,entityManagerProvider.get().remove(merge(stageEntity));
ambari-server/src/main/java/org/apache/ambari/server/configuration/Configuration.java,217,public static final String JDBC_IN_MEMORY_URL = "jdbc:derby:memory:myDB/ambari;create=true";
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,185,ResultSet res = metaData.getTables(null, null, convertObjectName(tableName), new String[]{"TABLE"});
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,190,return res.getString("TABLE_NAME") != null && res.getString("TABLE_NAME").equalsIgnoreCase(tableName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,235,ResultSet rs = metaData.getColumns(null, null, convertObjectName(tableName), convertObjectName(columnName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,240,return rs.getString("COLUMN_NAME") != null && rs.getString("COLUMN_NAME").equalsIgnoreCase(columnName);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,247,return false;
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,256,ResultSet rs = metaData.getColumns(null, null, convertObjectName(tableName), null);
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,261,if (rs.getString("COLUMN_NAME") != null) {
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,262,columnsList.remove(rs.getString("COLUMN_NAME").toUpperCase());
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,277,ResultSet rs = metaData.getImportedKeys(null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,299,ResultSet rs = metaData.getImportedKeys(null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,329,ResultSet rs = metaData.getCrossReference(null, null, convertObjectName(referenceTableName),
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,330,null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,856,ResultSet rs = getDatabaseMetaData().getPrimaryKeys(null, null, convertObjectName(tableName));
ambari-server/src/main/java/org/apache/ambari/server/orm/DBAccessorImpl.java,996,ResultSet rs = getDatabaseMetaData().getIndexInfo(null, null, convertObjectName(tableName), unique, false);
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,93,expireAfterWrite(STALE_CONFIGS_CACHE_EXPIRATION_TIME, TimeUnit.SECONDS).build();
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,52,for (AbstractCheckDescriptor checkDescriptor : checksRegistry) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,53,final PrerequisiteCheck prerequisiteCheck = new PrerequisiteCheck(
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,54,checkDescriptor.getDescription(), clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,57,if (!checkDescriptor.isApplicable(request)) {
ambari-server/src/main/java/org/apache/ambari/server/state/CheckHelper.java,58,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentHostResponse.java,46,String componentName, String hostname,
ambari-server/src/main/java/org/apache/ambari/server/controller/ServiceComponentResponse.java,51,int installedCount) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,166,setResourceProperty(resource, COMPONENT_STATE_PROPERTY_ID,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ComponentResourceProvider.java,167,response.getDesiredState(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceComponentImpl.java,440,getTotalCount(), getStartedCount(), getInstalledCount());
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,93,result = Response.ok(new BoolResult(false, "Can't move '" + request.src + "' to '" + request.dst + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,120,result = Response.ok(new BoolResult(false, "Can't chmod '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,139,public Response copy(final SrcDstFileRequest request,
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,144,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,145,api.copy(request.src, request.dst);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,147,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,148,.getFileStatus(request.dst)));
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,150,result = Response.ok(new BoolResult(false, "Can't copy '" + request.src + "' to '" + request.dst + "'")).
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,151,status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,155,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,176,result = Response.ok(new BoolResult(false, "Can't create dir '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,197,return Response.ok(new BoolResult(true)).build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,214,public Response moveToTrash(RemoveRequest request) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,221,if (!api.exists(trash)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,222,if (!api.mkdir(trash)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,223,result = Response.ok(new BoolResult(false, "Trash dir does not exists. Can't create dir for trash '" + trash + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,224,return result.build();
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,228,String trashFilePath = api.getTrashDirPath(request.path);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,230,if (api.rename(request.path, trashFilePath)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,231,result = Response.ok(getApi(context).fileStatusToJSON(api
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,232,.getFileStatus(trashFilePath)));
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,234,result = Response.ok(new BoolResult(false, "Can't move file to '" + trashFilePath + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,238,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,253,public Response remove(RemoveRequest request, @Context HttpHeaders headers,
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,258,if (api.delete(request.path, request.recursive)) {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,259,result = Response.ok(new BoolResult(true)).status(204);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,261,result = Response.ok(new BoolResult(false, "Can't remove '" + request.path + "'")).status(422);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,265,throw ex;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,307,public static class RemoveRequest {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,309,public String path;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/FileOperationService.java,310,public boolean recursive;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,56,public static class BoolResult{
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,59,public BoolResult(boolean success){
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,63,public BoolResult(boolean success, String message){
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HdfsService.java,64,this.success = success;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/HelpService.java,112,return Response.ok(new BoolResult(api.trashEnabled())).build();
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,20,import com.sun.jersey.core.util.Base64;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,24,import javax.ws.rs.DELETE;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,26,import javax.ws.rs.POST;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,28,import javax.ws.rs.Path;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,29,import javax.ws.rs.PathParam;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,35,import java.nio.charset.Charset;
ambari-server/src/main/java/org/apache/ambari/server/api/services/ActiveWidgetLayoutService.java,76,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserPrivilegeService.java,75,mapIds.put(Resource.Type.User, userName);
ambari-server/src/main/java/org/apache/ambari/server/api/services/UserService.java,161,Collections.singletonMap(Resource.Type.User, userName));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,140,private ActionMetadata actionMetadata;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,143,private Gson gson;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,149,private HostDAO hostDAO;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,158,private AlertEventPublisher alertEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,161,private AmbariEventPublisher ambariEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,164,private VersionEventPublisher versionEventPublisher;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,171,private KerberosPrincipalHostDAO kerberosPrincipalHostDAO;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,287,processCommandReports(heartbeat, hostname, clusterFsm, now);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,290,processStatusReports(heartbeat, hostname, clusterFsm);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,294,processHostStatus(heartbeat, hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,297,processAlerts(heartbeat, hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,318,protected void processAlerts(HeartBeat heartbeat, String hostname) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,320,if (null == hostname || null == heartbeat) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,321,return;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,324,if (null != heartbeat.getAlerts()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,325,AlertEvent event = new AlertReceivedEvent(heartbeat.getAlerts());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,326,for (Alert alert : event.getAlerts()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,327,if (alert.getHostName() == null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,328,alert.setHostName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,331,alertEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,342,protected void processHostStatus(HeartBeat heartbeat, String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,344,Host host = clusterFsm.getHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,345,HealthStatus healthStatus = host.getHealthStatus().getHealthStatus();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,347,if (!healthStatus.equals(HostHealthStatus.HealthStatus.UNKNOWN)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,349,List<ComponentStatus> componentStatuses = heartbeat.getComponentStatus();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,352,boolean calculateHostStatus = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,353,String clusterName = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,354,if (componentStatuses.size() > 0) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,355,calculateHostStatus = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,356,for (ComponentStatus componentStatus : componentStatuses) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,357,clusterName = componentStatus.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,358,break;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,362,if (!calculateHostStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,363,List<CommandReport> reports = heartbeat.getReports();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,364,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,365,if (RoleCommand.ACTIONEXECUTE.toString().equals(report.getRoleCommand())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,366,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,369,String service = report.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,370,if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,371,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,373,if (report.getStatus().equals("COMPLETED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,374,calculateHostStatus = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,375,clusterName = report.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,376,break;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,381,if (calculateHostStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,383,int masterCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,384,int mastersRunning = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,385,int slaveCount = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,386,int slavesRunning = 0;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,388,StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,389,Cluster cluster = clusterFsm.getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,390,stackId = cluster.getDesiredStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,392,MaintenanceStateHelper psh = injector.getInstance(MaintenanceStateHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,394,List<ServiceComponentHost> scHosts = cluster.getServiceComponentHosts(heartbeat.getHostname());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,395,for (ServiceComponentHost scHost : scHosts) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,396,ComponentInfo componentInfo =
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,397,ambariMetaInfo.getComponent(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,398,stackId.getStackVersion(), scHost.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,399,scHost.getServiceComponentName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,401,String status = scHost.getState().name();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,403,String category = componentInfo.getCategory();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,405,if (MaintenanceState.OFF == psh.getEffectiveState(scHost, host)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,406,if (category.equals("MASTER")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,407,++masterCount;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,408,if (status.equals("STARTED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,409,++mastersRunning;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,412,++slaveCount;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,413,if (status.equals("STARTED")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,414,++slavesRunning;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,420,if (masterCount == mastersRunning && slaveCount == slavesRunning) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,421,healthStatus = HealthStatus.HEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,423,healthStatus = HealthStatus.UNHEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,425,healthStatus = HealthStatus.ALERT;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,428,host.setStatus(healthStatus.name());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,429,host.persist();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,433,if ((clusterFsm.getClustersForHost(host.getHostName())).size() == 0) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,434,healthStatus = HealthStatus.HEALTHY;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,435,host.setStatus(healthStatus.name());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,436,host.persist();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,441,protected void processCommandReports(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,443,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,444,List<CommandReport> reports = heartbeat.getReports();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,447,List<Long> taskIds = new ArrayList<Long>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,448,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,449,taskIds.add(report.getTaskId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,451,Collection<HostRoleCommand> commands = actionManager.getTasks(taskIds);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,453,Iterator<HostRoleCommand> hostRoleCommandIterator = commands.iterator();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,454,for (CommandReport report : reports) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,456,Long clusterId = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,457,if (report.getClusterName() != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,458,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,459,Cluster cluster = clusterFsm.getCluster(report.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,460,clusterId = Long.valueOf(cluster.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,465,LOG.debug("Received command report: " + report);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,467,HostRoleCommand hostRoleCommand = hostRoleCommandIterator.next();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,468,HostEntity hostEntity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,469,if (hostEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,470,LOG.error("Received a command report and was unable to retrieve HostEntity for hostname = " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,471,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,475,if (RoleCommand.valueOf(report.getRoleCommand()) == RoleCommand.ACTIONEXECUTE &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,476,HostRoleStatus.valueOf(report.getStatus()).isCompletedState()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,477,ActionFinalReportReceivedEvent event = new ActionFinalReportReceivedEvent(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,478,clusterId, hostname, report, report.getRole());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,479,ambariEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,483,if (hostRoleCommand.getStatus() == HostRoleStatus.ABORTED) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,484,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,486,if (hostRoleCommand.getStatus() == HostRoleStatus.QUEUED &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,487,report.getStatus().equals("IN_PROGRESS")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,488,hostRoleCommand.setStartTime(now);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,493,if (Service.Type.KERBEROS.name().equalsIgnoreCase(report.getServiceName()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,494,Role.KERBEROS_CLIENT.name().equalsIgnoreCase(report.getRole()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,495,RoleCommand.CUSTOM_COMMAND.name().equalsIgnoreCase(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,496,RequestExecution.Status.COMPLETED.name().equalsIgnoreCase(report.getStatus())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,498,String customCommand = report.getCustomCommand();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,500,boolean adding = "SET_KEYTAB".equalsIgnoreCase(customCommand);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,501,if (adding || "REMOVE_KEYTAB".equalsIgnoreCase(customCommand)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,502,WriteKeytabsStructuredOut writeKeytabsStructuredOut;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,503,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,504,writeKeytabsStructuredOut = gson.fromJson(report.getStructuredOut(), WriteKeytabsStructuredOut.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,507,writeKeytabsStructuredOut = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,510,if (writeKeytabsStructuredOut != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,511,Map<String, String> keytabs = writeKeytabsStructuredOut.getKeytabs();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,512,if (keytabs != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,513,for (Map.Entry<String, String> entry : keytabs.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,514,String principal = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,515,if (!kerberosPrincipalHostDAO.exists(principal, hostEntity.getHostId())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,516,if (adding) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,517,kerberosPrincipalHostDAO.create(principal, hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,519,kerberosPrincipalHostDAO.remove(principal, hostEntity.getHostId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,529,if (RoleCommand.ACTIONEXECUTE.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,530,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,531,!("RESTART".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,534,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,537,Cluster cl = clusterFsm.getCluster(report.getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,538,String service = report.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,539,if (service == null || service.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,540,throw new AmbariException("Invalid command report, service: " + service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,542,if (actionMetadata.getActions(service.toLowerCase()).contains(report.getRole())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,543,LOG.debug(report.getRole() + " is an action - skip component lookup");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,545,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,546,Service svc = cl.getService(service);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,547,ServiceComponent svcComp = svc.getServiceComponent(report.getRole());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,548,ServiceComponentHost scHost = svcComp.getServiceComponentHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,549,String schName = scHost.getServiceComponentName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,551,if (report.getStatus().equals(HostRoleStatus.COMPLETED.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,554,if (StringUtils.isNotBlank(report.getStructuredOut())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,555,ComponentVersionStructuredOut structuredOutput = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,556,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,557,structuredOutput = gson.fromJson(report.getStructuredOut(), ComponentVersionStructuredOut.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,563,String newVersion = structuredOutput == null ? null : structuredOutput.version;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,568,handleComponentVersionReceived(cl, scHost, newVersion, true);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,572,if (scHost.getState().equals(State.UPGRADING)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,573,scHost.setStackVersion(scHost.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,575,(report.getRoleCommand().equals(RoleCommand.CUSTOM_COMMAND.toString()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,576,("START".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,579,&& !report.getConfigurationTags().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,580,LOG.info("Updating applied config on service " + scHost.getServiceName() +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,582,scHost.updateActualConfigs(report.getConfigurationTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,583,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,586,if ((RoleCommand.INSTALL.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,587,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,589,scHost.updateActualConfigs(report.getConfigurationTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,590,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,592,if (RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,593,!("START".equals(report.getCustomCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,597,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,600,if (RoleCommand.START.toString().equals(report.getRoleCommand()) ||
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,601,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,603,scHost.handleEvent(new ServiceComponentHostStartedEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,604,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,605,scHost.setRestartRequired(false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,607,(RoleCommand.CUSTOM_COMMAND.toString().equals(report.getRoleCommand()) &&
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,609,scHost.handleEvent(new ServiceComponentHostStoppedEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,610,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,612,scHost.handleEvent(new ServiceComponentHostOpSucceededEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,613,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,617,if (StringUtils.isNotBlank(report.getStructuredOut())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,618,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,619,ComponentVersionStructuredOut structuredOutput = gson.fromJson(report.getStructuredOut(), ComponentVersionStructuredOut.class);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,621,if (null != structuredOutput.upgradeDirection && structuredOutput.upgradeDirection.isUpgrade()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,622,scHost.setUpgradeState(UpgradeState.FAILED);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,625,LOG.warn("Structured output was found, but not parseable: {}", report.getStructuredOut());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,629,LOG.warn("Operation failed - may be retried. Service component host: "
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,630,+ schName + ", host: " + hostname + " Action id" + report.getActionId());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,631,if (actionManager.isInProgressCommand(report)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,632,scHost.handleEvent(new ServiceComponentHostOpFailedEvent
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,633,(schName, hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,635,LOG.info("Received report for a command that is no longer active. " + report);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,638,scHost.handleEvent(new ServiceComponentHostOpInProgressEvent(schName,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,639,hostname, now));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,642,LOG.warn("Service component not found ", scnex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,644,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,645,LOG.warn("State machine exception.", ex);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,647,LOG.warn("State machine exception. " + ex.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,654,actionManager.processTaskResponse(hostname, reports, commands);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,657,protected void processStatusReports(HeartBeat heartbeat,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,658,String hostname,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,660,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,661,Set<Cluster> clusters = clusterFsm.getClustersForHost(hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,662,for (Cluster cl : clusters) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,663,for (ComponentStatus status : heartbeat.componentStatus) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,664,if (status.getClusterName().equals(cl.getClusterName())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,665,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,666,Service svc = cl.getService(status.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,668,String componentName = status.getComponentName();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,669,if (svc.getServiceComponents().containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,670,ServiceComponent svcComp = svc.getServiceComponent(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,671,componentName);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,672,ServiceComponentHost scHost = svcComp.getServiceComponentHost(
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,673,hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,674,State prevState = scHost.getState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,675,State liveState = State.valueOf(State.class, status.getStatus());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,680,|| prevState.equals(State.UNKNOWN)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,681,scHost.setState(liveState); //TODO direct status set breaks state machine sometimes !!!
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,682,if (!prevState.equals(liveState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,683,LOG.info("State of service component " + componentName
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,686,+ " has changed from " + prevState + " to " + liveState
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,687,+ " at host " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,691,SecurityState prevSecurityState = scHost.getSecurityState();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,692,SecurityState currentSecurityState = SecurityState.valueOf(status.getSecurityState());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,693,if((prevSecurityState != currentSecurityState)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,694,if(prevSecurityState.isEndpoint()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,695,scHost.setSecurityState(currentSecurityState);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,696,LOG.info(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,698,componentName, status.getServiceName(), status.getClusterName(), prevSecurityState,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,699,currentSecurityState, hostname));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,701,else {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,702,LOG.debug(String.format("Security of service component %s of service %s of cluster %s " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,705,componentName, status.getServiceName(), status.getClusterName(),
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,706,prevSecurityState, currentSecurityState, hostname, prevSecurityState));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,710,if (null != status.getStackVersion() && !status.getStackVersion().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,711,scHost.setStackVersion(gson.fromJson(status.getStackVersion(), StackId.class));
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,714,if (null != status.getConfigTags()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,715,scHost.updateActualConfigs(status.getConfigTags());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,718,Map<String, Object> extra = status.getExtra();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,719,if (null != extra && !extra.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,720,try {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,721,if (extra.containsKey("processes")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,723,List<Map<String, String>> list = (List<Map<String, String>>) extra.get("processes");
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,724,scHost.setProcesses(list);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,726,if (extra.containsKey("version")) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,727,String version = extra.get("version").toString();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,729,handleComponentVersionReceived(cl, scHost, version, false);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,733,LOG.error("Could not access extra JSON for " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,734,scHost.getServiceComponentName() + " from " +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,735,scHost.getHostName() + ": " + status.getExtra() +
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,741,.setExecutionDetailsRequest(hostname, componentName, status.getSendExecCmdDet());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,746,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,747,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,749,+ ", serviceName=" + status.getServiceName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,751,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,753,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,754,+ " servicecomponent"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,757,+ ", componentName=" + status.getComponentName());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,759,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,761,LOG.warn("Received a live status update for a non-initialized"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,762,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,766,+ ", hostname=" + hostname);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,768,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,770,LOG.warn("Received a live status with invalid payload"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,771,+ " service"
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,775,+ ", hostname=" + hostname
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,776,+ ", error=" + e.getMessage());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,777,continue;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,794,private void handleComponentVersionReceived(Cluster cluster, ServiceComponentHost scHost,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,795,String newVersion, boolean alwaysPublish) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,797,boolean updated = false;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,799,if (StringUtils.isNotBlank(newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,800,final String previousVersion = scHost.getVersion();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,801,if (!StringUtils.equals(previousVersion, newVersion)) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,802,scHost.setVersion(newVersion);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,803,scHost.setStackVersion(cluster.getDesiredStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,804,if (previousVersion != null && !previousVersion.equalsIgnoreCase(State.UNKNOWN.toString())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,805,scHost.setUpgradeState(UpgradeState.COMPLETE);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,807,updated = true;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,811,if (updated || alwaysPublish) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,812,HostComponentVersionEvent event = new HostComponentVersionEvent(cluster, scHost);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,813,versionEventPublisher.publish(event);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1198,private static class ComponentVersionStructuredOut {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1200,private String version;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1203,private UpgradeType upgradeType = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1206,private Direction upgradeDirection = null;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1213,private static class WriteKeytabsStructuredOut {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1215,private Map<String,String> keytabs;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1217,public Map<String, String> getKeytabs() {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1218,return keytabs;
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1221,public void setKeytabs(Map<String, String> keytabs) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartBeatHandler.java,1222,this.keytabs = keytabs;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1457,getClusterName(), repoVersionStackId, repositoryVersion.getVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1458,host.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1473,HostVersionEntity currentVersionEntity = hostVersionDAO.findByHostAndStateCurrent(getClusterName(), host.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1310,readLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1312,HostComponentStateEntity hostComponentStateEntity = getStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1313,if (null == hostComponentStateEntity) {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1314,LOG.warn("Could not convert ServiceComponentHostResponse to a response. It's possible that Host " + getHostName() + " was deleted.");
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1315,return null;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1318,String clusterName = serviceComponent.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1319,String serviceName = serviceComponent.getServiceName();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1320,String serviceComponentName = serviceComponent.getName();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1321,String hostName = getHostName();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1322,String state = getState().toString();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1323,String stackId = getStackVersion().getStackId();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1324,String desiredState = getDesiredState().toString();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1325,String desiredStackId = getDesiredStackVersion().getStackId();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1326,HostComponentAdminState componentAdminState = getComponentAdminState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1327,UpgradeState upgradeState = hostComponentStateEntity.getUpgradeState();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1329,ServiceComponentHostResponse r = new ServiceComponentHostResponse(
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1330,clusterName, serviceName,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1331,serviceComponentName, hostName, state,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1332,stackId, desiredState,
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1333,desiredStackId, componentAdminState);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1335,r.setActualConfigs(actualConfigs);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1336,r.setUpgradeState(upgradeState);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1338,try {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1339,r.setStaleConfig(helper.isStaleConfigs(this));
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1341,LOG.error("Could not determine stale config", e);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1344,return r;
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1346,readLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1785,final HostEntity host = hostDAO.findByName(hostName);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/jobs/ResultsPaginationController.java,193,strs[colNum] = String.valueOf(row[colNum]);
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/utils/ProxyHelper.java,57,if(connection.getResponseCode() != Response.Status.OK.getStatusCode()) {
contrib/views/tez/src/main/java/org/apache/ambari/view/tez/utils/ProxyHelper.java,60,String trace = IOUtils.toString(inputStream);
ambari-metrics/ambari-metrics-common/src/main/java/org/apache/hadoop/metrics2/sink/timeline/AbstractTimelineMetricsSink.java,87,throw new UnableToConnectException(e).setConnectUrl(connectUrl);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java,57,private static final Log LOG = LogFactory
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java,58,.getLog(ApplicationHistoryServer.class);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/loadsimulator/net/RestMetricsSender.java,68,LOG.info("http response time: " + timer.elapsedMillis() + " ms");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,304,clusterMetricCollectorMap.put(clusterName, clusterMetricserverVipHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,334,LOG.debug("New Metrics Collector Host : " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,337,LOG.debug("Metrics Collector Host or host component not live : " + hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,342,return clusterMetricCollectorMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,796,if (!vipHostConfigPresent) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,797,String currentCollectorHost = clusterMetricCollectorMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,798,LOG.debug("Current Metrics collector Host : " + currentCollectorHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,799,if ((currentCollectorHost == null) ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,800,!(isHostLive(clusterName, currentCollectorHost) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,802,) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,803,LOG.debug("New Metrics collector Host : " + hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,804,clusterMetricCollectorMap.put(clusterName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariServer.java,710,schemaVersion.setMetainfoValue(ambariMetaInfo.getServerVersion());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,683,resolver = new MasterHostResolver(configHelper, cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,685,resolver = new MasterHostResolver(configHelper, cluster, version);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,21,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,41,import org.apache.ambari.server.utils.StageUtils;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,45,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,78,public MasterHostResolver(ConfigHelper configHelper, Cluster cluster) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,79,this(configHelper, cluster, null);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,91,public MasterHostResolver(ConfigHelper configHelper, Cluster cluster, String version) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,290,String state = queryJmxBeanValue(hp.host, hp.port, "Hadoop:service=NameNode,name=NameNodeStatus", "State", true, encrypted);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,294,stateToHost.put(status, hp.host);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,318,String value = queryJmxBeanValue(hostname, hp.port,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,323,hostType.master = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,327,orderedHosts.remove(hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,328,orderedHosts.add(hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,345,String value = queryJmxBeanValue(hostname, hbaseMasterInfoPort,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,351,hostsType.master = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,353,hostsType.secondary = hostname;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,360,private String queryJmxBeanValue(String hostname, int port, String beanName, String attributeName,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,361,boolean asQuery) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,362,return queryJmxBeanValue(hostname, port, beanName, attributeName, asQuery, false);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,365,private String queryJmxBeanValue(String hostname, int port, String beanName, String attributeName,
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,366,boolean asQuery, boolean encrypted) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,368,String protocol = encrypted ? "https://" : "http://";
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,369,String endPoint = protocol + (asQuery ?
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,370,String.format("%s:%s/jmx?qry=%s", hostname, port, beanName) :
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,371,String.format("%s:%s/jmx?get=%s::%s", hostname, port, beanName, attributeName));
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,373,String response = HTTPUtils.requestURL(endPoint);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,375,if (null == response || response.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,376,return null;
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,379,Type type = new TypeToken<Map<String, ArrayList<HashMap<String, String>>>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,381,try {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,382,Map<String, ArrayList<HashMap<String, String>>> jmxBeans =
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,383,StageUtils.getGson().fromJson(response, type);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,385,return jmxBeans.get("beans").get(0).get(attributeName);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,387,if (LOG.isDebugEnabled()) {
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,388,LOG.info("Could not load JMX from {}/{} from {}", beanName, attributeName, hostname, e);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,390,LOG.info("Could not load JMX from {}/{} from {}", beanName, attributeName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/stack/MasterHostResolver.java,394,return null;
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,296,for (Group group : internalGroupsMap.values()) {
ambari-server/src/main/java/org/apache/ambari/server/security/ldap/AmbariLdapDataPopulator.java,489,batchInfo.getGroupsToBeCreated().add(groupName);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/TaskWrapperBuilder.java,69,LOG.error(MessageFormat.format("Found an Execute task for {0} and {1} meant to run on a any host but could not find host to run on. Skipping this task.", service, component));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/upgrades/RangerConfigCalculation.java,127,Config config = cluster.getDesiredConfigByType("ranger-admin-site");
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2150,c.setVersion(allConfigs.get(e.getType()).get(e.getTag()).getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,80,Type type = new TypeToken<Map<String, JsonOsFamilyEntry>>() {}.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/stack/OsFamily.java,82,osMap = gson.fromJson(new InputStreamReader(inputStream), type);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,145,int initDelay = configuration.getTimelineMetricsServiceWatcherInitDelay();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,146,int delay = configuration.getTimelineMetricsServiceWatcherDelay();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,148,executorService.scheduleWithFixedDelay(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,149,new TimelineMetricStoreWatcher(this, configuration), initDelay, delay,
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/HBaseTimelineMetricStore.java,150,TimeUnit.SECONDS);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,247,String precisionTtl = metricsConf.get(PRECISION_TABLE_TTL, "86400");           //1 day
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,248,String hostMinTtl = metricsConf.get(HOST_MINUTE_TABLE_TTL, "604800");          //7 days
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,249,String hostHourTtl = metricsConf.get(HOST_HOUR_TABLE_TTL, "2592000");          //30 days
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,250,String hostDailyTtl = metricsConf.get(HOST_DAILY_TABLE_TTL, "31536000");       //1 year
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,251,String clusterSecTtl = metricsConf.get(CLUSTER_SECOND_TABLE_TTL, "2592000");     //7 days
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,252,String clusterMinTtl = metricsConf.get(CLUSTER_MINUTE_TABLE_TTL, "7776000");   //30 days
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,253,String clusterHourTtl = metricsConf.get(CLUSTER_HOUR_TABLE_TTL, "31536000");   //1 year
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,254,String clusterDailyTtl = metricsConf.get(CLUSTER_DAILY_TABLE_TTL, "63072000"); //2 years
ambari-server/src/main/java/org/apache/ambari/server/notifications/dispatchers/AlertScriptDispatcher.java,245,String alertLabel = "\"" + definition.getLabel() + "\"";
ambari-server/src/main/java/org/apache/ambari/server/notifications/dispatchers/AlertScriptDispatcher.java,246,String alertText = "\"" + alertInfo.getAlertText() + "\"";
ambari-server/src/main/java/org/apache/ambari/server/state/services/AlertNoticeDispatchService.java,715,protected AlertInfo(AlertHistoryEntity history) {
ambari-server/src/main/java/org/apache/ambari/server/state/services/CachedAlertFlushService.java,79,stop();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,388,if (kerberosDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,55,public class AuthToLocalBuilder {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,67,private boolean caseInsensitiveUser;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,72,private Set<String> additionalRealms = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,77,public AuthToLocalBuilder() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,78,this(false, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,89,public AuthToLocalBuilder(boolean caseInsensitiveUserSupport, String additionalRealms) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,92,if ((additionalRealms != null) && !additionalRealms.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,93,for (String realm : additionalRealms.split("\\s*(?:\\r?\\n|,)\\s*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,94,realm = realm.trim();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,95,if (!realm.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,96,this.additionalRealms.add(realm);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,109,if (authToLocalRules != null && ! authToLocalRules.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,113,if (! r.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,117,addDefaultRealmRule(rule.getPrincipal());
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,142,if ((principal != null) && (localUsername != null) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,143,!principal.isEmpty() && !localUsername.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,166,public String generate(String realm) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,167,return generate(realm, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,182,public String generate(String realm, ConcatenationType concatenationType) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,185,setRules.add(createDefaultRealmRule(realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,240,if (realm != null && ! realm.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,273,1, 1, String.format("RULE:[1:$1@$0](.*@%s)s/@.*//" + caseSensitivityRule, realm));
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,291,public AuthToLocalBuilder copy() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,292,AuthToLocalBuilder copy = new AuthToLocalBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,296,for(Rule rule:setRules) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,297,copy.setRules.add(rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,299,copy.caseInsensitiveUser = this.caseInsensitiveUser;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,300,copy.additionalRealms.addAll(this.additionalRealms);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,302,return copy;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,314,Pattern.compile("RULE:\\s*\\[\\s*(\\d)\\s*:\\s*(.+?)(?:@(.+?))??\\s*\\]\\s*\\((.+?)\\)\\s*([^\\\\\\n]*)(.|\\n)*");
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,359,if (! m.matches()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,368,split("\\$").length;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,371,String replacementRule = m.group(5);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,373,this.rule = String.format("RULE:[%d:%s@%s](%s)%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,375,principal.toString(), replacementRule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,377,this.rule = String.format("RULE:[%d:%s](%s)%s",
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,379,principal.toString(), replacementRule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,440,Principal thatPrincipal = other.getPrincipal();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,442,if (expectedComponentCount != other.getExpectedComponentCount()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,443,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,445,if (matchComponentCount != other.getMatchComponentCount()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,446,return other.getMatchComponentCount() - matchComponentCount;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,448,if (principal.equals(thatPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,449,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,453,String thatRealm = thatPrincipal.getRealm();
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,454,if (realm == null ? thatRealm != null : ! realm.equals(thatRealm)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,455,if (realm != null && realm.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,456,return 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,458,return -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,462,String component1 = principal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,463,String thatComponent1 = thatPrincipal.getComponent(1);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,464,if (component1 != null && component1.equals(".*")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,465,return 1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,467,return -1;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,469,return rule.compareTo(other.rule);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,577,if (this == o) return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,578,if (o == null || getClass() != o.getClass()) return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,583,principal.equals(principal1.principal) &&
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,584,!(realm != null ?
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,585,!realm.equals(principal1.realm) :
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,586,principal1.realm != null);
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,625,if(value != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AuthToLocalBuilder.java,628,if(!value.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,401,AuthToLocalBuilder authToLocalBuilder = new AuthToLocalBuilder(caseInsensitiveUser, additionalRealms);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,487,AuthToLocalBuilder builder = authToLocalBuilder.copy();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,510,kerberosConfiguration.put(propertyName, builder.generate(realm,
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,511,AuthToLocalBuilder.ConcatenationType.translate(m.group(3))));
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,559,if (condition.isGrouped()) {
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,560,metrics.addOrMergeTimelineMetric(metric);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,562,metrics.getMetrics().add(metric.getTimelineMetric());
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java,387,throw new WebApplicationException(sql,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,261,if (clusterConfig != null) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,263,Map<String, String> props = new HashMap<String, String>(clusterConfig.getProperties());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,265,Map<String, Map<String, String>> configTags = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,266,Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,268,for (Map.Entry<String, Map<String, String>> entry : allConfigTags.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,269,if (entry.getKey().equals(clusterConfig.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,270,configTags.put(clusterConfig.getType(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,274,Map<String, Map<String, String>> properties = configHelper
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,275,.getEffectiveConfigProperties(cluster, configTags);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,277,if (!properties.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,278,for (Map<String, String> propertyMap : properties.values()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,279,props.putAll(propertyMap);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,283,configurations.put(clusterConfig.getType(), props);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,285,Map<String, Map<String, String>> attrs = new TreeMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,286,configHelper.cloneAttributesMap(clusterConfig.getPropertiesAttributes(), attrs);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,288,Map<String, Map<String, Map<String, String>>> attributes = configHelper
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,289,.getEffectiveConfigAttributes(cluster, configTags);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,290,for (Map<String, Map<String, String>> attributesMap : attributes.values()) {
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,291,configHelper.cloneAttributesMap(attributesMap, attrs);
ambari-server/src/main/java/org/apache/ambari/server/agent/HeartbeatMonitor.java,293,configurationAttributes.put(clusterConfig.getType(), attrs);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1544,private final Set<String> setOfKnownURLSchemes = Collections.singleton("thrift://");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1552,this(component, DEFAULT_SEPARATOR, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1562,public MultipleHostTopologyUpdater(String component, Character separator, boolean userPrefixForEachHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1565,this.usePrefixForEachHost = userPrefixForEachHost;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1586,if (!origValue.contains("%HOSTGROUP") &&
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1587,(!origValue.contains("localhost"))) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1593,if (origValue.contains("localhost") && topology.getHostGroupsForComponent(component).size() == 1) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1594,return origValue.replace("localhost", topology.getHostAssignmentsForComponent(component).iterator().next());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1597,String prefix = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1598,Collection<String> hostStrings = getHostStrings(origValue, topology);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1599,if (hostStrings.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1601,String port;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1602,for (String urlScheme : setOfKnownURLSchemes) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1603,if (origValue.startsWith(urlScheme)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1604,prefix = urlScheme;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1608,if (prefix != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1609,String valueWithoutPrefix = origValue.substring(prefix.length());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1610,port = calculatePort(valueWithoutPrefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1611,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1613,port = calculatePort(origValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1624,return sb.append(resolveHostGroupPlaceholder(origValue, prefix, hostStrings)).toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1634,protected String resolveHostGroupPlaceholder(String originalValue, String prefix, Collection<String> hostStrings) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1635,String suffix = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1636,StringBuilder sb = new StringBuilder();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1639,Matcher matcher = HOSTGROUP_PORT_REGEX.matcher(originalValue);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1640,if (matcher.find()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1641,int indexOfStart = matcher.start();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1643,if ((indexOfStart > 0) && (!originalValue.substring(0, indexOfStart).equals("['")) && (!originalValue.substring(0, indexOfStart).equals("[")) ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1645,prefix = originalValue.substring(0, indexOfStart);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1646,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1650,int indexOfEnd;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1651,do {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1652,indexOfEnd = matcher.end();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1655,if (indexOfEnd < (originalValue.length())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1656,suffix = originalValue.substring(indexOfEnd);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1661,boolean firstHost = true;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1662,for (String host : hostStrings) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1663,if (!firstHost) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1664,sb.append(separator);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1666,if (usePrefixForEachHost && (prefix != null)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1667,sb.append(prefix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1670,firstHost = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1672,sb.append(host);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1675,if ((suffix != null) && (!suffix.equals("']")) && (!suffix.equals("]")) ) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1676,sb.append(suffix);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1678,return sb.toString();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,1949,mapOfKeysToUpdaters.put("hive.metastore.uris", new MultipleHostTopologyUpdater("HIVE_METASTORE", ',', true));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2136,multiHdfsSiteMap.put("dfs.namenode.shared.edits.dir", new MultipleHostTopologyUpdater("JOURNALNODE", ';', false));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2137,multiHdfsSiteMap.put("dfs.encryption.key.provider.uri", new MultipleHostTopologyUpdater("RANGER_KMS_SERVER", ';', false));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2170,multiHiveSiteMap.put("hive.metastore.uris", new MultipleHostTopologyUpdater("HIVE_METASTORE", ',', true));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,2177,multiCoreSiteMap.put("hadoop.security.key.provider.path", new MultipleHostTopologyUpdater("RANGER_KMS_SERVER", ';', false));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2080,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2103,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2126,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2149,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2172,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2195,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2327,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,2380,1200);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1488,itemDetail, null, Integer.valueOf(1200), allowRetry,
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,58,private final static Long EXECUTION_TIMEOUT_MS = 1000L * 60 * 5;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,355,: (Long.parseLong(paramsTimeout) * 1000); // Convert seconds to milliseconds
ambari-server/src/main/java/org/apache/ambari/server/serveraction/ServerActionExecutor.java,361,? EXECUTION_TIMEOUT_MS
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,168,BlueprintConfigurations blueprintConfig = configEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,127,initPropMap.put("DATANODE", new String[]{"dfs.datanode.http.address"});
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,193,private final Map<String, Map<String, String>> jmxPortMap =
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,194,new HashMap<String, Map<String, String>>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,477,public String getPort(String clusterName, String componentName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,478,return getPort(clusterName, componentName, false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,482,public String getPort(String clusterName, String componentName, boolean httpsEnabled) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,484,Map<String, String> clusterJmxPorts = jmxPortMap.get(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,489,clusterJmxPorts = new ConcurrentHashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,507,!clusterJmxPorts.containsKey(componentName)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,511,Map<String, String[]> componentPorts = new HashMap<String, String[]>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,512,String[] componentsHttpsPorts;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,514,if (httpsEnabled) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,515,componentsHttpsPorts = serviceDesiredProperties.get(service).get(componentName + "-HTTPS");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,517,componentsHttpsPorts = serviceDesiredProperties.get(service).get(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,519,componentPorts.put(componentName, componentsHttpsPorts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,523,componentPorts);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,530,clusterJmxPorts.put(entry.getKey(), portString);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,540,return clusterJmxPorts.get(componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,879,private Map<String, String> getDesiredConfigMap(String clusterName, String versionTag,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,880,String configType, Map<String, String[]> keys) throws NoSuchParentResourceException,
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,900,if (configResources != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,901,for (Resource res : configResources) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,902,Map<String, String> evaluatedProperties = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,903,for (Entry<String, String[]> entry : keys.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,904,String propName = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,905,String value = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,907,for (String pname : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,908,propName = pname;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,910,Map<String, Object> properties = res.getPropertiesMap().get(PROPERTIES_CATEGORY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,911,if (properties != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,912,for (Map.Entry<String, Object> propertyEntry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,913,if (propertyEntry.getKey().startsWith(pname)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,914,value = (String) propertyEntry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,915,break;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,919,if (null != value) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,924,if (value != null && value.contains("${")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,925,if (evaluatedProperties == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,926,evaluatedProperties = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,927,Map<String, Object> properties = res.getPropertiesMap().get(PROPERTIES_CATEGORY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,928,for (Map.Entry<String, Object> subentry : properties.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,929,String keyString = subentry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,930,Object object = subentry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,931,String valueString;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,932,if (object != null && object instanceof String) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,933,valueString = (String) object;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,934,evaluatedProperties.put(keyString, valueString);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,935,postProcessPropertyValue(keyString, valueString, evaluatedProperties, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,940,value = postProcessPropertyValue(propName, value, evaluatedProperties, null);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,941,LOG.debug("PROPERTY -> key: " + propName + ", " + "value: " + value);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,943,mConfigs.put(entry.getKey(), value);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,192,String port = getPort(clusterName, componentName, httpsEnabled);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,193,if (port == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,194,LOG.warn("Unable to get JMX metrics.  No port value for " + componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,195,return resource;
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,351,private String getPort(String clusterName, String componentName, boolean httpsEnabled) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/RepositoryVersionEntity.java,272,String[] leadingParts = leading.split(".");
ambari-server/src/main/java/org/apache/ambari/server/stack/ServiceDirectory.java,218,metaInfoXml.setErrors(String.format("Unable to parse service metainfo.xml file '%s' ", f.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,340,repoFile.setErrors("Unable to parse repo file at location: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,341,repositoryFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,374,metaInfoXml.setErrors("Unable to parse stack metainfo.xml file at location: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,375,stackMetaInfoFile.getAbsolutePath());
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,76,int stack1Part = i < version1Parts.length ?
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,77,Integer.parseInt(version1Parts[i]) : 0;
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,78,int stack2Part = i < version2Parts.length ?
ambari-server/src/main/java/org/apache/ambari/server/utils/VersionUtils.java,79,Integer.parseInt(version2Parts[i]) : 0;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,27,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,50,import org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog210.java,1651,newStormProps.put("storm.zookeeper.superACL", "sasl:{{storm_base_jaas_principal}}");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertDefinitionResourceProvider.java,225,Set<Resource> results = new HashSet<Resource>();
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AlertResourceProvider.java,147,Set<Resource> results = new HashSet<Resource>();
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/PhoenixHBaseAccessor.java,208,return (TreeMap<Long, Double>) mapper.readValue(json, metricValuesTypeRef);
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,43,TreeMap<Long, Double> sortedByTimeMetrics = new TreeMap<Long, Double>(
ambari-metrics/ambari-metrics-timelineservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/metrics/timeline/aggregators/TimelineMetricReadHelper.java,44,PhoenixHBaseAccessor.readMetricFromJSON(rs.getString("METRICS")));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,141,private static final Pattern AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN = Pattern.compile("^(?:(.+?)/)?(.+?)(?:\\|(.+?))?$");
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,484,Matcher m = AUTH_TO_LOCAL_PROPERTY_SPECIFICATION_PATTERN.matcher(authToLocalProperty);
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,25,import java.net.MalformedURLException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,26,import java.net.URI;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,27,import java.net.URISyntaxException;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,28,import java.net.URL;
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,44,try {
contrib/views/files/src/main/java/org/apache/ambari/view/filebrowser/PropertyValidator.java,45,new URI(webhdfsUrl);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,24,import org.apache.commons.validator.routines.RegexValidator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,25,import org.apache.commons.validator.routines.UrlValidator;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,64,if (!validateHdfsURL(webhdfsUrl)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,85,if (!validateHttpURL(atsUrl)) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,98,private boolean validateHdfsURL(String webhdfsUrl) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,99,String[] schemes = {"webhdfs", "hdfs", "s3", "file"};
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,100,return validateURL(webhdfsUrl, schemes);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,103,private boolean validateHttpURL(String webhdfsUrl) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,104,String[] schemes = {"http", "https"};
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,105,return validateURL(webhdfsUrl, schemes);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,108,private boolean validateURL(String webhdfsUrl, String[] schemes) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,109,RegexValidator authority = new RegexValidator(".*");
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,110,UrlValidator urlValidator = new UrlValidator(schemes, authority, UrlValidator.ALLOW_LOCAL_URLS);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/PropertyValidator.java,111,return urlValidator.isValid(webhdfsUrl);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,24,import org.apache.commons.validator.routines.RegexValidator;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,25,import org.apache.commons.validator.routines.UrlValidator;
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,51,if (!validateHdfsURL(webhdfsUrl)) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,78,private boolean validateHdfsURL(String webhdfsUrl) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,79,String[] schemes = {"webhdfs", "hdfs", "s3", "file"};
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,80,return validateURL(webhdfsUrl, schemes);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,83,private boolean validateHttpURL(String webhdfsUrl) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,84,String[] schemes = {"http", "https"};
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,85,return validateURL(webhdfsUrl, schemes);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,88,private boolean validateURL(String webhdfsUrl, String[] schemes) {
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,89,RegexValidator authority = new RegexValidator(".*");
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,90,UrlValidator urlValidator = new UrlValidator(schemes, authority, UrlValidator.ALLOW_LOCAL_URLS);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/PropertyValidator.java,91,return urlValidator.isValid(webhdfsUrl);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2139,for (ClusterConfigMappingEntity e : clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId())) {
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,352,String port = jmxHostProvider.getPort(clusterName, componentName, httpsEnabled);
ambari-server/src/main/java/org/apache/ambari/server/controller/jmx/JMXPropertyProvider.java,353,return port == null ? DEFAULT_JMX_PORTS.get(componentName) : port;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,35,import java.util.concurrent.ExecutorCompletionService;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,36,import java.util.concurrent.ExecutorService;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,38,import java.util.concurrent.LinkedBlockingQueue;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,58,private static final ExecutorService EXECUTOR_SERVICE = initExecutorService();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,59,private static final int THREAD_POOL_CORE_SIZE = 20;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,60,private static final int THREAD_POOL_MAX_SIZE = 100;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,94,private static ExecutorService initExecutorService() {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,95,LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(); // unlimited Queue
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,98,new ThreadPoolExecutor(
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,102,TimeUnit.MILLISECONDS,
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,103,queue);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,110,public static ExecutorService getExecutorService() {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,111,return EXECUTOR_SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/ThreadPoolEnabledPropertyProvider.java,124,new ExecutorCompletionService<Resource>(EXECUTOR_SERVICE);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,532,if (!hostProvider.isCollectorHostLive(clusterName, TIMELINE_METRICS)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,546,if (!hostProvider.isCollectorComponentLive(clusterName, TIMELINE_METRICS)) {
ambari-server/src/main/java/org/apache/ambari/server/state/ServiceImpl.java,567,+ ", serviceName=" + getName());
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,99,boolean clientOnly, ProcessingComponent pc, Map<String, String> params) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,107,Set<String> preTasksEffectiveHosts = TaskWrapperBuilder.getEffectiveHosts(preTasks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,108,if (!preTasksEffectiveHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,109,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,110,bucket.type,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,111,getStageText("Preparing", ctx.getComponentDisplay(service, pc.name), preTasksEffectiveHosts),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,112,params,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,113,preTasks
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,114,);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,115,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,123,if(m_grouping.parallelScheduler != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,124,List<Set<String>> hostSets = SetUtils.split(hostsType.hosts, m_grouping.parallelScheduler.maxDegreeOfParallelism);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,125,int batchNum = 1;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,126,for(Set<String> hosts : hostSets) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,128,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,129,t.getStageWrapperType(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,130,getStageText(t.getActionVerb(), ctx.getComponentDisplay(service, pc.name), hosts, batchNum++, hostSets.size()),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,131,params,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,132,new TaskWrapper(service, pc.name, hosts, params, t));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,133,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,136,for (String hostName : hostsType.hosts) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,137,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,138,t.getStageWrapperType(),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,139,getStageText(t.getActionVerb(), ctx.getComponentDisplay(service, pc.name), Collections.singleton(hostName)),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,140,params,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,141,new TaskWrapper(service, pc.name, Collections.singleton(hostName), params, t));
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,142,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,151,Set<String> postTasksEffectiveHosts = TaskWrapperBuilder.getEffectiveHosts(postTasks);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,152,if (!postTasksEffectiveHosts.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,153,StageWrapper stage = new StageWrapper(
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,154,bucket.type,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,155,getStageText("Completing", ctx.getComponentDisplay(service, pc.name), postTasksEffectiveHosts),
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,156,params,
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,157,postTasks
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,158,);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/Grouping.java,159,m_stages.add(stage);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,174,hosts.addAll(getHostGroupInfo().get(group).getHostNames());
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,178,return requestHelper.fetchTimelineMetrics(uriBuilder,startTime, endTime);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,217,componentName, uriBuilder.toString()), componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,239,componentName, uriBuilder.toString()), componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,306,StackId stackId;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,307,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,308,AmbariManagementController managementController = AmbariServer.getController();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,309,stackId = managementController.getClusters().getCluster(clusterName).getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,310,if (stackId != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,311,String stackName = stackId.getStackName();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,312,String version = stackId.getStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,313,AmbariMetaInfo ambariMetaInfo = managementController.getAmbariMetaInfo();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,314,String serviceName = ambariMetaInfo.getComponentToService(stackName,version,componentName);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,315,String timeLineAppId = ambariMetaInfo.getComponent(stackName, version, serviceName, componentName).getTimelineAppid();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,316,if (timeLineAppId != null){
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,317,componentName = timeLineAppId;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,321,e.printStackTrace();
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,429,String componentName, String spec) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/AMSPropertyProvider.java,432,new TimelineAppMetricCacheKey(metrics, componentName, temporalInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,39,TemporalInfo temporalInfo) {
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,96,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,98,return false;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,100,return true;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,105,int result = metricNames != null ? metricNames.hashCode() : 0;
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,106,result = 31 * result + (appId != null ? appId.hashCode() : 0);
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineAppMetricCacheKey.java,112,return "TimelineAppMetricCacheKey {" +
ambari-server/src/main/java/org/apache/ambari/server/controller/metrics/timeline/cache/TimelineMetricsCacheSizeOfEngine.java,62,TreeMap<Long,Double> map = new TreeMap<>();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/ServiceFormattedException.java,95,if(message != null) LOG.error(message);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/ServiceFormattedException.java,96,if(trace != null) LOG.error(trace);
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/StageWrapperBuilder.java,172,String batchText = 1 == totalBatches? "" : String.format(" ( Batch %s of %s )", batchNum, totalBatches);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,329,List<KerberosIdentityDescriptor> identities;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,331,identities = serviceDescriptor.getIdentities(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,332,identityConfigurations = getConfigurations(identities);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,335,mergeConfigurations(kerberosConfigurations, entry.getKey(), entry.getValue(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,339,identities = componentDescriptor.getIdentities(true);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,340,identityConfigurations = getConfigurations(identities);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,343,mergeConfigurations(kerberosConfigurations, entry.getKey(), entry.getValue(), configurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1742,private Map<String, Map<String, String>> getConfigurations(List<KerberosIdentityDescriptor> identityDescriptors) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,39,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,65,Map<String, Map<String, String>> kerberosConfigurations) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,81,Map<String, List<ServiceComponentHost>> hostServiceComponentHosts = new HashMap<String, List<ServiceComponentHost>>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,82,for (ServiceComponentHost sch : schToProcess) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,83,String hostName = sch.getHostName();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,84,List<ServiceComponentHost> serviceComponentHosts = hostServiceComponentHosts.get(hostName);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,86,if (serviceComponentHosts == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,87,serviceComponentHosts = new ArrayList<ServiceComponentHost>();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,88,hostServiceComponentHosts.put(hostName, serviceComponentHosts);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,91,serviceComponentHosts.add(sch);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,94,Map<String, String> kerberosDescriptorProperties = kerberosDescriptor.getProperties();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,95,KerberosIdentityDataFileWriter kerberosIdentityDataFileWriter = null;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,98,for (Map.Entry<String, List<ServiceComponentHost>> entry : hostServiceComponentHosts.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,99,String hostName = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,100,List<ServiceComponentHost> serviceComponentHosts = entry.getValue();
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,104,Map<String, Map<String, String>> configurations = kerberosHelper.calculateConfigurations(cluster, hostName, kerberosDescriptorProperties);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,110,for (ServiceComponentHost sch : serviceComponentHosts) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,120,if (kerberosIdentityDataFileWriter == null) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,121,actionLog.writeStdOut(String.format("Writing Kerberos identity data metadata file to %s", identityDataFile.getAbsolutePath()));
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/AbstractPrepareKerberosServerAction.java,122,kerberosIdentityDataFileWriter = kerberosIdentityDataFileWriterFactory.createKerberosIdentityDataFileWriter(identityDataFile);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareDisableKerberosServerAction.java,115,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareEnableKerberosServerAction.java,81,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/PrepareKerberosIdentitiesServerAction.java,96,processServiceComponentHosts(cluster, kerberosDescriptor, schToProcess, identityFilter, dataDirectory, kerberosConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,824,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,863,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,902,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,944,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,966,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1018,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1178,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1218,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1262,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1296,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1429,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1490,void saveIfPersisted() {
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1651,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/svccomphost/ServiceComponentHostImpl.java,1714,saveIfPersisted();
ambari-server/src/main/java/org/apache/ambari/server/state/ConfigHelper.java,1137,if (!actualTags.get(CLUSTER_DEFAULT_TAG).equals(desiredTags.get(CLUSTER_DEFAULT_TAG)) && !groupSpecificConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java,22,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java,27,import javax.persistence.Query;
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java,258,public void mergeConfigMapping(ClusterConfigMappingEntity mappingEntity) {
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/ClusterDAO.java,259,entityManagerProvider.get().merge(mappingEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1135,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1146,hostVersionDAO.merge(currentHostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1482,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1491,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1496,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2445,clusterDAO.mergeConfigMapping(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2511,clusterDAO.mergeConfigMapping(e);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3014,for( ClusterConfigEntity clusterConfigToMakeSelected : clusterConfigsToMakeSelected ){
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3015,for (ClusterConfigMappingEntity configMappingEntity : configMappingEntities) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3016,String tag = configMappingEntity.getTag();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3017,String type = configMappingEntity.getType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3020,&& clusterConfigToMakeSelected.getType().equals(type)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3021,configMappingEntity.setSelected(1);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,21,import com.google.common.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,22,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,23,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,85,import javax.persistence.EntityManager;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,86,import javax.persistence.TypedQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,87,import javax.persistence.criteria.CriteriaBuilder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,88,import javax.persistence.criteria.CriteriaQuery;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,89,import javax.persistence.criteria.Expression;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,90,import javax.persistence.criteria.Predicate;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,91,import javax.persistence.criteria.Root;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,92,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,93,import java.sql.Connection;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,94,import java.sql.PreparedStatement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,95,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,96,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,97,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,98,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,99,import java.util.Arrays;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,100,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,101,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,102,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,103,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,104,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,105,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,106,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,107,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,108,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog170.java,717,clusterDAO.mergeConfigMapping(configMapping);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,116,for (String configType : updatedConfigs.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,117,Map<String, String> propertyMap = updatedConfigs.get(configType);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,118,for (String property : propertyMap.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,119,LOG.debug("Update Kerberos related config property: {} {} {}", configType, property, propertyMap.get
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,120,(property));
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,121,clusterConfiguration.setProperty(configType, property, propertyMap.get(property));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/AbstractProviderModule.java,1039,if (componentName.equals("NAMENODE") || componentName.equals("RESOURCEMANAGER")) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1930,Map<String, Set<String>> clusterHostInfo = StageUtils.getClusterHostInfo(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1932,if (clusterHostInfo != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1933,Map<String, String> componentHosts = new HashMap<String, String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1935,clusterHostInfo = StageUtils.substituteHostIndexes(clusterHostInfo);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1937,for (Map.Entry<String, Set<String>> entry : clusterHostInfo.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1938,componentHosts.put(entry.getKey(), StringUtils.join(entry.getValue(), ","));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,1941,configurations.put("clusterHostInfo", componentHosts);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,79,return configurationProcessor.getRequiredHostGroups();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,84,Set<String> updatedConfigTypes = Collections.emptySet();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,92,if (configureSecurity) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,93,configureKerberos();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,96,updatedConfigTypes =
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,97,configurationProcessor.doUpdateForClusterCreate();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,106,private void configureKerberos() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,107,String clusterName = ambariContext.getClusterName(clusterTopology.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,108,Cluster cluster = AmbariContext.getController().getClusters().getCluster(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,114,.getServiceConfigurationUpdates(cluster, clusterConfiguration.getFullProperties(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,771,if (intermediateStacks == null || intermediateStacks.isEmpty()) { // No intermediate stacks
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1438,itemDetail = "Skipping Configuration Task";
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1443,if (null != ct.summary) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1444,stageText = ct.summary;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,31,import org.apache.ambari.server.state.stack.ConfigUpgradePack;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,32,import org.apache.commons.lang.StringUtils;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,38,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,41,import static org.apache.ambari.server.state.stack.upgrade.ConfigUpgradeChangeDefinition.Transfer;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,42,import static org.apache.ambari.server.state.stack.upgrade.ConfigUpgradeChangeDefinition.Replace;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,43,import static org.apache.ambari.server.state.stack.upgrade.ConfigUpgradeChangeDefinition.Condition;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,44,import static org.apache.ambari.server.state.stack.upgrade.ConfigUpgradeChangeDefinition.ConfigurationKeyValue;
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,161,if (this.id == null || this.id.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/stack/upgrade/ConfigureTask.java,172,ConfigUpgradeChangeDefinition definition = configUpgradePack.enumerateConfigChangesByID().get(this.id);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,171,context.getProperties().get("webhdfs.url") + newSourceFilePath);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,186,throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(), e);
contrib/views/pig/src/main/java/org/apache/ambari/view/pig/resources/jobs/JobResourceManager.java,188,throw new ServiceFormattedException("Can't create/copy pig script file: " + e.toString(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1919,String jobtrackerHost = getJobTrackerHost(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1920,if (!scHost.getHostName().equals(jobtrackerHost)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1921,if (configTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1922,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1923,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,1924,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2226,String jobtrackerHost = getJobTrackerHost(cluster);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2443,if (!scHost.getHostName().equals(jobtrackerHost)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2444,if (configTags.get(Configuration.GLOBAL_CONFIG_TAG) != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2445,configHelper.applyCustomConfig(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2446,configurations, Configuration.GLOBAL_CONFIG_TAG,
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2447,Configuration.RCA_ENABLED_PROPERTY, "false", false);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2635,Lock clusterWriteLock = cluster.getClusterGlobalLock().writeLock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2637,clusterWriteLock.lock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2638,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2639,if (changedServices != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2640,for (Entry<State, List<Service>> entry : changedServices.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2641,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2642,for (Service s : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2644,&& newState == State.STARTED) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2645,continue;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2647,s.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2652,if (changedComps != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2653,for (Entry<State, List<ServiceComponent>> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2654,changedComps.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2655,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2656,for (ServiceComponent sc : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2657,sc.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2662,for (Map<State, List<ServiceComponentHost>> stateScHostMap :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2663,changedScHosts.values()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2664,for (Entry<State, List<ServiceComponentHost>> entry :
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2665,stateScHostMap.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2666,State newState = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2667,for (ServiceComponentHost sch : entry.getValue()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2668,sch.setDesiredState(newState);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2673,if (ignoredScHosts != null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2674,for (ServiceComponentHost scHost : ignoredScHosts) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2675,scHost.setDesiredState(scHost.getState());
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2679,clusterWriteLock.unlock();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2715,updateServiceStates(cluster, changedServices, changedComponents, changedHosts, ignoredHosts);
ambari-server/src/main/java/org/apache/ambari/server/orm/dao/HostComponentStateDAO.java,173,entityManager.flush();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1066,return clusterVersionDAO.findByClusterAndStateCurrent(getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2114,return Maps.transformEntries(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2115,activeConfigsByType,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2116,new Maps.EntryTransformer<String, Set<DesiredConfig>, DesiredConfig>() {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2118,public DesiredConfig transformEntry(@Nullable String key, @Nullable Set<DesiredConfig> value) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2119,return value.iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,42,private boolean ignoreMaintenance = false;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,191,public boolean isMaintenanceModeIgnored() {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,192,return ignoreMaintenance;
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,198,public void setMaintenanceModeIgnored(boolean ignore) {
ambari-server/src/main/java/org/apache/ambari/server/controller/ActionExecutionContext.java,199,ignoreMaintenance = ignore;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,115,private final static Logger LOG =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,116,LoggerFactory.getLogger(AmbariCustomCommandExecutionHelper.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,454,Map<String, ServiceComponentHost> components =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,456,.getServiceComponent(componentName).getServiceComponentHosts();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,457,if (components.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,467,candidateHosts = components.keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,470,Map<String, ServiceComponent> components =
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,473,if (components.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,478,ServiceComponent serviceComponent = components.values().iterator().next();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,484,candidateHosts = serviceComponent.getServiceComponentHosts().keySet();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,488,Set<String> ignoredHosts = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,489,if (!actionExecutionContext.isMaintenanceModeIgnored()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,490,ignoredHosts.addAll(maintenanceStateHelper.filterHostsInMaintenanceState(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,491,candidateHosts, new MaintenanceStateHelper.HostPredicate() {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,493,public boolean shouldHostBeRemoved(final String hostname) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,494,return !maintenanceStateHelper.isOperationAllowed(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,495,cluster, actionExecutionContext.getOperationLevel(),
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,496,resourceFilter, serviceName, componentName, hostname);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,499,));
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariCustomCommandExecutionHelper.java,508,serviceName, StringUtils.join(candidateHosts, ','), StringUtils.join(ignoredHosts, ','));
ambari-server/src/main/java/org/apache/ambari/server/controller/MaintenanceStateHelper.java,350,public static interface HostPredicate {
ambari-server/src/main/java/org/apache/ambari/server/controller/MaintenanceStateHelper.java,351,public boolean shouldHostBeRemoved(String hostname) throws AmbariException;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1185,actionContext.setMaintenanceModeIgnored(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1286,actionContext.setMaintenanceModeIgnored(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1347,actionContext.setMaintenanceModeIgnored(false);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/UpgradeResourceProvider.java,1464,actionContext.setMaintenanceModeIgnored(false);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,460,public Map<String, Collection<String>> getProjectedTopology() {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,465,Map<String, Collection<String>> requestTopology = logicalRequest.getProjectedTopology();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,466,for (Map.Entry<String, Collection<String>> entry : requestTopology.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,467,String host = entry.getKey();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,468,Collection<String> hostComponents = hostComponentMap.get(host);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,469,if (hostComponents == null) {
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,470,hostComponents = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,471,hostComponentMap.put(host, hostComponents);
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,473,hostComponents.addAll(entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,280,Map<String, Collection<String>> pendingHostComponents = topologyManager.getProjectedTopology();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,355,Map<String, SortedSet<Integer>> hostRolesInfoFromTopology = new HashMap<String, SortedSet<Integer>>();
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,379,SortedSet<Integer> hostsForComponentsHost = hostRolesInfoFromTopology.get(roleName);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,383,hostRolesInfoFromTopology.put(roleName, hostsForComponentsHost);
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,402,for (Map.Entry<String, SortedSet<Integer>> entry : hostRolesInfoFromTopology.entrySet()) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,403,if (isOverrideHostRoleNeeded(entry, hostRolesInfo, allHosts, pendingHostComponents)) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,404,hostRolesInfo.put(entry.getKey(), entry.getValue());
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,598,private static boolean isOverrideHostRoleNeeded(Entry<String, SortedSet<Integer>> hostRoleEntry,
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,599,Map<String, SortedSet<Integer>> hostRolesInfo,
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,600,Collection<Host> allHosts,
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,601,Map<String, Collection<String>> pendingHostComponents) {
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,602,Set<Integer> hostRole = hostRolesInfo.get(hostRoleEntry.getKey());
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,603,return (allHosts.size() != pendingHostComponents.size() || (hostRole == null ||
ambari-server/src/main/java/org/apache/ambari/server/utils/StageUtils.java,604,(!hostRole.isEmpty() && hostRole.size() < hostRoleEntry.getValue().size())));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,415,LOG.debug("Filter out recommended configurations. Keep only the stack defaults.");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,416,doFilterStackDefaults(configuration, advisedConfigurations);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,422,LOG.debug("Update '{}' configurations with recommended configurations provided by the stack advisor.", configType);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,427,LOG.debug("No any recommended configuration applied. (strategy: {})", ConfigRecommendationStrategy.NEVER_APPLY);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,436,private void doFilterStackDefaults(Configuration configuration, Map<String, AdvisedConfiguration> advisedConfigurations) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,446,advisedConfiguration.getProperties().keySet().removeAll(outFilteredProps.keySet());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,451,advisedConfiguration.getPropertyValueAttributes().keySet().removeAll(outFilteredValueAttrs.keySet());
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/AlertTargetEntity.java,50,import org.eclipse.persistence.annotations.Noncacheable;
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,353,tmpStatus.setLog(scriptlog);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,354,tmpStatus.setStatus(stat);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,355,bsImpl.updateStatus(requestId, tmpStatus);
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BSRunner.java,356,bsImpl.reset();
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,57,public void setStatus(BSStat status) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,61,public BSStat getStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,65,public void setHostsStatus(List<BSHostStatus> hostsStatus) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,69,public List<BSHostStatus> getHostsStatus() {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,73,public void setLog(String log) {
ambari-server/src/main/java/org/apache/ambari/server/bootstrap/BootStrapStatus.java,77,public String getLog() {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,69,URL_TEMPLATES.put(COMPONENT_RESOURCEMANAGER, "http://%s:8088/ws/v1/cluster/info");
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,128,String template = getTemplate(componentName.toString(), clusterName.toString());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,139,private String getTemplate(String componentName, String clusterName) throws SystemException {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,149,if ((yarnHttpPolicy != null && yarnHttpPolicy.equals(PROPERTY_YARN_HTTP_POLICY_VALUE_HTTPS_ONLY)) ||
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HttpProxyPropertyProvider.java,150,hadoopSslEnabled != null && hadoopSslEnabled.equals(PROPERTY_HADOOP_SSL_ENABLED_VALUE_TRUE)) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,57,import org.apache.ambari.server.topology.TopologyManager;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,508,CalculatedStatus status;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,509,if (summary.isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/RequestResourceProvider.java,513,status = CalculatedStatus.statusFromStageSummary(summary, summary.keySet());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,862,if (hrcEntity.getTopologyLogicalTaskEntity() != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClustersImpl.java,863,topologyLogicalTaskDAO.remove(hrcEntity.getTopologyLogicalTaskEntity());
ambari-server/src/main/java/org/apache/ambari/server/topology/TopologyManager.java,381,public Request getRequest(long requestId) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRenderer.java,328,for (String component : group.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/api/query/render/ClusterBlueprintRenderer.java,331,mapComponentProperties.put("name", component);
ambari-server/src/main/java/org/apache/ambari/server/api/services/stackadvisor/StackAdvisorBlueprintProcessor.java,108,hgComponentsMap.put(hgEnrty.getKey(), Sets.newCopyOnWriteArraySet(hgEnrty.getValue().getComponents()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ExportBlueprintRequest.java,133,hostGroups.add(new HostGroupImpl(exportedHostGroup.getName(), bpName, stack, exportedHostGroup.getComponents(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,413,Predicate startPredicate = new AndPredicate(clusterAndClientPredicate, hostAndStatePredicate);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostComponentResourceProvider.java,415,LOG.info("Starting all non-client components on host: " + hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,336,public RequestStatusResponse startHost(String hostName, String clusterName) {
ambari-server/src/main/java/org/apache/ambari/server/topology/AmbariContext.java,338,return getHostComponentResourceProvider().start(clusterName, hostName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,147,Collection<String> components = processHostGroupComponents(stack, hostGroupName, componentProps);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,158,private Collection<String> processHostGroupComponents(Stack stack, String groupName, HashSet<HashMap<String, String>>  componentProps) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,164,Collection<String> components = new ArrayList<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintFactory.java,177,components.add(componentName);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,160,if (group.getComponents().contains(component)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,361,private void createComponentEntities(HostGroupEntity group, Collection<String> components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,365,for (String component : components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintImpl.java,369,componentEntity.setName(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,119,for (String component : hostGroup.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/BlueprintValidatorImpl.java,231,Collection<String> groupComponents = group.getComponents();
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,121,if (group.getComponents().contains(component)) {
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterTopologyImpl.java,231,return ambariContext.startHost(hostName, ambariContext.getClusterName(getClusterId()));
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroup.java,60,public Collection<String> getComponents();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,53,private Collection<String> components = new HashSet<String>();
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,81,public HostGroupImpl(String name, String bpName, Stack stack, Collection<String> components, Configuration configuration, String cardinality) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,87,for (String component : components) {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,88,addComponent(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,113,public Collection<String> getComponents() {
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,114,return components;
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,136,boolean added = components.add(component);
ambari-server/src/main/java/org/apache/ambari/server/topology/HostGroupImpl.java,210,addComponent(componentEntity.getName());
ambari-server/src/main/java/org/apache/ambari/server/topology/HostRequest.java,189,for (String component : hostGroup.getComponents()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,191,hostComponents.addAll(hostGroup.getComponents());
ambari-server/src/main/java/org/apache/ambari/server/topology/RequiredPasswordValidator.java,84,for (String component : hostGroup.getComponents()) {
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,40,import java.util.HashMap;
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,57,private static final Map<Class, Map<String, Object>> localObjects = new HashMap<Class, Map<String, Object>>();
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,67,localObjects.put(OperationHandleControllerFactory.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,68,localObjects.put(Storage.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,69,localObjects.put(IJobControllerFactory.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,70,localObjects.put(ATSParser.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,71,localObjects.put(SavedQueryResourceManager.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,72,localObjects.put(HdfsApi.class, new HashMap<String, Object>());
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/utils/SharedObjectsFactory.java,73,localObjects.put(RMParser.class, new HashMap<String, Object>());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/UserLocal.java,23,import java.util.HashMap;
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/UserLocal.java,34,private static Map<Class, Map<String, Object>> viewSingletonObjects = new HashMap<Class, Map<String, Object>>();
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/UserLocal.java,60,viewSingletonObjects.put(tClass, new HashMap<String, Object>());
contrib/views/utils/src/main/java/org/apache/ambari/view/utils/UserLocal.java,78,viewSingletonObjects.put(tClass, new HashMap<String, Object>());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/BlueprintConfigurationProcessor.java,470,configTypesUpdated.add(configType);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryResourceManager.java,135,fillShortQueryField(savedQuery);
contrib/views/hive/src/main/java/org/apache/ambari/view/hive/resources/savedQueries/SavedQueryResourceManager.java,141,return super.readAll(filteringStrategy);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,498,hostLevelParams.put("repo_info", rootJsonObject.toString());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,193,private ClusterEntity clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,195,private long clusterId;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,278,this.clusterEntity = clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,280,serviceComponentHosts = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,281,Map<String, Map<String, ServiceComponentHost>>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,283,serviceComponentHostsByHost = new HashMap<String,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,284,List<ServiceComponentHost>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,404,services = new TreeMap<String, Service>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,405,if (!clusterEntity.getClusterServiceEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,406,for (ClusterServiceEntity serviceEntity : clusterEntity.getClusterServiceEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,407,StackId stackId = getCurrentStackVersion();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,408,try {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,409,if (ambariMetaInfo.getService(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,411,services.put(serviceEntity.getServiceName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,415,LOG.error(String.format(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,435,clusterConfigGroups = new HashMap<Long, ConfigGroup>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,436,if (!clusterEntity.getConfigGroupEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,437,for (ConfigGroupEntity configGroupEntity : clusterEntity.getConfigGroupEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,438,clusterConfigGroups.put(configGroupEntity.getGroupId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,454,requestExecutions = new HashMap<Long, RequestExecution>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,455,if (!clusterEntity.getRequestScheduleEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,456,for (RequestScheduleEntity scheduleEntity : clusterEntity.getRequestScheduleEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,457,requestExecutions.put(scheduleEntity.getScheduleId(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,475,+ ", tag = " + configGroup.getTag());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,535,+ ", description = " + requestExecution.getDescription());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,572,+ ", description = " + requestExecution.getDescription());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,616,hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,624,return clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,631,String oldName = clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,632,clusterEntity.setClusterName(clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,635,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,636,clusters.updateClusterName(oldName, clusterName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,718,new ArrayList<ServiceComponentHost>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,729,svcCompHost);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,821,return clusterEntity.getClusterId();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,872,+ ", clusterId=" + getClusterId() + ", serviceName="
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,873,+ service.getName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,893,+ ", clusterId=" + getClusterId() + ", serviceName=" + serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,910,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,962,StackEntity stackEntity = stackDAO.find(stackId.getStackName(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,963,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,965,clusterEntity.setDesiredStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,966,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,968,if (cascade) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,969,for (Service service : getServices().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,970,service.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,972,for (ServiceComponent sc : service.getServiceComponents().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,973,sc.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,975,for (ServiceComponentHost sch : sc.getServiceComponentHosts().values()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,976,sch.setDesiredStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,982,loadServiceConfigTypes();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,993,ClusterStateEntity clusterStateEntity = clusterEntity.getClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,994,if (clusterStateEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,995,StackEntity currentStackEntity = clusterStateEntity.getCurrentStack();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,996,return new StackId(currentStackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1009,provisioningState = clusterEntity.getProvisioningState();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1011,if (null == provisioningState) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1012,provisioningState = State.INIT;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1025,clusterEntity.setProvisioningState(provisioningState);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1026,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1037,securityType = clusterEntity.getSecurityType();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1039,if (null == securityType) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1040,securityType = SecurityType.NONE;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1053,clusterEntity.setSecurityType(securityType);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1054,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1106,getClusterName(), repoVersionStackId,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1107,currentClusterVersion.getRepositoryVersion().getVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1116,existingHostToHostVersionEntity.keySet(), hostNames);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1556,getClusterName(), stackId, version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1565,stackId, version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1572,ClusterVersionEntity clusterVersionEntity = new ClusterVersionEntity(clusterEntity, repositoryVersionEntity, state, System.currentTimeMillis(), System.currentTimeMillis(), userName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1602,ClusterVersionEntity existingClusterVersion = clusterVersionDAO.findByClusterAndStackAndVersion(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1605,if (existingClusterVersion == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1606,throw new AmbariException(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1608,+ getClusterName() + ", stack=" + stackId + ", version="
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1609,+ version);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1613,if (existingClusterVersion.getState() == state) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1614,return;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1617,switch (existingClusterVersion.getState()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1618,case CURRENT:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1624,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1625,case INSTALLING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1626,allowedStates.add(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1627,allowedStates.add(RepositoryVersionState.INSTALL_FAILED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1628,allowedStates.add(RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1629,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1630,case INSTALL_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1631,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1632,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1633,case INSTALLED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1634,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1635,allowedStates.add(RepositoryVersionState.UPGRADING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1636,allowedStates.add(RepositoryVersionState.OUT_OF_SYNC);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1637,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1638,case OUT_OF_SYNC:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1639,allowedStates.add(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1640,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1641,case UPGRADING:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1642,allowedStates.add(RepositoryVersionState.UPGRADED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1643,allowedStates.add(RepositoryVersionState.UPGRADE_FAILED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1644,if (clusterVersionDAO.findByClusterAndStateCurrent(getClusterName()) == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1647,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1648,case UPGRADED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1649,allowedStates.add(RepositoryVersionState.CURRENT);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1650,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1651,case UPGRADE_FAILED:
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1652,allowedStates.add(RepositoryVersionState.UPGRADING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1653,break;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1656,if (!allowedStates.contains(state)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1657,throw new AmbariException("Invalid cluster version transition from "
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1663,if (state == RepositoryVersionState.CURRENT) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1664,ClusterVersionEntity currentVersion = clusterVersionDAO.findByClusterAndStateCurrent(getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1665,if (currentVersion != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1666,currentVersion.setState(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1667,clusterVersionDAO.merge(currentVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1671,existingClusterVersion.setState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1672,existingClusterVersion.setEndTime(System.currentTimeMillis());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1673,clusterVersionDAO.merge(existingClusterVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1675,if (state == RepositoryVersionState.CURRENT) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1676,for (HostEntity hostEntity : clusterEntity.getHostEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1677,if (hostHasReportables(existingClusterVersion.getRepositoryVersion(), hostEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1678,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1681,Collection<HostVersionEntity> versions = hostVersionDAO.findByHost(hostEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1683,HostVersionEntity target = null;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1684,if (null != versions) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1687,for (HostVersionEntity entity : versions) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1688,if (entity.getRepositoryVersion().getId().equals(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1690,target = entity;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1691,target.setState(state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1692,hostVersionDAO.merge(target);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1694,entity.setState(RepositoryVersionState.INSTALLED);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1695,hostVersionDAO.merge(entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1700,if (null == target) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1703,HostVersionEntity hve = new HostVersionEntity(hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1706,hostVersionDAO.create(hve);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1712,StackEntity desiredStackEntity = clusterEntity.getDesiredStack();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1713,StackId desiredStackId = new StackId(desiredStackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1717,if (!desiredStackId.equals(stackId)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1718,String message = MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1722,throw new AmbariException(message);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1725,setCurrentStackVersion(stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1730,stackId, version, getClusterName(), state);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1765,throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1769,stackId.getStackVersion());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1771,ClusterStateEntity clusterStateEntity = clusterStateDAO.findByPK(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1772,if (clusterStateEntity == null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1773,clusterStateEntity = new ClusterStateEntity();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1774,clusterStateEntity.setClusterId(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1775,clusterStateEntity.setCurrentStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1776,clusterStateEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1777,clusterStateDAO.create(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1778,clusterStateEntity = clusterStateDAO.merge(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1779,clusterEntity.setClusterStateEntity(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1780,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1782,clusterStateEntity.setCurrentStack(stackEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1783,clusterStateDAO.merge(clusterStateEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1784,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1927,clusterEntity = clusterDAO.findById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1941,+ getClusterName());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2167,Map<String, List<HostConfigMapping>> hostMappingsByType = hostConfigMappingDAO.findSelectedHostsByTypes(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2168,clusterEntity.getClusterId(), types);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2206,if (configGroup != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2207,serviceConfigEntity.setGroupId(configGroup.getId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2208,Collection<Config> configs = configGroup.getConfigurations().values();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2209,List<ClusterConfigEntity> configEntities = new ArrayList<ClusterConfigEntity>(configs.size());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2210,for (Config config : configs) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2211,configEntities.add(clusterDAO.findConfig(getClusterId(), config.getType(), config.getTag()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2214,serviceConfigEntity.setClusterConfigEntities(configEntities);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2216,List<ClusterConfigEntity> configEntities = getClusterConfigEntitiesByService(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2217,serviceConfigEntity.setClusterConfigEntities(configEntities);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2221,long nextServiceConfigVersion = serviceConfigDAO.findNextServiceConfigVersion(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2222,clusterEntity.getClusterId(), serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2224,serviceConfigEntity.setServiceName(serviceName);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2225,serviceConfigEntity.setClusterEntity(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2226,serviceConfigEntity.setVersion(nextServiceConfigVersion);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2227,serviceConfigEntity.setUser(user);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2228,serviceConfigEntity.setNote(note);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2229,serviceConfigEntity.setStack(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2231,serviceConfigDAO.create(serviceConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2232,if (configGroup != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2233,serviceConfigEntity.setHostIds(new ArrayList<Long>(configGroup.getHosts().keySet()));
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2234,serviceConfigDAO.merge(serviceConfigEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2659,hostIds = clusters.getHostIdsForCluster(clusterEntity.getClusterName()).keySet();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2672,return clusterDAO.findNextConfigVersion(clusterEntity.getClusterId(), type);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2814,String clusterName = clusterEntity.getClusterName();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2918,ResourceEntity resourceEntity = clusterEntity.getResource();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2919,if (resourceEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2920,Integer permissionId = privilegeEntity.getPermission().getId();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2922,if (privilegeEntity.getResource().equals(resourceEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2923,if ((readOnly && permissionId.equals(PermissionEntity.CLUSTER_READ_PERMISSION)) ||
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,2925,return true;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3004,Collection<ClusterConfigMappingEntity> configMappingEntities = clusterDAO.getClusterConfigMappingEntitiesByCluster(getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3011,List<ClusterConfigEntity> clusterConfigsToMakeSelected = clusterDAO.getLatestConfigurations(
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3012,clusterEntity.getClusterId(), stackId);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3088,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3111,clusterEntity = clusterDAO.merge(clusterEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3133,if (null == allConfigs) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3134,allConfigs = new HashMap<String, Map<String, Config>>();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3137,allConfigs.clear();
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3139,if (!clusterEntity.getClusterConfigEntities().isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3140,for (ClusterConfigEntity entity : clusterEntity.getClusterConfigEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3142,if (!allConfigs.containsKey(entity.getType())) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3143,allConfigs.put(entity.getType(), new HashMap<String, Config>());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3146,Config config = configFactory.createExisting(this, entity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3148,allConfigs.get(entity.getType()).put(entity.getTag(), config);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3180,desiredStackVersion = new StackId(clusterEntity.getDesiredStack());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3247,if (!clusterDAO.isManaged(clusterEntity)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3248,clusterEntity = clusterDAO.findById(clusterEntity.getClusterId());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,3250,return clusterEntity;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,436,if (null != cluster) {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,437,execCmd.setClusterHostInfo(
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariActionExecutionHelper.java,438,StageUtils.getClusterHostInfo(cluster));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,391,cluster.getClusterId(), stageName, "{}", "{}", hostParamsJson);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,457,final List<RepositoryEntity> repoInfo = perOsRepos.get(host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,461,host.getOsFamily(), desiredRepoVersion, stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider.java,482,host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,357,final List<RepositoryEntity> repoInfo = perOsRepos.get(host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,361,host.getOsFamily(), desiredRepoVersion, stackId));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostStackVersionResourceProvider.java,380,host.getOsFamily());
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1194,for (String hostname : hosts.keySet()) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1198,Host host = hosts.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1199,if (host.getMaintenanceState(getClusterId()) != MaintenanceState.OFF) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1200,continue;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1203,if (hostsMissingRepoVersion.contains(hostname)) {
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1205,HostEntity hostEntity = hostDAO.findByName(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1206,HostVersionEntity hostVersionEntity = new HostVersionEntity(hostEntity,
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1207,sourceClusterVersion.getRepositoryVersion(),
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1208,RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1209,hostVersionDAO.create(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1212,HostVersionEntity hostVersionEntity = existingHostStackVersions.get(hostname);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1213,hostVersionEntity.setState(RepositoryVersionState.INSTALLING);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,1214,hostVersionDAO.merge(hostVersionEntity);
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,863,String majorVersion = getHostAttributes().get(OS_RELEASE_VERSION).split("\\.")[0];
ambari-server/src/main/java/org/apache/ambari/server/state/host/HostImpl.java,864,return getHostAttributes().get(OSFAMILY) + majorVersion;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,723,principalType = principalDescriptor.getType().name().toLowerCase();
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,858,principalDescriptor.getType(),
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/HostKerberosIdentityResourceProvider.java,186,setResourceProperty(resource, KERBEROS_IDENTITY_PRINCIPAL_TYPE_PROPERTY_ID, principalDescriptor.getType(), requestPropertyIds);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,76,private KerberosPrincipalType type = KerberosPrincipalType.SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,112,setType((type == null) ? KerberosPrincipalType.SERVICE : type);
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,273,map.put("type", getType().name().toLowerCase());
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalDescriptor.java,329,return KerberosPrincipalType.SERVICE;
ambari-server/src/main/java/org/apache/ambari/server/state/kerberos/KerberosPrincipalType.java,38,SERVICE
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,205,dbAccessor.addColumn(HOST_COMPONENT_STATE_TABLE,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,206,new DBColumnInfo(HOST_COMPONENT_STATE_ID_COLUMN, Long.class, null, null, true));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,208,Statement statement = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,209,ResultSet resultSet = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,210,try {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,211,statement = dbAccessor.getConnection().createStatement();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,212,if (statement != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,213,String selectSQL = MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,215,HOST_COMPONENT_STATE_TABLE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,217,resultSet = statement.executeQuery(selectSQL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,218,while (resultSet.next()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,219,final Long clusterId = resultSet.getLong("cluster_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,220,final String serviceName = resultSet.getString("service_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,221,final String componentName = resultSet.getString("component_name");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,222,final Long hostId = resultSet.getLong("host_id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,224,String updateSQL = MessageFormat.format(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,226,HOST_COMPONENT_STATE_TABLE, HOST_COMPONENT_STATE_ID_COLUMN, m_hcsId.getAndIncrement(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,227,clusterId, serviceName, componentName, hostId);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,229,dbAccessor.executeQuery(updateSQL);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,233,JdbcUtils.closeResultSet(resultSet);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,234,JdbcUtils.closeStatement(statement);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,238,dbAccessor.alterColumn(HOST_COMPONENT_STATE_TABLE,
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,239,new DBColumnInfo(HOST_COMPONENT_STATE_ID_COLUMN, Long.class, null, null, false));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,242,addSequence("hostcomponentstate_id_seq", m_hcsId.get(), false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,245,String primaryKeyConstraintName = null;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,246,Configuration.DatabaseType databaseType = configuration.getDatabaseType();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,247,switch (databaseType) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,248,case POSTGRES: {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,249,primaryKeyConstraintName = "hostcomponentstate_pkey";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,250,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,252,case ORACLE:
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,253,case SQL_SERVER: {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,255,primaryKeyConstraintName = dbAccessor.getPrimaryKeyConstraintName(
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,256,HOST_COMPONENT_STATE_TABLE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,258,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,260,default:
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,261,break;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,264,if (databaseType == DatabaseType.MYSQL) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,265,String mysqlDropQuery = MessageFormat.format("ALTER TABLE {0} DROP PRIMARY KEY",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,266,HOST_COMPONENT_STATE_TABLE);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,268,dbAccessor.executeQuery(mysqlDropQuery, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,271,if (null == primaryKeyConstraintName) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,272,LOG.warn("Unable to determine the primary key constraint name for {}",
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,275,dbAccessor.dropPKConstraint(HOST_COMPONENT_STATE_TABLE, primaryKeyConstraintName, true);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,281,dbAccessor.addPKConstraint(HOST_COMPONENT_STATE_TABLE, "pk_hostcomponentstate", "id");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog211.java,284,dbAccessor.createIndex(HOST_COMPONENT_STATE_INDEX, HOST_COMPONENT_STATE_TABLE, "host_id",
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,235,for (StageEntity stage : getStageEntities()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,251,for (HostRoleCommandEntity task : stage.getHostRoleCommands()) {
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,294,stage.isSkippable() ? 1 : 0, 0, 0, stage.getStageId(), aborted, completed, failed,
ambari-server/src/main/java/org/apache/ambari/server/topology/LogicalRequest.java,298,summaryMap.put(stage.getStageId(), stageSummary);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,21,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_DRIVER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,22,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_PASSWORD;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,23,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_URL;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,24,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.AMBARI_DB_RCA_USERNAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,25,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.CLIENTS_TO_UPDATE_CONFIGS;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,26,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_RETRY_ENABLED;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,27,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.COMMAND_TIMEOUT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,28,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.DB_DRIVER_FILENAME;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,29,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.GROUP_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,30,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.HOOKS_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,31,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.MAX_DURATION_OF_RETRIES;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,32,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.PACKAGE_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,33,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,34,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,35,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SCRIPT_TYPE;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,36,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_PACKAGE_FOLDER;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,37,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.SERVICE_REPO_INFO;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,38,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.USER_LIST;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,39,import static org.apache.ambari.server.agent.ExecutionCommand.KeyNames.VERSION;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,41,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,42,import java.io.FileReader;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,43,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,44,import java.lang.reflect.Type;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,45,import java.net.InetAddress;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,46,import java.text.MessageFormat;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,47,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,48,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,49,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,50,import java.util.EnumMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,51,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,52,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,53,import java.util.LinkedHashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,54,import java.util.LinkedList;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,55,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,56,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,57,import java.util.Map.Entry;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,58,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,59,import java.util.TreeMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,60,import java.util.concurrent.TimeUnit;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,61,import java.util.concurrent.locks.Lock;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,174,import com.google.common.cache.Cache;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,175,import com.google.common.cache.CacheBuilder;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,176,import com.google.common.collect.ArrayListMultimap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,177,import com.google.common.collect.Multimap;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,178,import com.google.gson.Gson;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,179,import com.google.gson.reflect.TypeToken;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,180,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,181,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,182,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,183,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2273,try {
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2274,kerberosHelper.configureService(cluster, scHost);
ambari-server/src/main/java/org/apache/ambari/server/controller/AmbariManagementControllerImpl.java,2276,throw new AmbariException(e.getMessage(), e);
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,21,import java.io.File;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,22,import java.io.IOException;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,23,import java.text.SimpleDateFormat;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,24,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,25,import java.util.Collection;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,26,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,27,import java.util.Date;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,28,import java.util.HashMap;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,29,import java.util.HashSet;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,30,import java.util.Iterator;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,31,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,32,import java.util.Map;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,33,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,34,import java.util.regex.Matcher;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,35,import java.util.regex.Pattern;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,121,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,122,import com.google.inject.Singleton;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,123,import com.google.inject.persist.Transactional;
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,300,existingConfigurations, Collections.singleton(serviceName));
ambari-server/src/main/java/org/apache/ambari/server/controller/KerberosHelperImpl.java,348,componentDescriptor.getConfigurations(true), configurations);
ambari-server/src/main/java/org/apache/ambari/server/topology/ClusterConfigurationRequest.java,115,new HashSet<String>(blueprint.getServices()));
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,152,if (ambariMetaInfo == null) {
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,153,ambariMetaInfo = injector.getInstance(AmbariMetaInfo.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,161,String serverVersion = null;
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,165,serverVersion = ambariMetaInfo.getServerVersion();
ambari-server/src/main/java/org/apache/ambari/server/controller/utilities/DatabaseChecker.java,168,if (schemaVersionEntity==null || VersionUtils.compareVersions(schemaVersion, serverVersion, 3) != 0) {
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,486,InputStream rcoInputStream = ClassLoader.getSystemResourceAsStream(ROLE_COMMAND_ORDER_FILE);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,487,result = mapper.readValue(rcoInputStream, rcoElementTypeReference);
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,488,LOG.info("Role command order info was loaded from classpath: " +
ambari-server/src/main/java/org/apache/ambari/server/stack/StackDirectory.java,489,ClassLoader.getSystemResource(ROLE_COMMAND_ORDER_FILE));
contrib/fast-hdfs-resource/src/main/java/org/apache/ambari/fast_hdfs_resource/Resource.java,217,FsPermission permission = new FsPermission(Short.valueOf(resource.getMode()));
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,130,LOG.debug("Retrieved {} commands for request {}", entities.size(), request);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,144,for (HostRoleCommandEntity entity : entities) {
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/TaskResourceProvider.java,152,HostRoleCommand hostRoleCommand = s_hostRoleCommandFactory.createExisting(entity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,184,catalogBinder.addBinding().to(UpgradeCatalog213.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,32,import org.apache.ambari.server.orm.dao.*;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,33,import org.apache.ambari.server.orm.entities.*;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,34,import org.apache.ambari.server.state.Cluster;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,36,import org.apache.ambari.server.state.Config;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,43,import org.apache.ambari.server.state.kerberos.*;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,82,public class UpgradeCatalog213 extends AbstractUpgradeCatalog {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,109,private static final String HADOOP_ENV_CONFIG = "hadoop-env";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,156,private static final Logger LOG = LoggerFactory.getLogger(UpgradeCatalog213.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,175,public UpgradeCatalog213(Injector injector) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,187,return "2.1.3";
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,291,upgrade.getId(), upgrade.getUpgradePackage(), upgrade.getFromVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,292,upgrade.getToVersion()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,304,updateHadoopEnv();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,310,updateAlertDefinitions();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,478,protected void updateKerberosDescriptorArtifact(ArtifactDAO artifactDAO, ArtifactEntity artifactEntity) throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,479,if (artifactEntity != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,480,Map<String, Object> data = artifactEntity.getArtifactData();
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,482,if (data != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,483,final KerberosDescriptor kerberosDescriptor = new KerberosDescriptorFactory().createInstance(data);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,485,if (kerberosDescriptor != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,486,KerberosServiceDescriptor hdfsService = kerberosDescriptor.getService("HDFS");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,487,if(hdfsService != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,489,KerberosIdentityDescriptor hdfsIdentity = hdfsService.getIdentity("hdfs");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,490,KerberosComponentDescriptor namenodeComponent = hdfsService.getComponent("NAMENODE");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,491,hdfsIdentity.setName("hdfs");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,492,hdfsService.removeIdentity("hdfs");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,493,namenodeComponent.putIdentity(hdfsIdentity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,495,updateKerberosDescriptorIdentityReferences(kerberosDescriptor, "/HDFS/hdfs", "/HDFS/NAMENODE/hdfs");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,496,updateKerberosDescriptorIdentityReferences(kerberosDescriptor.getServices(), "/HDFS/hdfs", "/HDFS/NAMENODE/hdfs");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,498,artifactEntity.setArtifactData(kerberosDescriptor.toMap());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,499,artifactDAO.merge(artifactEntity);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,534,upgradeId, clusterId, fromVersion, toVersion, direction));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,673,cluster.getClusterName(), stackId.getStackName(), stackId.getStackVersion()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,697,stackEntity, hardcodedInitialVersion, displayName, operatingSystems);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,699,repoVersionEntity.getId(), displayName, operatingSystems));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,704,stackId, hardcodedInitialVersion);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,708,cluster.getClusterName(), clusterVersionEntity.getRepositoryVersion().getVersion(), clusterVersionEntity.getState()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,712,clusterVersionDAO.findByClusterAndState(cluster.getClusterName(), RepositoryVersionState.CURRENT).isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,722,System.currentTimeMillis(), System.currentTimeMillis(), "admin");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,724,clusterVersionEntity.getId(), cluster.getClusterName(), clusterVersionEntity.getRepositoryVersion().getVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,725,clusterVersionEntity.getState()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,734,stackId, hardcodedInitialVersion, hostEntity.getHostName());
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,738,cluster.getClusterName(), hostVersionEntity.getRepositoryVersion().getVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,739,hostEntity.getHostName(), hostVersionEntity.getState()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,742,hostVersionDAO.findByClusterHostAndState(cluster.getClusterName(), hostEntity.getHostName(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,743,RepositoryVersionState.CURRENT).isEmpty()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,759,hostVersionEntity.getId(), cluster.getClusterName(), hostVersionEntity.getRepositoryVersion().getVersion(),
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,760,hostEntity.getHostName(), hostVersionEntity.getState()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,765,cluster.getClusterName()));
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,817,hostDiskUsageAlertDefinitionEntity.setDescription("This host-level alert is triggered if the amount of disk " +
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,868,protected void updateZookeeperLog4j() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,869,AmbariManagementController ambariManagementController = injector.getInstance(AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,871,for (final Cluster cluster : getCheckedClusterMap(ambariManagementController.getClusters()).values()) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,872,Config zookeeperLog4jConfig = cluster.getDesiredConfigByType(ZOOKEEPER_LOG4J_CONFIG);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,873,if (zookeeperLog4jConfig != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,874,String content = zookeeperLog4jConfig.getProperties().get(CONTENT_PROPERTY);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,875,if (content != null) {
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,876,content = content.replaceAll("[\n^]\\s*log4j\\.rootLogger\\s*=\\s*INFO\\s*,\\s*CONSOLE", "\nlog4j.rootLogger=INFO, ROLLINGFILE");
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,877,Map<String, String> updates = Collections.singletonMap(CONTENT_PROPERTY, content);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,878,updateConfigurationPropertiesForCluster(cluster, ZOOKEEPER_LOG4J_CONFIG, updates, true, false);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/UpgradeCatalog213.java,902,AmbariManagementController.class);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,318,displayStatus = calculateDisplayStatus(counts, displayStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,322,stageStatuses.add(stageStatus);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,403,previousStatus != null && previousStatus.equals(HostRoleStatus.FAILED) || counters.get(HostRoleStatus.FAILED) > 0 ? HostRoleStatus.FAILED :
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/CalculatedStatus.java,404,null;
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,306,setResourceProperty(resource, STAGE_STATUS, status.getStatus().toString(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/controller/internal/StageResourceProvider.java,373,setResourceProperty(resource, STAGE_STATUS, status.getStatus().toString(), requestedIds);
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,20,import java.sql.ResultSet;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,21,import java.sql.SQLException;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,22,import java.sql.Statement;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,23,import java.util.ArrayList;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,24,import java.util.Collections;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,25,import java.util.List;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,26,import java.util.Properties;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,27,import java.util.Set;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,38,import com.google.inject.Guice;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,39,import com.google.inject.Inject;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,40,import com.google.inject.Injector;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,41,import com.google.inject.multibindings.Multibinder;
ambari-server/src/main/java/org/apache/ambari/server/upgrade/SchemaUpgradeHelper.java,42,import com.google.inject.persist.PersistService;
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,115,if (regenerateKeytabs || !kerberosPrincipalHostDAO.exists(evaluatedPrincipal)) {
ambari-server/src/main/java/org/apache/ambari/server/serveraction/kerberos/CreatePrincipalsServerAction.java,141,else {
ambari-server/src/main/java/org/apache/ambari/server/update/HostUpdateHelper.java,341,private void initHostChangesFileMap() throws AmbariException {
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,225,int result = configId != null ? configId.intValue() : 0;
ambari-server/src/main/java/org/apache/ambari/server/orm/entities/ClusterConfigEntity.java,226,result = 31 * result + (clusterId != null ? clusterId.intValue() : 0);
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,25,import java.util.Comparator;
ambari-server/src/main/java/org/apache/ambari/server/state/cluster/ClusterImpl.java,42,import com.google.common.collect.Maps;
