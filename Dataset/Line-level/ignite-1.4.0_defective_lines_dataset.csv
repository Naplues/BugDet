File,Line_number,SRC
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,30,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,68,threadSync = F.addIfAbsent(threadMap, threadId, new ThreadFinishSync(threadId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,70,threadSync.onSend(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,195,TxFinishSync sync = nodeMap.get(nodeId);
modules/core/src/main/java/org/apache/ignite/events/EventType.java,1014,EVT_CACHE_REBALANCE_PART_DATA_LOST
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java,40,private CacheConfiguration cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3545,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3563,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3564,return ctx.closures().callLocalSafe(new Callable<Void>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3566,localLoadAndUpdate(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3568,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAttributes.java,54,ccfg = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,24,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,420,if (cc.isWriteBehindEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,823,for (CachedDeploymentInfo<K, V> t : deps.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,824,UUID sndId = t.senderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,825,IgniteUuid ldrId = t.loaderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,826,String userVer = t.userVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,827,DeploymentMode mode = t.mode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,828,Map<UUID, IgniteUuid> participants = t.participants();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,830,GridDeployment d = cctx.gridDeploy().getGlobalDeployment(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,831,mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,832,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,833,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,834,userVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,835,sndId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,836,ldrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,837,participants,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,838,F.<ClusterNode>alwaysTrue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,840,if (d != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,841,Class cls = d.deployedClass(name);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,912,long noResStart = 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,932,noResStart = 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1010,noResStart = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,331,U.error(log, "Failed to process message [senderId=" + nodeId + ", messageType=" + cacheMsg.getClass() + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,943,writeSslSystem(ses, sockCh);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1112,break;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,487,ch.write(outNetBuf);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,241,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,242,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,253,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,254,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,265,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,266,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,277,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,278,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,289,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,290,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,301,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,302,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,313,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,314,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,325,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,326,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,136,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,137,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,148,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,149,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,160,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,161,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,172,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,173,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,185,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,186,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,197,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,198,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,209,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,210,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1898,return ignite().configuration().getSslContextFactory() != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,120,private static final Object JOIN_TIMEOUT = "JOIN_TIMEOUT";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1322,if (msg == JOIN_TIMEOUT) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1323,if (state == STARTING) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1324,joinError(new IgniteSpiException("Join process timed out, did not receive response for " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1328,break;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1330,else if (state == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1332,log.debug("Failed to reconnect, local node segmented " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1335,state = SEGMENTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1337,notifyDiscovery(EVT_NODE_SEGMENTED, topVer, locNode, allVisibleNodes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1517,queue.add(JOIN_TIMEOUT);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,539,Map<Integer, CacheMetrics> cacheMetrics = this.cacheMetrics;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,541,out.writeInt(cacheMetrics == null ? 0 : cacheMetrics.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,544,for (Map.Entry<Integer, CacheMetrics> m : cacheMetrics.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,545,out.writeInt(m.getKey());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,546,out.writeObject(m.getValue());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,579,Map<Integer, CacheMetrics> cacheMetrics =
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,580,size > 0 ? U.<Integer, CacheMetrics>newHashMap(size) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,583,int id = in.readInt();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,586,cacheMetrics.put(id, m);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,602,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,617,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,618,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,594,GridPingFutureAdapter<IgniteBiTuple<UUID, Boolean>> fut = new GridPingFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,709,U.closeQuiet(fut.sock);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1604,return new IgniteSpiException("Local node has the same ID as existing node in topology " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,267,throw new IgniteCheckedException("Query execution failed: " + qry, error());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,208,protected TcpDiscoverySpiState spiState = DISCONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,814,locNode.order(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,815,locNode.internalOrder(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,817,spi.gridStartTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,819,locNode.visible(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,821,ring.clear();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,823,ring.topologyVersion(1);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,825,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,826,topHist.clear();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,828,spiState = CONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,830,mux.notifyAll();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,833,notifyDiscovery(EVT_NODE_JOINED, 1, locNode);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1002,if (e != null && X.hasCause(e, ConnectException.class)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1318,return resolveCoordinator(null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1335,excluded = F.concat(false, excluded, filter);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1665,Collections.<InetSocketAddress>emptyList();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2440,pendingMsgs.discardId, pendingMsgs.customDiscardId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2481,prepareNodeAddedMessage(msg, next.id(), pendingMsgs.msgs, pendingMsgs.discardId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2622,prepareNodeAddedMessage(pendingMsg, locNodeId, pendingMsgs.msgs, pendingMsgs.discardId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3005,sendMessageAcrossRing(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3167,log.debug("Discarding node added message since local node's order is greater " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3170,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3747,long order = msg.order();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3902,if (spiState == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3904,log.debug("Ignoring status check request, SPI is already disconnected: " + msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3906,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4039,msg.cacheMetrics().get(nodeId) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4191,if (spiState == DISCONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4193,log.debug("Ignoring ping request, SPI is already disconnected: " + msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4195,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,62,protected TcpDiscoveryNode locNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1905,return ((ServerImpl)impl).clientMsgWorkers.size();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,68,private TcpDiscoveryNode locNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoverySpiState.java,52,LOOPBACK_PROBLEM
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,50,public TcpDiscoveryNodeFailedMessage(UUID creatorNodeId, UUID failedNodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,54,assert order > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,57,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,86,public long order() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4103,e = new IgniteTxRollbackCheckedException("Transaction has been rolled back: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4104,tx.xid(), e);
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxHeuristicCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxHeuristicCheckedException.java,29,public class IgniteTxHeuristicCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxOptimisticCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxOptimisticCheckedException.java,25,public class IgniteTxOptimisticCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxRollbackCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxRollbackCheckedException.java,25,public class IgniteTxRollbackCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxTimeoutCheckedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxTimeoutCheckedException.java,25,public class IgniteTxTimeoutCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeployable.java,20,import org.apache.ignite.internal.managers.deployment.*;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,968,buf.limit((int)ses.meta(WRITE_BUF_LIMIT));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1081,buf.limit((int)ses.meta(WRITE_BUF_LIMIT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,343,log.debug("Sending local node ID to newly accepted session: " + ses);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,146,return nodes(VISIBLE_NODES, F.remoteNodes(locNode.id()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1808,if (tx == null || tx.implicit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,31,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,32,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,33,import org.apache.ignite.internal.processors.cache.GridCacheEntryEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,40,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,42,import org.apache.ignite.internal.transactions.IgniteTxHeuristicCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,58,import static org.apache.ignite.internal.processors.cache.GridCacheOperation.NOOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,884,nearTx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,886,finish(nodeId, dhtTx, req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,956,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,960,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,964,log.debug("Received finish request for non-existing transaction (added to completed set) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,967,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,181,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,183,ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,184,else if (msg instanceof GridClientHandshakeRequest) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,185,GridClientHandshakeRequest hs = (GridClientHandshakeRequest)msg;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,187,short ver = hs.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,189,if (!SUPP_VERS.contains(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,190,U.error(log, "Client protocol version is not supported [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,194,ses.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,196,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,197,byte marshId = hs.marshallerId();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,200,U.awaitQuiet(marshMapLatch);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,202,GridClientMarshaller marsh = marshMap.get(marshId);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,204,if (marsh == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,205,U.error(log, "Client marshaller ID is invalid. Note that .NET and C++ clients " +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,210,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,211,ses.addMeta(MARSHALLER.ordinal(), marsh);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,213,ses.send(GridClientHandshakeResponse.OK);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,217,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,218,final GridRestRequest req = createRestRequest(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,221,hnd.handleAsync(req).listen(new CI1<IgniteInternalFuture<GridRestResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,223,GridClientResponse res = new GridClientResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,225,res.requestId(msg.requestId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,226,res.clientId(msg.clientId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,228,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,229,GridRestResponse restRes = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,231,res.sessionToken(restRes.sessionTokenBytes());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,232,res.successStatus(restRes.getSuccessStatus());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,233,res.errorMessage(restRes.getError());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,235,Object o = restRes.getResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,239,o = ((GridCacheRestMetrics)o).map();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,241,res.result(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,243,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,244,U.error(log, "Failed to process client request: " + msg, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,246,res.successStatus(GridClientResponse.STATUS_FAILED);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,247,res.errorMessage("Failed to process client request: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,250,GridNioFuture<?> sf = ses.send(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,263,else
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,264,U.error(log, "Failed to process client request (unknown packet type) [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,58,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,282,public void removeExplicitNodeLocks(UUID leftNodeId, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,283,for (GridDistributedCacheEntry entry : locked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,284,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,285,entry.removeExplicitNodeLocks(leftNodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,289,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,291,log.debug("Attempted to remove node locks from removed entry in mvcc manager " +
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2582,return ctx.cache().publicJCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,234,private IgniteUuid dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,360,void dynamicDeploymentId(IgniteUuid dynamicDeploymentId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,361,this.dynamicDeploymentId = dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,26,import java.security.cert.CertificateException;
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,435,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,441,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1637,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,726,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,840,boolean offheap,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3813,private Iterator<Cache.Entry<K, V>> localIteratorHonorExpirePolicy(final CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3814,return F.iterator(iterator(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3815,new IgniteClosure<Cache.Entry<K, V>, Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3816,private IgniteCacheExpiryPolicy expiryPlc =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3817,ctx.cache().expiryPolicy(opCtx != null ? opCtx.expiry() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3820,CacheOperationContext prev = ctx.gate().enter(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3821,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3822,V val = localPeek(lazyEntry.getKey(), CachePeekModes.ONHEAP_ONLY, expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3824,GridCacheVersion ver = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3826,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3827,ver = lazyEntry.unwrap(GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3829,catch (IllegalArgumentException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3830,log.error("Failed to unwrap entry version information", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3833,return new CacheEntryImpl<>(lazyEntry.getKey(), val, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3835,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3836,throw CU.convertToCacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3838,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3839,ctx.gate().leave(prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3843,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,889,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,896,return delegate.localPeek(key, peekModes, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,582,return GridNearCacheAdapter.super.localPeek(e.getKey(), NEAR_PEEK_MODE, null) == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,63,import org.apache.ignite.internal.util.future.GridCompoundFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,64,import org.apache.ignite.internal.util.future.GridFinishedFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,74,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,75,import org.apache.ignite.internal.util.worker.GridWorkerFuture;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,86,import org.apache.ignite.internal.processors.query.h2.opt.GridH2Row;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2Table.java,74,private final ReadWriteLock lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2009,if (storeErr != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2011,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,388,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,390,writer.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,482,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,484,reader.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheConflictResolutionManager.java,20,import org.apache.ignite.internal.processors.cache.version.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,20,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,21,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,22,import java.util.EnumMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,23,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,25,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,26,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,27,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,28,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,29,import java.util.concurrent.CountDownLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,30,import java.util.concurrent.RejectedExecutionException;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,183,lock.writeLock();
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,293,private CacheInterceptor<?, ?> interceptor;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,1499,return (CacheInterceptor<K, V>)interceptor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,106,private static final int SIZE_OVERHEAD = 85 /*entry*/ + 32 /* version */ + 4 * 7 /* key + val */;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,782,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,292,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,852,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,855,throw new IgniteSpiException("Thread has been interrupted.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,564,if (tx.onePhaseCommit() && tx.commitOnPrepare()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,572,if (tx.commitOnPrepare()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,573,if (tx.markFinalizing(IgniteInternalTx.FinalizationStatus.USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,590,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,606,UUID subjId = getThreadContext(TC_SUBJ_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,723,commitIfLocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,731,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,758,U.error(log, "Failed completing transaction [commit=" + commit + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,761,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,766,return new GridFinishedFuture<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,826,else if (e instanceof IgniteTxHeuristicCheckedException) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,827,U.warn(log, "Failed to commit transaction (all transaction entries were invalidated): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,828,CU.txString(dhtTx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,991,U.error(log, "Failed completing transaction [commit=" + req.commit() + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1034,U.error(log, "Failed committing transaction [tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1037,tx.invalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1038,tx.systemInvalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1043,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,795,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,796,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,797,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,798,GridCacheEntryEx cached = txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,802,if (!evictNearEntry(txEntry, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,803,if (cacheCtx.isNear() && cacheCtx.dr().receiveEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,804,cached.markObsolete(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,806,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,810,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,814,boolean metrics = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,819,metrics = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,821,boolean evt = !isNearLocallyMapped(txEntry, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,826,IgniteBiTuple<GridCacheOperation, CacheObject> res = applyTransformClosures(txEntry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,832,if (cacheCtx.isNear()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,833,if (txEntry.op() == CREATE || txEntry.op() == UPDATE ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,837,if ((txEntry.op() == CREATE || txEntry.op() == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,838,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,839,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,841,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,842,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,843,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,845,txEntry.ttl(CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,850,GridCacheOperation op = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,851,CacheObject val = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,854,GridCacheVersion explicitVer = txEntry.conflictVersion() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,855,txEntry.conflictVersion() : writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,857,if ((op == CREATE || op == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,858,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,859,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,861,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,862,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,863,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,865,long ttl = CU.toTtl(duration);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,867,txEntry.ttl(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,870,op = DELETE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,874,boolean conflictNeedResolve = cacheCtx.conflictNeedResolve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,876,GridCacheVersionConflictContext<?, ?> conflictCtx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,878,if (conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,879,IgniteBiTuple<GridCacheOperation, GridCacheVersionConflictContext> conflictRes =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,880,conflictResolve(op, txEntry, val, explicitVer, cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,882,assert conflictRes != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,884,conflictCtx = conflictRes.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,887,op = NOOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,888,else if (conflictCtx.isUseNew()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,889,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,890,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,892,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,893,assert conflictCtx.isMerge();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,895,op = conflictRes.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,896,val = txEntry.context().toCacheObject(conflictCtx.mergeValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,897,explicitVer = writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,899,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,900,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,903,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,905,explicitVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,907,if (sndTransformedVals || conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,908,assert sndTransformedVals && cacheCtx.isReplicated() || conflictNeedResolve;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,910,txEntry.value(val, true, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,911,txEntry.op(op);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,912,txEntry.entryProcessors(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,913,txEntry.conflictVersion(explicitVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,916,if (op == CREATE || op == UPDATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,917,GridCacheUpdateTxResult updRes = cached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,918,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,919,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,920,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,921,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,922,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,923,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,924,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,925,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,926,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,927,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,928,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,929,cached.detached() ? DR_NONE : drType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,930,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,931,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,932,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,954,else if (op == DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,955,GridCacheUpdateTxResult updRes = cached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,956,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,957,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,958,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,959,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,961,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,962,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,963,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,964,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,966,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,967,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,986,else if (op == RELOAD) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,987,cached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,992,else if (op == READ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,993,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,995,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,996,Duration duration = expiry.getExpiryForAccess();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,999,cached.updateTtl(null, CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1003,log.debug("Ignoring READ entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1005,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1008,this + ", txEntry=" + txEntry + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1010,if (conflictCtx == null || !conflictCtx.isUseOld()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1012,cached.updateTtl(null, txEntry.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1016,log.debug("Ignoring NOOP entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1025,checkCommitLocks(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1028,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1031,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1033,log.debug("Got removed entry during transaction commit (will retry): " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1039,catch (Throwable ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1042,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1067,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1071,catch (Throwable ex1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1072,U.error(log, "Failed to uncommit transaction: " + this, ex1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1075,throw ex1;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,263,timer.schedule(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,759,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,762,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,944,return new GridFinishedFuture<IgniteInternalTx>(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4121,ctx.affinity().affinityReadyFuture(topVer.topologyVersion() + 1).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4881,ctx.affinity().affinityReadyFuture(topVer.topologyVersion() + 1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,504,return lastInitializedFut0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,513,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2920,IgniteCacheProxy<K, V> proxy = (IgniteCacheProxy<K, V>)jCacheProxies.get(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2993,if (cache == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,88,public GridCacheProxyImpl(GridCacheContext<K, V> ctx, IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,714,cctx.affinity().affinityReadyFuture(updTopVer).listen(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,849,cctx.affinity().affinityReadyFuture(updTopVer).listen(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,850,new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,869,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,687,retryFut = cctx.affinity().affinityReadyFuture(waitVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,148,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,150,Map<UUID, Collection<UUID>> map = txMapping.transactionNodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFutureAdapter.java,152,if (map.size() == 1) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1117,A.notNull(cfg.getMBeanServer(), "cfg.getMBeanServer()");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,354,((GridFutureAdapter)future).onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,189,private IllegalStateException illegalState() {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,190,return new IllegalStateException("Grid is in invalid state to perform this operation. " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,26,import org.h2.index.BaseIndex;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,37,public abstract class GridH2IndexBase extends BaseIndex {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,187,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,189,String clsName = meta.className();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,193,spi.register(ldr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,195,rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,197,if (rsrc != null && rsrc.getResourceClass().equals(cls)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,199,log.debug("Retrieved auto-loaded resource from spi: " + rsrc);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,201,dep = deploy(ctx.config().getDeploymentMode(), ldr, cls, meta.alias(), meta.record());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,203,assert dep != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,205,else {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,206,U.warn(log, "Failed to find resource from deployment SPI even after registering: " + meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,211,catch (ClassNotFoundException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,213,log.debug("Failed to load class for local auto-deployment [ldr=" + ldr + ", meta=" + meta + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,215,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,217,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,218,U.error(log, "Failed to deploy local class with meta: " + meta, e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,220,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,348,spi.register(clsLdr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,350,GridDeployment dep = deployment(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,352,if (dep == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,353,DeploymentResource rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,356,dep = deploy(ctx.config().getDeploymentMode(), rsrc.getClassLoader(),
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,357,rsrc.getResourceClass(), rsrc.getName(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,92,public static final GridCacheAtomicVersionComparator ATOMIC_VER_COMPARATOR = new GridCacheAtomicVersionComparator();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1655,Runtime.getRuntime().addShutdownHook(shutdownHook = new Thread() {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,519,private class TopologyUpdaterThread extends Thread {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,524,super(id + "-topology-update");
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,530,while (!isInterrupted()) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,531,Thread.sleep(cfg.getTopologyRefreshFrequency());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,533,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,534,tryInitTopology();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,536,catch (GridClientException e) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,537,top.fail(e);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,540,log.fine("Failed to update topology: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,544,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,546,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1765,ExecutorService executor = Executors.newFixedThreadPool(Math.min(10, addrs.size()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,37,import java.util.Timer;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,38,import java.util.TimerTask;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,162,private final Timer timer = new Timer("TcpDiscoverySpi.timer");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,359,timer.schedule(new TimerTask() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,361,if (pingFuts.remove(nodeId, finalFut)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,363,finalFut.onDone(new IgniteClientDisconnectedCheckedException(null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,365,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,366,finalFut.onDone(false);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1514,timer.schedule(new TimerTask() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1346,TcpDiscoveryAbstractMessage leftMsg = new TcpDiscoveryNodeLeftMessage(getLocalNodeId());
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,215,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,216,Map<String, Object> retval = spi.getNodeAttributes();
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,218,if (retval != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,219,for (Map.Entry<String, Object> e : retval.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,221,throw new IgniteCheckedException("SPI attribute collision for attribute [spi=" + spi +
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,228,ctx.addNodeAttribute(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,232,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,233,throw new IgniteCheckedException("Failed to get SPI attributes.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,21,import java.io.InputStream;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,22,import java.io.OutputStream;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,23,import java.net.ConnectException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,24,import java.net.InetAddress;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,26,import java.net.SocketTimeoutException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,28,import java.nio.ByteOrder;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,29,import java.nio.channels.SelectableChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,30,import java.nio.channels.SocketChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,32,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,33,import java.util.Arrays;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,36,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,37,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,38,import java.util.LinkedHashSet;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,41,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,43,import java.util.concurrent.BlockingQueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,44,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,46,import java.util.concurrent.LinkedBlockingQueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,47,import java.util.concurrent.TimeUnit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,48,import java.util.concurrent.atomic.AtomicBoolean;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,49,import javax.net.ssl.SSLEngine;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,50,import javax.net.ssl.SSLException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,53,import org.apache.ignite.IgniteClientDisconnectedException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,59,import org.apache.ignite.events.DiscoveryEvent;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,60,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,65,import org.apache.ignite.internal.util.GridConcurrentFactory;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,66,import org.apache.ignite.internal.util.GridSpinReadWriteLock;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,67,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,68,import org.apache.ignite.internal.util.ipc.IpcEndpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,69,import org.apache.ignite.internal.util.ipc.IpcToNioAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,70,import org.apache.ignite.internal.util.ipc.shmem.IpcOutOfSystemResourcesException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,71,import org.apache.ignite.internal.util.ipc.shmem.IpcSharedMemoryServerEndpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,72,import org.apache.ignite.internal.util.lang.IgniteInClosure2X;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,74,import org.apache.ignite.internal.util.nio.GridConnectionBytesVerifyFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,75,import org.apache.ignite.internal.util.nio.GridDirectParser;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,76,import org.apache.ignite.internal.util.nio.GridNioCodecFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,77,import org.apache.ignite.internal.util.nio.GridNioFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,82,import org.apache.ignite.internal.util.nio.GridNioServerListener;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,83,import org.apache.ignite.internal.util.nio.GridNioServerListenerAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,86,import org.apache.ignite.internal.util.nio.GridShmemCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,87,import org.apache.ignite.internal.util.nio.GridTcpNioCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,88,import org.apache.ignite.internal.util.nio.ssl.BlockingSslHandler;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,89,import org.apache.ignite.internal.util.nio.ssl.GridNioSslFilter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,91,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,92,import org.apache.ignite.internal.util.typedef.X;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,93,import org.apache.ignite.internal.util.typedef.internal.LT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,96,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,97,import org.apache.ignite.lang.IgniteBiInClosure;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,98,import org.apache.ignite.lang.IgniteBiTuple;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,103,import org.apache.ignite.lang.IgniteUuid;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,109,import org.apache.ignite.resources.IgniteInstanceResource;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,112,import org.apache.ignite.spi.IgniteSpiAdapter;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,113,import org.apache.ignite.spi.IgniteSpiConfiguration;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,118,import org.apache.ignite.spi.IgniteSpiOperationTimeoutException;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,119,import org.apache.ignite.spi.IgniteSpiOperationTimeoutHelper;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,121,import org.apache.ignite.spi.IgniteSpiTimeoutObject;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,289,private static final int TRACKER_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,323,private ConnectGateway connectGate;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,326,private final GridNioServerListener<Message> srvLsnr =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,327,new GridNioServerListenerAdapter<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,334,log.debug("Closing communication SPI session on write timeout [remoteAddr=" + ses.remoteAddress() +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,337,ses.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,341,if (ses.accepted()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,379,CommunicationListener<Message> lsnr0 = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,382,lsnr0.onDisconnected(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,391,UUID sndId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,395,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,396,assert msg instanceof HandshakeMessage : msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,402,log.debug("Remote node ID received: " + sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,416,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,524,assert ses.accepted() : ses;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,526,if (!connectGate.tryEnter()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,528,log.debug("Close incoming connection, failed to enter gateway.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,532,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,535,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,536,onFirstMessage(ses, msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,538,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,539,connectGate.leave();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,542,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,549,RecoveryLastReceivedMessage msg0 = (RecoveryLastReceivedMessage)msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,555,recovery.ackReceived(msg0.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,560,long rcvCnt = recovery.onReceived();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,562,if (rcvCnt % ackSndThreshold == 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,569,recovery.lastAcknowledged(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,574,IgniteRunnable c;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,591,c = NOOP;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,606,private GridTcpNioCommunicationClient connected(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,607,GridNioRecoveryDescriptor recovery,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,608,GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,609,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,610,long rcvCnt,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,611,boolean sndRes,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,612,boolean createClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,613,recovery.onHandshake(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,617,nioSrvr.resend(ses);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,624,GridTcpNioCommunicationClient client = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,626,if (createClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,635,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,716,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,717,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,718,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,720,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,730,private IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,733,private String locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,736,private volatile InetAddress locHost;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,739,private int locPort = DFLT_PORT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,742,private int locPortRange = DFLT_PORT_RANGE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,745,private int shmemPort = DFLT_SHMEM_PORT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,748,private boolean directBuf = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,751,private boolean directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,754,private long idleConnTimeout = DFLT_IDLE_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,757,private long connTimeout = DFLT_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,760,private long maxConnTimeout = DFLT_MAX_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,764,private int reconCnt = DFLT_RECONNECT_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,767,private int sockSndBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,770,private int sockRcvBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,773,private int msgQueueLimit = DFLT_MSG_QUEUE_LIMIT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,776,private int slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,779,private GridNioServer<Message> nioSrvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,782,private IpcSharedMemoryServerEndpoint shmemSrv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,785,private boolean tcpNoDelay = DFLT_TCP_NODELAY;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,788,private int ackSndThreshold = DFLT_ACK_SND_THRESHOLD;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,791,private int unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,794,private long sockWriteTimeout = DFLT_SOCK_WRITE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,797,private CommunicationWorker commWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,800,private ShmemAcceptWorker shmemAcceptWorker;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,809,private volatile CommunicationListener<Message> lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,812,private int boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,815,private int boundTcpShmemPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,818,private int selectorsCnt = DFLT_SELECTORS_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,821,private AddressResolver addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,836,private final CountDownLatch ctxInitLatch = new CountDownLatch(1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,851,GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,869,private boolean isSslEnabled() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,870,return ignite.configuration().getSslContextFactory() != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,882,this.addrRslvr = addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,892,super.injectResources(ignite);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,894,if (ignite != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,895,setAddressResolver(ignite.configuration().getAddressResolver());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,896,setLocalAddress(ignite.configuration().getLocalHost());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,912,this.locAddr = locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,917,return locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,929,this.locPort = locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,934,return locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,955,this.locPortRange = locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,960,return locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,974,this.shmemPort = shmemPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,979,return shmemPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,992,this.idleConnTimeout = idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,997,return idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1002,return sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1015,this.sockWriteTimeout = sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1020,return ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1032,this.ackSndThreshold = ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1037,return unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1049,this.unackedMsgsBufSize = unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1098,this.connTimeout = connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1100,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1105,return connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1124,this.maxConnTimeout = maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1126,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1131,return maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1146,this.reconCnt = reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1148,failureDetectionTimeoutEnabled(false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1153,return reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1167,this.directBuf = directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1172,return directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1177,return directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1189,this.directSndBuf = directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1201,this.selectorsCnt = selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1206,return selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1225,this.tcpNoDelay = tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1230,return tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1259,this.sockSndBuf = sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1264,return sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1279,this.msgQueueLimit = msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1284,return msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1289,return slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1305,this.slowClientQueueLimit = slowClientQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1329,this.lsnr = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1335,public CommunicationListener getListener() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1336,return lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1376,initFailureDetectionTimeout();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1378,assertParameter(locPort > 1023, "locPort > 1023");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1379,assertParameter(locPort <= 0xffff, "locPort < 0xffff");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1380,assertParameter(locPortRange >= 0, "locPortRange >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1381,assertParameter(idleConnTimeout > 0, "idleConnTimeout > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1382,assertParameter(sockRcvBuf >= 0, "sockRcvBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1383,assertParameter(sockSndBuf >= 0, "sockSndBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1384,assertParameter(msgQueueLimit >= 0, "msgQueueLimit >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1385,assertParameter(shmemPort > 0 || shmemPort == -1, "shmemPort > 0 || shmemPort == -1");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1386,assertParameter(selectorsCnt > 0, "selectorsCnt > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1388,if (!failureDetectionTimeoutEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1389,assertParameter(reconCnt > 0, "reconnectCnt > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1390,assertParameter(connTimeout >= 0, "connTimeout >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1391,assertParameter(maxConnTimeout >= connTimeout, "maxConnTimeout >= connTimeout");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1394,assertParameter(sockWriteTimeout >= 0, "sockWriteTimeout >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1395,assertParameter(ackSndThreshold > 0, "ackSndThreshold > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1396,assertParameter(unackedMsgsBufSize >= 0, "unackedMsgsBufSize >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1398,if (unackedMsgsBufSize > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1399,assertParameter(unackedMsgsBufSize >= msgQueueLimit * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1402,assertParameter(unackedMsgsBufSize >= ackSndThreshold * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1406,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1407,locHost = U.resolveLocalHost(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1409,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1410,throw new IgniteSpiException("Failed to initialize local address: " + locAddr, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1413,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1414,shmemSrv = resetShmemServer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1416,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1417,U.warn(log, "Failed to start shared memory communication server.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1420,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1423,nioSrvr = resetNioServer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1425,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1426,throw new IgniteSpiException("Failed to initialize TCP server: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1430,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1431,IgniteBiTuple<Collection<String>, Collection<String>> addrs = U.resolveLocalAddresses(locHost);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1433,Collection<InetSocketAddress> extAddrs = addrRslvr == null ? null :
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1434,U.resolveAddresses(addrRslvr, F.flat(Arrays.asList(addrs.get1(), addrs.get2())), boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1443,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1444,throw new IgniteSpiException("Failed to resolve local host to addresses: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1450,assert locHost != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1453,startStopwatch();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1456,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1457,log.debug(configInfo("locAddr", locAddr));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1458,log.debug(configInfo("locPort", locPort));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1459,log.debug(configInfo("locPortRange", locPortRange));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1460,log.debug(configInfo("idleConnTimeout", idleConnTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1461,log.debug(configInfo("directBuf", directBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1462,log.debug(configInfo("directSendBuf", directSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1463,log.debug(configInfo("selectorsCnt", selectorsCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1464,log.debug(configInfo("tcpNoDelay", tcpNoDelay));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1465,log.debug(configInfo("sockSndBuf", sockSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1466,log.debug(configInfo("sockRcvBuf", sockRcvBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1467,log.debug(configInfo("shmemPort", shmemPort));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1468,log.debug(configInfo("msgQueueLimit", msgQueueLimit));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1470,if (failureDetectionTimeoutEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1471,log.debug(configInfo("connTimeout", connTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1472,log.debug(configInfo("maxConnTimeout", maxConnTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1473,log.debug(configInfo("reconCnt", reconCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1475,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1476,log.debug(configInfo("failureDetectionTimeout", failureDetectionTimeout()));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1478,log.debug(configInfo("sockWriteTimeout", sockWriteTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1479,log.debug(configInfo("ackSndThreshold", ackSndThreshold));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1480,log.debug(configInfo("unackedMsgsBufSize", unackedMsgsBufSize));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1484,U.quietAndWarn(log, "'TCP_NO_DELAY' for communication is off, which should be used with caution " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1487,if (slowClientQueueLimit > 0 && msgQueueLimit > 0 && slowClientQueueLimit >= msgQueueLimit) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1495,connectGate = new ConnectGateway();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1497,if (shmemSrv != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1498,shmemAcceptWorker = new ShmemAcceptWorker(shmemSrv);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1500,new IgniteThread(shmemAcceptWorker).start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1503,nioSrvr.start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1511,log.debug(startInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1516,spiCtx.registerPort(boundTcpPort, IgnitePortProtocol.TCP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1520,spiCtx.registerPort(boundTcpShmemPort, IgnitePortProtocol.TCP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1522,spiCtx.addLocalEventListener(discoLsnr, EVT_NODE_LEFT, EVT_NODE_FAILED);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1524,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1529,if (ctxInitLatch.getCount() > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1531,log.debug("Waiting for context initialization.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1533,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1534,U.await(ctxInitLatch);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1537,log.debug("Context has been initialized.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1539,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1540,U.warn(log, "Thread has been interrupted while waiting for SPI context initialization.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1544,return super.getSpiContext();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1553,private GridNioServer<Message> resetNioServer() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1555,throw new IgniteCheckedException("Tcp NIO server was already created on port " + boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1557,IgniteCheckedException lastEx = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1561,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1562,MessageFactory msgFactory = new MessageFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1563,private MessageFactory impl;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1567,impl = getSpiContext().messageFactory();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1569,assert impl != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1571,return impl.create(type);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1599,IgnitePredicate<Message> skipRecoveryPred = new IgnitePredicate<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1601,return msg instanceof RecoveryLastReceivedMessage;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1605,boolean clientMode = Boolean.TRUE.equals(ignite.configuration().isClientMode());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1607,IgniteBiInClosure<GridNioSession, Integer> queueSizeMonitor =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1616,GridNioFilter[] filters;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1618,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1619,GridNioSslFilter sslFilter =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1620,new GridNioSslFilter(ignite.configuration().getSslContextFactory().create(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1623,sslFilter.directMode(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1625,sslFilter.wantClientAuth(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1626,sslFilter.needClientAuth(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1628,filters = new GridNioFilter[] {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1629,new GridNioCodecFilter(parser, log, true),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1630,new GridConnectionBytesVerifyFilter(log),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1631,sslFilter
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1634,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1635,filters = new GridNioFilter[] {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1636,new GridNioCodecFilter(parser, log, true),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1663,boundTcpPort = port;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1670,srvr.idleTimeout(idleConnTimeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1672,return srvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1674,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1676,throw new IgniteSpiException("Failed to create SSL context. SSL factory: "
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1677,+ ignite.configuration().getSslContextFactory() + '.', e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1679,lastEx = e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1682,log.debug("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1685,onException("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1691,throw new IgniteCheckedException("Failed to bind to any port within range [startPort=" + locPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1703,throw new IgniteCheckedException("Shared memory server was already created on port " + boundTcpShmemPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1706,return null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1708,IgniteCheckedException lastEx = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1711,for (int port = shmemPort; port < shmemPort + locPortRange; port++) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1712,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1713,IpcSharedMemoryServerEndpoint srv =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1716,srv.setPort(port);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1718,srv.omitOutOfResourcesWarning(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1720,srv.start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1722,boundTcpShmemPort = port;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1726,log.info("Successfully bound shared memory communication to TCP port [port=" + boundTcpShmemPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1729,return srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1731,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1732,lastEx = e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1735,log.debug("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1741,throw new IgniteCheckedException("Failed to bind shared memory communication to any port within range [startPort=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1742,locPort + ", portRange=" + locPortRange + ", locHost=" + locHost + ']', lastEx);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1749,unregisterMBean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1753,nioSrvr.stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1758,U.cancel(shmemAcceptWorker);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1759,U.join(shmemAcceptWorker, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1761,U.cancel(shmemWorkers);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1762,U.join(shmemWorkers, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1764,shmemWorkers.clear();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1771,nioSrvr = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1772,commWorker = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1774,boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1778,log.debug(stopInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1785,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1788,connectGate.stopped();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1794,getSpiContext().deregisterPorts();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1796,getSpiContext().removeLocalEventListener(discoLsnr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1801,connectGate.disconnected(reconnectFut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1806,IgniteClientDisconnectedCheckedException err = new IgniteClientDisconnectedCheckedException(reconnectFut,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1810,clientFut.onDone(err);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1812,recoveryDescs.clear();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1817,connectGate.reconnected();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1824,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1841,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1843,checkAttributePresence(node, createSpiAttributeName(ATTR_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1844,checkAttributePresence(node, createSpiAttributeName(ATTR_HOST_NAMES));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1845,checkAttributePresence(node, createSpiAttributeName(ATTR_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1854,private void checkAttributePresence(ClusterNode node, String attrName) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1856,U.warn(log, "Remote node has inconsistent configuration (required attribute was not found) " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1863,sendMessage0(node, msg, null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1879,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1892,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1893,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1894,assert msg != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1897,log.trace("Sending message with ack to node [node=" + node + ", msg=" + msg + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1902,throw new IgniteSpiException("Local node has not been started or fully initialized " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1906,notifyListener(node.id(), msg, NOOP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1907,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1908,GridCommunicationClient client = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1910,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1911,boolean retry;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1913,do {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1916,UUID nodeId = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1919,nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1923,client.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1930,ClusterNode node0 = getSpiContext().node(node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1937,while (retry);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1942,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1944,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1957,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1959,UUID nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1961,while (true) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1964,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1966,throw new IgniteSpiException("Node is stopping.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1969,GridFutureAdapter<GridCommunicationClient> fut = new ConnectFuture();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1973,if (oldFut == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1974,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1977,if (client0 == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1980,if (client0 != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1986,if (client0 instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1987,GridTcpNioCommunicationClient tcpClient = ((GridTcpNioCommunicationClient)client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1991,log.debug("Session was closed after client creation, will retry " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1994,client0 = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1999,U.sleep(200);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2002,fut.onDone(client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2004,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2005,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2008,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2010,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2014,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2015,fut = oldFut;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2017,client = fut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2022,if (getSpiContext().node(nodeId) == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2024,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2026,throw new IgniteSpiException("Destination node is not in topology: " + node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2031,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2032,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2044,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2046,Integer shmemPort = node.attribute(createSpiAttributeName(ATTR_SHMEM_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2048,ClusterNode locNode = getSpiContext().localNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2051,throw new IgniteCheckedException("Failed to create NIO client (local node is stopping)");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2055,if (shmemPort != null && U.sameMacs(locNode, node)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2056,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2059,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2066,log.debug("Failed to establish shared memory connection with local node (node has left): " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2067,node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2088,Integer port) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2089,int attempt = 1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2091,int connectAttempts = 1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2093,long connTimeout0 = connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2097,while (true) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2098,GridCommunicationClient client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2100,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2102,port,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2103,timeoutHelper.nextTimeoutChunk(connTimeout),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2104,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2105,getSpiContext().messageFormatter());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2107,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2109,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2112,if (connectAttempts < 2 && X.hasCause(e, ConnectException.class)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2113,connectAttempts++;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2115,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2118,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2121,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2125,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2130,log.debug("Handshake timed out (failure threshold reached) [failureDetectionTimeout=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2131,failureDetectionTimeout() + ", err=" + e.getMessage() + ", client=" + client + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2133,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2136,assert !failureDetectionTimeoutEnabled();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2139,log.debug("Handshake timed out (will retry with increased timeout) [timeout=" + connTimeout0 +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2142,if (attempt == reconCnt || connTimeout0 > maxConnTimeout) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2144,log.debug("Handshake timedout (will stop attempts to perform the handshake) " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2149,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2151,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2152,attempt++;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2154,connTimeout0 *= 2;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2156,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2159,catch (IgniteCheckedException | RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2161,log.debug(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2164,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2166,throw e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2169,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2179,private void checkClientQueueSize(GridNioSession ses, int msgQueueSize) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2180,if (slowClientQueueLimit > 0 && msgQueueSize > slowClientQueueLimit) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2183,if (id != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2186,if (node != null && node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2187,String msg = "Client node outbound message queue size exceeded slowClientQueueLimit, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2212,Collection<String> rmtAddrs0 = node.attribute(createSpiAttributeName(ATTR_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2213,Collection<String> rmtHostNames0 = node.attribute(createSpiAttributeName(ATTR_HOST_NAMES));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2214,Integer boundPort = node.attribute(createSpiAttributeName(ATTR_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2215,Collection<InetSocketAddress> extAddrs = node.attribute(createSpiAttributeName(ATTR_EXT_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2217,boolean isRmtAddrsExist = (!F.isEmpty(rmtAddrs0) && boundPort != null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2218,boolean isExtAddrsExist = !F.isEmpty(extAddrs);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2221,throw new IgniteCheckedException("Failed to send message to the destination node. Node doesn't have any " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2225,LinkedHashSet<InetSocketAddress> addrs;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2228,if (isRmtAddrsExist) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2235,addrs = new LinkedHashSet<>(addrs0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2237,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2238,addrs = new LinkedHashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2242,addrs.addAll(extAddrs);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2246,IgniteCheckedException errs = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2258,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2261,ch.configureBlocking(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2263,ch.socket().setTcpNoDelay(tcpNoDelay);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2264,ch.socket().setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2267,ch.socket().setReceiveBufferSize(sockRcvBuf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2270,ch.socket().setSendBufferSize(sockSndBuf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2284,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2287,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2290,sslEngine.setUseClientMode(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2327,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2330,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2360,break;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2668,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2672,removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2680,return rcvCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2688,protected void notifyListener(UUID sndId, Message msg, IgniteRunnable msgC) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2689,CommunicationListener<Message> lsnr = this.lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2693,lsnr.onMessage(sndId, msg, msgC);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2695,log.debug("Received communication message without any registered listeners (will ignore, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2704,public void simulateNodeFailure() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2706,nioSrvr.stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2710,U.join(commWorker, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2744,private void onException(String msg, Exception e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2745,getExceptionRegistry().onException(msg, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2751,private NodeIdMessage nodeIdMessage() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2754,UUID id;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2757,U.warn(log, "Local node is not started or fully initialized [isStopping=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2760,id = new UUID(0, 0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2762,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2838,private class ShmemAcceptWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2840,private final IpcSharedMemoryServerEndpoint srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2845,ShmemAcceptWorker(IpcSharedMemoryServerEndpoint srv) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2848,this.srv = srv;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2853,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2854,while (!Thread.interrupted()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2855,ShmemWorker e = new ShmemWorker(srv.accept());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2857,shmemWorkers.add(e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2859,new IgniteThread(e).start();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2862,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2864,U.error(log, "Shmem server failed.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2866,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2867,srv.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2873,super.cancel();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2875,srv.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2882,private class ShmemWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2884,private final IpcEndpoint endpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2889,private ShmemWorker(IpcEndpoint endpoint) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2892,this.endpoint = endpoint;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2897,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2898,MessageFactory msgFactory = new MessageFactory() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2899,private MessageFactory impl;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2903,impl = getSpiContext().messageFactory();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2905,assert impl != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2907,return impl.create(type);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2933,IpcToNioAdapter<Message> adapter = new IpcToNioAdapter<>(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2935,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2936,endpoint,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2937,srvLsnr,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2941,);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2943,adapter.serve();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2945,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2946,shmemWorkers.remove(this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2948,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2954,super.cancel();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2956,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2961,super.cleanup();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2963,endpoint.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2968,return S.toString(ShmemWorker.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2989,log.debug("Tcp communication worker has been started.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3004,private void processIdle() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3005,cleanupRecovery();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3008,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3075,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3081,left = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3083,left.add(e.getKey());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3087,if (left != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3088,assert !left.isEmpty();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3151,assert add;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3158,private static class ConnectFuture extends GridFutureAdapter<GridCommunicationClient> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3168,private static class HandshakeTimeoutObject<T> implements IgniteSpiTimeoutObject {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3170,private final IgniteUuid id = IgniteUuid.randomUuid();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3173,private final T obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3176,private final long endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3179,private final AtomicBoolean done = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3185,private HandshakeTimeoutObject(T obj, long endTime) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3186,assert obj != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3187,assert obj instanceof GridCommunicationClient || obj instanceof SelectableChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3188,assert endTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3190,this.obj = obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3191,this.endTime = endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3197,boolean cancel() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3198,return done.compareAndSet(false, true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3203,if (done.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3206,((GridCommunicationClient)obj).forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3207,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3214,return endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3219,return id;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3224,return S.toString(HandshakeTimeoutObject.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3231,private class HandshakeClosure extends IgniteInClosure2X<InputStream, OutputStream> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3233,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3236,private final UUID rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3241,private HandshakeClosure(UUID rmtNodeId) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3242,this.rmtNodeId = rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3248,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3252,int n = 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3258,throw new IgniteCheckedException("Failed to get remote node ID (end of stream reached)");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3260,n += cnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3267,throw new IgniteCheckedException("Remote node ID is not as expected [expected=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3270,log.debug("Received remote node ID: " + id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3272,catch (SocketTimeoutException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3273,throw new IgniteCheckedException("Failed to perform handshake due to timeout (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3276,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3277,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3280,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3281,ClusterNode localNode = getLocalNode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3284,throw new IgniteSpiException("Local node has not been started or fully initialized " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3287,UUID id = localNode.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3289,NodeIdMessage msg = new NodeIdMessage(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3291,out.write(U.IGNITE_HEADER);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3295,out.flush();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3298,log.debug("Sent local node ID [locNodeId=" + id + ", rmtNodeId=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3300,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3301,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,86,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,115,public GridDistributedTxRemoteAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,66,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,94,public GridDhtTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,78,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,110,protected GridDhtTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,55,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,69,public GridDhtTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2489,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,151,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,308,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,87,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,125,public GridNearTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,50,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,67,public GridNearTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,24,import java.io.ObjectStreamException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,107,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,255,protected String taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,267,protected IgniteTxAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1360,return taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1362,return (taskName = cctx.kernalContext().task().resolveTaskName(taskNameHash));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1523,writeExternalMeta(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1525,out.writeObject(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1526,out.writeBoolean(invalidate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1527,out.writeLong(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1528,out.writeLong(threadId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1529,out.writeLong(startTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1531,U.writeUuid(out, nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1533,out.write(isolation.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1534,out.write(concurrency.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1535,out.write(state().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1540,readExternalMeta(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1542,xidVer = (GridCacheVersion)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1543,invalidate = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1544,timeout = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1545,threadId = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1546,startTime = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1548,nodeId = U.readUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1550,isolation = TransactionIsolation.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1551,concurrency = TransactionConcurrency.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1553,state = TransactionState.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1562,protected Object readResolve() throws ObjectStreamException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1563,return new TxShadow(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1565,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1566,threadId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1567,startTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1568,isolation,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1569,concurrency,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1570,invalidate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1571,implicit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1572,timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1573,state(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1575,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,123,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,170,protected IgniteTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1239,ctx.closure().runLocalSafe(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,351,protected void writeExternalMeta(ObjectOutput out) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,352,Object[] cp;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,355,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,356,cp = Arrays.copyOf(this.data, this.data.length);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,359,out.writeObject(cp);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,372,protected void readExternalMeta(ObjectInput in) throws IOException, ClassNotFoundException {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,373,Object[] cp = (Object[])in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,375,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,376,this.data = cp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4443,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4472,return evictx(key, ctx.versions().next(), CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4485,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,35,int topVer = one.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,36,int otherTopVer = other.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,38,if (topVer == otherTopVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,55,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,58,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,59,return topVer > otherTopVer ? 1 : -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,411,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,155,ctx.versions().last(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1463,obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1601,nearEntry.markObsolete(ctx.versions().next());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,912,tx.writeVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,185,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,539,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,188,ver = tx == null ? cctx.versions().next() : tx.xidVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,675,GridCacheVersion ver = atomic ? null : F.isEmpty(infos) ? null : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,194,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,214,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,159,ctx.versions().next(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,130,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,902,GridCacheVersion ver = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,561,public void endVersion(GridCacheVersion endVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,149,protected GridCacheVersion startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,160,protected GridCacheVersion endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,322,startVer = cctx.versions().last();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,363,this.startVer = startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1174,this.endVer = endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1304,tx.endVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,27,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,64,private long gridStartTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,159,public GridCacheVersion next() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,171,public GridCacheVersion next(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,180,public GridCacheVersion nextForLoad() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,189,public GridCacheVersion nextForLoad(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,198,public GridCacheVersion nextForLoad(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,208,public GridCacheVersion next(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,225,topVer = cctx.kernalContext().discovery().topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,229,if (addTime) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,231,gridStartTime = cctx.kernalContext().discovery().gridStartTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,233,topVer += (gridStartTime - TOP_VER_BASE_TIME) / 1000;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,33,private Object cred;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,38,public Object credentials() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,45,public void credentials(Object cred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,60,cred = in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,287,restReq.credentials(req.credentials());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,735,if (expiryPlc != null && expiryPlc.entries() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,555,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,557,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,987,for (IgniteTxEntry entry : entries) {
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,276,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,283,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,187,U.writeGridUuid(out, sesId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,188,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,194,sesId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,195,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,237,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,243,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,305,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,312,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,747,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,754,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,262,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,271,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,137,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,149,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,677,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,683,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,757,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,764,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,723,return xidVer.asGridUuid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1564,xidVer.asGridUuid(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersion.java,190,public IgniteUuid asGridUuid() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,742,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,747,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,835,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,840,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,905,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,911,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1020,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1026,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,166,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,183,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,86,U.writeGridUuid(out, queueId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,93,queueId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,74,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,80,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,98,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,104,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,107,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,113,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,133,U.writeGridUuid(out, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,134,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,141,fileId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,142,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,240,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,250,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,487,U.writeGridUuid(out, lockId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,488,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,503,lockId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,504,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4589,public static void writeGridUuids(DataOutput out, @Nullable Collection<IgniteUuid> col) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4596,writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4620,col.add(readGridUuid(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4672,public static void writeGridUuid(DataOutput out, IgniteUuid uid) throws IOException {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1849,if (msg.hasMetrics()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1851,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1856,msg.cacheMetrics().get(nodeId) : Collections.<Integer, CacheMetrics>emptyMap();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1975,private void updateMetrics(UUID nodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1976,ClusterMetrics metrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1977,Map<Integer, CacheMetrics> cacheMetrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1980,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1981,assert metrics != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1984,TcpDiscoveryNode node = nodeId.equals(getLocalNodeId()) ? locNode : rmtNodes.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1986,if (node != null && node.visible()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1987,node.setMetrics(metrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1992,notifyDiscovery(EVT_NODE_METRICS_UPDATED, topVer, node, allVisibleNodes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1995,log.debug("Received metrics from unknown node: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4031,if (spiStateCopy() == CONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4032,if (msg.hasMetrics()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4034,UUID nodeId = e.getKey();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4127,private void updateMetrics(UUID nodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4128,ClusterMetrics metrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4129,Map<Integer, CacheMetrics> cacheMetrics,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4132,assert nodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4133,assert metrics != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4135,TcpDiscoveryNode node = ring.node(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4137,if (node != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4138,node.setMetrics(metrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4139,node.setCacheMetrics(cacheMetrics);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4143,notifyDiscovery(EVT_NODE_METRICS_UPDATED, ring.topologyVersion(), node);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4146,log.debug("Received metrics from unknown node: " + nodeId);
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,98,if (!U.isSufficientlyTestedOs()) {
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,99,U.warn(log, "This operating system has been tested less rigorously: " + U.osString() +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6201,public static boolean isSufficientlyTestedOs() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6202,return
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6203,win7 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6204,win8 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6205,win81 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6206,winXp ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6207,winVista ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6208,mac ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6209,linux ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6210,solaris;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,304,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,305,GridCacheDeploymentManager depMgr = cache.context().deploy();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,307,GridDeploymentInfo depInfo = wrapper.depInfo;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,309,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,314,ldr = depMgr.globalLoader();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,316,else {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,317,U.warn(ctx.log(getClass()), "Received cache event for cache that is not configured locally " +
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,322,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,287,GridDeployment dep = locStore.getDeployment(meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,290,dep = ldrStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,293,dep = verStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,32,class GridDeploymentMetadata {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,206,void classLoaderId(IgniteUuid clsLdrId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,674,public void prepare(GridCacheDeployable deployable) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1022,if (bean != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1023,assert depEnabled : "Received deployment info while peer class loading is disabled [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1030,log.debug("Set P2P context [senderId=" + nodeId + ", msg=" + cacheMsg + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1033,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,356,if (ctx.config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,357,GridDeploymentInfo depInfo = e.deployInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,359,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,365,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,510,public void apply(IgniteInternalFuture<byte[]> t) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,965,public boolean apply(Integer i) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1558,public String toString() {
modules/core/src/main/java/org/apache/ignite/lang/IgniteBiTuple.java,204,public V2 put(V1 key, V2 val) {
modules/core/src/main/java/org/jsr166/ConcurrentLinkedDeque8.java,1724,public Unsafe run() throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,183,public void apply(IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,236,public void run() {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,490,public void execute(Runnable command) {
modules/jms11/src/main/java/org/apache/ignite/stream/jms11/JmsStreamer.java,497,public void onMessage(final Message message) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,874,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,875,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1199,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1200,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4572,sock.setKeepAlive(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4573,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2259,SocketChannel ch = SocketChannel.open();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,51,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtTopologyFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,265,processSinglePartitionUpdate(node, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,1393,plc.onEntryAccessed(e.obsoleteOrDeleted(), e.wrapEviction());
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,431,throw new IllegalStateException("Getting affinity for topology version earlier than affinity is " +
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,36,private static final ThreadGroup DFLT_GRP = new ThreadGroup("ignite");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,33,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,34,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,988,GridCacheEntryEx cached = entry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,990,GridCacheContext cacheCtx = entry.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,993,cached = cacheCtx.cache().peekEx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,996,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,998,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1000,cacheCtx.cache().removeEntry(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1002,if (!tx.near() && isNearEnabled(cacheCtx)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1003,GridNearCacheAdapter near = cacheCtx.isNear() ? cacheCtx.near() : cacheCtx.dht().near();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1005,GridNearCacheEntry e = near.peekExx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1008,near.removeEntry(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1011,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1012,U.error(log, "Failed to remove obsolete entry from cache: " + cached, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,25,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,26,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,27,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,28,import javax.cache.processor.EntryProcessorResult;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,106,for (Map.Entry<UUID, Collection<UUID>> e : tx.transactionNodes().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,108,ClusterNode node = cctx.discovery().node(e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,111,nodes.put(node.id(), node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxRecoveryFuture.java,116,for (UUID nodeId : e.getValue()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,631,protected FinalizationStatus finalizationStatus() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,679,if (req.commit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,682,if (!tx.markFinalizing(USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,684,log.debug("Will not finish transaction (it is handled by another thread): " + tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,686,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1905,if (tx.state(MARKED_ROLLBACK) || tx.state() == UNKNOWN) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1942,processedVers = new HashSet<>(txNum, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1991,if (!tx.markFinalizing(RECOVERY_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1995,return;
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,22,import javax.net.ssl.HostnameVerifier;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,58,import javax.net.ssl.SSLException;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1897,this.discardId = discardId;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1898,this.customDiscardId = customDiscardId;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1021,out.writeLong(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1027,idx = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,72,public class CacheContinuousQueryManager extends GridCacheManagerAdapter {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1933,throw new IgniteCheckedException("Failed to send message to remote node " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,34,import org.apache.ignite.internal.IgniteKernal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,351,GridCacheAdapter cache = ((IgniteKernal) ignite).context().cache().internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,354,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,362,return false; // Ignore this remove request because remove request will be sent again.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,374,try (DataStreamerImpl<KeyCacheObject, Object> dataLdr =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,375,(DataStreamerImpl) ignite.dataStreamer(cacheName)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,376,((DataStreamerImpl) dataLdr).maxRemapCount(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,380,dataLdr.receiver(DataStreamerCacheUpdaters.<KeyCacheObject, Object>batched());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,383,GridDhtLocalPartition locPart = dht.topology().localPartition(part, topVer, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,386,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,388,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,399,if (iter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,404,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,405,locPart.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,426,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,641,job0.cancel();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2183,private ByteOrder byteOrder = ByteOrder.nativeOrder();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1621,true, ByteOrder.nativeOrder(), log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,290,Collection<GridCacheVersion> pendingVers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,259,tx.addInvalidPartition(cacheCtx, invalidPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,280,super.addInvalidPartition(cacheCtx, part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,319,addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,312,public void addInvalidPartition(GridCacheContext<?, ?> cacheCtx, int part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,733,Set<Integer> parts = invalidParts.get(cacheCtx.cacheId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,738,invalidParts.put(cacheCtx.cacheId(), parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,744,log.debug("Added invalid partition for transaction [cache=" + cacheCtx.name() + ", part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,72,private IgniteInternalTx tx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1681,tx.addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,22,import org.apache.ignite.internal.processors.cache.CacheMetricsImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,75,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,77,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,79,metrics = m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,48,import org.apache.ignite.internal.processors.cache.CacheMetricsImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,229,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,232,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,234,metrics = m;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1586,private boolean permissionsEqual(SecurityPermissionSet locPerms, SecurityPermissionSet rmtPerms) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3257,if (!permissionsEqual(coordSubj.subject().permissions(), subj.subject().permissions())) {
modules/core/src/main/java/org/apache/ignite/internal/client/GridClient.java,71,public GridClientData data() throws GridClientException;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,262,return data(null);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridRouterClientImpl.java,179,return clientImpl.data();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentClassLoader.java,602,GridDeploymentResponse res = comm.sendResourceRequest(path, ldrId, node, endTime);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,351,final ClusterNode dstNode, long threshold) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,473,throw new IgniteCheckedException("Got interrupted while waiting for response from node: " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,474,dstNode.id(), e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,682,ClassLoader temp = new GridDeploymentClassLoader(
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,705,rsrcIn = temp.getResourceAsStream(path);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,725,else
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/GridJavadocAntTask.java,44,private static final String SH_URL = "http://agorbatchev.typepad.com/pub/sh/3_0_83";
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/GridJavadocAntTask.java,280,tok.update(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,44,import javax.management.MBeanServer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,527,prepare0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,906,private void prepare0() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,145,processLockResponse(nodeId, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,880,private void processLockResponse(UUID nodeId, GridNearLockResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,644,tx.onRemap(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,765,tx.onRemap(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,270,dhtVers = reader.readObjectArray("dhtVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,278,filterRes = reader.readBooleanArray("filterRes");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,286,mappedVers = reader.readObjectArray("mappedVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,158,boolean marked = tx.setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1229,nearLocallyMapped = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1230,colocatedLocallyMapped = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1231,txNodes = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1232,onePhaseCommit = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1233,nearMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1234,dhtMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1235,mappings.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,553,return cacheCfg.getCacheMode() == CacheMode.REPLICATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,761,return cacheCfg.getAtomicityMode() == ATOMIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,952,return cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,961,return store().isLocal() || cacheCfg.isWriteBehindEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1442,return cacheCfg.isLoadPreviousValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1449,return cacheCfg.isWriteThrough() && !skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1456,return cacheCfg.isInvalidate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1463,return cacheCfg.getWriteSynchronizationMode() == FULL_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1470,return cacheCfg.getWriteSynchronizationMode() == FULL_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1477,return cacheCfg.getWriteSynchronizationMode() == PRIMARY_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,99,aff = new GridCacheAffinityProxy<>(ctx, ctx.cache().affinity());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,241,ctx.preloader().unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,134,public void unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,26,import java.util.concurrent.Executors;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4022,if (locNodeId.equals(msg.creatorNodeId()) && !hasMetrics(msg, locNodeId) && msg.senderNodeId() != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4050,if ((locNodeId.equals(msg.creatorNodeId()) && msg.senderNodeId() == null ||
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4051,!hasMetrics(msg, locNodeId)) && spiStateCopy() == CONNECTED) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4153,return msg.hasMetrics(nodeId) || msg.hasCacheMetrics(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryStatusCheckMessage.java,69,public TcpDiscoveryNode creatorNode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,25,import java.util.Deque;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,29,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,51,import org.apache.ignite.cache.CacheRebalanceMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,56,import org.apache.ignite.cache.affinity.rendezvous.RendezvousAffinityFunction;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,63,import org.apache.ignite.configuration.IgniteConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,72,import org.apache.ignite.internal.IgniteNodeAttributes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,130,import static org.apache.ignite.cache.CacheWriteSynchronizationMode.FULL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,136,import static org.apache.ignite.configuration.DeploymentMode.ISOLATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,137,import static org.apache.ignite.configuration.DeploymentMode.PRIVATE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,140,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_CONSISTENCY_CHECK_SKIPPED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,141,import static org.apache.ignite.internal.IgniteNodeAttributes.ATTR_TX_CONFIG;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,172,private final Deque<String> stopSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,221,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,362,private void validate(IgniteConfiguration c,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,363,CacheConfiguration cc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,364,CacheType cacheType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,366,if (cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,379,if (cc.getNearConfiguration() != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,380,ctx.discovery().cacheAffinityNode(ctx.discovery().localNode(), cc.getName())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,381,U.warn(log, "Near cache cannot be used with REPLICATED cache, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,384,cc.setNearConfiguration(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,389,U.warn(log, "AffinityFunction configuration parameter will be ignored for local cache [cacheName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,390,U.maskName(cc.getName()) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,394,assertParameter(cc.getRebalanceBatchSize() > 0, "rebalanceBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,397,if (cc.getCacheMode() == PARTITIONED || cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,399,U.warn(log, "Cache write synchronization mode is set to FULL_ASYNC. All single-key 'put' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,404,DeploymentMode depMode = c.getDeploymentMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,406,if (c.isPeerClassLoadingEnabled() && (depMode == PRIVATE || depMode == ISOLATED) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,422,throw new IgniteCheckedException("Cannot enable write-behind (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,425,assertParameter(cc.getWriteBehindBatchSize() > 0, "writeBehindBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,426,assertParameter(cc.getWriteBehindFlushSize() >= 0, "writeBehindFlushSize >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,427,assertParameter(cc.getWriteBehindFlushFrequency() >= 0, "writeBehindFlushFrequency >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,428,assertParameter(cc.getWriteBehindFlushThreadCount() > 0, "writeBehindFlushThreadCount > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,431,throw new IgniteCheckedException("Cannot set both 'writeBehindFlushFrequency' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,436,throw new IgniteCheckedException("Cannot enable read-through (loader or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,440,throw new IgniteCheckedException("Cannot enable write-through (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,443,long delay = cc.getRebalanceDelay();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,445,if (delay != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,449,else if (cc.getRebalanceMode() == SYNC) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,450,if (delay < 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,451,U.warn(log, "Ignoring SYNC rebalance mode with manual rebalance start (node will not wait for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,455,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,464,ctx.igfsHelper().validateCacheConfiguration(cc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,943,for (String cacheName : stopSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,739,checkOwnerChanged(prev, owner, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,855,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,857,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,278,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,280,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1204,if (!F.eq(locVal, rmtVal)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1205,if (fail) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1206,throw new IgniteCheckedException(attrMsg + " mismatch (fix " + attrMsg.toLowerCase() + " in cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1213,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1214,assert log != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1216,U.warn(log, attrMsg + " mismatch (fix " + attrMsg.toLowerCase() + " in cache " +
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1484,start0(startCtx);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1505,private void start0(GridStartContext startCtx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1508,IgniteConfiguration cfg = startCtx.config() != null ? startCtx.config() : new IgniteConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1510,IgniteConfiguration myCfg = initializeConfiguration(cfg);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1518,ensureMultiInstanceSupport(myCfg.getDeploymentSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1519,ensureMultiInstanceSupport(myCfg.getCommunicationSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1520,ensureMultiInstanceSupport(myCfg.getDiscoverySpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1521,ensureMultiInstanceSupport(myCfg.getCheckpointSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1522,ensureMultiInstanceSupport(myCfg.getEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1523,ensureMultiInstanceSupport(myCfg.getCollisionSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1524,ensureMultiInstanceSupport(myCfg.getFailoverSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1525,ensureMultiInstanceSupport(myCfg.getLoadBalancingSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1582,if (myCfg.getConnectorConfiguration() != null) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1585,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1586,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1596,myCfg.getUtilityCacheKeepAliveTime(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1607,registerFactoryMbean(myCfg.getMBeanServer());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,425,String name = fd.getName();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,427,Field field = cls.getDeclaredField(name);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,429,field.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,431,buf.a(name).a('=');
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,544,!f.getType().isAnnotationPresent(GridToStringExclude.class)) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,573,GridToStringFieldDescriptor fd = new GridToStringFieldDescriptor(f.getName());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,21,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,37,private List<GridToStringFieldDescriptor> fields = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,60,Collections.sort(fields, new Comparator<GridToStringFieldDescriptor>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,63,return arg0.getOrder() < arg1.getOrder() ? -1 : arg0.getOrder() > arg1.getOrder() ? 1 : 0;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,33,GridToStringFieldDescriptor(String name) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,34,assert name != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,36,this.name = name;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,66,private static final String VALID_TASK_NAME =
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,444,return client.compute().<Boolean>executeAsync(VALID_TASK_NAME, cacheName).get(timeout, SECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRoutineDiscoveryMessage.java,38,private final Map<UUID, IgniteCheckedException> errs = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRoutineDiscoveryMessage.java,69,return errs;
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,25,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,61,public IgniteFuture<?> runLocal(@Nullable Runnable r);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,75,public <R> IgniteFuture<R> callLocal(@Nullable Callable<R> c);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,87,public SchedulerFuture<?> scheduleLocal(Runnable job, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,98,public <R> SchedulerFuture<R> scheduleLocal(Callable<R> c, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,427,return val == null ? dflt : Boolean.valueOf(val);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,277,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,287,while (!closed && (attrs == null || !attrs.containsKey(key)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,288,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,290,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,309,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,321,while (!closed && !(isFound = isAttributeSet(key, val)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,322,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,324,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,347,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,357,while (!closed && (attrs == null || !attrs.keySet().containsAll(keys)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,358,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,360,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,388,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,400,while (!closed && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,406,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,408,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,211,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,215,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,219,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,230,while (iter.hasNext() && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,234,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,248,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,347,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,351,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,355,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,377,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,383,if (!isInterrupted && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,385,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,404,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,484,long now = System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,488,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,492,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,522,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,526,if (!isInterrupted && !isResRcvd && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,528,res = fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,954,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,957,long endTime = now + timeout <= 0 ? Long.MAX_VALUE : now + timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,959,long delta = timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,965,while (!uids.isEmpty() && err.get() == null && delta > 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,966,qryMux.wait(delta);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,968,delta = endTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,242,LT.error(log, e, "Failed to handle request: " + req.command());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,245,log.debug("Failed to handle request [req=" + req + ", e=" + e + "]");
modules/core/src/main/java/org/apache/ignite/internal/util/GridSpinReadWriteLock.java,23,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/util/GridSpinReadWriteLock.java,341,long end = U.currentTimeMillis() + unit.toMillis(timeout);
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,33,private long lastOperStartTs;
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,69,if (lastOperStartTs == 0) {
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,71,lastOperStartTs = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,74,long curTs = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,76,timeout = timeout - (curTs - lastOperStartTs);
modules/core/src/main/java/org/apache/ignite/spi/IgniteSpiOperationTimeoutHelper.java,78,lastOperStartTs = curTs;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1009,private long ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1026,return jobsToSteal > 0 && U.currentTimeMillis() - ts >= msgExpireTime;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1037,ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2071,connectGate.enter();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2073,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2076,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2077,connectGate.leave();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,467,long startTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,576,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,595,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,599,tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1076,long waitEnd = U.currentTimeMillis() + (spi.failureDetectionTimeoutEnabled() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1083,mux.wait(waitEnd);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1162,long startTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1245,if (timeout > 0 && (U.currentTimeMillis() - startTime) > timeout) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1847,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1858,updateMetrics(nodeId, metricsSet.metrics(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1861,updateMetrics(t.get1(), t.get2(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1990,node.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,364,long threshold = U.currentTimeMillis() + timeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,370,timeout = threshold - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,615,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,638,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,746,locNode.lastExchangeTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,844,long threshold = U.currentTimeMillis() + timeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,850,timeout = threshold - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1070,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1090,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1093,tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2026,private long lastTimeStatusMsgSent;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2292,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2316,spi.stats.onClientSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2437,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2485,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4029,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4041,updateMetrics(nodeId, metricsSet.metrics(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4044,updateMetrics(t.get1(), t.get2(), cacheMetrics, tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4099,locNode.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4141,node.lastUpdateTime(tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4386,lastTimeStatusMsgSent = locNode.lastUpdateTime();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4395,lastTimeStatusMsgSent = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4405,U.currentTimeMillis() - locNode.lastExchangeTime() >= connCheckThreshold &&
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4494,long tstamp = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4507,spi.stats.onServerSocketInitialized(U.currentTimeMillis() - tstamp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,104,private volatile long lastUpdateTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,395,return lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,403,public void lastUpdateTime(long lastUpdateTime) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,404,assert lastUpdateTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,406,this.lastUpdateTime = lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,414,public long lastExchangeTime() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,415,return lastExchangeTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,423,public void lastExchangeTime(long lastExchangeTime) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,221,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,292,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,534,long rcvEnd = U.currentTimeMillis() + resWaitTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,537,while (U.currentTimeMillis() < rcvEnd) { // Try to receive multiple responses.
modules/core/src/main/java/org/apache/ignite/internal/processors/nodevalidation/OsDiscoveryNodeValidationProcessor.java,67,return new IgniteNodeValidationResult(node.id(), errMsg, errMsg);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,139,ctx.resource().injectGeneric(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,142,((PlatformEventFilterListener)filter).initialize(ctx);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,241,ctx.event().addLocalEventListener(lsnr, types);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,366,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,367,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,370,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,155,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,156,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,159,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,161,ClassLoader ldr = dep.classLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,194,ctx.event().record(new CacheQueryExecutedEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,195,ctx.discovery().localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,197,EVT_CACHE_QUERY_EXECUTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,198,CacheQueryType.CONTINUOUS.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,199,cacheName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,200,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,201,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,202,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,204,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,205,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,207,));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,310,return mgr.registerListener(routineId, lsnr, internal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,402,rmtFilter = rmtFilterDep.unmarshal(nodeId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,27,public void onExecution();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,383,if (!ctx.isDaemon() && data != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,384,for (DiscoveryDataItem item : data.items) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,385,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,387,ctx.resource().injectGeneric(item.prjPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,396,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,397,U.error(log, "Failed to register continuous handler.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,401,for (Map.Entry<UUID, Map<UUID, LocalRoutineInfo>> entry : data.clientInfos.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,402,UUID clientNodeId = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,430,Map<UUID, LocalRoutineInfo> map = clientInfos.get(entry.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,432,if (map == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,433,map = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,435,clientInfos.put(entry.getKey(), map);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,438,map.putAll(entry.getValue());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,339,String sesId = httpReq.getRequestedSessionId();
examples/src/main/java/org/apache/ignite/examples/computegrid/failover/package-info.java,22,package org.apache.ignite.examples.computegrid.failover;
examples/src/main/java/org/apache/ignite/examples/computegrid/montecarlo/package-info.java,22,package org.apache.ignite.examples.computegrid.montecarlo;
examples/src/main/java/org/apache/ignite/examples/computegrid/package-info.java,22,package org.apache.ignite.examples.computegrid;
examples/src/main/java/org/apache/ignite/examples/datagrid/starschema/package-info.java,22,package org.apache.ignite.examples.datagrid.starschema;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/package-info.java,22,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/package-info.java,22,package org.apache.ignite.examples.datagrid.store.jdbc;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/package-info.java,22,package org.apache.ignite.examples.datagrid.store;
examples/src/main/java/org/apache/ignite/examples/datastructures/package-info.java,22,package org.apache.ignite.examples.datastructures;
examples/src/main/java/org/apache/ignite/examples/events/package-info.java,22,package org.apache.ignite.examples.events;
examples/src/main/java/org/apache/ignite/examples/igfs/package-info.java,22,package org.apache.ignite.examples.igfs;
examples/src/main/java/org/apache/ignite/examples/messaging/package-info.java,22,package org.apache.ignite.examples.messaging;
examples/src/main/java/org/apache/ignite/examples/misc/client/memcache/package-info.java,22,package org.apache.ignite.examples.misc.client.memcache;
examples/src/main/java/org/apache/ignite/examples/misc/client/package-info.java,22,package org.apache.ignite.examples.misc.client;
examples/src/main/java/org/apache/ignite/examples/misc/deployment/package-info.java,22,package org.apache.ignite.examples.misc.deployment;
examples/src/main/java/org/apache/ignite/examples/misc/lifecycle/package-info.java,22,package org.apache.ignite.examples.misc.lifecycle;
examples/src/main/java/org/apache/ignite/examples/misc/package-info.java,22,package org.apache.ignite.examples.misc;
examples/src/main/java/org/apache/ignite/examples/misc/springbean/package-info.java,22,package org.apache.ignite.examples.misc.springbean;
examples/src/main/java/org/apache/ignite/examples/package-info.java,22,package org.apache.ignite.examples;
examples/src/main/java/org/apache/ignite/examples/servicegrid/package-info.java,22,package org.apache.ignite.examples.servicegrid;
examples/src/main/java/org/apache/ignite/examples/streaming/package-info.java,21,package org.apache.ignite.examples.streaming;
examples/src/main/java/org/apache/ignite/examples/streaming/wordcount/package-info.java,21,package org.apache.ignite.examples.streaming.wordcount;
examples/src/main/java/org/apache/ignite/examples/streaming/wordcount/socket/package-info.java,21,package org.apache.ignite.examples.streaming.wordcount.socket;
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/aspectj/package-info.java,22,package org.apache.ignite.compute.gridify.aop.aspectj;
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/spring/package-info.java,22,package org.apache.ignite.compute.gridify.aop.spring;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/package-info.java,22,package org.apache.ignite.spi.checkpoint.s3;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/package-info.java,21,package org.apache.ignite.spi.discovery.tcp.ipfinder.cloud;
modules/core/src/main/java/org/apache/ignite/cache/affinity/package-info.java,21,package org.apache.ignite.cache.affinity;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/package-info.java,21,package org.apache.ignite.cache.affinity.rendezvous;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/package-info.java,21,package org.apache.ignite.cache.eviction.fifo;
modules/core/src/main/java/org/apache/ignite/cache/eviction/igfs/package-info.java,21,package org.apache.ignite.cache.eviction.igfs;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/package-info.java,21,package org.apache.ignite.cache.eviction.lru;
modules/core/src/main/java/org/apache/ignite/cache/eviction/package-info.java,21,package org.apache.ignite.cache.eviction;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/package-info.java,21,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/package-info.java,21,package org.apache.ignite.cache.eviction.sorted;
modules/core/src/main/java/org/apache/ignite/cache/package-info.java,22,package org.apache.ignite.cache;
modules/core/src/main/java/org/apache/ignite/cache/query/annotations/package-info.java,22,package org.apache.ignite.cache.query.annotations;
modules/core/src/main/java/org/apache/ignite/cache/query/package-info.java,21,package org.apache.ignite.cache.query;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/package-info.java,21,package org.apache.ignite.cache.store.jdbc.dialect;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/package-info.java,22,package org.apache.ignite.cache.store.jdbc;
modules/core/src/main/java/org/apache/ignite/cache/store/package-info.java,22,package org.apache.ignite.cache.store;
modules/core/src/main/java/org/apache/ignite/cluster/package-info.java,22,package org.apache.ignite.cluster;
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/GridifySetToSetAbstractAspect.java,167,for (Object element : taskRes) {
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/package-info.java,22,package org.apache.ignite.compute.gridify.aop;
modules/core/src/main/java/org/apache/ignite/compute/gridify/package-info.java,22,package org.apache.ignite.compute.gridify;
modules/core/src/main/java/org/apache/ignite/compute/package-info.java,22,package org.apache.ignite.compute;
modules/core/src/main/java/org/apache/ignite/configuration/package-info.java,22,package org.apache.ignite.configuration;
modules/core/src/main/java/org/apache/ignite/events/package-info.java,22,package org.apache.ignite.events;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/package-info.java,22,package org.apache.ignite.igfs.mapreduce;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/records/package-info.java,22,package org.apache.ignite.igfs.mapreduce.records;
modules/core/src/main/java/org/apache/ignite/igfs/package-info.java,22,package org.apache.ignite.igfs;
modules/core/src/main/java/org/apache/ignite/igfs/secondary/package-info.java,22,package org.apache.ignite.igfs.secondary;
modules/core/src/main/java/org/apache/ignite/internal/executor/package-info.java,22,package org.apache.ignite.internal.executor;
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/package-info.java,22,package org.apache.ignite.internal.igfs.common;
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/package-info.java,22,package org.apache.ignite.internal.managers.checkpoint;
modules/core/src/main/java/org/apache/ignite/internal/managers/collision/package-info.java,22,package org.apache.ignite.internal.managers.collision;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/package-info.java,22,package org.apache.ignite.internal.managers.communication;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/package-info.java,22,package org.apache.ignite.internal.managers.deployment;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/protocol/gg/package-info.java,22,package org.apache.ignite.internal.managers.deployment.protocol.gg;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/package-info.java,22,package org.apache.ignite.internal.managers.discovery;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/package-info.java,22,package org.apache.ignite.internal.managers.eventstorage;
modules/core/src/main/java/org/apache/ignite/internal/managers/failover/package-info.java,22,package org.apache.ignite.internal.managers.failover;
modules/core/src/main/java/org/apache/ignite/internal/managers/indexing/package-info.java,22,package org.apache.ignite.internal.managers.indexing;
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/package-info.java,22,package org.apache.ignite.internal.managers.loadbalancer;
modules/core/src/main/java/org/apache/ignite/internal/managers/package-info.java,22,package org.apache.ignite.internal.managers;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/package-info.java,22,package org.apache.ignite.internal.mxbean;
modules/core/src/main/java/org/apache/ignite/internal/package-info.java,22,package org.apache.ignite.internal;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/package-info.java,22,package org.apache.ignite.internal.processors.affinity;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/package-info.java,22,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/package-info.java,22,package org.apache.ignite.internal.processors.closure;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/package-info.java,22,package org.apache.ignite.internal.processors.datastreamer;
modules/core/src/main/java/org/apache/ignite/internal/processors/dr/package-info.java,22,package org.apache.ignite.internal.processors.dr;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/package-info.java,22,package org.apache.ignite.internal.processors.hadoop;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/package-info.java,22,package org.apache.ignite.internal.processors.igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/package-info.java,22,package org.apache.ignite.internal.processors.job;
modules/core/src/main/java/org/apache/ignite/internal/processors/package-info.java,22,package org.apache.ignite.internal.processors;
modules/core/src/main/java/org/apache/ignite/internal/processors/port/package-info.java,22,package org.apache.ignite.internal.processors.port;
modules/core/src/main/java/org/apache/ignite/internal/processors/resource/package-info.java,22,package org.apache.ignite.internal.processors.resource;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/package-info.java,22,package org.apache.ignite.internal.processors.rest.client.message;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.top;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/version/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.version;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/package-info.java,22,package org.apache.ignite.internal.processors.rest;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.tcp;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/package-info.java,22,package org.apache.ignite.internal.processors.rest.request;
modules/core/src/main/java/org/apache/ignite/internal/processors/schedule/package-info.java,22,package org.apache.ignite.internal.processors.schedule;
modules/core/src/main/java/org/apache/ignite/internal/processors/segmentation/package-info.java,22,package org.apache.ignite.internal.processors.segmentation;
modules/core/src/main/java/org/apache/ignite/internal/processors/session/package-info.java,23,package org.apache.ignite.internal.processors.session;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/package-info.java,22,package org.apache.ignite.internal.processors.task;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/package-info.java,22,package org.apache.ignite.internal.processors.timeout;
modules/core/src/main/java/org/apache/ignite/internal/util/future/package-info.java,22,package org.apache.ignite.internal.util.future;
modules/core/src/main/java/org/apache/ignite/internal/util/gridify/package-info.java,22,package org.apache.ignite.internal.util.gridify;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/loopback/package-info.java,22,package org.apache.ignite.internal.util.ipc.loopback;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/package-info.java,22,package org.apache.ignite.internal.util.ipc;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/package-info.java,22,package org.apache.ignite.internal.util.ipc.shmem;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/package-info.java,22,package org.apache.ignite.internal.util.nio;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/package-info.java,22,package org.apache.ignite.internal.util.nio.ssl;
modules/core/src/main/java/org/apache/ignite/internal/util/package-info.java,22,package org.apache.ignite.internal.util;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/package-info.java,22,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/package-info.java,22,package org.apache.ignite.internal.util.scala;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/package-info.java,22,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C1.java,32,public interface C1<E1, R> extends IgniteClosure<E1, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C2.java,33,public interface C2<E1, E2, R> extends IgniteBiClosure<E1, E2, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/C3.java,36,public interface C3<E1, E2, E3, R> extends GridClosure3<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI1.java,31,public interface CI1<T> extends IgniteInClosure<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI2.java,32,public interface CI2<E1, E2> extends IgniteBiInClosure<E1, E2> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,32,public interface CI3<E1, E2, E3> extends GridInClosure3<E1, E2, E3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CIX3.java,30,public abstract class CIX3<E1, E2, E3> extends GridInClosure3X<E1, E2, E3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CO.java,31,public interface CO<T> extends IgniteOutClosure<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CX3.java,34,public abstract class CX3<E1, E2, E3, R> extends GridClosure3X<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/F.java,29,public class F extends GridFunc { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/G.java,29,public class G extends Ignition { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P1.java,31,public interface P1<E1> extends IgnitePredicate<E1> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P2.java,32,public interface P2<T1, T2> extends IgniteBiPredicate<T1, T2> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/P3.java,33,public interface P3<T1, T2, T3> extends GridPredicate3<T1, T2, T3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PA.java,30,public interface PA extends GridAbsPredicate { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PAX.java,31,public abstract class PAX extends GridAbsPredicateX { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PE.java,33,public interface PE extends IgnitePredicate<Event> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PKV.java,31,public interface PKV<K, V> extends IgniteBiPredicate<K, V> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PN.java,33,public interface PN extends IgnitePredicate<ClusterNode> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/PX3.java,33,public abstract class PX3<T1, T2, T3> extends GridPredicate3X<T1, T2, T3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R1.java,32,public interface R1<E1, R> extends IgniteReducer<E1, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R2.java,32,public interface R2<E1, E2, R> extends IgniteReducer2<E1, E2, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/R3.java,32,public interface R3<E1, E2, E3, R> extends IgniteReducer3<E1, E2, E3, R> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/A.java,28,public class A extends GridArgumentCheck { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/GPC.java,27,public interface GPC<T> extends GridPlainCallable<T> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/GPR.java,27,public interface GPR extends GridPlainRunnable { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/LT.java,28,public class LT extends GridLogThrottle { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/S.java,28,public class S extends GridToStringBuilder { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/U.java,28,public class U extends IgniteUtils { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/package-info.java,22,package org.apache.ignite.internal.util.typedef.internal;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/package-info.java,22,package org.apache.ignite.internal.util.typedef;
modules/core/src/main/java/org/apache/ignite/internal/util/worker/package-info.java,22,package org.apache.ignite.internal.util.worker;
modules/core/src/main/java/org/apache/ignite/lang/package-info.java,22,package org.apache.ignite.lang;
modules/core/src/main/java/org/apache/ignite/lifecycle/package-info.java,22,package org.apache.ignite.lifecycle;
modules/core/src/main/java/org/apache/ignite/logger/java/package-info.java,22,package org.apache.ignite.logger.java;
modules/core/src/main/java/org/apache/ignite/logger/package-info.java,22,package org.apache.ignite.logger;
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/package-info.java,22,package org.apache.ignite.marshaller.jdk;
modules/core/src/main/java/org/apache/ignite/marshaller/package-info.java,22,package org.apache.ignite.marshaller;
modules/core/src/main/java/org/apache/ignite/messaging/package-info.java,22,package org.apache.ignite.messaging;
modules/core/src/main/java/org/apache/ignite/mxbean/package-info.java,22,package org.apache.ignite.mxbean;
modules/core/src/main/java/org/apache/ignite/package-info.java,21,package org.apache.ignite;
modules/core/src/main/java/org/apache/ignite/plugin/extensions/communication/package-info.java,22,package org.apache.ignite.plugin.extensions.communication;
modules/core/src/main/java/org/apache/ignite/plugin/package-info.java,22,package org.apache.ignite.plugin;
modules/core/src/main/java/org/apache/ignite/plugin/security/package-info.java,22,package org.apache.ignite.plugin.security;
modules/core/src/main/java/org/apache/ignite/plugin/segmentation/package-info.java,22,package org.apache.ignite.plugin.segmentation;
modules/core/src/main/java/org/apache/ignite/resources/package-info.java,22,package org.apache.ignite.resources;
modules/core/src/main/java/org/apache/ignite/scheduler/package-info.java,22,package org.apache.ignite.scheduler;
modules/core/src/main/java/org/apache/ignite/services/package-info.java,21,package org.apache.ignite.services;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/cache/package-info.java,23,package org.apache.ignite.spi.checkpoint.cache;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/jdbc/package-info.java,23,package org.apache.ignite.spi.checkpoint.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/noop/package-info.java,22,package org.apache.ignite.spi.checkpoint.noop;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/package-info.java,22,package org.apache.ignite.spi.checkpoint;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/package-info.java,22,package org.apache.ignite.spi.checkpoint.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/collision/fifoqueue/package-info.java,22,package org.apache.ignite.spi.collision.fifoqueue;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/package-info.java,22,package org.apache.ignite.spi.collision.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/collision/noop/package-info.java,22,package org.apache.ignite.spi.collision.noop;
modules/core/src/main/java/org/apache/ignite/spi/collision/package-info.java,22,package org.apache.ignite.spi.collision;
modules/core/src/main/java/org/apache/ignite/spi/collision/priorityqueue/package-info.java,22,package org.apache.ignite.spi.collision.priorityqueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/package-info.java,22,package org.apache.ignite.spi.communication;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/package-info.java,22,package org.apache.ignite.spi.communication.tcp;
modules/core/src/main/java/org/apache/ignite/spi/deployment/local/package-info.java,22,package org.apache.ignite.spi.deployment.local;
modules/core/src/main/java/org/apache/ignite/spi/deployment/package-info.java,22,package org.apache.ignite.spi.deployment;
modules/core/src/main/java/org/apache/ignite/spi/discovery/package-info.java,22,package org.apache.ignite.spi.discovery;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.internal;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.multicast;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/vm/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.vm;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.messages;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/package-info.java,22,package org.apache.ignite.spi.discovery.tcp;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/memory/package-info.java,22,package org.apache.ignite.spi.eventstorage.memory;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/package-info.java,22,package org.apache.ignite.spi.eventstorage;
modules/core/src/main/java/org/apache/ignite/spi/failover/always/package-info.java,22,package org.apache.ignite.spi.failover.always;
modules/core/src/main/java/org/apache/ignite/spi/failover/jobstealing/package-info.java,22,package org.apache.ignite.spi.failover.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/failover/never/package-info.java,22,package org.apache.ignite.spi.failover.never;
modules/core/src/main/java/org/apache/ignite/spi/failover/package-info.java,22,package org.apache.ignite.spi.failover;
modules/core/src/main/java/org/apache/ignite/spi/indexing/noop/package-info.java,22,package org.apache.ignite.spi.indexing.noop;
modules/core/src/main/java/org/apache/ignite/spi/indexing/package-info.java,22,package org.apache.ignite.spi.indexing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/adaptive/package-info.java,22,package org.apache.ignite.spi.loadbalancing.adaptive;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/package-info.java,22,package org.apache.ignite.spi.loadbalancing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/package-info.java,22,package org.apache.ignite.spi.loadbalancing.roundrobin;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/weightedrandom/package-info.java,22,package org.apache.ignite.spi.loadbalancing.weightedrandom;
modules/core/src/main/java/org/apache/ignite/spi/package-info.java,22,package org.apache.ignite.spi;
modules/core/src/main/java/org/apache/ignite/ssl/package-info.java,22,package org.apache.ignite.ssl;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/package-info.java,22,package org.apache.ignite.startup.cmdline;
modules/core/src/main/java/org/apache/ignite/startup/package-info.java,21,package org.apache.ignite.startup;
modules/core/src/main/java/org/apache/ignite/stream/package-info.java,21,package org.apache.ignite.stream;
modules/core/src/main/java/org/apache/ignite/stream/socket/package-info.java,21,package org.apache.ignite.stream.socket;
modules/core/src/main/java/org/apache/ignite/thread/package-info.java,22,package org.apache.ignite.thread;
modules/core/src/main/java/org/apache/ignite/transactions/package-info.java,22,package org.apache.ignite.transactions;
modules/core/src/main/java/org/jsr166/package-info.java,20,package org.jsr166;
modules/extdata/uri/src/main/java/org/apache/ignite/spi/deployment/uri/tasks/package-info.java,22,package org.apache.ignite.spi.deployment.uri.tasks;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.gce;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/package-info.java,22,package org.apache.ignite.hadoop.fs;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/package-info.java,22,package org.apache.ignite.hadoop.fs.v1;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/package-info.java,22,package org.apache.ignite.hadoop.fs.v2;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/package-info.java,22,package org.apache.ignite.hadoop.mapreduce;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/package-info.java,22,package org.apache.ignite.internal.processors.query.h2;
modules/jcl/src/main/java/org/apache/ignite/logger/jcl/package-info.java,22,package org.apache.ignite.logger.jcl;
modules/jta/src/main/java/org/apache/ignite/cache/jta/jndi/package-info.java,22,package org.apache.ignite.cache.jta.jndi;
modules/jta/src/main/java/org/apache/ignite/cache/jta/package-info.java,22,package org.apache.ignite.cache.jta;
modules/jta/src/main/java/org/apache/ignite/cache/jta/reflect/package-info.java,22,package org.apache.ignite.cache.jta.reflect;
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/package-info.java,22,package org.apache.ignite.logger.log4j;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/package-info.java,22,package org.apache.ignite.logger.log4j2;
modules/mesos/src/main/java/org/apache/ignite/mesos/package-info.java,22,package org.apache.ignite.mesos;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/package-info.java,22,package org.apache.ignite.mesos.resource;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.http.jetty;
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/package-info.java,22,package org.apache.ignite.logger.slf4j;
modules/spring/src/main/java/org/apache/ignite/cache/spring/package-info.java,22,package org.apache.ignite.cache.spring;
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/package-info.java,22,package org.apache.ignite.tools.ant.beautifier;
modules/tools/src/main/java/org/apache/ignite/util/antgar/package-info.java,22,package org.apache.ignite.util.antgar;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/GridUriDeploymentJarVerifier.java,390,for (CodeSigner signer : signers) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/package-info.java,22,package org.apache.ignite.spi.deployment.uri;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/GridDeploymentFolderScannerHelper.java,51,for (File child : file.listFiles()) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/file/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.file;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.http;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners;
modules/visor-plugins/src/main/java/org/apache/ignite/visor/plugin/package-info.java,22,package org.apache.ignite.visor.plugin;
modules/web/src/main/java/org/apache/ignite/cache/websession/package-info.java,22,package org.apache.ignite.cache.websession;
modules/web/src/main/java/org/apache/ignite/startup/servlet/package-info.java,22,package org.apache.ignite.startup.servlet;
modules/yarn/src/main/java/org/apache/ignite/yarn/package-info.java,22,package org.apache.ignite.yarn;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2842,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2843,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2873,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2874,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3027,ClientMessageWorker worker = clientMsgWorkers.get(node.id());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3030,throw new IgniteSpiException("Client node already disconnected: " + node);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3032,msg.verify(getLocalNodeId()); // Client worker require verified messages.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3034,worker.addMessage(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3281,trySendMessageDirectly(node, new TcpDiscoveryAuthFailedMessage(locNodeId,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3282,spi.locHost));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4869,boolean ignored = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4871,TcpDiscoverySpiState state = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4882,ignored = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4884,state = spiState;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4889,log.debug("Auth failed message has been ignored [msg=" + msg +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryAuthFailedMessage.java,44,public TcpDiscoveryAuthFailedMessage(UUID creatorNodeId, InetAddress addr) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,392,U.join(tcpSrvr, log);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1437,U.join(tcpSrvr, log);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,27,import java.util.ArrayList;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,28,import java.util.Collections;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,29,import java.util.Comparator;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,30,import java.util.List;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,41,public static final String DOWNLOAD_LINK = "http://tiny.cc/updater/download_community.php";
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,44,private ClusterProperties props;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,47,private String latestVersion = null;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,50,private boolean hdfs = false;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,70,if (latestVersion == null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,71,List<String> localFiles = findIgnites(folder);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,72,List<String> hdfsFiles = findIgnites(fs, props.igniteReleasesDir());
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,74,String localLatestVersion = findLatestVersion(localFiles);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,75,String hdfsLatestVersion = findLatestVersion(hdfsFiles);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,77,if (localLatestVersion != null && hdfsLatestVersion != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,78,if (VersionComparator.INSTANCE.compare(hdfsLatestVersion, localLatestVersion) >= 0) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,79,latestVersion = hdfsLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,81,hdfs = true;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,85,latestVersion = localLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,86,else if (hdfsLatestVersion != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,87,latestVersion = hdfsLatestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,89,hdfs = true;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,93,String newVersion = updateIgnite(latestVersion);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,95,if (latestVersion != null && newVersion.equals(latestVersion)) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,97,return new Path(formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,98,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,99,return IgniteYarnUtils.copyLocalToHdfs(fs, formatPath(props.igniteLocalWorkDir(), latestVersion),
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,100,formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,102,else {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,103,latestVersion = newVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,105,return IgniteYarnUtils.copyLocalToHdfs(fs, formatPath(props.igniteLocalWorkDir(), latestVersion),
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,106,formatPath(props.igniteReleasesDir(), latestVersion));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,114,private List<String> findIgnites(File folder) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,117,List<String> ignites = new ArrayList<>();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,122,ignites.add(fileName);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,126,return ignites;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,133,private String findLatestVersion(List<String> files) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,134,String latestVersion = null;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,136,if (!files.isEmpty()) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,138,latestVersion = parseVersion(files.get(0));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,139,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,140,latestVersion = parseVersion(Collections.max(files, VersionComparator.INSTANCE));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,143,return latestVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,151,private List<String> findIgnites(FileSystem fs, String folder) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,161,throw new RuntimeException("Couldnt get list files from hdfs.", e);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,164,List<String> ignites = new ArrayList<>();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,171,ignites.add(fileName);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,175,return ignites;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,182,public Path getIgnite(String version) throws Exception {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,186,String fileName = downloadIgnite(version);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,201,private static String formatPath(String folder, String version) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,209,private String updateIgnite(String currentVersion) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,211,URL url;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,214,url = new URL(DOWNLOAD_LINK);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,215,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,216,url = new URL(DOWNLOAD_LINK + "?version=" + currentVersion);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,222,if (code == 200) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,223,String redirectUrl = conn.getURL().toString();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,225,checkDownloadFolder();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,227,FileOutputStream outFile = new FileOutputStream(props.igniteLocalWorkDir() + File.separator
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,228,+ fileName(redirectUrl));
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,230,outFile.getChannel().transferFrom(Channels.newChannel(conn.getInputStream()), 0, Long.MAX_VALUE);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,232,outFile.close();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,234,return parseVersion(redirectUrl);
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,238,return currentVersion;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,239,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,302,private static String parseVersion(String url) {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,303,String[] split = url.split("-");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,305,return split[split.length - 1].replaceAll(".zip", "");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,321,public static final class VersionComparator implements Comparator<String> {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,323,public static final VersionComparator INSTANCE = new VersionComparator();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,326,private VersionComparator() {
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,333,return 0;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,335,String[] ver1 = parseVersion(f1).split("\\.");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,336,String[] ver2 = parseVersion(f2).split("\\.");
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,342,return 1;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,343,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteProvider.java,344,return -1;
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,169,return provider.getIgnite();
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,170,else
modules/yarn/src/main/java/org/apache/ignite/yarn/IgniteYarnClient.java,171,return provider.getIgnite(props.igniteUrl());
modules/core/src/main/java/org/apache/ignite/internal/IgniteVersionUtils.java,59,BUILD_TSTAMP_STR = new SimpleDateFormat("yyyyMMdd").format(new Date(BUILD_TSTAMP * 1000));
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,24,import java.text.SimpleDateFormat;
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,244,String revTsStr = new SimpleDateFormat("yyyyMMdd").format(new Date(revTs * 1000));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,596,(handshakeFinished && res.getHandshakeStatus() == NOT_HANDSHAKING || res.getHandshakeStatus() == NEED_UNWRAP));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9168,public static <T extends R, R> List<R> arrayList(Iterable<T> c, int cap,
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9175,for (T t : c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,151,if (ver == null || deque.peekFirst().version().equals(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,152,cand = deque.removeFirst();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,138,private boolean trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,229,return trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,234,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,629,GridDhtTopologyFuture fut = cctx.topologyVersionFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,631,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,658,c.run();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,660,markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,662,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1098,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java,37,public GridServiceDeploymentFuture(ServiceConfiguration cfg) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,698,private void ensureNotClosed() throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,29,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,31,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,32,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,36,import org.apache.ignite.internal.processors.cache.query.GridCacheSqlIndexMetadata;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,38,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,39,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,59,private Collection<List<Object>> indexes;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,696,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,698,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,705,rows.add(tableRow(schema.getKey(), tbl));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,724,private List<Object> tableRow(String schema, String tbl) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,725,List<Object> row = new ArrayList<>(10);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,728,row.add(schema);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,729,row.add(tbl.toUpperCase());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,730,row.add("TABLE");
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,731,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,732,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,733,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,734,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,735,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,736,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,738,return row;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,772,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,774,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,814,private List<Object> columnRow(String schema, String tbl, String col, int type, String typeName,
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,815,boolean nullable, int pos) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,839,return row;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,895,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,897,List<List<?>> rows = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1198,updateMetaData();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1200,List<List<?>> rows = new ArrayList<>(meta.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1308,private void updateMetaData() throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1312,try {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1313,Ignite ignite = conn.ignite();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1315,UUID nodeId = conn.nodeId();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1317,Collection<GridCacheSqlMetadata> metas;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1319,UpdateMetadataTask task = new UpdateMetadataTask(conn.cacheName(), nodeId == null ? ignite : null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1321,metas = nodeId == null ? task.call() : ignite.compute(ignite.cluster().forNodeId(nodeId)).call(task);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1323,meta = U.newHashMap(metas.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1325,indexes = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1327,for (GridCacheSqlMetadata m : metas) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1328,String name = m.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1331,name = "PUBLIC";
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1333,Collection<String> types = m.types();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1337,for (String type : types) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1340,for (GridCacheSqlIndexMetadata idx : m.indexes(type)) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1341,int cnt = 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1343,for (String field : idx.fields()) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1344,indexes.add(F.<Object>asList(name, type.toUpperCase(), !idx.unique(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1350,meta.put(name, typesMap);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1353,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,790,U.error(log, "Error sending reply for job [nodeId=" + sndNode.id() + ", jobId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,802,U.error(log, msg, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,22,import org.apache.ignite.Ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,25,import org.apache.ignite.resources.IgniteInstanceResource;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,29,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,30,import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,46,protected Ignite ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,61,registerAddresses(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,93,protected boolean discoveryClientMode() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,94,boolean clientMode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,96,Ignite ignite0 = ignite;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,98,if (ignite0 != null) { // Can be null if used in tests without starting Ignite.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,99,DiscoverySpi discoSpi = ignite0.configuration().getDiscoverySpi();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,102,throw new IgniteSpiException("TcpDiscoveryIpFinder should be used with TcpDiscoverySpi: " + discoSpi);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,104,clientMode = ignite0.configuration().isClientMode() && !((TcpDiscoverySpi)discoSpi).isForceServerMode();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,106,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,107,clientMode = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/TcpDiscoveryIpFinderAdapter.java,109,return clientMode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,275,String overrideMcastGrp = System.getProperty(IGNITE_OVERRIDE_MCAST_GRP);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,278,mcastGrp = overrideMcastGrp;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,281,throw new IgniteSpiException("Multicast IP address is not specified.");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,284,throw new IgniteSpiException("Invalid multicast port: " + mcastPort);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,287,throw new IgniteSpiException("Invalid wait time, value greater than zero is expected: " + resWaitTime);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,290,throw new IgniteSpiException("Invalid number of address request attempts, " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,294,throw new IgniteSpiException("Time-to-live value is out of 0 <= TTL <= 255 range: " + ttl);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,301,boolean clientMode = discoveryClientMode();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,305,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,306,mcastAddr = InetAddress.getByName(mcastGrp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,308,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,309,throw new IgniteSpiException("Unknown multicast group: " + mcastGrp, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,313,throw new IgniteSpiException("Invalid multicast group address: " + mcastAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,315,Collection<String> locAddrs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,317,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,318,locAddrs = U.resolveLocalAddresses(U.resolveLocalHost(locAddr)).get1();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,320,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,321,throw new IgniteSpiException("Failed to resolve local addresses [locAddr=" + locAddr + ']', e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,324,assert locAddrs != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,326,addrSnds = new ArrayList<>(locAddrs.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,330,for (String locAddr : locAddrs) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,331,InetAddress addr;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,334,addr = InetAddress.getByName(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,336,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,338,log.debug("Failed to resolve local address [locAddr=" + locAddr + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,340,continue;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,343,if (!addr.isLoopbackAddress()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,346,addrSnds.add(new AddressSender(mcastAddr, addr, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,348,reqItfs.add(addr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,362,if (addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,363,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,366,addrSnds.add(new AddressSender(mcastAddr, null, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,368,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,370,log.debug("Failed to create multicast socket [mcastAddr=" + mcastAddr +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,374,if (addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,375,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,376,addrSnds.add(new AddressSender(mcastAddr, mcastAddr, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,378,reqItfs.add(mcastAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,380,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,382,log.debug("Failed to create multicast socket [mcastAddr=" + mcastAddr +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,389,if (!addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,391,addrSnd.start();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,393,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,394,mcastErr = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,397,assert addrSnds.isEmpty() : addrSnds;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,704,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-rcvr", log);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,748,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-sender", log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,30,private GridKernalContext kernalCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,39,private boolean cpyOnGet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,42,private boolean storeVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,43,import org.apache.ignite.cache.affinity.AffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1147,public AffinityKeyMapper defaultAffMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1148,return cacheObjCtx.defaultAffMapper();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,18,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,20,import java.math.BigDecimal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,22,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,24,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,25,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,26,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,28,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,29,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,30,import org.apache.ignite.internal.processors.GridProcessorAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,31,import org.apache.ignite.internal.processors.cache.CacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,32,import org.apache.ignite.internal.processors.cache.CacheObjectByteArrayImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,33,import org.apache.ignite.internal.processors.cache.CacheObjectContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,34,import org.apache.ignite.internal.processors.cache.CacheObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,35,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,36,import org.apache.ignite.internal.processors.cache.GridCacheDefaultAffinityKeyMapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,37,import org.apache.ignite.internal.processors.cache.KeyCacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,38,import org.apache.ignite.internal.processors.cache.KeyCacheObjectImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,42,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,43,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,44,import org.apache.ignite.lang.IgniteUuid;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,45,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,52,public class IgniteCacheObjectProcessorImpl extends GridProcessorAdapter implements IgniteCacheObjectProcessor {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,57,private static final Collection<Class<?>> IMMUTABLE_CLS = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,62,static {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,63,IMMUTABLE_CLS.add(String.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,64,IMMUTABLE_CLS.add(Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,65,IMMUTABLE_CLS.add(Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,66,IMMUTABLE_CLS.add(Short.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,67,IMMUTABLE_CLS.add(Character.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,68,IMMUTABLE_CLS.add(Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,69,IMMUTABLE_CLS.add(Long.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,70,IMMUTABLE_CLS.add(Float.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,71,IMMUTABLE_CLS.add(Double.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,72,IMMUTABLE_CLS.add(UUID.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,73,IMMUTABLE_CLS.add(IgniteUuid.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,74,IMMUTABLE_CLS.add(BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,80,public IgniteCacheObjectProcessorImpl(GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,81,super(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,87,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,89,return obj.prepareForCache(cctx.cacheObjectContext());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,107,return (KeyCacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,171,return (CacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,173,return toCacheObject0(obj, userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,183,protected CacheObject toCacheObject0(@Nullable Object obj, boolean userObj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,184,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,186,if (obj instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,188,return new CacheObjectByteArrayImpl((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,190,return new UserCacheObjectByteArrayImpl((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,194,return new CacheObjectImpl(obj, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,196,return new UserCacheObjectImpl(obj, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,201,assert ccfg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,209,CacheObjectContext res = new CacheObjectContext(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,210,ccfg.getAffinityMapper() != null ? ccfg.getAffinityMapper() : new GridCacheDefaultAffinityKeyMapper(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,214,ctx.resource().injectGeneric(res.defaultAffMapper());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,216,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,221,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,223,return IMMUTABLE_CLS.contains(obj.getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,233,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,239,return obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,244,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,249,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,254,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,259,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,264,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1127,this.state = state;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,415,buf.a(cd.getSimpleClassName()).a(" [");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,481,Collection<ClusterNode> nodes = CU.affinityNodes(cctx, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,503,nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,668,assert cache != null : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,670,cache.context().dataStructures().blockSet(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,60,import org.apache.ignite.internal.processors.cache.query.CacheQueryType;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,37,private static final Long CHECK_FREQ = Long.getLong(IGNITE_MARSHAL_BUFFERS_RECHECK, 10000);
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,152,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,157,if (maxOff < halfSize) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,158,byte[] newBytes = new byte[halfSize]; // Shrink.
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,162,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,203,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,225,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,238,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,251,int bytesToCp = arr.length << 2;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,282,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,295,int bytesToCp = arr.length << 2;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,727,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,753,Collections.<List<?>>emptyList(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,816,List<Object> row = new ArrayList<>(20);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1488,U.quietAndWarn(log, "Slow client queue limit is set to a value greater than message queue limit " +
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteAbstractBenchmark.java,115,return ignite().cluster().nodes().size() >= args.nodes();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,20,import java.util.UUID;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,23,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/Ignition.java,27,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/Ignition.java,28,import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
modules/core/src/main/java/org/apache/ignite/cluster/ClusterNode.java,26,import org.apache.ignite.Ignition;
modules/core/src/main/java/org/apache/ignite/cluster/ClusterNode.java,29,import org.apache.ignite.spi.discovery.DiscoverySpi;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,78,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupEx.java,22,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/managers/indexing/GridIndexingManager.java,29,import org.apache.ignite.spi.IgniteSpiException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryPredicateAdapter.java,22,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,20,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,21,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionExchangeId.java,33,import org.jetbrains.annotations.NotNull;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,58,import org.apache.ignite.internal.util.typedef.CI1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,23,import org.apache.ignite.internal.GridComponent;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,30,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,30,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,31,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,33,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformProcessor.java,24,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/plugin/CachePluginManager.java,23,import java.util.ListIterator;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,26,import java.util.Properties;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,46,import org.eclipse.jetty.util.log.StdErrLog;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,137,private final static String JCLOUD_CONNECTION_TIMEOUT = "10000"; //10 secs
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,563,private @Nullable IgniteBiTuple<UUID, Boolean> pingNode(InetSocketAddress addr, @Nullable UUID nodeId,
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,77,private final static ByteArrayInputStream OBJECT_CONTENT =  new ByteArrayInputStream(new byte[0]);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,779,private class CacheClassLoader extends ClassLoader {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8137,Class old = ldrMap.putIfAbsent(clsName, cls = Class.forName(clsName, true, ldr));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,198,return getTypedValue(colIdx, String.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,203,Boolean val = getTypedValue(colIdx, Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,205,return val != null ? val : false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,210,Byte val = getTypedValue(colIdx, Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,212,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,217,Short val = getTypedValue(colIdx, Short.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,219,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,224,Integer val = getTypedValue(colIdx, Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,226,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,231,Long val = getTypedValue(colIdx, Long.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,233,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,238,Float val = getTypedValue(colIdx, Float.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,240,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,245,Double val = getTypedValue(colIdx, Double.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,247,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,252,return getTypedValue(colIdx, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,257,return getTypedValue(colIdx, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,262,return getTypedValue(colIdx, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,267,return getTypedValue(colIdx, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,272,return getTypedValue(colIdx, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,298,return getTypedValue(colLb, String.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,303,Boolean val = getTypedValue(colLb, Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,305,return val != null ? val : false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,310,Byte val = getTypedValue(colLb, Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,312,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,317,Short val = getTypedValue(colLb, Short.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,319,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,324,Integer val = getTypedValue(colLb, Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,326,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,331,Long val = getTypedValue(colLb, Long.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,333,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,338,Float val = getTypedValue(colLb, Float.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,340,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,345,Double val = getTypedValue(colLb, Double.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,347,return val != null ? val : 0;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,352,return getTypedValue(colLb, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,357,return getTypedValue(colLb, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,362,return getTypedValue(colLb, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,367,return getTypedValue(colLb, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,372,return getTypedValue(colLb, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,424,return getTypedValue(colIdx, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,429,return getTypedValue(colLb, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,460,return getTypedValue(colIdx, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,465,return getTypedValue(colLb, BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,939,return getTypedValue(colIdx, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,972,return getTypedValue(colLb, Object.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1005,return getTypedValue(colIdx, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1010,return getTypedValue(colLb, Date.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1015,return getTypedValue(colIdx, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1020,return getTypedValue(colLb, Time.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1025,return getTypedValue(colIdx, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1030,return getTypedValue(colLb, Timestamp.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1035,return getTypedValue(colIdx, URL.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1040,return getTypedValue(colLb, URL.class);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1433,return getTypedValue(colIdx, type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1438,return getTypedValue(colLb, type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1449,private <T> T getTypedValue(String colLb, Class<T> cls) throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1450,ensureNotClosed();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1451,ensureHasCurrentRow();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1453,String name = colLb.toUpperCase();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1455,Integer idx = stmt.fieldsIdxs.get(name);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1457,int colIdx;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1460,colIdx = idx;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1462,colIdx = cols.indexOf(name) + 1;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1465,throw new SQLException("Invalid column label: " + colLb);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1467,stmt.fieldsIdxs.put(name, colIdx);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1470,return getTypedValue(colIdx, cls);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1482,private <T> T getTypedValue(int colIdx, Class<T> cls) throws SQLException {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1493,catch (IndexOutOfBoundsException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1494,throw new SQLException("Invalid column index: " + colIdx);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1496,catch (ClassCastException ignored) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1242,InetSocketAddress resolved = remAddr.isUnresolved() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1243,new InetSocketAddress(InetAddress.getByName(remAddr.getHostName()), remAddr.getPort()) : remAddr;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1245,InetAddress addr = resolved.getAddress();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1247,assert addr != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1249,sock.connect(resolved, (int)timeoutHelper.nextTimeoutChunk(sockTimeout));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1253,return sock;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1263,Socket sock;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1267,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1268,sock = new Socket();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1270,sock.bind(new InetSocketAddress(locHost, 0));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1272,sock.setTcpNoDelay(true);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1274,return sock;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,98,assert str.trim().length() > 0 : "Method description cannot be empty: " + mtd;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,126,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,149,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,179,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,209,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1236,if (backtrack.size() > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,26,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,48,import org.apache.ignite.internal.processors.cache.KeyCacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,61,import org.apache.ignite.internal.util.GridConcurrentHashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,327,public void onPartitionEvicted(int part) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,328,GridCacheAffinityManager aff = cctx.affinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,333,while (iter.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,337,iter.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,419,return setDataMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,442,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,444,IgniteInternalCache cache = cctx.cache();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,454,keys.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,466,setDataMap.remove(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,474,public void removeSetData(IgniteUuid id) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,535,if (set == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,537,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,540,set = new GridConcurrentHashSet<>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,543,set = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,547,set.remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,548,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,549,set.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,621,iter = setIterator(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,757,private GridCloseableIterator<IgniteBiTuple<K, V>> setIterator(GridCacheQueryAdapter<?> qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,760,filter.init(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,767,data = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,769,final GridIterator<IgniteBiTuple<K, V>> it = F.iterator(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,770,data,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,773,return new IgniteBiTuple<>((K)e.item(), (V)Boolean.TRUE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,776,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,779,return filter.apply(e, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,783,return new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,785,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,789,return it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,793,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,46,import org.apache.ignite.internal.util.GridConcurrentHashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,142,if (ctx.isLocal() || ctx.isReplicated()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,145,return set != null ? set.size() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,149,new GridSetQueryPredicate<>(id, collocated), null, false, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,176,return (set == null || set.isEmpty()) && size() == 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,606,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,607,sendPrepareResponse(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,612,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,614,onComplete(res);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,112,private boolean allowDuplicateRegistrations = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/DiscoverySpiListener.java,43,public void onDiscovery(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,414,lsnr.onDiscovery(EVT_NODE_FAILED, topVer, n, top, new TreeMap<>(topHist), null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2015,private void notifyDiscovery(int type, long topVer, ClusterNode node, Collection<ClusterNode> top,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2021,log.debug("Discovery notification [node=" + node + ", type=" + U.gridEventName(type) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2024,lsnr.onDiscovery(type, topVer, node, top, new TreeMap<>(topHist), data);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,2027,log.debug("Skipped discovery notification [node=" + node + ", type=" + U.gridEventName(type) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2125,processCustomMessage((TcpDiscoveryCustomEventMessage)msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4229,private void processCustomMessage(TcpDiscoveryCustomEventMessage msg) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4244,notifyDiscoveryListener(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4315,processCustomMessage(msg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4322,private void notifyDiscoveryListener(TcpDiscoveryCustomEventMessage msg) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4338,if (node != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4339,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4342,lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4343,msg.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4344,node,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4345,snapshot,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4346,hist,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4347,msgObj);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4352,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4353,U.error(log, "Failed to unmarshal discovery custom message.", e);
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,145,public ContinuousQuery<K, V> setInitialQuery(Query<Cache.Entry<K, V>> initQry) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,228,public ContinuousQuery<K, V> setTimeInterval(long timeInterval) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,259,public ContinuousQuery<K, V> setAutoUnsubscribe(boolean autoUnsubscribe) {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,422,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,989,protected Object readResolve() throws ObjectStreamException {
modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java,566,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,90,public List<List<ClusterNode>> assignment() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,97,public AffinityTopologyVersion topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,120,public Set<Integer> primaryPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,132,public Set<Integer> backupPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,106,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl0.java,61,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImplEx.java,56,public GridCacheVersion version() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImplEx.java,80,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheLazyEntry.java,130,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java,118,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectByteArrayImpl.java,157,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,717,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5254,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtilityKey.java,44,public abstract int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/KeyCacheObject.java,27,public int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,618,public void onError(Throwable t) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,218,public void transactionNodes(Map<UUID, Collection<UUID>> txNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,262,public void onResult(UUID nodeId, GridNearGetResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockMapping.java,115,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,1239,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopFileBlock.java,161,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,348,public boolean isFile() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,364,public long length() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,375,public int blockSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,384,public long blocksCount() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,435,public IgfsFileMap fileMap() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,470,public boolean evictExclude() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1234,public int hashCode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1239,public boolean equals(Object obj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,828,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/GridConcurrentSkipListSet.java,167,public boolean equals(Object o) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridStringBuilder.java,447,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,244,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,48,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,78,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafePartitionedMap.java,294,protected void advance() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafePartitionedMap.java,316,protected void advance() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,243,public String toString() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1918,public Iterator<TcpDiscoveryAbstractMessage> iterator() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,265,public void setMetrics(ClusterMetrics metrics) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,281,public Map<Integer, CacheMetrics> cacheMetrics() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,298,public void setCacheMetrics(Map<Integer, CacheMetrics> cacheMetrics) {
modules/core/src/main/java/org/apache/ignite/ssl/SslContextFactory.java,429,public String toString() {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,169,throw new RuntimeException("Got unexpected response code. Response code: " + code);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,497,GridContinuousHandler.RegisterStatus registerListener(UUID lsnrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,499,boolean internal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,476,taskClsName = task.getClass().getName();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryFailResponse.java,52,this.errMsg = err.getClass() + ":" + err.getMessage();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,331,if (explicitParts == null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,335,if (grp.register(reserved.subList(reserved.size() - partIds.size(), reserved.size()))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,427,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,536,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,519,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,770,byte typeOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,772,typeOrd = reader.readByte("type");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,777,type = GridCacheQueryType.fromOrdinal(typeOrd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,277,log.debug("Sending force key request [cacheName=" + cctx.name() + "node=" + n.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,312,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,315,log.debug("Will not rebalance key (entry is not new) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,325,log.debug("Received removed DHT entry for force keys request [entry=" + e +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,336,log.debug("Will not rebalance key (local node is owner) [key=" + key + ", part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,347,log.debug("Mapping local partition [loc=" + cctx.localNodeId() + ", topVer" + topVer +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,366,log.debug("Will not rebalance key (no nodes to request from with rebalancing disabled) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,389,log.debug("Will not rebalance key (local partition is not MOVING) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,551,log.debug("Trying to rebalance removed entry (will ignore) [cacheName=" +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1609,new CI2<GridNioSession, Integer>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1611,checkClientQueueSize(ses, qSize);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1614,null;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3044,close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearPessimisticTxPrepareFuture.java,36,import org.apache.ignite.internal.transactions.IgniteTxRollbackCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,52,import org.apache.ignite.internal.processors.cache.GridCacheIndexUpdateException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1044,if (X.hasCause(ex, GridCacheIndexUpdateException.class) && cacheCtx.cache().isMongoDataCache()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1046,log.debug("Failed to update mongo document index (transaction entry will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1050,txEntry.op(NOOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1054,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1056,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1057,IgniteCheckedException err = new IgniteTxHeuristicCheckedException("Failed to locally write to cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1065,state(UNKNOWN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1079,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1081,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1049,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1074,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1850,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1932,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1982,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3510,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,990,cctx.evicts().touch(this, cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,287,entry.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,534,entry.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,864,cache.context().evicts().touch(entry, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1315,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1502,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2285,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,281,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,610,cctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,251,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,362,ctx.evicts().touch(entry, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,595,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCache.java,210,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1490,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1507,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,251,new CacheInvokeDirectResult(key, cctx.toCacheObject(res)) : new CacheInvokeDirectResult(key, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1347,for (int i = 0; i < locked.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1439,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1449,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1454,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1487,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1497,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1502,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1606,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1616,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1621,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1628,updRes.dhtFuture(dhtFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1632,return updRes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1715,GridCacheReturn retVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1716,Collection<IgniteBiTuple<GridDhtCacheEntry, GridCacheVersion>> deleted = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2075,batchRes.addDeleted(entry, updRes, entries);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2147,return dhtFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,688,fut.get();
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,250,assert ignite == null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,252,if (cfgPath != null && cfg != null) {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,253,throw new IllegalArgumentException("Both 'configurationPath' and 'configuration' are " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1356,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1510,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1511,U.error(log, "Failed to remove locks for keys: " + keys, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,119,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,422,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,119,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,477,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,479,log.debug("Received lock response from node [nodeId=" + nodeId + ", res=" + res + ", fut=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,502,U.warn(log, "Failed to find mini future for response (perhaps due to stale message) [res=" + res +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,173,return CU.clientNode(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1677,public static boolean clientNode(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1678,Boolean clientModeAttr = node.attribute(IgniteNodeAttributes.ATTR_CLIENT_MODE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1680,assert clientModeAttr != null : node;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1682,return clientModeAttr != null && clientModeAttr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,306,assert CU.clientNode(nearNode) : nearNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,493,if (!res && !node.isClient() && nodeAlive(nodeId)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,516,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1664,return !node.isClient() ? spi.getNodeAddresses(node) :
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3017,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3182,if (node.isClient()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,447,return clientRouterNodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,63,return node.isClient();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,636,return !node.isClient() && (excludedEmpty || !excluded.contains(node));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,161,setManagers(mgrs, txMgr,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,198,private void setManagers(List<GridCacheSharedManager<K, V>> mgrs,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2170,);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,470,locDep.deployMode() + ']', "Failed to deploy class in SHARED or CONTINUOUS mode.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,447,U.warn(log, "Rebalance delay is supported only for partitioned caches (will ignore): " + (cc.getName()),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,155,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,160,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,114,assert !F.isEmpty(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,174,level.doLog(log, longMsg, shortMsg, e, quiet);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,217,U.error(log, longMsg, e);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,219,U.error(log, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,227,U.quietAndWarn(log, longMsg, F.isEmpty(shortMsg) ? longMsg : shortMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,229,U.warn(log, longMsg, F.isEmpty(shortMsg) ? longMsg : shortMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,237,U.quietAndInfo(log, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,240,log.info(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,253,public abstract void doLog(IgniteLogger log, String longMsg, String shortMsg, Throwable e, boolean quiet);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3979,warn(log, s, s);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4038,public static void warn(@Nullable IgniteLogger log, Object longMsg, Object shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4039,assert longMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4040,assert shortMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4043,log.warning(compact(longMsg.toString()));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4044,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4046,compact(shortMsg.toString()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2834,U.addressesAsString(node) + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2865,U.addressesAsString(node) + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3263,U.addressesAsString(node) + ']');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,768,String msg = "Query execution is too long (" + time + " ms): " + sql;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,775,String longMsg = "Query execution is too long [time=" + time + " ms, sql='" + sql + '\'' +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1252,if (assignsMap != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloaderAssignments.java,23,import org.apache.ignite.internal.util.tostring.GridToStringExclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloaderAssignments.java,62,AffinityTopologyVersion topologyVersion() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,268,List<GridReservable> reserved
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,277,if (cctx == null) // Cache was not found, probably was not deployed yet.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,721,Set<ClusterNode> nodes = replicatedUnstableDataNodes(cctx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,769,private Set<ClusterNode> replicatedUnstableDataNodes(GridCacheContext<?,?> cctx) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,877,Set<ClusterNode> dataNodes = replicatedUnstableDataNodes(extraCctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,735,if (!req.inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,736,GridDhtPartitionTopology top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,738,if (req.firstClientRequest()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,739,assert CU.clientNode(nearNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,741,top = topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,746,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,748,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,749,log.debug("Client topology version mismatch, need remap lock request [" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,755,GridNearLockResponse res = sendClientLockRemapResponse(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,756,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,759,return new GridFinishedFuture<>(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,780,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,782,top.readUnlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,832,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,833,GridDhtPartitionTopology top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,835,if (req.firstClientRequest()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,836,assert CU.clientNode(nearNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,838,top = topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,843,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,845,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,846,log.debug("Client topology version mismatch, need remap lock request [" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,852,GridNearLockResponse res = sendClientLockRemapResponse(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,853,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,856,return new GridFinishedFuture<>(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,859,tx = new GridDhtTxLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,860,ctx.shared(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,861,nearNode.id(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,862,req.version(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,863,req.futureId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,864,req.miniId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,865,req.threadId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,868,ctx.systemTx(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,869,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,870,ctx.ioPolicy(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,871,PESSIMISTIC,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,872,req.isolation(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,873,req.timeout(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,874,req.isInvalidate(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,875,!req.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,876,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,877,req.txSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,878,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,879,req.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,880,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,884,tx = ctx.tm().onCreated(null, tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,886,if (tx == null || !tx.init()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,887,String msg = "Failed to acquire lock (transaction has been completed): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,888,req.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,890,U.warn(log, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,898,tx.topologyVersion(req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,900,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,902,top.readUnlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,155,Iterable<Integer> col = (Iterable<Integer>)qry.execute(new SumReducer()).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/CacheQuery.java,214,public CacheQuery<T> keepAll(boolean keepAll);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryManager.java,265,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,101,private volatile boolean keepAll = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,181,boolean keepAll,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,198,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,311,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,313,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,319,public boolean keepAll() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,320,return keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,79,private final Collection<Object> allCol = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,411,allCol.addAll(maskNulls((Collection<Object>)data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,414,onDone((Collection<R>)(qry.query().keepAll() ? unmaskNulls(allCol) : data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,582,X.println(">>>  allCollSize: " + allCol.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/CustomMessageWrapper.java,36,CustomMessageWrapper(DiscoveryCustomMessage delegate) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1874,assert polled != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,30,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,32,import java.util.Queue;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,89,private static ThreadLocal<Queue<GridToStringThreadLocal>> threadCache = new ThreadLocal<Queue<GridToStringThreadLocal>>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,91,Queue<GridToStringThreadLocal> queue = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,93,queue.offer(new GridToStringThreadLocal());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,95,return queue;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,127,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,129,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,134,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,136,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,137,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,154,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,279,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,281,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,286,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,288,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,289,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,300,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,319,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,321,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,326,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,328,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,329,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,338,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,354,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,356,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,361,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,368,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,18,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,25,class GridToStringThreadLocal {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,39,return sb;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,45,Object[] getAdditionalNames() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,46,return addNames;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,52,Object[] getAdditionalValues() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,53,return addVals;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1718,public void onExchangeDone(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1722,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,66,import static org.apache.ignite.events.EventType.EVT_NODE_JOINED;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,96,assert evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT || evtType == EVT_NODE_JOINED;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,104,if (evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,105,final Collection<String> caches = ctx.cache().cacheNames();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,107,final Collection<AffinityAssignmentKey> rmv = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,109,for (AffinityAssignmentKey key : affMap.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,111,rmv.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,114,if (!rmv.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,115,ctx.timeout().addTimeoutObject(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,116,new GridTimeoutObjectAdapter(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,117,IgniteUuid.fromUuid(ctx.localNodeId()),
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,118,AFFINITY_MAP_CLEAN_UP_DELAY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,120,affMap.keySet().removeAll(rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,137,ctx.event().addLocalEventListener(lsnr, EVT_NODE_FAILED, EVT_NODE_LEFT, EVT_NODE_JOINED);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,531,prepare(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,537,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,540,prepare(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,568,cleanup(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,576,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,579,cleanup(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,327,return S.toString(GridDhtTxPrepareRequest.class, this, "super", super.toString());
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,32,import org.apache.ignite.logger.java.JavaLogger;
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,324,private static final IgniteLogger LOG = new JavaLogger();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4390,t.join();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4392,return true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,298,U.join(sockReader, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1774,return cacheObjects().toCacheObject(cacheObjCtx, obj, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1116,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1121,completionCb.apply(req, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1123,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1218,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,106,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,121,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,170,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,193,onEnter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheGateway.java,244,private void onEnter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1435,void cancelAll(@Nullable IgniteCheckedException err) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1437,err = new IgniteCheckedException("Data streamer has been cancelled: " + DataStreamerImpl.this);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,485,private SecurityContext authenticate(GridRestRequest req) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,602,name = ((GridRestTaskRequest)req).taskName();
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,140,private void requestFreeSize(int size) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,148,byte[] newBytes = new byte[size << 1]; // Grow.
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/jdk/GridClientJdkMarshaller.java,63,ObjectInput in = new ObjectInputStream(tmp);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridTcpRouterNioListenerAdapter.java,82,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,174,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1460,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,236,wait();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1939,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1940,throw new IgniteSpiException("Failed to send message to remote node: " + node, e);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,29,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,36,import java.util.concurrent.locks.ReentrantReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,80,private static final Map<String, GridToStringClassDescriptor> classCache = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,83,private static final ReadWriteLock rwLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,494,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,498,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,499,classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,501,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,502,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,523,rwLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,525,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,526,cd = classCache.get(key);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,528,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,529,rwLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,589,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,591,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,592,classCache.put(key, cd);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,594,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,595,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1263,add(ATTR_MACS, (macs.isEmpty() ? "" : macs));
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,41,private static int throttleTimeout = DFLT_THROTTLE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,61,public static long throttleTimeout() {
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,39,public static final long DFLT_FRAGMENTIZER_THROTTLING_BLOCK_LENGTH = 16 * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,139,final long HALF_GB = 512/*MB*/ * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,427,return X.timeSpan2HMSM(U.currentTimeMillis() - startTime);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1940,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1943,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,57,private static final long[] SPAN_DIVS = new long[] {1000L, 60L, 60L, 60L};
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,32,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,35,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,544,U.error(log, "Failed to get and add: " + this, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2444,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2445,assert errs != null;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,123,InetAddress locHost;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,126,locHost = U.resolveLocalHost(ctx.config().getLocalHost());
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,129,throw new IgniteCheckedException("Failed to resolve local host to bind address: " + ctx.config().getLocalHost(), e);
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,132,System.setProperty(IGNITE_JETTY_HOST, locHost.getHostAddress());
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,436,public static boolean hasCause(@Nullable Throwable t, @Nullable Class<? extends Throwable>... cls) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,443,for (Class<? extends Throwable> c : cls) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,258,assert evt.type() == EVT_DISCOVERY_CUSTOM_EVT  || aff.primaryPartitions(evt.eventNode().id()).isEmpty() : evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,259,assert evt.type() == EVT_DISCOVERY_CUSTOM_EVT  || aff.backupPartitions(evt.eventNode().id()).isEmpty() : evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,30,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,596,private static class AffinityAssignmentKey {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,607,private AffinityAssignmentKey(String cacheName, @NotNull AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/IgniteCache.java,599,public IgniteFuture<?> rebalance();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7707,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7710,for (Method declaredMtd : c.getDeclaredMethods()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7766,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7770,mtd = c.getDeclaredMethod(mtdName, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2299,return resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2302,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,677,return res != null ? res : new CacheInvokeResult<T>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,722,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,633,EntryProcessorResult<T> res = invokeAsync(key, entryProcessor, args).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,635,return res != null ? res : new CacheInvokeResult<T>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,693,return resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,696,return null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,215,final long startConnTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,219,final long connTimeoutRest = connectTimeout - (U.currentTimeMillis() - startConnTime);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,434,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,473,lastMsgSndTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,507,lastPingRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,518,lastMsgRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1286,private boolean isLocalNodeCoordinator() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,29,public interface TcpDiscoverySpiMBean extends IgniteSpiManagementMBean {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,44,public String getSpiState();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,140,public long getNodesJoined();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,148,public long getNodesLeft();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,156,public long getNodesFailed();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,107,public List<ClusterNode> get(int part) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,472,if (t.getSuppressed() != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,473,for (Throwable th : t.getSuppressed()) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,475,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,478,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,359,readFromNet();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,167,worker.finishTask(null, err);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2020,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1615,return (CacheException)e.getCause();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6965,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6967,throw (Error)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6969,if (t instanceof GridClosureException) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6970,t = ((GridClosureException)t).unwrap();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6972,continue;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6976,return (IgniteCheckedException)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6979,return new IgniteCheckedException(t);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6981,assert t.getCause() != null; // ...and it is IgniteException.
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6983,t = t.getCause();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,427,UUID id = cctx.kernalContext().continuous().startRoutine(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,428,hnd,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,429,bufSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,430,timeInterval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,431,autoUnsubscribe,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,432,pred).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,564,StartFuture fut = new StartFuture(ctx, routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,566,startFuts.put(routineId, fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,574,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,575,startFuts.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,576,locInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,578,unregisterHandler(routineId, hnd, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,580,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,582,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,586,fut.onLocalRegistered();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,588,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,600,StopFuture fut = stopFuts.get(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,603,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,604,StopFuture old = stopFuts.putIfAbsent(routineId, fut = new StopFuture(ctx));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,607,fut = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,608,else
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,609,doStop = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,612,if (doStop) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,614,LocalRoutineInfo routine = locInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,617,if (routine == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,618,stopFuts.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,620,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,622,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,626,unregisterHandler(routineId, routine.hnd, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,628,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,629,ctx.discovery().sendCustomEvent(new StopRoutineDiscoveryMessage(routineId));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,631,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,632,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,636,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,639,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1551,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1596,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,205,if (prevAssignment != null && discoEvt != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,210,else
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,212,discoEvt, topVer, backups));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,812,GridCacheEntryEx nearCached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,817,nearCached = cacheCtx.dht().near().peekEx(txEntry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,936,nearCached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,937,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,938,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,939,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,940,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,941,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,942,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,943,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,944,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,945,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,946,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,947,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,948,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,949,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,950,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,951,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,971,nearCached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,972,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,973,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,974,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,975,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,976,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,978,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,979,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,980,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,981,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,982,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,983,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,990,nearCached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1286,U.error(log, "Failed to marshal (request will not be sent).", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1583,entry.initialValue(e.getValue(),
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1584,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1585,ttl,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1586,expiryTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1587,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1588,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,42,import org.apache.ignite.Ignite;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,257,for (GridLocalCacheEntry e : entries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,461,case 45: {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,467,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,485,log.debug("Evicted partition: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1045,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1070,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionsReservation.java,192,part.tryEvictAsync(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionsReservation.java,230,tryEvict(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,22,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,25,import org.apache.ignite.internal.GridDirectCollection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,32,import org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,45,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,50,private Collection<Integer> parts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,76,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,85,updateSeq = cp.updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,86,topic = cp.topic;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,87,timeout = cp.timeout;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,88,workerId = cp.workerId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,89,topVer = cp.topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,92,this.parts = new HashSet<>(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,114,parts.add(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,121,Collection<Integer> partitions() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,128,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,129,return updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,178,return topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,320,return 44;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,55,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,87,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,118,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,119,return updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,52,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,253,Method mtd = obj.getClass().getMethod(sb.toString(), paramCls);
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,271,Method mtd = obj.getClass().getMethod(sb.toString(), itf);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,521,private QueryResult<K, V> executeQuery(GridCacheQueryAdapter<?> qry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1368,IgniteSpiCloseableIterator<IgniteBiTuple<K, V>> iter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1372,executeQuery(qry, qryInfo.arguments(), loc, qry.subjectId(), taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1401,IgniteBiTuple<K, V> row = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1404,if (row == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1414,if (!cctx.isReplicated() && qry.type() == SCAN && qry.partition() == null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1415,cctx.config().getCacheMode() != LOCAL && !incBackups &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1418,log.debug("Ignoring backup element [row=" + row +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1422,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1425,V val = row.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1427,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1437,if (val == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1441,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1444,if (statsEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1445,CacheMetricsImpl metrics = cctx.cache().metrics0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1447,metrics.onRead(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1449,metrics.addGetTimeNanos(System.nanoTime() - start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1453,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1454,case SQL:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1455,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1456,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1458,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1459,CacheQueryType.SQL.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1461,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1462,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1463,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1464,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1465,qryInfo.arguments(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1466,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1467,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1470,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1471,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1473,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1475,case TEXT:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1476,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1477,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1479,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1480,CacheQueryType.FULL_TEXT.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1482,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1483,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1484,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1485,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1486,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1487,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1488,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1491,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1492,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1494,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1496,case SCAN:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1497,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1498,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1500,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1501,CacheQueryType.SCAN.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1503,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1504,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1505,qry.scanFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1506,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1507,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1508,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1509,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1512,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1513,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1515,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1673,fut.onDone(executeQuery(qryInfo.query(), qryInfo.arguments(), false,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,895,Collection<GridCacheAdapter<?, ?>> caches = ctx.cache().internalCaches();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,898,return Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,900,Map<Integer, CacheMetrics> metrics = null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,902,for (GridCacheAdapter<?, ?> cache : caches) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,904,cache.context().started() &&
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,905,cache.context().affinity().affinityTopologyVersion().topologyVersion() > 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,907,metrics = U.newHashMap(caches.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,913,return metrics == null ? Collections.<Integer, CacheMetrics>emptyMap() : metrics;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,490,Thread.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,541,Thread.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,986,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1020,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,278,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1541,U.sleep(2000);
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,542,return locNode.id();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,545,locNode = discoMgr.localNode();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,547,return locNode != null ? locNode.id() : config().getNodeId();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,806,return config().isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,949,locNode = discoMgr != null ? discoMgr.localNode() : null;
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,951,return locNode != null ? (locNode.isClient() && disconnected) : false;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2085,return cfg.isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,499,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1520,throw new SQLException("Value is an not instance of " + cls.getName());
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,50,return new StreamTransformer<K, V>() {
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,52,return ep.process(entry, args);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,83,boolean isLog4jUsed = U.gridClassLoader().getResource("org/apache/log4j/Appender.class") != null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,85,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,87,U.addLog4jNoOpLogger();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,88,else
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,91,catch (IgniteCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,120,private IgniteInternalCache<Object, Object> cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,549,GridServiceAssignments assigns = (GridServiceAssignments)cache.getForcePrimary(
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,687,ServiceConfiguration cfg = dep.configuration();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheEvictionConfiguration.java,21,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,50,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,51,import org.apache.ignite.cache.eviction.fifo.FifoEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,52,import org.apache.ignite.cache.eviction.lru.LruEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,663,public static Integer evictionPolicyMaxSize(@Nullable EvictionPolicy plc) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,665,return ((LruEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,671,return ((FifoEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,906,if (writeThrough && keys.size() > 1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,907,return updateWithBatch(op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,908,keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,909,vals,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,910,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,911,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,912,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,914,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,915,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,918,Iterator<?> valsIter = vals != null ? vals.iterator() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,924,boolean intercept = ctx.config().getInterceptor() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,926,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,928,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,930,Object val = valsIter != null ? valsIter.next() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,933,throw new NullPointerException("Null value.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,935,KeyCacheObject cacheKey = ctx.toCacheKeyObject(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,938,val = ctx.toCacheObject(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,940,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,941,GridCacheEntryEx entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,943,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,944,entry = entryEx(cacheKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,946,GridTuple3<Boolean, Object, EntryProcessorResult<Object>> t = entry.innerUpdateLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,947,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,948,val == null ? DELETE : op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,949,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,950,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,951,writeThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,952,readThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,953,retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,954,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,955,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,956,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,958,intercept,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,959,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,960,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,962,if (op == TRANSFORM) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,963,if (t.get3() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,964,Map<K, EntryProcessorResult> computedMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,966,if (res == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,967,computedMap = U.newHashMap(keys.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,969,res = new IgniteBiTuple<>(true, computedMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,971,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,972,computedMap = (Map<K, EntryProcessorResult>)res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,974,computedMap.put(key, t.get3());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,978,res = new T2(t.get1(), t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,980,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,982,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,984,log.debug("Got removed entry while updating (will retry): " + key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,986,entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,988,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,990,err = partialUpdateException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,992,err.add(F.asList(key), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,994,U.error(log, "Failed to update key : " + key, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,996,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,998,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1000,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,219,private final Collection<Connection> conns = Collections.synchronizedCollection(new ArrayList<Connection>());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,260,conns.add(c);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,432,conns.remove(conn);
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,350,curWaitingJobs += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,360,avgJobWaitTime += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,305,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,398,MiniFuture fut = new MiniFuture(n, mappedKeys, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,648,MiniFuture(ClusterNode node, LinkedHashMap<KeyCacheObject, Boolean> keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,399,MiniFuture fut = new MiniFuture(n, mappedKeys, saved, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,781,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,782,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,939,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,189,if (!".svn".equals(fileName)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,190,InetSocketAddress addr = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,192,StringTokenizer st = new StringTokenizer(fileName, DELIM);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,194,if (st.countTokens() == 2) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,195,String addrStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,196,String portStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,198,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,199,int port = Integer.parseInt(portStr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,203,catch (IllegalArgumentException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,204,U.error(log, "Failed to parse file entry: " + fileName, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,209,addrs.add(addr);
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,110,Map<String, String> env = new HashMap<>(System.getenv());
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskArg.java,65,boolean sysCaches
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,199,this.top = top;
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,612,forceLocDep = reader.readBoolean("forceLocDep");
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,740,userVer = reader.readString("userVer");
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,51,import static org.apache.ignite.internal.processors.task.GridTaskThreadContextKey.TC_SUBGRID;
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,212,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,233,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,599,boolean fullSup = dep != null && taskCls!= null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,602,Collection<? extends ClusterNode> nodes = (Collection<? extends ClusterNode>)map.get(TC_SUBGRID);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,604,Collection<UUID> top = nodes != null ? F.nodeIds(nodes) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3290,private void checkEmptyTransactions() throws IgniteException {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,375,for (SharedDeployment d : deps) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,376,if (!d.pendingUndeploy() && !d.undeployed()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,377,Map<UUID, IgniteUuid> parties = d.participants();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,379,if (parties != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,380,IgniteUuid ldrId = parties.get(meta.senderNodeId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,382,if (ldrId != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,383,assert !ldrId.equals(meta.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,386,log.debug("Skipping deployment (loaders on remote node are different) " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,389,continue;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,394,depsToCheck = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,397,log.debug("Adding deployment to check: " + d);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,399,depsToCheck.add(d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,159,return aff.assignments(topVer);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,114,if (ca.context().started()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,544,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,463,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,183,throw new IllegalStateException("Ignite requires Java 7 or above. Current Java version " +
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,344,throw new IllegalStateException("Data streamer has been closed.");
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,40,import org.springframework.beans.factory.InitializingBean;
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,81,public class IgniteSpringBean implements Ignite, DisposableBean, InitializingBean,
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,128,g = IgniteSpring.start(cfg, appCtx);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3240,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3242,boolean res = true;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3244,if (file.isDirectory()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3245,File[] files = file.listFiles();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3250,res &= delete(file1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3252,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3254,new JarFile(file1, false).close();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3258,catch (IOException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3261,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3262,res &= file1.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3264,res &= file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3266,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3267,res = file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3269,return res;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,790,Arrays.asList("TABLE_CAT", "TABLE_SCHEM", "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE",
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,794,Arrays.asList(String.class.getName(), String.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,795,String.class.getName(), Integer.class.getName(), String.class.getName(), Integer.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,796,Integer.class.getName(), Integer.class.getName(), Integer.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,797,String.class.getName(), Integer.class.getName(), Integer.class.getName(), String.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,798,String.class.getName(), String.class.getName(), String.class.getName(), Short.class.getName(),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,799,String.class.getName()),
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,818,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,819,row.add(schema);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,820,row.add(tbl);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,821,row.add(col);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,822,row.add(type);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,823,row.add(typeName);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,824,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,825,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,826,row.add(10);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,827,row.add(nullable ? columnNullable : columnNoNulls);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,828,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,829,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,830,row.add(Integer.MAX_VALUE);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,831,row.add(pos);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,832,row.add("YES");
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,833,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,834,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,835,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,836,row.add(null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,837,row.add("NO");
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,45,import org.apache.logging.log4j.core.config.AppenderRef;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,48,import org.apache.logging.log4j.core.config.LoggerConfig;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,108,private Logger consoleLog;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,122,private Log4J2Logger(final Logger impl, @Nullable final Logger consoleLog) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,124,this.impl = impl;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,125,this.consoleLog = consoleLog;
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,138,throw new IgniteCheckedException("Configuration XML file for Log4j must be specified.");
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,143,throw new IgniteCheckedException("Log4j configuration path was not found: " + path);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,211,public void setLevel(Level level) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,212,LoggerContext ctx = (LoggerContext)LogManager.getContext(false);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,214,Configuration conf = ctx.getConfiguration();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,216,conf.getLoggerConfig(impl.getName()).setLevel(level);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,218,ctx.updateLoggers(conf);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,245,return normilize(((FileAppender)innerApp).getFileName());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,248,return normilize(((RollingFileAppender)innerApp).getFileName());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,268,private String normilize(String path) {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,338,consoleLog = createConsoleLogger();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,351,public static Logger createConsoleLogger() {
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,352,LoggerContext ctx = (LoggerContext)LogManager.getContext(true);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,354,Configuration cfg = ctx.getConfiguration();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,362,AppenderRef ref = AppenderRef.createAppenderRef(CONSOLE_APPENDER, Level.TRACE, null);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,364,AppenderRef[] refs = {ref};
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,369,logCfg.addAppender(consoleApp, null, null);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,372,cfg.addLogger(LogManager.ROOT_LOGGER_NAME, logCfg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,376,return (Logger)LogManager.getContext().getLogger(LogManager.ROOT_LOGGER_NAME);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,388,((LoggerContext)LogManager.getContext(false)).reconfigure();
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,407,return new Log4J2Logger((Logger)LogManager.getRootLogger(),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,408,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(""));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,413,return new Log4J2Logger((Logger)LogManager.getLogger(name),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,414,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,419,return new Log4J2Logger((Logger)LogManager.getLogger(name),
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,420,consoleLog == null ? null : (Logger)LogManager.getContext().getLogger(name));
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,431,consoleLog.trace(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,442,consoleLog.debug(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,453,consoleLog.info(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,461,consoleLog.warn(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,469,consoleLog.warn(msg, e);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,477,consoleLog.error(msg);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,485,consoleLog.error(msg, e);
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,490,return impl.isTraceEnabled() || (consoleLog != null && consoleLog.isTraceEnabled());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,495,return impl.isDebugEnabled() || (consoleLog != null && consoleLog.isDebugEnabled());
modules/log4j2/src/main/java/org/apache/ignite/logger/log4j2/Log4J2Logger.java,500,return impl.isInfoEnabled() || (consoleLog != null && consoleLog.isInfoEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,338,cfg.setNodeFilter(F.<ClusterNode>alwaysTrue() == prj.predicate() ? null : prj.predicate());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,340,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,362,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2244,boolean conn = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2257,while (!conn) { // Reconnection on handshake timeout.
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2299,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2301,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2304,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2325,conn = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2328,if (!conn) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2474,private <T> long safeHandshake(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2475,T client,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2481,HandshakeTimeoutObject<T> obj = new HandshakeTimeoutObject<>(client, U.currentTimeMillis() + timeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2489,((GridCommunicationClient)client).doHandshake(new HandshakeClosure(rmtNodeId));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2490,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2491,SocketChannel ch = (SocketChannel)client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2493,boolean success = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2495,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2496,BlockingSslHandler sslHnd = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2498,ByteBuffer buf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2500,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2506,ByteBuffer handBuff = sslHnd.applicationBuffer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2509,buf = ByteBuffer.allocate(1000);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2511,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2516,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2518,buf = sslHnd.decode(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2520,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2521,buf = handBuff;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2523,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2527,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2532,i += read;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2542,log.debug("Received remote node ID: " + rmtNodeId0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2544,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2545,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2547,ch.write(sslHnd.encrypt(ByteBuffer.wrap(U.IGNITE_HEADER)));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2549,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2550,ch.write(ByteBuffer.wrap(U.IGNITE_HEADER));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2555,throw new IgniteCheckedException("Local node has not been started or " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2558,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2568,buf.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2572,assert written;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2574,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2576,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2577,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2579,ch.write(sslHnd.encrypt(buf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2581,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2582,ch.write(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2584,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2585,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2586,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2588,ch.write(sslHnd.encrypt(ByteBuffer.wrap(nodeIdMessage().nodeIdBytesWithType)));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2590,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2591,ch.write(ByteBuffer.wrap(nodeIdMessage().nodeIdBytesWithType));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2593,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2595,log.debug("Waiting for handshake [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2597,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2598,assert sslHnd != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2600,buf = ByteBuffer.allocate(1000);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2607,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2613,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2625,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2628,buf.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2631,int read = ch.read(buf);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2637,i += read;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2644,log.debug("Received handshake message [rmtNode=" + rmtNodeId + ", rcvCnt=" + rcvCnt + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2646,if (rcvCnt == -1) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2648,log.debug("Connection rejected, will retry client creation [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2650,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2651,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2653,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2654,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2656,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2658,log.debug("Failed to read from channel: " + e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2660,throw new IgniteCheckedException("Failed to read from channel.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2662,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2664,U.closeQuiet(ch);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,56,private Map<String, Map<String, Map<String, String>>> meta;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1335,Map<String, Map<String, String>> typesMap = U.newHashMap(types.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1338,typesMap.put(type.toUpperCase(), m.fields(type));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,1398,return ((IgniteCacheProxy)cache).context().queries().sqlMetadata();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2128,private static class CacheSqlMetadata implements GridCacheSqlMetadata {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2265,private static class CacheSqlIndexMetadata implements GridCacheSqlIndexMetadata {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9122,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9123,Method mtd = cls.getDeclaredMethod(name, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9125,if (mtd.getReturnType() != void.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9126,mtd.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9128,return mtd;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,9131,catch (NoSuchMethodException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,706,final AffinityTopologyVersion updTopVer =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,841,final AffinityTopologyVersion updTopVer =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,446,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,450,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,456,log.debug("Partition map before afterExchange [exchId=" + exchFut.exchangeId() + ", fullMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,457,fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,459,long updateSeq = this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,461,for (int p = 0; p < num; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,467,if (locPart == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,469,log.debug("Skipping local partition afterExchange (will not create): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,471,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,474,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,476,if (state == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,478,Collection<ClusterNode> owners = owners(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,481,if (F.isEmpty(owners)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,482,boolean owned = locPart.own();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,485,locPart + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,489,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,500,log.debug("Owned partition: " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,503,log.debug("Will not own partition (there are owners to rebalance from) [locPart=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,504,locPart + ", owners = " + owners + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,506,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,510,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,511,if (locPart != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,512,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,515,locPart.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,519,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,522,log.debug("Evicting moving partition (it does not belong to affinity): " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,528,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,531,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,838,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1223,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1227,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1229,assert part.state() == EVICTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1231,long seq = updateSeq ? this.updateSeq.incrementAndGet() : this.updateSeq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1235,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1238,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,310,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,311,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,76,public GridDeploymentInfoBean(IgniteUuid clsLdrId, String userVer, DeploymentMode depMode,
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,77,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,82,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,92,locDepOwner = dep.localDeploymentOwner();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,131,public void localDeploymentOwner(boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,132,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,86,private volatile boolean locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,168,&& !cctx.kernalContext().job().internal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,169,ClassLoader ldr = Thread.currentThread().getContextClassLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,175,locDepOwner = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,368,public void p2pContext(UUID sndId, IgniteUuid ldrId, String userVer, DeploymentMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,369,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,440,Map<UUID, IgniteUuid> added = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,443,added = addGlobalParticipants(sndId, ldrId, participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,450,added.remove(sndId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,462,added.remove(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,470,cctx.gridDeploy().addCacheParticipants(allParticipants, added);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,688,dep.localDeploymentOwner(locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,707,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,726,return new GridDeploymentInfoBean(d.loaderId(), d.userVersion(), d.mode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,727,participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1026,cctx.deploy().p2pContext(nodeId, bean.classLoaderId(), bean.userVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,1027,bean.deployMode(), bean.participants(), bean.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,360,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,361,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,880,U.addressesAsString(msg.addresses(), msg.hostNames()) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3725,Collection<ClusterNode> nodes = grp.nodes();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,421,Collection<TcpDiscoveryNode> rmts = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,435,if (rmts != null && !rmts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,441,Collection<ClusterNode> processed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,443,for (TcpDiscoveryNode n : rmts) {
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,21,import java.net.URL;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,27,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,73,URL url = U.resolveIgniteUrl(path);
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,76,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,79,File folder = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,21,import java.io.FileNotFoundException;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,24,import java.net.URL;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,224,UUID uuid = ignite.localNode().id();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,225,String nid = uuid.toString().toLowerCase();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,229,try {
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,230,File fld = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,231,int pathIdx = (fld.isDirectory() ? fld : fld.getParentFile()).getAbsolutePath().length() + 1;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,233,List<VisorLogFile> matchingFiles = matchedFiles(fld, filePtrn);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,474,public static List<VisorLogFile> fileTree(File file, int maxDepth, @Nullable FileFilter filter) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,501,public static List<VisorLogFile> matchedFiles(File fld, final String ptrn) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,502,List<VisorLogFile> files = fileTree(fld, MAX_FOLDER_DEPTH,
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,899,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,902,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,904,assert obj instanceof GridJobWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,906,IgniteUuid jobId1 = ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,907,IgniteUuid jobId2 = ((GridJobWorker)obj).ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,909,assert jobId1 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,910,assert jobId2 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,912,return jobId1.equals(jobId2);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,546,Collection<GridJobResultImpl> jobResList = new ArrayList<>(jobs.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,116,return "Ignite Cache";
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,115,return "Ignite Cache";
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,215,(t[1] < 10 ? "0" + t[1] : Long.toString(t[1])) + ':' +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,390,private void onFirstMessage(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,414,ses.close();
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,53,import org.apache.ignite.Ignition;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,174,fut.onDone(ignite);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/CacheStoreManager.java,170,public void sessionEnd(IgniteInternalTx tx, boolean commit, boolean last) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,879,private final Set<CacheStoreManager> started =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,880,new GridSetWrapper<>(new IdentityHashMap<CacheStoreManager, Object>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,883,private final Set<CacheStore> ended = new GridSetWrapper<>(new IdentityHashMap<CacheStore, Object>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,946,private boolean started(CacheStoreManager mgr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,947,return !started.add(mgr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,955,return !ended.add(store);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,20,import java.lang.reflect.Field;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,32,import java.util.concurrent.atomic.AtomicReferenceArray;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,39,import org.apache.ignite.events.CacheQueryReadEvent;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,64,import org.apache.ignite.internal.util.typedef.T2;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,69,import org.h2.result.ResultInterface;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,75,import static org.apache.ignite.events.EventType.EVT_CACHE_QUERY_OBJECT_READ;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,86,private static final Field RESULT_FIELD;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,91,static {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,92,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,93,RESULT_FIELD = JdbcResultSet.class.getDeclaredField("result");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,95,RESULT_FIELD.setAccessible(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,97,catch (NoSuchFieldException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,98,throw new IllegalStateException("Check H2 version in classpath.", e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,118,private final ConcurrentMap<T2<String, AffinityTopologyVersion>, GridReservable> reservations =
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,119,new ConcurrentHashMap8<>();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,284,final T2<String,AffinityTopologyVersion> grpKey =
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,285,new T2<>(cctx.name(), cctx.isReplicated() ? null : topVer);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,290,if (r != ReplicatedReservation.INSTANCE) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,311,reservations.putIfAbsent(grpKey, ReplicatedReservation.INSTANCE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,556,QueryResult res = qr.result(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,560,int page = res.page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,578,res.cols,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,579,loc ? null : toMessages(rows, new ArrayList<Message>(res.cols)),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,620,for (T2<String,AffinityTopologyVersion> grpKey : reservations.keySet()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,629,private class QueryResults {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,631,private final long qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,634,private final AtomicReferenceArray<QueryResult> results;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,640,private volatile boolean canceled;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,648,this.qryReqId = qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,651,results = new AtomicReferenceArray<>(qrys);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,658,QueryResult result(int qry) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,659,return results.get(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,670,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,676,boolean isAllClosed() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,677,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,678,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,681,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,684,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,689,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,691,canceled = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,693,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,694,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,697,res.close();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,705,private class QueryResult implements AutoCloseable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,707,private final ResultInterface res;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,710,private final ResultSet rs;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,716,private final GridCacheSqlQuery qry;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,719,private final UUID qrySrcNodeId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,722,private final int cols;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,725,private int page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,731,private volatile boolean closed;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,742,this.qry = qry;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,743,this.qrySrcNodeId = qrySrcNodeId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,761,synchronized boolean fetchNextPage(List<Value[]> rows, int pageSize) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,763,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,767,page++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,769,for (int i = 0 ; i < pageSize; i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,771,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,773,Value[] row = res.currentRow();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,775,assert row != null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,777,if (readEvt) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,781,EVT_CACHE_QUERY_OBJECT_READ,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,782,CacheQueryType.SQL.name(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,784,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,785,qry.query(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,786,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,787,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,789,qrySrcNodeId,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,790,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,791,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,792,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,793,null,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,794,row(row)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,797,rows.add(res.currentRow());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,800,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,807,private List<?> row(Value[] row) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,808,List<Object> res = new ArrayList<>(row.length);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,811,res.add(v.getObject());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,813,return res;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,819,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,821,closed = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,832,U.close(rs, log);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,840,private static class ReplicatedReservation implements GridReservable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,842,static final ReplicatedReservation INSTANCE = new ReplicatedReservation();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,846,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,851,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,51,public GridLuceneDirectory(GridUnsafeMemory mem) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,69,List<String> names = new ArrayList<>(fileNames.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,72,names.add(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,118,doDeleteFile(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,127,private void doDeleteFile(String name) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,145,GridLuceneFile existing = fileMap.remove(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,153,fileMap.put(name, file);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,186,doDeleteFile(fileName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,189,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,20,import java.io.Serializable;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,22,import java.util.concurrent.atomic.AtomicInteger;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,29,public class GridLuceneFile implements Serializable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,31,private static final long serialVersionUID = 0L;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,34,public static final AtomicInteger filesCnt = new AtomicInteger();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,56,filesCnt.incrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,101,protected final synchronized long getBuffer(int idx) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,108,protected final synchronized int numBuffers() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,118,protected long newBuffer() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,125,public synchronized void delete() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,134,filesCnt.decrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,140,public long getSizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,294,U.closeQuiet(dir);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,31,public class GridLuceneInputStream extends IndexInput {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,28,public class GridLuceneOutputStream extends IndexOutput {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,273,if (!markObsolete(dhtVer)) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,905,return Integer.highestOneBit(v - 1) << 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1042,ctx.ttl().expire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1182,exchFut.init();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,483,public void init() throws IgniteInterruptedCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1231,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1360,GridCacheQueryAdapter<?> qry = qryInfo.query();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1452,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4109,U.addLastCause(e, e1, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2233,tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/cache/CacheManager.java,46,import org.apache.ignite.internal.processors.cache.IgniteCacheProxy;
modules/core/src/main/java/org/apache/ignite/cache/CacheManager.java,177,((IgniteCacheProxy<K, V>)res).setCacheManager(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,929,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1686,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2886,return jCacheProxies.values();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2999,return (IgniteCacheProxy<K, V>)cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3091,for (Map.Entry<String, IgniteCacheProxy<?, ?>> entry : jCacheProxies.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3093,res.add(entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,25,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,26,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,28,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,29,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,30,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,31,import java.util.NoSuchElementException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,32,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,34,import java.util.concurrent.locks.Lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,35,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,36,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,37,import javax.cache.configuration.CacheEntryListenerConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,38,import javax.cache.configuration.Configuration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,39,import javax.cache.expiry.ExpiryPolicy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,40,import javax.cache.integration.CompletionListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,41,import javax.cache.processor.EntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,42,import javax.cache.processor.EntryProcessorException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,43,import javax.cache.processor.EntryProcessorResult;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,45,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,46,import org.apache.ignite.IgniteException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,47,import org.apache.ignite.cache.CacheEntryProcessor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,48,import org.apache.ignite.cache.CacheManager;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,49,import org.apache.ignite.cache.CacheMetrics;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,50,import org.apache.ignite.cache.CachePeekMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,51,import org.apache.ignite.cache.query.ContinuousQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,52,import org.apache.ignite.cache.query.Query;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,53,import org.apache.ignite.cache.query.QueryCursor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,54,import org.apache.ignite.cache.query.QueryMetrics;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,55,import org.apache.ignite.cache.query.ScanQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,56,import org.apache.ignite.cache.query.SpiQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,57,import org.apache.ignite.cache.query.SqlFieldsQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,58,import org.apache.ignite.cache.query.SqlQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,59,import org.apache.ignite.cache.query.TextQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,60,import org.apache.ignite.cluster.ClusterGroup;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,62,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,63,import org.apache.ignite.internal.AsyncSupportAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,64,import org.apache.ignite.internal.IgniteEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,65,import org.apache.ignite.internal.IgniteInternalFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,66,import org.apache.ignite.internal.processors.cache.query.CacheQuery;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,67,import org.apache.ignite.internal.processors.cache.query.CacheQueryFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,69,import org.apache.ignite.internal.util.GridCloseableIteratorAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,71,import org.apache.ignite.internal.util.future.IgniteFutureImpl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,72,import org.apache.ignite.internal.util.lang.GridClosureException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,73,import org.apache.ignite.internal.util.lang.IgniteOutClosureX;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,74,import org.apache.ignite.internal.util.tostring.GridToStringExclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,75,import org.apache.ignite.internal.util.tostring.GridToStringInclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,76,import org.apache.ignite.internal.util.typedef.CI1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,77,import org.apache.ignite.internal.util.typedef.CX1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,78,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,79,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,80,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,81,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,82,import org.apache.ignite.lang.IgniteBiPredicate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,84,import org.apache.ignite.mxbean.CacheMetricsMXBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,85,import org.apache.ignite.plugin.security.SecurityPermission;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,87,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,92,public class IgniteCacheProxy<K, V> extends AsyncSupportAdapter<IgniteCache<K, V>>
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,93,implements IgniteCache<K, V>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,95,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,115,private CacheOperationContext opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,119,private GridCacheProxyImpl<K, V> internalProxy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,123,private CacheManager cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,127,private boolean lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,132,public IgniteCacheProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,142,public IgniteCacheProxy(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,143,GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,144,IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,145,CacheOperationContext opCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,146,boolean async
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,147,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,148,this(ctx, delegate, opCtx, async, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,158,private IgniteCacheProxy(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,159,GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,160,IgniteInternalCache<K, V> delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,162,boolean async,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,163,boolean lock
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,164,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,165,super(async);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,167,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,168,assert delegate != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,170,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,171,this.delegate = delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,172,this.opCtx = opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,174,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,176,internalProxy = new GridCacheProxyImpl<>(ctx, delegate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,178,this.lock = lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,185,return opCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,194,public IgniteCacheProxy<K, V> cacheNoGate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,195,return new IgniteCacheProxy<>(ctx, delegate, opCtx, isAsync(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,201,public GridCacheContext<K, V> context() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,202,return ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,208,public GridCacheGateway<K, V> gate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,209,return gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,214,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,216,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,218,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,221,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,222,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,228,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,230,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,232,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,262,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,263,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,286,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,287,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,293,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,295,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,297,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,298,CacheOperationContext prj0 = opCtx != null ? opCtx.withExpiryPolicy(plc) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,301,return new IgniteCacheProxy<>(ctx, delegate, prj0, isAsync(), lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,303,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,304,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,310,return skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,315,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,317,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,319,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,320,boolean noRetries = opCtx != null && opCtx.noRetries();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,323,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,325,CacheOperationContext opCtx0 = opCtx != null ? opCtx.setNoRetries(true) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,328,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,329,delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,330,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,331,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,332,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,334,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,335,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,341,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,342,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,344,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,346,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,363,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,364,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,366,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,368,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,370,setFuture(delegate.localLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,371,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,372,delegate.localLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,374,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,375,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,378,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,379,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,385,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,386,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,388,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,390,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,391,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,392,setFuture(delegate.getAndPutIfAbsentAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,394,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,396,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,397,return delegate.getAndPutIfAbsent(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,399,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,400,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,403,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,404,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,410,return lockAll(Collections.singleton(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,415,return new CacheLockImpl<>(gate, delegate, opCtx, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,420,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,422,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,424,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,425,return byCurrThread ? delegate.isLockedByThread(key) : delegate.isLocked(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,427,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,428,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,439,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,462,TextQuery p = (TextQuery)filter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,467,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,470,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K, V>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,472,return qry.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,476,else if (filter instanceof SpiQuery) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,480,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,485,return qry.execute(((SpiQuery)filter).getArgs());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,489,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,491,throw new CacheException("Use methods 'queryFields' and 'localQueryFields' for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,492,SqlFieldsQuery.class.getSimpleName() + ".");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,494,throw new CacheException("Unsupported query type: " + filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,503,throw new NoSuchElementException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,507,cur = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,517,fut.cancel();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,526,private ClusterGroup projection(boolean loc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,528,return ctx.kernalContext().grid().cluster().forLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,531,return ctx.kernalContext().grid().cluster().forDataNodes(ctx.name()).forRandom();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,533,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,546,throw new IgniteException("Initial predicate for continuous query can't be an instance of another " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,550,throw new IgniteException("Mandatory local listener is not set for the query: " + qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,552,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,553,final UUID routineId = ctx.continuousQueries().executeQuery(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,554,qry.getLocalListener(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,555,qry.getRemoteFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,556,qry.getPageSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,557,qry.getTimeInterval(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,558,qry.isAutoUnsubscribe(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,561,final QueryCursor<Cache.Entry<K, V>> cur =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,562,qry.getInitialQuery() != null ? query(qry.getInitialQuery()) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,564,return new QueryCursor<Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,570,return cur != null ? cur.getAll() : Collections.<Cache.Entry<K, V>>emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,575,cur.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,577,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,578,ctx.kernalContext().continuous().stopRoutine(routineId).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,580,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,581,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,586,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,587,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,594,A.notNull(qry, "qry");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,596,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,598,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,600,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,601,ctx.checkSecurity(SecurityPermission.CACHE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,603,validate(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,632,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,634,throw (CacheException)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,636,throw new CacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,638,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,639,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,656,private void validate(Query qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,659,throw new CacheException("Indexing is disabled for cache: " + ctx.cache().name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,662,if (!ctx.kernalContext().query().moduleEnabled() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,664,throw new CacheException("Failed to execute query. Add module 'ignite-indexing' to the classpath " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,670,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,672,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,674,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,675,return delegate.localEntries(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,677,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,678,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,680,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,681,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,687,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,689,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,691,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,692,return delegate.context().queries().metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,694,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,695,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,732,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,744,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,745,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,751,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,753,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,755,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,756,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,757,setFuture(delegate.sizeAsync(peekModes));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,759,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,761,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,762,return delegate.size(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,764,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,765,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,767,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,768,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,791,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,792,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,794,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,796,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,797,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,798,setFuture(delegate.getAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,800,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,802,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,803,return delegate.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,805,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,806,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,809,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,810,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,816,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,817,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,819,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,821,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,822,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,823,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,825,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,827,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,828,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,830,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,831,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,834,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,835,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,841,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,842,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,844,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,846,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,847,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,848,setFuture(delegate.getAllOutTxAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,850,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,852,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,853,return delegate.getAllOutTx(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,855,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,856,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,859,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,860,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,868,public Map<K, V> getAll(Collection<? extends K> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,869,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,870,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,872,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,874,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,875,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,876,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,878,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,880,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,881,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,883,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,884,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,887,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,888,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,899,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,901,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,903,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,906,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,907,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,933,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,935,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,937,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,938,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,939,setFuture(delegate.containsKeysAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,941,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,943,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,944,return delegate.containsKeys(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,946,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,947,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,953,Set<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,954,boolean replaceExisting,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,956,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,957,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,959,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,961,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,962,IgniteInternalFuture<?> fut = ctx.cache().loadAll(keys, replaceExisting);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,964,if (completionLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,965,fut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,967,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,968,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,970,completionLsnr.onCompletion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,972,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,973,completionLsnr.onException(cacheException(e));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,979,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,980,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,986,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,987,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,989,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,991,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1010,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1011,delegate.put(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1013,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1014,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1017,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1018,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1024,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1025,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1027,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1029,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1030,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1031,setFuture(delegate.getAndPutAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1033,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1035,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1036,return delegate.getAndPut(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1038,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1039,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1042,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1043,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1049,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1050,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1052,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1054,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1056,setFuture(delegate.putAllAsync(map));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1057,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1058,delegate.putAll(map);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1060,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1061,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1064,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1065,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1071,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1072,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1074,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1076,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1077,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1078,setFuture(delegate.putIfAbsentAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1080,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1082,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1083,return delegate.putIfAbsent(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1085,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1086,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1089,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1090,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1096,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1097,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1099,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1101,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1102,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1103,setFuture(delegate.removeAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1105,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1107,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1108,return delegate.remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1110,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1111,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1114,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1115,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1121,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1122,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1124,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1126,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1127,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1128,setFuture(delegate.removeAsync(key, oldVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1130,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1132,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1133,return delegate.remove(key, oldVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1135,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1136,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1139,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1140,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1146,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1147,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1149,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1151,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1152,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1153,setFuture(delegate.getAndRemoveAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1155,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1157,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1158,return delegate.getAndRemove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1160,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1161,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1164,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1165,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1171,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1172,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1174,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1176,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1177,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1178,setFuture(delegate.replaceAsync(key, oldVal, newVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1180,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1182,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1183,return delegate.replace(key, oldVal, newVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1185,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1186,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1189,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1190,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1196,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1197,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1199,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1201,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1202,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1203,setFuture(delegate.replaceAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1205,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1207,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1208,return delegate.replace(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1210,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1211,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1214,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1215,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1221,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1222,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1224,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1226,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1227,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1228,setFuture(delegate.getAndReplaceAsync(key, val));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1230,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1232,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1233,return delegate.getAndReplace(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1235,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1236,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1239,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1240,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1246,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1247,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1249,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1251,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1253,setFuture(delegate.removeAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1254,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1255,delegate.removeAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1268,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1270,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1272,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1274,setFuture(delegate.removeAllAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1275,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1276,delegate.removeAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1278,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1279,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1281,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1282,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1288,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1290,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1292,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1294,setFuture(delegate.clearAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1295,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1296,delegate.clear(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1298,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1299,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1301,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1302,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1308,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1310,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1312,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1315,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1316,delegate.clearAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1318,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1319,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1321,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1322,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1328,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1330,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1332,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1334,setFuture(delegate.clearAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1335,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1336,delegate.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1338,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1339,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1341,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1342,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1348,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1350,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1352,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1353,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1355,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1356,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1362,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1364,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1366,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1368,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1370,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1371,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1377,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1378,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1379,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1381,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1383,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1384,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1403,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1405,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1406,EntryProcessorResult<T> res = delegate.invoke(key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1408,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1411,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1412,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1415,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1416,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1422,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1423,return invoke(key, (EntryProcessor<K, V, T>)entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1428,EntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1429,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1430,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1431,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1433,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1435,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1436,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1437,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1439,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1441,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1442,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1444,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1445,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1448,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1449,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1455,CacheEntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1456,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1457,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1458,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1460,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1462,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1463,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1464,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1466,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1468,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1469,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1471,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1472,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1475,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1476,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1482,Map<? extends K, ? extends EntryProcessor<K, V, T>> map,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1483,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1484,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1485,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1487,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1489,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1490,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1491,setFuture(delegate.invokeAllAsync(map, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1493,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1495,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1496,return delegate.invokeAll(map, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1498,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1499,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1502,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1503,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1509,return delegate.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1514,return cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1520,public void setCacheManager(CacheManager cacheMgr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1521,this.cacheMgr = cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1526,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1529,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1531,IgniteInternalFuture<?> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1533,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1536,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1537,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1540,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1541,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1543,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1544,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1550,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1553,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1555,IgniteInternalFuture<?> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1557,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1558,fut = ctx.kernalContext().cache().dynamicCloseCache(ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1560,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1561,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1564,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1565,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1567,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1568,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1574,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1577,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1579,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1580,return ctx.kernalContext().cache().context().closed(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1582,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1583,onLeave(gate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1590,public IgniteInternalCache delegate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1591,return delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1598,return (T)this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1600,return (T)ctx.grid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1602,throw new IllegalArgumentException("Unwrapping to class is not supported: " + clazz);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1607,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1609,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1611,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1614,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1615,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1617,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1618,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1624,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1626,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1628,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1629,ctx.continuousQueries().cancelJCacheQuery(lsnrCfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1631,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1632,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1634,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1635,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1641,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1643,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1645,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1646,return ctx.cache().igniteIterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1648,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1649,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1655,return new IgniteCacheProxy<>(ctx, delegate, opCtx, true, lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1683,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1685,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1687,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1688,CacheOperationContext opCtx0 =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1689,new CacheOperationContext(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1690,opCtx != null && opCtx.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1691,opCtx != null ? opCtx.subjectId() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1692,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1693,opCtx != null ? opCtx.expiry() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1696,return new IgniteCacheProxy<>((GridCacheContext<K1, V1>)ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1710,public IgniteCache<K, V> skipStore() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1711,GridCacheGateway<K, V> gate = this.gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1713,CacheOperationContext prev = onEnter(gate, opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1715,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1716,boolean skip = opCtx != null && opCtx.skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1719,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1721,CacheOperationContext opCtx0 =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1722,new CacheOperationContext(true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1723,opCtx != null ? opCtx.subjectId() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1725,opCtx != null ? opCtx.expiry() : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1728,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1729,delegate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1730,opCtx0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1731,isAsync(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1732,lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1734,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1735,onLeave(gate, prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1743,private RuntimeException cacheException(IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1744,return CU.convertToCacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1750,private <R> void setFuture(IgniteInternalFuture<R> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1757,public GridCacheProxyImpl<K, V> internalProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1758,return internalProxy;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1764,public boolean proxyClosed() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1765,return !gate.getClass().equals(GridCacheGateway.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1771,public void closeProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1772,gate = new GridCacheGateway<K, V>(ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1774,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1778,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1782,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1786,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1790,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1794,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1798,throw new IllegalStateException("Cache has been closed: " + ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1802,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1806,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1824,private CacheOperationContext onEnter(GridCacheGateway<K, V> gate, CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1835,private boolean onEnterIfNoStop(GridCacheGateway<K, V> gate) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1846,private void onLeave(GridCacheGateway<K, V> gate, CacheOperationContext opCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1848,gate.leave(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1849,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1850,gate.leaveNoLock(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1856,private void onLeave(GridCacheGateway<K, V> gate) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1858,gate.leave();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1859,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1860,gate.leaveNoLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1865,out.writeObject(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1867,out.writeObject(delegate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1869,out.writeObject(opCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1871,out.writeBoolean(lock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1877,ctx = (GridCacheContext<K, V>)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1879,delegate = (IgniteInternalCache<K, V>)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1881,opCtx = (CacheOperationContext)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1883,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1885,lock = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1897,return S.toString(IgniteCacheProxy.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/dr/IgniteDrDataStreamerCacheUpdater.java,65,CacheOperationContext opCtx = ((IgniteCacheProxy)cache0).operationContext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,835,assert !sesHolder.get().ended(store);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,837,store.sessionEnd(!threwEx);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1674,cancelledJobs.remove(worker.getJobId(), worker);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1676,heldJobs.remove(worker.getJobId());
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,40,private final IgniteThread timeoutWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,66,new TimeoutWorker());
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,71,timeoutWorker.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,79,U.interrupt(timeoutWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,173,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,301,sessionEnd0(tx, threwEx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,36,public class GridLuceneDirectory extends Directory {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,52,this.mem = mem;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,54,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,55,setLockFactory(new GridLuceneLockFactory());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,57,catch (IOException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,58,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,79,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,81,return fileMap.containsKey(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,88,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,97,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,99,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,40,import org.apache.lucene.document.DateTools;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,47,import org.apache.lucene.queryParser.MultiFieldQueryParser;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,48,import org.apache.lucene.search.Filter;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,51,import org.apache.lucene.search.TermRangeFilter;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,53,import org.apache.lucene.util.Version;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,112,writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_30, new StandardAnalyzer(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,113,Version.LUCENE_30)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,175,doc.add(new Field(VAL_STR_FIELD_NAME, val.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,184,doc.add(new Field(idxdFields[i], fieldVal.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,190,String keyStr = org.apache.commons.codec.binary.Base64.encodeBase64String(k.valueBytes(coctx));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,194,writer.deleteDocuments(new Term(KEY_FIELD_NAME, keyStr));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,199,doc.add(new Field(KEY_FIELD_NAME, keyStr, Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,202,doc.add(new Field(VAL_FIELD_NAME, v.valueBytes(coctx)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,206,doc.add(new Field(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(expires,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,207,DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,209,writer.addDocument(doc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,228,org.apache.commons.codec.binary.Base64.encodeBase64String(key.valueBytes(objectContext()))));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,259,reader = IndexReader.open(writer, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,267,MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_30, idxdFields,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,271,Filter f = new TermRangeFilter(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(U.currentTimeMillis(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,272,DateTools.Resolution.MILLISECOND), null, false, false);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,277,docs = searcher.search(parser.parse(qry), f, Integer.MAX_VALUE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,354,return filters == null || filters.apply(key, val) ;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,395,K k = unmarshall(org.apache.commons.codec.binary.Base64.decodeBase64(doc.get(KEY_FIELD_NAME)), ldr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,399,this.<V>unmarshall(doc.getBinaryValue(VAL_FIELD_NAME), ldr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,428,U.closeQuiet(searcher);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,24,import org.apache.lucene.store.IndexOutput;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,68,length = file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,153,assert numBytes >= 0 : "numBytes=" + numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,155,GridLuceneOutputStream gridOut = out instanceof GridLuceneOutputStream ? (GridLuceneOutputStream)out : null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,157,long left = numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,159,while (left > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,160,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,161,++currBufIdx;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,163,switchCurrentBuffer(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,166,final int bytesInBuf = bufLength - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,167,final int toCp = (int)(bytesInBuf < left ? bytesInBuf : left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,170,gridOut.writeBytes(currBuf + bufPosition, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,171,else {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,172,byte[] buff = new byte[toCp];
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,174,mem.readBytes(currBuf + bufPosition, buff);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,176,out.writeBytes(buff, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,179,bufPosition += toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,181,left -= toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,184,assert left == 0 : "Insufficient bytes to copy: numBytes=" + numBytes + " copied=" + (numBytes - left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,35,return new LockImpl(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,40,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,59,return locks.add(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,64,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,69,return locks.contains(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,91,setFileLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,93,if (pos < bufStart || pos >= bufStart + bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,94,currBufIdx = (int)(pos / BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,96,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,99,bufPosition = (int)(pos % BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,104,return file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,177,public long sizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,178,return (long)file.numBuffers() * (long)BUFFER_SIZE;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,221,void writeBytes(long ptr, int len) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,222,while (len > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,223,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,224,currBufIdx++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,225,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,228,int remainInBuf = BUFFER_SIZE - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,229,int bytesToCp = len < remainInBuf ? len : remainInBuf;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,231,mem.copyMemory(ptr, currBuf + bufPosition, bytesToCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,233,ptr += bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,234,len -= bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,235,bufPosition += bytesToCp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,540,if (node2part != null && node2part.compareTo(partMap) >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,542,log.debug("Stale partition map for full partition map update (will ignore) [lastExchId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,548,updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,559,if (newPart != null && newPart.updateSequence() < part.updateSequence()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,562,mapString(part) + ", newPart=" + mapString(newPart) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,35,implements Comparable<GridDhtPartitionFullMap>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,154,assert nodeId == null || (nodeOrder != o.nodeOrder && !nodeId.equals(o.nodeId)) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,155,(nodeOrder == o.nodeOrder && nodeId.equals(o.nodeId)): "Inconsistent node order and ID [id1=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,159,return -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,161,return 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,163,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,165,int res = Long.compare(nodeOrder, o.nodeOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,168,res = Long.compare(updateSeq, o.updateSeq);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,170,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,62,private Collection<Integer> last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,139,Collection<Integer> last() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,140,return last == null ? Collections.<Integer>emptySet() : last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,146,void last(int p) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,148,last = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,150,if (last.add(p)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,151,msgSize += 4;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1294,onReassignmentFailed(topVer, retries);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,382,return mtd.invoke(svcCtx.service(), args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1949,if (loaded.size() != loadKeys.size()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1952,continue;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,21,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,22,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,23,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,24,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,98,private final Lock lock = new ReentrantLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,233,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,392,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,398,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,491,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,493,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,494,curLocVal = locVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,505,long curGlobalVal = seq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,507,long newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,510,long off = batchSize > 1 ? batchSize - 1 : 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,513,if (curLocVal + l >= curGlobalVal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,514,newLocVal = curLocVal + l;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,516,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,518,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,519,newLocVal = curGlobalVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,521,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,524,locVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,525,upBound = newUpBound;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,528,curLocVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,530,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,531,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,409,U.cancel(exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,412,log.debug("Before joining on exchange worker: " + exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,414,U.join(exchWorker, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,40,import org.apache.ignite.internal.processors.cache.CacheObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,51,import org.apache.ignite.internal.processors.cache.GridCacheValueCollection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,334,return nearEntries().size() + dht().size();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,111,catch (Exception eventsEx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,149,catch (Exception cachesEx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,184,catch (Exception igfssEx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,243,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,113,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,183,int taskNameHash
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,184,) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,53,Map<IgniteUuid, VisorCacheConfiguration> res = U.newHashMap(caches.size());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,56,IgniteUuid deploymentId = cache.context().dynamicDeploymentId();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,59,res.put(deploymentId, config(cache.getConfiguration(CacheConfiguration.class)));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfigurationCollectorJob.java,69,protected VisorCacheConfiguration config(CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,504,return cctx.affinityNode() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,505,Collections.singletonList(cctx.localNode()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,506,Collections.singletonList(F.rand(nodes(cctx, null, null)));
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,374,String fmt = "[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/shuffle/streams/HadoopOffheapBuffer.java,95,assert size > 0 : size;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1693,assert req.stop() || req.close() : req;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1721,Throwable err
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,62,import org.apache.ignite.internal.processors.cache.CachePeekModes;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,480,ctx.security().authorize(taskClsName, SecurityPermission.TASK_EXECUTE, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,684,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS,
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/GridTopologyCommandHandler.java,39,import org.apache.ignite.internal.processors.rest.client.message.GridClientNodeBean;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3254,node.<byte[]>attribute(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1143,boolean escapeAll = schema.escapeAll();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1442,createSchema(schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1444,createSqlFunctions(schema, ccfg.getSqlFunctionClasses());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,186,final String cacheName = req0.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java,149,IgniteCache<Object, Object> cache = ctx.grid().cache(req.cacheName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/QueryCursorImpl.java,31,public class QueryCursorImpl<T> implements QueryCursorEx<T> {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,37,private static final long RETRY_TIMEOUT = 3000;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,135,U.warn(log, "Failed to get item, will retry poll [queue=" + queueName + ", idx=" + idx + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1747,final int reachTimeout = 2000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,25,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,26,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2463,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,18,package org.apache.ignite.internal.processors.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,25,public class GridCacheTryPutFailedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,27,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,394,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,398,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,399,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,904,opCtx != null && opCtx.noRetries() ? 1 : MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,905,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2371,MAX_RETRIES,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2372,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java,61,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,45,import org.apache.ignite.internal.processors.cache.GridCacheTryPutFailedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,187,int remapCnt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,188,boolean waitTopFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,322,assert res == null || res instanceof GridCacheReturn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,324,GridCacheReturn ret = (GridCacheReturn)res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,326,Object retval =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,330,retval = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,332,if (super.onDone(retval, err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,338,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,53,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,148,public static final int SKIP_STORE_FLAG_MASK = 0x1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockRequest.java,42,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.SKIP_STORE_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,57,import static org.apache.ignite.internal.processors.cache.GridCacheUtils.SKIP_STORE_FLAG_MASK;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,729,if (perNodeCnt > maxPerNodeCnt && maxPerNodeCnt != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4015,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4022,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4186,fut.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4203,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4246,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4270,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4289,protected void saveFuture(final FutureHolder holder, IgniteInternalFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4299,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4304,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4847,public void execute() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4888,execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,619,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,643,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,650,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,62,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxLocalAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1565,IgniteInternalFuture fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1585,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1592,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeBean.java,257,out.writeObject(consistentId);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,724,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,738,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,772,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,777,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,959,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,964,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,27,private static ThreadLocal<Boolean> threadProcMsg = new ThreadLocal<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,29,return Boolean.FALSE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,42,return threadProcMsg.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,48,public static void threadProcessingMessage(boolean processing) {
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,66,import org.apache.ignite.spi.eventstorage.memory.MemoryEventStorageSpi;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,91,import org.apache.ignite.spi.eventstorage.memory.MemoryEventStorageSpi;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1907,cfg.setEventStorageSpi(new MemoryEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,787,public <T extends Event> Collection<T> localEvents(IgnitePredicate<T> p) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,428,rmts = ring.visibleRemoteNodes();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,448,List<ClusterNode> top = U.arrayList(rmts, F.notIn(processed));
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,194,private IgniteConfiguration loadConfiguration(String cfgUrl) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcConnection.java,204,return cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1367,private abstract class BusyRunnable implements Runnable {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1385,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,39,import java.util.NavigableMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,41,import java.util.TreeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,85,import org.apache.ignite.internal.util.lang.GridTuple5;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,87,import org.apache.ignite.internal.util.tostring.GridToStringInclude;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,88,import org.apache.ignite.internal.util.typedef.C1;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,100,import org.apache.ignite.lang.IgniteProductVersion;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,233,private GridFutureAdapter<DiscoveryEvent> locJoinEvt = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,544,DiscoCache cache = new DiscoCache(locNode, F.view(topSnapshot, F.remoteNodes(locNode.id())));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,546,discoCacheHist.put(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,548,boolean set = updateTopologyVersionIfGreater(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,571,discoEvt.topologySnapshot(topVer, new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,572,F.viewReadOnly(topSnapshot, new C1<ClusterNode, ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,574,return e;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,578,locJoinEvt.onDone(discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,593,locJoinEvt = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,612,discoWrk.addEvent(type, nextTopVer, node, topSnapshot, null);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1193,locJoinEvt.onDone(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1446,return resolveDiscoCache(cacheName, topVer).cacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1455,public Collection<ClusterNode> cacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1456,return resolveDiscoCache(null, topVer).allNodesWithCaches(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1476,public Collection<ClusterNode> remoteCacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1477,return resolveDiscoCache(null, topVer).remoteCacheNodes(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1488,return resolveDiscoCache(cacheName, topVer).aliveCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1499,return resolveDiscoCache(cacheName, topVer).aliveRemoteCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1540,return resolveDiscoCache(cacheName, topVer).cacheAffinityNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1596,public boolean hasNearCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1597,return resolveDiscoCache(cacheName, topVer).hasNearCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1607,private DiscoCache resolveDiscoCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1622,throw new IgniteException("Failed to resolve nodes topology [cacheName=" + cacheName +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1671,return locJoinEvt.get();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1845,discoWrk.addEvent(EVT_NODE_SEGMENTED, AffinityTopologyVersion.NONE, getSpi().getLocalNode(),
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1846,Collections.<ClusterNode>emptyList(), null);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1866,private final BlockingQueue<GridTuple5<Integer, AffinityTopologyVersion, ClusterNode, Collection<ClusterNode>,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1867,DiscoveryCustomMessage>> evts = new LinkedBlockingQueue<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1888,private void recordEvent(int type, long topVer, ClusterNode node, Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1924,ctx.event().record(evt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1981,GridTuple5<Integer, AffinityTopologyVersion, ClusterNode, Collection<ClusterNode>,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2115,customEvt.customMessage(evt.get5());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2117,ctx.event().record(customEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2131,recordEvent(type, topVer.topologyVersion(), node, evt.get4());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2342,private class DiscoCache {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2344,private final List<ClusterNode> rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2347,private final List<ClusterNode> allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2351,private final Collection<ClusterNode> allNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2355,private final Collection<ClusterNode> rmtNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2359,private final Map<String, Collection<ClusterNode>> allCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2363,private final Map<String, Collection<ClusterNode>> rmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2367,private final Map<String, Collection<ClusterNode>> affCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2371,private final Set<String> nearEnabledCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2374,private final NavigableMap<IgniteProductVersion, Collection<ClusterNode>> nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2377,private final List<ClusterNode> daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2380,private final Map<UUID, ClusterNode> nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2383,private final ClusterNode loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2386,private final long maxOrder;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2392,private final ConcurrentMap<String, Collection<ClusterNode>> aliveCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2398,private final ConcurrentMap<String, Collection<ClusterNode>> aliveRmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2419,private DiscoCache(ClusterNode loc, Collection<ClusterNode> rmts) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2420,this.loc = loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2424,assert !rmtNodes.contains(loc) : "Remote nodes collection shouldn't contain local node" +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2427,List<ClusterNode> all = new ArrayList<>(rmtNodes.size() + 1);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2430,all.add(loc);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2432,all.addAll(rmtNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2434,Collections.sort(all, GridNodeOrderComparator.INSTANCE);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2436,allNodes = Collections.unmodifiableList(all);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2438,Map<String, Collection<ClusterNode>> cacheMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2439,Map<String, Collection<ClusterNode>> rmtCacheMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2440,Map<String, Collection<ClusterNode>> dhtNodesMap = new HashMap<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2441,Collection<ClusterNode> nodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2442,Collection<ClusterNode> rmtNodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2444,aliveCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2445,aliveRmtCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2449,nodesByVer = new TreeMap<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2451,long maxOrder0 = 0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2453,Set<String> nearEnabledSet = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2455,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2456,assert node.order() != 0 : "Invalid node order [locNode=" + loc + ", node=" + node + ']';
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2459,maxOrder0 = node.order();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2461,boolean hasCaches = false;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2463,for (Map.Entry<String, CachePredicate> entry : registeredCaches.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2464,String cacheName = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2466,CachePredicate filter = entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2468,if (filter.cacheNode(node)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2469,nodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2472,rmtNodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2474,addToMap(cacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2477,addToMap(aliveCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2480,addToMap(dhtNodesMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2483,nearEnabledSet.add(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2485,if (!loc.id().equals(node.id())) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2486,addToMap(rmtCacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2489,addToMap(aliveRmtCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2492,hasCaches = true;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2509,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2512,Collection<ClusterNode> nodes = nodesByVer.get(nodeVer);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2514,if (nodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2515,nodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2517,nodesByVer.put(nodeVer, nodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2520,nodes.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2524,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2525,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2528,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> updateView =
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2529,nodesByVer.headMap(nodeVer, false);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2532,prevVersions.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2535,maxOrder = maxOrder0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2537,allCacheNodes = Collections.unmodifiableMap(cacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2538,rmtCacheNodes = Collections.unmodifiableMap(rmtCacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2539,affCacheNodes = Collections.unmodifiableMap(dhtNodesMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2540,allNodesWithCaches = Collections.unmodifiableCollection(nodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2541,this.rmtNodesWithCaches = Collections.unmodifiableCollection(rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2542,nearEnabledCaches = Collections.unmodifiableSet(nearEnabledSet);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2544,daemonNodes = Collections.unmodifiableList(new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2547,Map<UUID, ClusterNode> nodeMap = new HashMap<>(allNodes().size() + daemonNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2550,nodeMap.put(n.id(), n);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2552,this.nodeMap = nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2562,private void addToMap(Map<String, Collection<ClusterNode>> cacheMap, String cacheName, ClusterNode rich) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2563,Collection<ClusterNode> cacheNodes = cacheMap.get(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2565,if (cacheNodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2566,cacheNodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2568,cacheMap.put(cacheName, cacheNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2571,cacheNodes.add(rich);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2575,ClusterNode localNode() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2576,return loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2580,Collection<ClusterNode> remoteNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2581,return rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2585,Collection<ClusterNode> allNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2586,return allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2595,Collection<ClusterNode> elderNodes(IgniteProductVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2596,Map.Entry<IgniteProductVersion, Collection<ClusterNode>> entry = nodesByVer.ceilingEntry(ver);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2599,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2601,return entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2607,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> versionsMap() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2608,return nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2617,Collection<ClusterNode> allNodesWithCaches(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2618,return filter(topVer, allNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2628,Collection<ClusterNode> cacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2629,return filter(topVer, allCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2649,Collection<ClusterNode> remoteCacheNodes(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2650,return filter(topVer, rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2661,Collection<ClusterNode> cacheAffinityNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2662,return filter(topVer, affCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2672,Collection<ClusterNode> aliveCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2673,return filter(topVer, aliveCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2683,Collection<ClusterNode> aliveRemoteCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2684,return filter(topVer, aliveRmtCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2723,boolean hasNearCache(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2724,return nearEnabledCaches.contains(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2732,void updateAlives(ClusterNode leftNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2734,return;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2736,filterNodeMap(aliveCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2738,filterNodeMap(aliveRmtCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2741,aliveSrvNodesWithCaches.remove(leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2751,private void filterNodeMap(ConcurrentMap<String, Collection<ClusterNode>> map, final ClusterNode exclNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2752,for (String cacheName : registeredCaches.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2753,String maskedName = maskNull(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2755,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2756,Collection<ClusterNode> oldNodes = map.get(maskedName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2759,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2761,Collection<ClusterNode> newNodes = new ArrayList<>(oldNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2764,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2767,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2778,private String maskNull(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2779,return cacheName == null ? NULL_CACHE_NAME : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2787,private Collection<ClusterNode> filter(final long topVer, @Nullable Collection<ClusterNode> nodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2789,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2792,return nodes.isEmpty() || topVer < 0 || topVer >= maxOrder ?
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2793,nodes :
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2794,F.view(nodes, new P1<ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2796,return node.order() <= topVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2802,Collection<ClusterNode> daemonNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2803,return daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2811,return nodeMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2816,return S.toString(DiscoCache.class, this, "allNodesWithDaemons", U.toShortString(allNodes));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,573,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,598,getOrCreate(type).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,605,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,621,private Collection<GridLocalEventListener> getOrCreate(Integer type) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,622,Set<GridLocalEventListener> set = lsnrs.get(type);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,627,Set<GridLocalEventListener> prev = lsnrs.putIfAbsent(type, set);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,175,public List<List<ClusterNode>> calculate(AffinityTopologyVersion topVer, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,196,sorted = new ArrayList<>(ctx.discovery().cacheAffinityNodes(cacheName, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,40,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,47,import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,154,private final GridLocalEventListener discoLsnr = new GridLocalEventListener() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,160,DiscoveryEvent e = (DiscoveryEvent)evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,164,assert e.type() == EVT_NODE_JOINED || e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,165,e.type() == EVT_DISCOVERY_CUSTOM_EVT;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,167,final ClusterNode n = e.eventNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,172,if (e.type() != EVT_DISCOVERY_CUSTOM_EVT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,175,if (e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,183,e.type() != EVT_NODE_JOINED || n.order() > loc.order() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,188,affinityTopologyVersion(e),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,189,e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,194,DiscoveryCustomEvent customEvt = (DiscoveryCustomEvent)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,210,exchId = exchangeId(n.id(), affinityTopologyVersion(e), e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,222,exchFut.onEvent(exchId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,259,cctx.gridEvents().addLocalEventListener(discoLsnr, EVT_NODE_JOINED, EVT_NODE_LEFT, EVT_NODE_FAILED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,302,DiscoveryEvent discoEvt = cctx.discovery().localJoinEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,381,cctx.gridEvents().removeLocalEventListener(discoLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,803,fut.onEvent(exchId, discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,45,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,399,ClusterNode n = cctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,425,Collection<UUID> allIds = topVer.topologyVersion() > 0 ? F.nodeIds(CU.allNodes(cctx, topVer)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,448,ClusterNode n = cctx.discovery().node(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,734,Collection<UUID> allIds = topVer.topologyVersion() > 0 ? F.nodeIds(CU.affinityNodes(cctx, topVer)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1041,Collection<UUID> nodeIds = F.nodeIds(nodes(p, topVer, OWNING));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1059,List<ClusterNode> sorted = new ArrayList<>(cctx.discovery().nodes(nodeIds));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1062,Collections.sort(sorted, CU.nodeComparator(true));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1064,int diff = sorted.size() - affCnt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1067,ClusterNode n = sorted.get(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1722,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1945,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,49,import org.apache.ignite.internal.managers.discovery.GridDiscoveryTopologySnapshot;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,159,private AtomicReference<GridDiscoveryTopologySnapshot> topSnapshot = new AtomicReference<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,436,public void onEvent(GridDhtPartitionExchangeId exchId, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1106,topSnapshot.set(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,46,import org.apache.ignite.events.Event;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,52,import org.apache.ignite.internal.managers.eventstorage.GridLocalEventListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,123,private GridLocalEventListener topLsnr = new TopologyListener();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,205,ctx.event().removeLocalEventListener(topLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1161,private class TopologyListener implements GridLocalEventListener {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,47,private IgniteFutureImpl<?> reconnectFut;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,937,comp.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2959,IgniteFuture<?> userFut = new IgniteFutureImpl<>(reconnectFut);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2961,ctx.cluster().get().clientReconnectFuture(userFut);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3019,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3024,U.error(log, "Failed to reconnect, will stop node", e);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,3026,close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1265,catch (IgniteClientDisconnectedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,190,U.error(log0, "Failed to request affinity assignment from remote node (will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1229,log.debug("Failed to send full partition map to node, node left grid " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,836,protected SocketReader() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,962,private final long socketTimeout;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,970,protected SocketWriter() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,973,socketTimeout = spi.failureDetectionTimeoutEnabled() ? spi.failureDetectionTimeout() :
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1047,if (msg == null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1048,mux.wait();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1071,socketTimeout);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1407,state = DISCONNECTED;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1409,nodeAdded = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1411,IgniteClientDisconnectedCheckedException err =
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1412,new IgniteClientDisconnectedCheckedException(null, "Failed to ping node, " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1415,for (Map.Entry<UUID, GridFutureAdapter<Boolean>> e : pingFuts.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1416,GridFutureAdapter<Boolean> fut = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1419,fut.onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,243,U.shutdownNow(GridServiceProcessor.class, depExe, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1168,depExe.submit(new BusyRunnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,37,private final AtomicBoolean starting = new AtomicBoolean(false);
modules/core/src/main/java/org/apache/ignite/cache/eviction/EvictionPolicy.java,22,import org.apache.ignite.cache.eviction.random.RandomEvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,28,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,32,import org.jsr166.LongAdder8;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,34,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,54,public class FifoEvictionPolicy<K, V> implements EvictionPolicy<K, V>, FifoEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,59,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,62,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,65,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,68,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,87,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,89,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,99,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,100,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,102,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,103,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,112,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,121,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,123,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,128,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,133,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,135,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,145,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,150,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,152,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,157,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,171,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,173,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,177,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,179,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,180,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,182,if (node != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,183,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,185,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,194,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,217,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,234,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,235,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,237,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,238,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,241,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,242,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,245,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,247,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,251,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,253,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,254,int startSize = queue.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,260,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,269,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,282,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,293,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,294,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,295,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,300,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,301,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,302,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,28,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,32,import org.jsr166.LongAdder8;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,34,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,53,public class LruEvictionPolicy<K, V> implements EvictionPolicy<K, V>, LruEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,58,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,61,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,64,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,67,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,86,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,88,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,97,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,106,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,108,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,113,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,118,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,120,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,130,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,135,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,137,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,142,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,156,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,158,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,161,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,163,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,164,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,166,if (node != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,167,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,169,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,178,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,188,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,196,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,201,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,210,else if (queue.unlinkx(node)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,216,queue.unlinkx(newNode);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,226,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,227,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,229,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,230,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,233,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,234,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,237,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,239,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,243,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,245,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,246,int startSize = queue.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,251,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,260,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,273,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,284,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,285,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,286,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,291,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,292,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,293,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,298,return S.toString(LruEvictionPolicy.class, this, "size", queue.sizex());
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,24,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,25,import org.apache.ignite.IgniteCache;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,26,import org.apache.ignite.cache.CachePeekMode;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,27,import org.apache.ignite.cache.eviction.EvictableEntry;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,28,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,29,import org.apache.ignite.internal.util.typedef.internal.A;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,30,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,32,import static org.apache.ignite.configuration.CacheConfiguration.DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,43,public class RandomEvictionPolicy<K, V> implements EvictionPolicy<K, V>, RandomEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,45,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,48,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,53,public RandomEvictionPolicy() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,62,public RandomEvictionPolicy(int max) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,63,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,65,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,74,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,83,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,85,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,92,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,94,IgniteCache<K, V> cache = entry.unwrap(IgniteCache.class);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,96,int size = cache.localSize(CachePeekMode.ONHEAP);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,98,for (int i = max; i < size; i++) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,99,Cache.Entry<K, V> e = cache.randomEntry();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,102,e.unwrap(EvictableEntry.class).evict();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,108,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,113,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,118,return S.toString(RandomEvictionPolicy.class, this);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,20,import org.apache.ignite.mxbean.MXBeanDescription;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,26,public interface RandomEvictionPolicyMBean {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,33,public int getMaxSize();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,41,public void setMaxSize(int max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,33,import org.apache.ignite.cache.eviction.EvictionPolicy;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,62,public class SortedEvictionPolicy<K, V> implements EvictionPolicy<K, V>, SortedEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,67,private volatile int max = DFLT_CACHE_SIZE;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,70,private volatile int batchSize = 1;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,73,private volatile long maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,76,private final LongAdder8 memSize = new LongAdder8();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,121,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,122,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,124,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,125,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,146,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,155,A.ensure(max >= 0, "max >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,157,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,162,return batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,167,A.ensure(batchSize > 0, "batchSize > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,169,this.batchSize = batchSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,174,return set.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,179,return maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,184,A.ensure(maxMemSize >= 0, "maxMemSize >= 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,186,this.maxMemSize = maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,191,return memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,210,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,212,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,215,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,217,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,218,Holder<K, V> holder = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,220,if (holder != null) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,221,removeHolder(holder);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,223,memSize.add(-entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,232,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,248,removeHolder(holder);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,253,memSize.add(entry.size());
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,270,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,271,long maxMem = this.maxMemSize;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,273,if (maxMem > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,274,long startMemSize = memSize.longValue();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,277,for (long i = maxMem; i < startMemSize && memSize.longValue() > maxMem;) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,278,int size = shrink0();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,281,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,283,i += size;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,287,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,289,if (max > 0) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,290,int startSize = set.sizex();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,292,if (startSize >= max + (maxMem > 0 ? 1 : this.batchSize)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,293,for (int i = max; i < startSize && set.sizex() > max; i++) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,295,break;
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,306,private int shrink0() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,316,if (h.order > 0 && entry.removeMeta(h)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,319,memSize.add(-size);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,330,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,331,out.writeInt(batchSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,332,out.writeLong(maxMemSize);
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,339,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,340,batchSize = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,341,maxMemSize = in.readLong();
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,350,private void removeHolder(Holder<K, V> holder) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/sorted/SortedEvictionPolicy.java,356,set.remove(holder);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,53,import org.apache.ignite.cache.eviction.random.RandomEvictionPolicyMBean;
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,668,return ((RandomEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,21,import org.apache.ignite.IgniteCompute;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,29,import org.apache.ignite.lang.IgniteCallable;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,97,private boolean callAsync(IgniteCallable<Integer> subJob, int idx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,98,IgniteCompute compute = ignite.compute(ignite.cluster().forCacheNodes(cacheName)).withAsync();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,100,compute.call(subJob);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,102,IgniteFuture<Integer> fut = compute.future();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,122,IgniteCache cache = ignite.cache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,125,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,128,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,131,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,149,private static class VisorCacheSizeCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,151,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,154,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,159,private VisorCacheSizeCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,160,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,165,return cache.size(CachePeekMode.PRIMARY);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,173,private static class VisorCacheClearCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,175,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,178,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,183,private VisorCacheClearCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,184,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,189,cache.clear();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,191,return 0;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,243,private GridSqlElement parseTable(TableFilter filter) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,251,else if (tbl instanceof TableView) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2104,Collection<String> idxFields = e.getValue().fields();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2109,descendings.add(idxField);
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,162,return new Date(revTs);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1315,Server web = new Server(webSrv, "-webPort", "0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,751,boolean keyPrimary = ctx.affinity().primary(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,760,boolean keyBackup = ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,781,nearKey = !ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,212,public List<ClusterNode> nodes(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,213,return nodes(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,221,public List<ClusterNode> nodes(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,234,return primary(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,243,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,257,public boolean primary(ClusterNode n, Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,258,return F.eq(primary(key, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,267,public boolean primary(ClusterNode n, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,268,return F.eq(primary(part, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,276,public Collection<ClusterNode> backups(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,277,return backups(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,285,public Collection<ClusterNode> backups(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,286,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,301,public Collection<ClusterNode> remoteNodes(Iterable keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,302,Collection<Collection<ClusterNode>> colcol = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,305,colcol.add(nodes(key, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,307,return F.view(F.flatCollections(colcol), F.remoteNodes(cctx.localNodeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,315,public boolean localNode(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,316,return localNode(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,324,public boolean localNode(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,327,return nodes(part, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,336,public boolean belongs(ClusterNode node, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,340,return nodes(part, topVer).contains(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1615,public boolean hasKey(Iterable<? extends K> keys, Collection<Integer> movingParts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1616,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1618,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1621,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,914,if (cctx.affinity().backups(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1064,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1065,assert key != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1067,CacheConfiguration cfg = ctx.cache().configuration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1070,return ctx.localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1072,return ctx.affinity().primary(key, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,72,return cctx.affinity().primary(n, key, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,79,return cctx.affinity().backups(key, topologyVersion()).contains(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,86,return cctx.affinity().belongs(n, cctx.affinity().partition(key), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,116,for (ClusterNode affNode : cctx.affinity().nodes(part, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,132,return F.first(cctx.affinity().nodes(part, topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,178,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,200,return cctx.affinity().nodes(partition(key), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,207,return cctx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,748,List<ClusterNode> nodes = ctx.affinity().nodes(e.getKey(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,388,if (cctx.affinity().belongs(node, partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,602,return cctx.affinity().primary(cctx.localNode(), id, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,464,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,275,return !cacheCtx.affinity().backups(key, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1830,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1957,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1980,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2019,boolean primary = !req.fastMap() || ctx.affinity().primary(ctx.localNode(), entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2106,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,167,return allowDetached && !ctx.affinity().primary(ctx.localNode(), key, topVer) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,465,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,582,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1084,if (!cctx.affinity().primary(cctx.localNode(), key, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1168,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,162,if (ctx.affinity().belongs(ctx.localNode(), ctx.affinity().partition(key), req.topologyVersion())) { // Reader became backup.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,660,primary = cctx.affinity().primary(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,682,if (!cctx.affinity().localNode(info.key(), cctx.affinity().affinityTopologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1251,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,473,return ctx.affinity().belongs(ctx.localNode(), e.partition(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,545,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,666,ClusterNode primary = ctx.affinity().primary(key, cand.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1416,!cctx.affinity().primary(cctx.localNode(), key, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1428,ClusterNode primaryNode = CU.primaryNode(cctx, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1994,return cache.context().affinity().primary(ctx.discovery().localNode(), k, NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1479,List<ClusterNode> affNodes = cacheCtx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,464,List<ClusterNode> nodes0 = ctx.affinity().nodes(hdrPart, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,94,return !filter || ctx.affinity().primary(ctx.localNode(), k, ctx.affinity().affinityTopologyVersion());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1514,return aff.primary(locNode, k, topVer0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1869,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5362,return ttl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5369,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5374,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3131,long ttl = ttlExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3133,long expTime = CU.toExpireTime(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,109,return lockAllAsync(keys, timeout, tx, isInvalidate, isRead, retval, isolation, accessTtl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,676,long ttl = req.accessTtl();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,678,final CacheExpiryPolicy expiryPlc = CacheExpiryPolicy.forAccess(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,157,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,386,flags = reader.readCollection("flags", MessageCollectionItemType.BOOLEAN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,394,futId = reader.readIgniteUuid("futId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,402,keys = reader.readCollection("keys", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,410,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,418,readThrough = reader.readBoolean("readThrough");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,426,reload = reader.readBoolean("reload");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,434,skipVals = reader.readBoolean("skipVals");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,442,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,450,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,458,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,466,ver = reader.readMessage("ver");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,469,dhtVers = reader.readObjectArray("dhtVers", MessageCollectionItemType.MSG, GridCacheVersion.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,477,filter = reader.readObjectArray("filter", MessageCollectionItemType.MSG, CacheEntryPredicate.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,485,firstClientReq = reader.readBoolean("firstClientReq");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,493,hasTransforms = reader.readBoolean("hasTransforms");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,501,implicitSingleTx = reader.readBoolean("implicitSingleTx");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,509,implicitTx = reader.readBoolean("implicitTx");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,517,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,525,onePhaseCommit = reader.readBoolean("onePhaseCommit");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,533,retVal = reader.readBoolean("retVal");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,541,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,549,syncCommit = reader.readBoolean("syncCommit");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,557,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,565,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,344,accessPolicy(cacheCtx, keys),
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,134,U.writeStringMap(out, req.properties());
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,252,req.properties(U.readStringMap(in));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,30,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,213,U.writeStringMap(out, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,231,props = U.readStringMap(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4922,public static void writeStringMap(DataOutput out, @Nullable Map<String, String> map) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4923,if (map != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4924,out.writeInt(map.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4926,for (Map.Entry<String, String> e : map.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4927,writeUTFStringNullable(out, e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4928,writeUTFStringNullable(out, e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4931,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4932,out.writeInt(-1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4942,public static Map<String, String> readStringMap(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4943,int size = in.readInt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4946,return null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4947,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4948,Map<String, String> map = U.newHashMap(size);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4951,map.put(readUTFStringNullable(in), readUTFStringNullable(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4953,return map;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4964,public static void writeUTFStringNullable(DataOutput out, @Nullable String val) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4965,if (val != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4966,out.writeBoolean(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4968,out.writeUTF(val);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4970,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4971,out.writeBoolean(false);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4981,public static String readUTFStringNullable(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4982,return in.readBoolean() ? in.readUTF() : null;
modules/aws/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/TcpDiscoveryS3IpFinder.java,248,s3 = cfg != null ? new AmazonS3Client(cred, cfg) : new AmazonS3Client(cred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,352,qryProc.onSwap(space, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,371,qryProc.onUnswap(space, key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,408,qryProc.store(space, key, val, CU.versionToBytes(ver), expirationTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,433,qryProc.remove(space, key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,479,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,480,coctx = cacheObjectContext(space);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,827,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,828,CacheObjectContext coctx = cacheObjectContext(space);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,953,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,954,CacheObjectContext coctx = cacheObjectContext(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,992,if (ctx.indexing().enabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,993,CacheObjectContext coctx = cacheObjectContext(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,703,sqlQry,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,839,final String qry, @Nullable final Collection<Object> params, GridQueryTypeDescriptor type,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,882,sql = generateQuery(qry.getSql(), tblDesc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,995,private String generateQuery(String qry, TableDescriptor tbl) throws IgniteCheckedException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1019,from = " FROM " + t +
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientConnectionManagerAdapter.java,316,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,69,private final Set<String> routerAddrs;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,99,routerAddrs = (!cfg.getRouters().isEmpty() && cfg.getServers().isEmpty()) ?
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,100,new HashSet<>(cfg.getRouters()) : null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,386,boolean router = routerAddrs == null ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,387,routerAddrs.contains(addr.getHostName() + ":" + addr.getPort()) ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,388,routerAddrs.contains(addr.getAddress().getHostAddress() + ":" + addr.getPort());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,391,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,171,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,174,sb.a(cols[j]).a(" > ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,176,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,190,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,193,sb.a(cols[j]).a(" <= ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,195,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,375,AffinityTopologyVersion topVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,875,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1855,Map<Integer, CacheMetrics> cacheMetrics = msg.hasCacheMetrics() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4038,Map<Integer, CacheMetrics> cacheMetrics = msg.hasCacheMetrics() ?
modules/jcl/src/main/java/org/apache/ignite/logger/jcl/JclLogger.java,136,return !isInfoEnabled() && !isDebugEnabled();
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/Slf4jLogger.java,48,impl = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/Slf4jLogger.java,132,return !isInfoEnabled() && !isDebugEnabled();
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,156,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,163,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,147,public static final int DFLT_PUBLIC_THREAD_CNT = Math.max(8, AVAILABLE_PROC_CNT) * 2;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,168,ctx.getSystemExecutorService().submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,220,execSvc.submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,377,List<PluginProvider> plugins) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,662,public void start(final IgniteConfiguration cfg,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,776,plugins);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,983,private long lastCompletedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,987,return;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,989,ThreadPoolExecutor exec = (ThreadPoolExecutor)execSvc;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,998,interval + "ms, is executorService pool size large enough?)");
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1000,lastCompletedCnt = completedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1617,grid0.start(myCfg, utilityCacheExecSvc, marshCacheExecSvc, execSvc, sysExecSvc, p2pExecSvc, mgmtExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,568,ClusterNode node = ctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,570,if (node == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,572,log.debug("Ignoring message from dead node [senderId=" + nodeId + ", msg=" + msg + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,574,return; // We can't receive messages from non-discovered ones.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1106,execSvc.submit(jobs.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2433,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,191,preldr.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,34,import org.apache.ignite.internal.util.GridLeanSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,60,private Collection<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,133,return invalidParts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryManager.java,270,req.partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,123,private int part;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,463,return part == -1 ? null : part;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,350,dualPool.submit(batch);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,24,import org.apache.ignite.internal.GridKernalContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,41,import org.apache.ignite.marshaller.Marshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,42,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,76,private final Marshaller jdkMarshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,79,private final GridKernalContext ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,89,public GridTcpMemcachedNioListener(IgniteLogger log, GridRestProtocolHandler hnd, GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,92,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,143,memcachedLsnr = new GridTcpMemcachedNioListener(log, hnd, ctx);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,230,return new ChainFuture<>(this, doneCb);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,484,IgniteClosure<? super IgniteInternalFuture<R>, T> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,489,fut.listen(new GridFutureChainListener<>(this, doneCb));
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,28,public class GridFutureChainListener<T, R> implements IgniteInClosure<IgniteInternalFuture<T>> {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,45,IgniteClosure<? super IgniteInternalFuture<T>, R> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridAbstractCommunicationClient.java,41,protected GridAbstractCommunicationClient(@Nullable GridNioMetricsListener metricsLsnr) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,71,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioAsyncNotifyFilter.java,111,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,82,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,87,return proceedSessionWrite(ses, res);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,111,public GridNioFuture<?> proceedSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,155,public GridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,114,return nextFilter.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,185,return tail.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,260,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFuture.java,50,public void ackClosure(IgniteInClosure<IgniteException> closure);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,39,private final ArrayDeque<GridNioFuture<?>> msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,79,public GridNioRecoveryDescriptor(int queueLimit, ClusterNode node, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,83,msgFuts = new ArrayDeque<>(queueLimit);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,154,public boolean add(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,155,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,157,if (!fut.skipRecovery()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,159,msgFuts.addLast(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,161,return msgFuts.size() < queueLimit;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,179,GridNioFuture<?> fut = msgFuts.pollFirst();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,181,assert fut != null : "Missed message future [rcvCnt=" + rcvCnt +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,185,assert fut.isDone() : fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,188,fut.ackClosure().apply(null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,198,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,204,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,206,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,211,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,217,public Deque<GridNioFuture<?>> messagesFutures() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,218,return msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,253,resendCnt = msgFuts.size();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,260,public void connected() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,285,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,305,if (nodeLeft && !msgFuts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,306,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,308,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,313,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,365,private void completeOnNodeLeft(GridNioFuture<?>[] futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,366,for (GridNioFuture<?> msg : futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,367,IOException e = new IOException("Failed to send message, node has left: " + node.id());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,369,((GridNioFutureImpl)msg).onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,372,msg.ackClosure().apply(new IgniteException(e));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,92,public static final int DFLT_SEND_QUEUE_LIMIT = 1024;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,131,private int balanceIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,295,new DirectNioClientWorker(i, gridName, "grid-nio-worker-" + i, log) :
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,296,new ByteBufferNioClientWorker(i, gridName, "grid-nio-worker-" + i, log);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,378,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,388,GridNioFuture<?> send(GridNioSession ses, ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,389,assert ses instanceof GridSelectorNioSessionImpl;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,393,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,395,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,397,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,405,GridNioFuture<?> send(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,410,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,411,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,413,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,415,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,423,private void send0(GridSelectorNioSessionImpl ses, NioOperationFuture<?> fut, boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,425,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,427,int msgCnt = sys ? ses.offerSystemFuture(fut) : ses.offerFuture(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,436,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,440,clientWorkers.get(ses.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,455,public GridNioFuture<?> sendSystem(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,456,return sendSystem(ses, msg, null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,467,public GridNioFuture<?> sendSystem(GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,474,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,475,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,483,send0(impl, fut, true);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,485,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,494,GridNioRecoveryDescriptor recoveryDesc = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,496,if (recoveryDesc != null && !recoveryDesc.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,497,Deque<GridNioFuture<?>> futs = recoveryDesc.messagesFutures();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,504,GridNioFuture<?> fut0 = futs.iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,506,for (GridNioFuture<?> fut : futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,509,((NioOperationFuture)fut).resetSession(ses0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,515,clientWorkers.get(ses0.selectorIndex()).offer(((NioOperationFuture)fut0));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,524,GridNioFuture<?> pauseResumeReads(GridNioSession ses, NioOperation op) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,536,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,657,clientWorkers.get(balanceIdx).offer(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,659,balanceIdx++;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,774,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,780,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,783,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,788,buf = req.message();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,823,req.onDone();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,970,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,976,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,978,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,979,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,981,break;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,989,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1006,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1011,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1110,queue.remove(buf);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1128,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1136,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1138,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1139,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1141,return;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1149,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1151,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1168,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1173,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1228,private abstract class AbstractNioClientWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1290,private void offer(NioOperationFuture req) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1302,private void bodyInternal() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1305,NioOperationFuture req;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1307,while ((req = changeReqs.poll()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1308,switch (req.operation()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1310,register(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1315,case REQUIRE_WRITE: {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1317,SelectionKey key = req.session().key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1319,if (key.isValid()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1320,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1323,((GridNioSessionImpl)key.attachment()).bytesSent(0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1526,idx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1599,Socket sock = ((SocketChannel)key.channel()).socket();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1643,NioOperationFuture<?> fut = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1645,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1647,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1650,while ((fut = (NioOperationFuture<?>)ses.pollFuture()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1652,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1656,recovery.release();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1661,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1664,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1860,private enum NioOperation {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1880,private static class NioOperationFuture<R> extends GridNioFutureImpl<R> {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1895,private ByteBuffer msg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1898,private Message commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1957,NioOperationFuture(GridSelectorNioSessionImpl ses, NioOperation op,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1958,ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1986,this.commMsg = commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1993,private NioOperation operation() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2000,private ByteBuffer message() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2007,private Message directMessage() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2008,return commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2014,private void resetSession(GridSelectorNioSessionImpl ses) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2015,assert commMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2017,this.ses = ses;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2023,private SocketChannel socketChannel() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2030,private GridSelectorNioSessionImpl session() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2051,private void connectionClosed() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2052,assert op == NioOperation.REQUIRE_WRITE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2053,assert ses != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2055,onDone(new IOException("Failed to send message (connection was closed): " + ses));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2108,SelectionKey key = ((GridSelectorNioSessionImpl)ses).key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2111,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2116,return send(ses, (Message)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2119,return send(ses, (ByteBuffer)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSession.java,161,public void recoveryDescriptor(GridNioRecoveryDescriptor recoveryDesc);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionImpl.java,102,return chain().onSessionWrite(this, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,25,import java.util.concurrent.atomic.AtomicInteger;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,40,private final ConcurrentLinkedDeque8<GridNioFuture<?>> queue = new ConcurrentLinkedDeque8<>();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,47,private final int selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,50,private final AtomicInteger queueSize = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,63,private GridNioRecoveryDescriptor recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,83,int selectorIdx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,94,assert selectorIdx >= 0;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,104,this.selectorIdx = selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,127,assert this.key == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,156,int selectorIndex() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,157,return selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,166,int offerSystemFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,173,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,186,int offerFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,198,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,204,void resend(Collection<GridNioFuture<?>> futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,211,boolean set = queueSize.compareAndSet(0, futs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,213,assert set;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,220,GridNioFuture<?> last = queue.poll();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,223,queueSize.decrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,228,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,229,if (!recovery.add(last)) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,252,boolean removeFuture(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,264,return queueSize.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,271,recovery = recoveryDesc;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,276,return recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,281,if (val instanceof GridNioRecoveryDescriptor) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,282,recovery = (GridNioRecoveryDescriptor)val;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,285,recovery.connected();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridShmemCommunicationClient.java,59,public GridShmemCommunicationClient(GridNioMetricsListener metricsLsnr,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridShmemCommunicationClient.java,66,super(metricsLsnr);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,51,public GridTcpNioCommunicationClient(GridNioSession ses, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,52,super(null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,110,assert nodeId == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,113,ses.addMeta(ACK_CLOSURE.ordinal(), closure);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,115,GridNioFuture<?> fut = ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,117,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,118,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,119,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,121,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,123,ses.removeMeta(ACK_CLOSURE.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,126,log.debug("Failed to send message [client=" + this + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,129,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,130,else
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,131,throw new IgniteCheckedException("Failed to send message [client=" + this + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,136,ses.removeMeta(ACK_CLOSURE.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,254,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,433,req.future().onDone((GridNioFuture<Object>)parent.proceedSessionWrite(ses, req.buffer()));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,478,return parent.proceedSessionWrite(ses, cp);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,259,public static final int DFLT_SHMEM_PORT = 48100;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,283,public static final int DFLT_SELECTORS_CNT = Math.min(4, Runtime.getRuntime().availableProcessors());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,286,private static final int NODE_ID_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,301,public static final int DFLT_ACK_SND_THRESHOLD = 16;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,345,ses.send(nodeIdMessage());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,350,UUID id = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,352,if (id != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,394,sndId = U.bytesToUuid(((NodeIdMessage)msg).nodeIdBytes, 0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,404,final UUID old = ses.addMeta(NODE_ID_META, sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,406,assert old == null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,424,GridCommunicationClient oldClient = clients.get(sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,426,boolean hasShmemClient = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,428,if (oldClient != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,429,if (oldClient instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,431,log.debug("Received incoming connection when already connected " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,435,ses.send(new RecoveryLastReceivedMessage(-1));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,437,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,440,assert oldClient instanceof GridShmemCommunicationClient;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,442,hasShmemClient = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,446,GridFutureAdapter<GridCommunicationClient> fut = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,448,GridFutureAdapter<GridCommunicationClient> oldFut = clientFuts.putIfAbsent(sndId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,450,assert msg instanceof HandshakeMessage : msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,452,HandshakeMessage msg0 = (HandshakeMessage)msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,454,final GridNioRecoveryDescriptor recoveryDesc = recoveryDescriptor(rmtNode);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,456,if (oldFut == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,457,oldClient = clients.get(sndId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,468,fut.onDone(oldClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,479,boolean reserved = recoveryDesc.tryReserve(msg0.connectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,480,new ConnectClosure(ses, recoveryDesc, rmtNode, msg0, !hasShmemClient, fut));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,483,log.debug("Received incoming connection from remote node " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,486,if (reserved) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,487,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,488,GridTcpNioCommunicationClient client =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,491,fut.onDone(client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,493,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,494,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,498,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,499,if (oldFut instanceof ConnectFuture && locNode.order() < rmtNode.order()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,500,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,501,log.debug("Received incoming connection from remote node while " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,507,ses.send(new RecoveryLastReceivedMessage(-1));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,509,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,511,boolean reserved = recoveryDesc.tryReserve(msg0.connectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,512,new ConnectClosure(ses, recoveryDesc, rmtNode, msg0, !hasShmemClient, fut));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,515,connected(recoveryDesc, ses, rmtNode, msg0.received(), true, !hasShmemClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,521,UUID sndId = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,523,if (sndId == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,545,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,547,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,548,if (msg instanceof RecoveryLastReceivedMessage) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,552,log.debug("Received recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,559,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,564,log.debug("Send recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,567,nioSrvr.sendSystem(ses, new RecoveryLastReceivedMessage(rcvCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,593,notifyListener(sndId, msg, c);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,615,ses.recoveryDescriptor(recovery);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,622,recovery.connected();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,627,client = new GridTcpNioCommunicationClient(ses, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,629,GridCommunicationClient oldClient = clients.putIfAbsent(node.id(), client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,631,assert oldClient == null : "Client already created [node=" + node + ", client=" + client +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,689,IgniteInClosure<IgniteInternalFuture<?>> lsnr = new IgniteInClosure<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,691,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,692,msgFut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,694,GridTcpNioCommunicationClient client =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,695,connected(recoveryDesc, ses, rmtNode, msg.received(), false, createClient);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,697,fut.onDone(client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,699,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,701,log.debug("Failed to send recovery handshake " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,704,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,706,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,708,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,709,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,721,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,806,private final ConcurrentMap<UUID, GridCommunicationClient> clients = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,850,private final ConcurrentMap<UUID, GridFutureAdapter<GridCommunicationClient>> clientFuts =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,854,private final ConcurrentMap<ClientKey, GridNioRecoveryDescriptor> recoveryDescs = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1667,log.info("Successfully bound to TCP port [port=" + boundTcpPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1768,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1792,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1804,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1826,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1828,if (client != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1830,log.debug("Forcing NIO client close since node has left [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1833,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1835,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1914,client = reserveClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1956,private GridCommunicationClient reserveClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1962,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1971,GridFutureAdapter<GridCommunicationClient> oldFut = clientFuts.putIfAbsent(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1975,GridCommunicationClient client0 = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1978,client0 = createNioClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1981,GridCommunicationClient old = clients.put(nodeId, client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1983,assert old == null : "Client already created " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1989,if (tcpClient.session().closeTime() > 0 && clients.remove(nodeId, client0)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2011,clientFuts.remove(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2034,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2101,client = new GridShmemCommunicationClient(metricsLsnr,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2122,safeHandshake(client, null, node.id(), timeoutHelper.nextTimeoutChunk(connTimeout0), null);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2181,UUID id = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2184,ClusterNode node = getSpiContext().node(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2194,U.quietAndWarn(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2195,log,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2196,msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2198,getSpiContext().failNode(id, msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2211,protected GridCommunicationClient createTcpClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2307,meta.put(NODE_ID_META, node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2323,client = new GridTcpNioCommunicationClient(ses, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2560,recovery.incrementConnectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2566,buf = ByteBuffer.allocate(33);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2713,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2720,private GridNioRecoveryDescriptor recoveryDescriptor(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2721,ClientKey id = new ClientKey(node.id(), node.order());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2723,GridNioRecoveryDescriptor recovery = recoveryDescs.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2728,int queueLimit = unackedMsgsBufSize != 0 ? unackedMsgsBufSize : (maxSize * 5);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2730,GridNioRecoveryDescriptor old =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2731,recoveryDescs.putIfAbsent(id, recovery = new GridNioRecoveryDescriptor(queueLimit, node, log));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2776,private static class ClientKey {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2778,private UUID nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2781,private long order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2787,private ClientKey(UUID nodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2788,this.nodeId = nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2789,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2795,return true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2798,return false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2800,ClientKey other = (ClientKey)obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2802,return order == other.order && nodeId.equals(other.nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2808,int res = nodeId.hashCode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2810,res = 31 * res + (int)(order ^ (order >>> 32));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2812,return res;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2817,return S.toString(ClientKey.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3007,for (Map.Entry<UUID, GridCommunicationClient> e : clients.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3010,GridCommunicationClient client = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3012,ClusterNode node = getSpiContext().node(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3014,if (node == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3016,log.debug("Forcing close of non-existent node connection: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3018,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3020,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3022,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3025,GridNioRecoveryDescriptor recovery = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3027,if (client instanceof GridTcpNioCommunicationClient) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3028,recovery = recoveryDescs.get(new ClientKey(node.id(), node.order()));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3030,if (recovery != null && recovery.lastAcknowledged() != recovery.received()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3031,RecoveryLastReceivedMessage msg = new RecoveryLastReceivedMessage(recovery.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3034,log.debug("Send recovery acknowledgement on timeout [rmtNode=" + nodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3037,nioSrvr.sendSystem(((GridTcpNioCommunicationClient)client).session(), msg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3039,recovery.lastAcknowledged(msg.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3041,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3045,long idleTime = client.getIdleTime();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3047,if (idleTime >= idleConnTimeout) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3048,if (recovery != null &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3049,recovery.nodeAlive(getSpiContext().node(nodeId)) &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3050,!recovery.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3052,log.debug("Node connection is idle, but there are unacknowledged messages, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3055,continue;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3059,log.debug("Closing idle node connection: " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3062,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3071,Set<ClientKey> left = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3073,for (Map.Entry<ClientKey, GridNioRecoveryDescriptor> e : recoveryDescs.entrySet()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3077,GridNioRecoveryDescriptor recoverySnd = e.getValue();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3079,if (!recoverySnd.nodeAlive(getSpiContext().node(recoverySnd.node().id()))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3090,for (ClientKey id : left) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3370,buf.put(HANDSHAKE_MSG_TYPE);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,245,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,268,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1306,return proceedSessionWrite(ses, msg);
modules/kafka/src/main/java/org/apache/ignite/stream/kafka/KafkaStreamer.java,172,executor.submit(new Runnable() {
modules/tools/src/main/java/org/apache/ignite/tools/classgen/ClassesGenerator.java,125,throw new Exception(sb.toString().trim());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,28,import org.apache.ignite.IgniteCheckedException;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,29,import org.apache.ignite.internal.IgniteInternalFuture;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,30,import org.apache.ignite.internal.client.GridClient;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,31,import org.apache.ignite.internal.client.GridClientConfiguration;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,32,import org.apache.ignite.internal.client.GridClientException;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,33,import org.apache.ignite.internal.client.GridClientFactory;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,34,import org.apache.ignite.internal.client.marshaller.jdk.GridClientJdkMarshaller;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,36,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,39,import static org.apache.ignite.internal.client.GridClientProtocol.TCP;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,50,private static final ConcurrentHashMap<String, IgniteInternalFuture<GridClient>> cliMap = new ConcurrentHashMap<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,92,private static ClientProtocol createProtocol(String addr, Configuration conf) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,104,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,107,if (fut == null) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,108,GridFutureAdapter<GridClient> fut0 = new GridFutureAdapter<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,113,return oldFut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,114,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,115,GridClientConfiguration cliCfg = new GridClientConfiguration();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,117,cliCfg.setProtocol(TCP);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,119,cliCfg.setMarshaller(new GridClientJdkMarshaller());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,120,cliCfg.setDaemon(true);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,122,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,123,GridClient cli = GridClientFactory.start(cliCfg);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,125,fut0.onDone(cli);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,127,return cli;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,129,catch (GridClientException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,130,fut0.onDone(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,137,return fut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,139,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1497,joinError(new IgniteSpiException("Join process timed out."));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3582,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,487,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,504,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,504,public <R> IgniteInternalFuture<R> callAsyncNoFailover(GridClosureCallMode mode, @Nullable Callable<R> job,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,535,public <R> IgniteInternalFuture<Collection<R>> callAsyncNoFailover(GridClosureCallMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,537,boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,739,boolean loc = ctx.localNodeId().equals(sndNode.id()) && !ctx.config().isMarshalLocalJobs();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,741,Map<Object, Object> attrs = jobCtx.getAttributes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4386,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4388,return ctx.preloader().syncFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,620,public void forcePreloadExchange(GridDhtPartitionsExchangeFuture exchFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,622,new GridDhtPartitionsExchangeFuture(cctx, exchFut.discoveryEvent(), exchFut.exchangeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,129,public void forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1890,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1892,return new IgniteFutureImpl<>(ctx.preloader().syncFuture());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,231,GridDhtPartitionExchangeId exchId) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,666,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1670,entry.versionedValue(ctx.toCacheObject(v), null, ver);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,646,setFilters(filters);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,648,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,667,setFilters(null);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,997,LT.warn(log, null, "Possible thread pool starvation detected (no task completed in last " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,316,LT.warn(log, null, "Local node is in participants (most probably, " +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,957,LT.warn(log, null, "Failed to check network segment (retrying every 2000 ms).");
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,281,LT.warn(log, null, "Trying to record event without checking if it is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,392,LT.warn(log, null, "Ignoring deployment in PRIVATE or ISOLATED mode " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,401,LT.warn(log, null, "Local and remote deployment mode mismatch (please fix configuration and restart) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,252,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,262,LT.warn(log, null, "Failed to find event node in grid topology history " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,323,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,336,LT.warn(log, null, "Added event without checking if event is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,521,LT.warn(log, null, "Calling Cache.loadCache() method will have no effect, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheWriteBehindStore.java,708,LT.warn(log, e, "Unable to update underlying store: " + store);
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockSyncProcessor.java,443,LT.warn(log, e, "Failed to send time request to remote node [rmtNodeId=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,437,LT.warn(log, e, "Failed to get fragmentizer file info (will retry).");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1422,LT.warn(log, e, "Failed to get secondary file system consumed space size.");
modules/core/src/main/java/org/apache/ignite/internal/processors/nodevalidation/OsDiscoveryNodeValidationProcessor.java,61,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,595,LT.warn(log, null, "Number of jobs in task is too large for task: " + ses.getTaskName() +
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,85,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,99,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String msg, boolean quite) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,113,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,126,public static void info(@Nullable IgniteLogger log, String msg, boolean quite) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,159,private static void log(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg,
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,153,LT.warn(log, null, "Failed to load 'igniteshmem' library from classpath. Will try to load it from IGNITE_HOME.");
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,300,LT.warn(log, null, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,306,LT.warn(log, null, OUT_OF_RESOURCES_MSG);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,118,LT.warn(log, null, "Unknown connection detected (is some other software connecting to this " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,113,LT.warn(log, null, "Parser returned null but there are still unread data in input buffer (bug in " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,161,LT.warn(log, ex, "Failed to forward GridNioException to filter chain [ses=" + ses + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,750,LT.warn(log, null, "Read buffer contains data after filter chain processing (will discard " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,230,LT.warn(log, null, "Unacknowledged messages queue size overflow, will attempt to reconnect " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,329,LT.warn(log, null, "Communication SPI Session write timed out (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2062,LT.warn(log, null, OUT_OF_RESOURCES_TCP_MSG);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2064,LT.warn(log, null, e.getMessage());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2413,LT.warn(log, null, "Connect timed out (consider increasing 'failureDetectionTimeout' " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2417,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2448,LT.warn(log, null, "Failed to connect to a remote node " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,484,LT.warn(log, null, "IP finder returned empty addresses list. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,538,LT.warn(log, null, "Failed to connect to any address from IP finder (will retry to join topology " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,896,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,55,import java.util.concurrent.ThreadPoolExecutor;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,494,LT.warn(log, null, "Failed to ping node (status check will be initiated): " + nodeId);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,883,LT.warn(log, null, "Node has not been connected to topology and will repeat join process. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1003,LT.warn(log, null, "Failed to connect to any address from IP finder " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2637,LT.warn(log, null, "Local node has detected failed nodes and started cluster-wide procedure. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2722,LT.warn(log, null, errMsg);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2775,LT.warn(log, null, "Ignoring join request from node (duplicate ID) [node=" + node +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2830,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2860,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3259,LT.warn(log, null,
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4598,LT.warn(log, null, "Failed to read magic header (too few bytes received) [rmtAddr=" +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4614,LT.warn(log, null, "Unknown connection detected (is some other software connecting to " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4733,LT.warn(log, null, "Failed to initialize connection " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4762,LT.warn(log, null, "Socket operation timed out on handshake " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4767,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4988,LT.warn(log, null, "Failed to read message due to ClassNotFoundException " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,293,LT.warn(log, null, "Acknowledgement timeout is greater than maximum acknowledgement timeout " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1455,LT.warn(log, null, "Timed out waiting for message to be read (most probably, the reason is " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1495,LT.warn(log, null, "Timed out waiting for message delivery receipt (most probably, the reason is " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1559,LT.warn(log, null, "Failed to resolve address from IP finder (host is unknown): " + addr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,2016,LT.warn(log, null, "Socket write has timed out (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,554,LT.warn(log, e, "Failed to deserialize multicast response.");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,835,LT.warn(log, e, "Failed to send/receive address message (will try to reconnect).");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,853,LT.warn(log, null, OUT_OF_RESOURCES_TCP_MSG);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1056,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1081,LT.warn(log, null, "Failed to connect to a remote Hadoop process (is process still running?). " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,778,LT.warn(log, null, longMsg, msg);
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,342,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,346,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,403,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server (connection refused): " +
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/UriDeploymentHttpScanner.java,407,LT.warn(scanCtx.getLogger(), e, "Failed to connect to HTTP server (host is unknown): " +
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,29,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,69,private static final Collection<String> CONVERTED_ERR = F.asList(
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,73,);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,160,try {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,161,writeObject0(obj);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,163,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,164,Throwable t = e;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,166,do {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,168,throw new IOException("You are trying to serialize internal classes that are not supposed " +
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,172,while ((t = t.getCause()) != null);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,174,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,26,import java.util.Queue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,84,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_STARTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1134,boolean startEvtFired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1205,if (!exchFut.skipPreload() && cacheCtx.events().isRecordable(EVT_CACHE_REBALANCE_STARTED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1206,if (!cacheCtx.isReplicated() || !startEvtFired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1207,DiscoveryEvent discoEvt = exchFut.discoveryEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1209,cacheCtx.events().addPreloadEvent(-1, EVT_CACHE_REBALANCE_STARTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1210,discoEvt.eventNode(), discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1215,startEvtFired = true;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1534,return cfg.getConnectorConfiguration() != null;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1510,T val = cls == String.class ? (T)String.valueOf(curr.get(colIdx - 1)) : (T)curr.get(colIdx - 1);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1514,return val;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1487,T val = cls == String.class ? (T)String.valueOf(curr.get(colIdx - 1)) : (T)curr.get(colIdx - 1);
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcResultSet.java,1491,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1712,colIdxs.put(meta.getColumnLabel(i), i);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,155,return String.format("SELECT %s FROM (SELECT %s, ROWNUM() AS rn FROM %s ORDER BY %s) WHERE mod(rn, ?) = 0",
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,156,cols, cols, fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,265,U.error(null, "Failed to notify listener (is grid stopped?) [fut=" + this +
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,269,U.error(null, "Failed to notify listener: " + lsnr, e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,150,addPage0(page);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,157,assert !cnt.initialized : "Counter is already initialized.";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,159,cnt.addAndGet(allRows);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,164,cnt.initialized = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,167,if (cnt.addAndGet(-pageRowsCnt) == 0) { // Result can be negative in case of race between messages, it is ok.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,168,boolean last = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,170,for (Counter c : remainingRows.values()) { // Check all the sources.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,171,if (c.get() != 0 || !c.initialized) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,172,last = false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,174,break;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,178,if (last && lastSubmitted.compareAndSet(false, true)) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,403,volatile boolean initialized;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1815,IgniteBiTuple<Collection<String>, Collection<String>> res = cachedLocalAddr;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1818,List<InetAddress> localAddrs = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1823,localAddrs.add(addr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1827,localAddrs = filterReachable(localAddrs);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1830,addresses(addr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1837,cachedLocalAddr = res;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1843,addresses(locAddr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1853,private static void addresses(InetAddress addr, Collection<String> addrs, Collection<String> hostNames) {
modules/core/src/main/java/org/apache/ignite/internal/visor/misc/VisorResolveHostNameTask.java,69,IgniteUtils.resolveLocalAddresses(InetAddress.getByName("0.0.0.0"));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,95,int netBufSize = sslEngine.getSession().getPacketBufferSize() + 50;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,169,outNetBuf.flip();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,175,handshakeStatus + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,177,writeNetBuffer();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,502,ByteBuffer res = ByteBuffer.allocate(cap);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,504,res.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,519,private ByteBuffer copy(ByteBuffer original) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,520,ByteBuffer cp = ByteBuffer.allocate(original.remaining());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,522,cp.put(original);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,524,cp.flip();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,526,return cp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,164,boolean aggregateFound = false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,448,splitAggregates(alias, 0, mapSelect, idx, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,511,splitAggregate(parentExpr, childIdx, mapSelect, exprIdx, first);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,554,case AVG: // SUM( AVG(CAST(x AS DOUBLE))*COUNT(x) )/SUM( COUNT(x) ).
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,557,.resultType(GridSqlType.BIGINT).addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,561,String cntMapAggAlias = columnName(mapSelect.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,563,cntMapAgg = alias(cntMapAggAlias, cntMapAgg);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,565,mapSelect.add(cntMapAgg);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,568,mapAgg = aggregate(agg.distinct(), AVG).resultType(GridSqlType.DOUBLE).addChild(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,569,function(CAST).resultType(GridSqlType.DOUBLE).addChild(agg.child()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,572,GridSqlElement sumUpRdc = aggregate(false, SUM).addChild(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,573,op(GridSqlOperationType.MULTIPLY,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,574,column(mapAggAlias.alias()),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,575,column(cntMapAggAlias)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,577,GridSqlElement sumDownRdc = aggregate(false, SUM).addChild(column(cntMapAggAlias));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,579,rdcAgg = op(GridSqlOperationType.DIVIDE, sumUpRdc, sumDownRdc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,586,mapAgg = aggregate(agg.distinct(), agg.type()).resultType(agg.resultType()).addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,587,rdcAgg = aggregate(agg.distinct(), agg.type()).addChild(column(mapAggAlias.alias()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,593,mapAgg = aggregate(agg.distinct(), agg.type()).resultType(GridSqlType.BIGINT);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,596,mapAgg.addChild(agg.child());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,598,rdcAgg = aggregate(false, SUM).addChild(column(mapAggAlias.alias()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,599,rdcAgg = function(CAST).resultType(GridSqlType.BIGINT).addChild(rdcAgg);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,526,int len = bytes.length;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,529,for (int i = 0; i < align && i < len; i++) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,533,ptr++;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,468,inNetBuf.clear();
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java,29,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java,122,EVT_NODE_FAILED, EVT_NODE_JOINED, EVT_NODE_LEFT
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentRequest.java,133,return S.toString(GridDhtAffinityAssignmentRequest.class, this);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionMetaKey.java,30,SSL_HANDLER,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionMetaKey.java,48,SSL_ENGINE,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/BlockingSslHandler.java,258,inNetBuf.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,38,import static org.apache.ignite.internal.util.nio.GridNioSessionMetaKey.SSL_HANDLER;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,157,SSLEngine engine = sslCtx.createSSLEngine();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,159,engine.setUseClientMode(clientMode);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,161,if (!clientMode) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,162,engine.setWantClientAuth(wantClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,164,engine.setNeedClientAuth(needClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,168,engine.setEnabledCipherSuites(enabledCipherSuites);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,171,engine.setEnabledProtocols(enabledProtos);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,174,GridNioSslHandler hnd = new GridNioSslHandler(this, ses, engine, directBuf, order, log);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,176,ses.addMeta(SSL_HANDLER.ordinal(), hnd);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,382,GridNioSslHandler hnd = ses.meta(SSL_HANDLER.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,46,import static org.apache.ignite.internal.util.nio.GridNioSessionMetaKey.SSL_ENGINE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,114,IgniteLogger log) throws SSLException {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,131,sslEngine = ses.meta(SSL_ENGINE.ordinal());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2282,SSLEngine sslEngine = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2288,sslEngine = ignite.configuration().getSslContextFactory().create().createSSLEngine();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2293,rcvCnt = safeHandshake(ch, recoveryDesc, node.id(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2294,timeoutHelper.nextTimeoutChunk(connTimeout0), sslEngine);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2305,Map<Integer, Object> meta = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2309,if (isSslEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2310,assert sslEngine != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2312,meta.put(GridNioSessionMetaKey.SSL_ENGINE.ordinal(), sslEngine);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2501,sslHnd = new BlockingSslHandler(ssl, ch, directBuf, ByteOrder.nativeOrder(), log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2619,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2620,buf.compact();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3703,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3751,else
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,330,byte[] nodeHashBytes = ignite.configuration().getMarshaller().marshal(nodeHash);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStore.java,563,return marsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcBlobStore.java,578,return marsh.unmarshal(bytes, getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,355,filterBytes = ctx.config().getMarshaller().marshal(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,465,bytes = marsh.marshal(evt);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,479,evt = marsh.unmarshal(bytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingsResponse.java,77,siblings = marsh.unmarshal(siblingsBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,130,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,132,predBytes = ctx.config().getMarshaller().marshal(pred);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,87,byte[] bytes = opMarsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,107,return opMarsh.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,70,return MARSHALLER.marshal(args);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,99,return MARSHALLER.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,176,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,207,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1144,ioMsg.topicBytes(marsh.marshal(topic));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1401,serMsg = marsh.marshal(msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1404,serTopic = marsh.marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,447,req.responseTopicBytes(marsh.marshal(req.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,933,byte[] serFilter = marsh.marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1024,msg.responseTopicBytes(marsh.marshal(msg.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1141,res.eventsBytes(marsh.marshal(res.events()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1142,res.exceptionBytes(marsh.marshal(res.exception()));
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,437,return marsh.unmarshal(swapBytes, ldr != null ? ldr : U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,447,private byte[] marshal(Object obj) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,448,return ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,80,ctx.config().getMarshaller().marshal(o),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,108,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,117,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,953,return ctx.marshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,219,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,95,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,113,affAssignmentBytes = ctx.marshaller().marshal(affAssignment);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,113,checkCommittedErrBytes = ctx.marshaller().marshal(checkCommittedErr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,397,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,187,topicBytes = ctx.marshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,99,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,102,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,191,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,103,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,313,rdc = mrsh.unmarshal(rdcBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,118,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheSqlQuery.java,123,paramsBytes = m.marshal(params);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,523,bytes = ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,156,data = MARSHALLER.marshal(F.asList(schemasMap, indexesInfo));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,166,data = MARSHALLER.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,85,Map<String, Object> args = MARSHALLER.unmarshal(arg, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,133,bytes = MARSHALLER.marshal(res.getData());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,138,bytes = MARSHALLER.marshal(new SQLException(res.getException().getMessage()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,241,keyBytes = marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,247,valBytes = marsh.marshal(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1094,closureBytes = marsh.marshal(c.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1052,msg.dataBytes(marsh.marshal(msg.data()));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRequestData.java,98,prjPredBytes = marsh.marshal(prjPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/StartRequestData.java,112,prjPred = marsh.unmarshal(prjPredBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,324,errBytes = err != null ? marsh.marshal(err) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1279,updaterBytes = ctx.config().getMarshaller().marshal(rcvr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1283,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1415,err = ctx.config().getMarshaller().unmarshal(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,94,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,102,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,98,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,106,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,406,loc ? null : marsh.marshal(attrs), attrs);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,518,loc ? null : marsh.marshal(topic)),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1033,sesAttrs = marsh.unmarshal(req.getSessionAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1332,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1334,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1336,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,747,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,749,loc ? null: marsh.marshal(res),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,751,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,111,return keyBytes != null ? keyBytes : marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,138,res.resultBytes(ctx.config().getMarshaller().marshal(desc.result()));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,495,byte[] topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,721,return jdkMarshaller.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,803,jdkMarshaller.marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,916,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1315,loc ? null : marsh.marshal(siblings)),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1209,loc ? null : marsh.marshal(res.getJob()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1214,loc ? null : marsh.marshal(ses.getJobSiblings()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1216,loc ? null : marsh.marshal(sesAttrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1218,loc ? null : marsh.marshal(jobAttrs),
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,81,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,104,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,105,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,189,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,213,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,214,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,242,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,243,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,64,return (SharedFsCheckpointData)m.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,94,m.marshal(data, out);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,649,byte[] addrsData = marsh.marshal(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,668,addrs = marsh.unmarshal(Arrays.copyOfRange(data, U.IGNITE_HEADER.length, data.length), null);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,597,keyBytes = ignite.configuration().getMarshaller().marshal(key.key());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,32,private Marshaller marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,37,public HadoopMarshallerFilter(Marshaller marshaller) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,40,this.marshaller = marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,62,return proceedSessionWrite(ses, marshaller.marshal(msg));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,69,proceedMessageReceived(ses, marshaller.unmarshal((byte[])msg, null));
modules/hibernate/src/main/java/org/apache/ignite/cache/store/hibernate/CacheHibernateBlobStore.java,509,return marsh.marshal(obj);
modules/hibernate/src/main/java/org/apache/ignite/cache/store/hibernate/CacheHibernateBlobStore.java,524,return marsh.unmarshal(bytes, getClass().getClassLoader());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1356,return marshaller.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,88,log(log, e, msg, null, LogLevel.WARN, false);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,102,log(log, e, msg, null, LogLevel.WARN, quite);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,116,log(log, e, longMsg, shortMsg, LogLevel.WARN, false);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,129,log(log, null, msg, null, LogLevel.INFO, quite);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,160,LogLevel level, boolean quiet) {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,394,marshCtx = new MarshallerContextImpl(plugins);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1698,U.setWorkDirectory(cfg.getWorkDirectory(), ggHome);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1709,IgniteLogger cfgLog = initLogger(cfg.getGridLogger(), nodeId);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1948,private IgniteLogger initLogger(@Nullable IgniteLogger cfgLog, UUID nodeId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,64,public MarshallerContextImpl(List<PluginProvider> plugins) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,67,workDir = U.resolveWorkDirectory("marshaller", false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServer.java,167,IpcSharedMemoryServerEndpoint endpoint = new IpcSharedMemoryServerEndpoint();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,301,private static volatile String igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8600,String igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8602,if (igniteWork0 == null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8603,synchronized (IgniteUtils.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8605,igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8608,return;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8610,File workDir;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8613,workDir = new File(userWorkDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8615,workDir = new File(IGNITE_WORK_DIR);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8617,workDir = new File(userIgniteHome, "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8618,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8619,String tmpDirPath = System.getProperty("java.io.tmpdir");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8622,throw new IgniteCheckedException("Failed to create work directory in OS temp " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8625,workDir = new File(tmpDirPath, "ignite" + File.separator + "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8629,throw new IgniteCheckedException("Work directory path must be absolute: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8632,throw new IgniteCheckedException("Work directory does not exist and cannot be created: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8635,throw new IgniteCheckedException("Cannot read from work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8638,throw new IgniteCheckedException("Cannot write to work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8640,igniteWork = workDir.getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8655,public static void nullifyWorkDirectory() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8656,igniteWork = null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8667,public static File resolveWorkDirectory(String path, boolean delIfExist) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8671,String ggWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8676,dir = new File(ggWork0, dir.getPath());
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,143,public IpcSharedMemoryServerEndpoint() {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,154,public IpcSharedMemoryServerEndpoint(IgniteLogger log, UUID locNodeId, String gridName) {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,184,tokDir = U.resolveWorkDirectory(tokDirPath, false);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLogger.java,364,fileHnd.nodeId(nodeId);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,83,public void nodeId(UUID nodeId) throws IgniteCheckedException, IOException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,94,ptrn = new File(logDirectory(), ptrn.replace("%{id8}", U.id8(nodeId))).getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,138,private static File logDirectory() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,139,return !F.isEmpty(U.IGNITE_LOG_DIR) ? new File(U.IGNITE_LOG_DIR) : U.resolveWorkDirectory("log", false);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,283,folder = U.resolveWorkDirectory(curDirPath, false);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1714,new IpcSharedMemoryServerEndpoint(log, ignite.configuration().getNodeId(), gridName);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,145,tmp = U.resolveWorkDirectory(path, false);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,300,dir = U.resolveWorkDirectory(path, true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,109,outputBase = U.resolveWorkDirectory("hadoop", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,121,ctx.kernalContext().gridName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,383,Process proc = startJavaProcess(childProcId, startMeta, job);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,523,HadoopJob job) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,531,File workDir = U.resolveWorkDirectory("", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/child/HadoopExternalProcessStarter.java,84,U.setWorkDirectory(args.workDir, U.getIgniteHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,264,String gridName
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,688,locProcDesc.processId(), gridName);
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.java,1011,uri = U.resolveWorkDirectory(DFLT_DEPLOY_DIR, false).toURI();
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,62,return (SqlQuery<K, V>)super.setPageSize(pageSize);
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,67,return (SqlQuery<K, V>)super.setLocal(loc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,483,new IgniteOutClosureX<CacheQueryFuture<Map.Entry<K, V>>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,509,return new CacheEntryImpl<>(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,513,return cur != null || (cur = fut.next()) != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,665,if (qry.clause() == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,37,private final GridAtomicLong minTime = new GridAtomicLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,61,return minTime.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,74,long val = completed.sum();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,76,return val > 0 ? sumTime.sum() / val : 0;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8294,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8295,Class<?> cls = obj.getClass();
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/GridLoadBalancerManager.java,75,return getSpi(ses.getLoadBalancingSpi()).getBalancedNode(ses, top, job);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,459,internal = dep.internalTask(task, taskCls);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,277,catch (IgniteTxOptimisticCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,289,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,290,U.error(log, "Failed to invalidate transaction: " + tx, e);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1545,fullTblName = F.isEmpty(schema) ? tblName : schema + "." + tblName;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1549,cols = F.concat(false, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1558,loadCacheQry = dialect.loadCacheQuery(fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1560,loadCacheSelRangeQry = dialect.loadCacheSelectRangeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1562,loadQrySingle = dialect.loadQuery(fullTblName, keyCols, cols, 1);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1564,maxKeysPerStmt = dialect.getMaxParameterCount() / keyCols.size();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1566,loadQry = dialect.loadQuery(fullTblName, keyCols, cols, maxKeysPerStmt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1568,insQry = dialect.insertQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1570,updQry = dialect.updateQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1572,mergeQry = dialect.mergeQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1574,remQry = dialect.removeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1607,return dialect.loadQuery(fullTblName, keyCols, cols, keyCnt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1618,return dialect.loadCacheRangeQuery(fullTblName, keyCols, cols, appendLowerBound, appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,249,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/DB2Dialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/H2Dialect.java,37,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,46,public String loadCacheRangeQuery(String fullTblName,
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,47,Collection<String> keyCols, Iterable<String> uniqCols, boolean appendLowerBound, boolean appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/MySQLDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/OracleDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,38,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,68,match, setCols, colsLst, valuesCols);
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,134,toJavaFieldName(colName), toJavaType(col.type(), col.nullable()).getName(),
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,496,private static Class<?> toJavaType(int type, boolean nullable) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,497,switch (type) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,503,return nullable ? Byte.class : byte.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,506,return nullable ? Short.class : short.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,509,return nullable ? Integer.class : int.class;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,676,String selQry = args[i + 1].toString();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,680,futs.add(pool.submit(new LoadCacheCustomQueryWorker<>(em, selQry, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,686,for (EntryMapping em : entryMappings) {
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,640,Space old = spaces.putIfAbsent(masked, space = new Space(masked));
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,838,private SwapValuesQueue(int minTakeSize, int maxSize) {
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,854,mayAdd.await();
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1420,private final SwapValuesQueue que = new SwapValuesQueue(writeBufSize, maxWriteQueSize);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1444,private Space(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,341,if (hasFilters || retVal || txEntry.op() == DELETE || txEntry.op() == TRANSFORM) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,348,CacheObject val = cached.innerGet(
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousHandler.java,63,public void onListenerRegistered(UUID routineId, GridKernalContext ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,391,if (registerHandler(data.nodeId, item.routineId, item.hnd, item.bufSize, item.interval,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,393,item.hnd.onListenerRegistered(item.routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,462,hnd.onListenerRegistered(routineId, this.ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,570,hnd.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,792,boolean registered = false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,325,final ClassLoader cl0 = Thread.currentThread().getContextClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,327,Thread.currentThread().setContextClassLoader(Configuration.class.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,333,Thread.currentThread().setContextClassLoader(cl0);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,342,public static JobConf safeCreateJobConf() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,343,final ClassLoader cl0 = Thread.currentThread().getContextClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,345,Thread.currentThread().setContextClassLoader(JobConf.class.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,347,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,348,return new JobConf();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,350,finally {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,351,Thread.currentThread().setContextClassLoader(cl0);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,133,hadoopJobID = new JobID(jobId.globalId().toString(), jobId.localId());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,135,jobConf = HadoopUtils.safeCreateJobConf();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,137,HadoopFileSystemsUtils.setupFileSystems(jobConf);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,139,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,142,jobConf.set(e.getKey(), e.getValue());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,144,jobCtx = new JobContextImpl(jobConf, hadoopJobID);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,146,rsrcMgr = new HadoopV2JobResourceManager(jobId, jobCtx, log, this);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,161,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,218,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,292,.equals(HadoopClassLoader.nameForJob(this.locNodeId));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,294,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,300,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,97,Thread.currentThread().setContextClassLoader(cfg.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,106,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,161,Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,183,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,232,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,233,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,261,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,292,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,308,Thread.currentThread().setContextClassLoader(null);
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,206,String gridNameR = t.get1();
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,209,IgniteLogger log = IgnitionEx.gridx(gridNameR).log();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1202,public static IgniteKernal gridx(@Nullable String name) {
modules/core/src/main/java/org/apache/ignite/internal/client/GridClientConfiguration.java,160,marshaller = cfg.getMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,716,IgniteKernal g = IgnitionEx.gridx(gridName);
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterNodeLocalMapImpl.java,92,return IgnitionEx.gridx(stash.get()).cluster().nodeLocalMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4374,return IgnitionEx.gridx(t.get1()).cachex(t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1959,IgniteKernal grid = IgnitionEx.gridx(t.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,193,private Marshaller marshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,20,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,24,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,25,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,42,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,47,GridByteArrayOutputStream out = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,49,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,50,out = new GridByteArrayOutputStream(DFLT_BUFFER_SIZE);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,52,marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,54,return out.toByteArray();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,56,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,57,U.close(out, null);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,63,GridByteArrayInputStream in = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,65,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,66,in = new GridByteArrayInputStream(arr, 0, arr.length);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,68,return unmarshal(in, clsLdr);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,70,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,71,U.close(in, null);
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,28,import org.apache.ignite.marshaller.AbstractMarshaller;
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,66,public class JdkMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,30,import org.apache.ignite.marshaller.AbstractMarshaller;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,82,public class OptimizedMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,433,spi.marsh.marshal(evt)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,685,spi.marsh.marshal(attrs.get(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,721,msgWorker.addMessage(new TcpDiscoveryCustomEventMessage(getLocalNodeId(), evt, spi.marsh.marshal(evt)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,804,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT, spi.marsh.marshal(subj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1195,spi.marsh.marshal(attrs.get(IgniteNodeAttributes.ATTR_SECURITY_CREDENTIALS)));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1218,return spi.marsh.unmarshal(credBytes, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2889,attrs.put(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT, spi.marsh.marshal(subj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3253,SecurityContext coordSubj = spi.marsh.unmarshal(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4350,msg.message(msgObj, spi.marsh.marshal(msgObj));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,344,protected final Marshaller marsh = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1666,byte[] bytes = marsh.marshal(entry.getValue());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1697,Serializable compData = marsh.unmarshal(entry.getValue(), clsLdr);
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,38,import org.apache.ignite.marshaller.jdk.JdkMarshaller;
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,175,converter = new DefaultConverter<>();
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,217,private static final JdkMarshaller MARSH = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,222,return MARSH.unmarshal(msg, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1359,if (ctx.event().isRecordable(evtType)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,301,return dataCachePrj.igfsDataSpaceMax();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,32,class GridUnsafeLru {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,159,return lrus[addIdx.getAndIncrement() % cnt].offer(part, addr, hash);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,168,int idx = rmvIdx.getAndIncrement();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,160,private final GridCacheMapEntry entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,170,this.entry = entry;
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,173,private static class ContinuousQueryListener implements CacheEntryUpdatedListener<Integer, String> {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,184,private ContinuousQueryListener(IgniteLogger log, File workDir) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,358,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,359,assert prevBatch.finishing() :
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,522,return loadCacheRange(m, clo, null, null);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,710,futs.add(pool.submit(loadCacheRange(em, clo, null, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,720,futs.add(pool.submit(loadCacheRange(em, clo, lowerBound, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,723,futs.add(pool.submit(loadCacheRange(em, clo, upperBound, null)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,725,else
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,726,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,728,catch (SQLException ignored) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,729,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,735,else {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,740,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,138,res.add(parent);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,139,res.addAll(children);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,335,void finish() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,483,private boolean needFinishOnePhase() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,545,private void finish(Iterable<GridDistributedTxMapping> mappings) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,548,finish(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,554,private void finish(GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,773,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,821,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,837,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,393,void await(IgfsPath... paths) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,161,unregisterRemote(routineId);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,54,return val != null ? new SimpleValueWrapper(val) : null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,71,cache.put(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,76,Object old = cache.putIfAbsent(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,78,return old != null ? new SimpleValueWrapper(old) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,77,pendingEntries.add(new EntryWrapper(entry));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,129,protected CleanupWorker() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,138,EntryWrapper first = pendingEntries.firstx();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,140,if (first != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,141,long waitTime = first.expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,144,U.sleep(waitTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,146,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,147,U.sleep(500);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,207,return primaryAndBackups(affInfo, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,243,key = ((CacheObject)key).value(affInfo.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,245,return affInfo.mapper.affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,501,key = ((CacheObject)key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,503,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,518,private <K> List<ClusterNode> primaryAndBackups(AffinityInfo aff, K key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,522,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,524,return aff.assignment.get(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,583,private AffinityKeyMapper keyMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,584,return mapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,674,return cache().affinityFunction().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,786,key = ((CacheObject)key).value(cache().cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,788,return cache().keyMapper().affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,833,return cache().assignment().get(partition(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,867,map.put(p, mapPartitionToNode(p));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,203,public int partition(Object key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1793,return cacheObjects().toCacheKeyObject(cacheObjCtx, obj, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryInfo.java,405,key = ctx.cacheObjects().toCacheKeyObject(cacheObjCtx, key0, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,134,public KeyCacheObject toCacheKeyObject(CacheObjectContext ctx, Object obj, boolean userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,483,keys.add(cacheObjProc.toCacheKeyObject(cacheObjCtx, entry.getKey(), true));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,488,KeyCacheObject key = cacheObjProc.toCacheKeyObject(cacheObjCtx, e.getKey(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,580,KeyCacheObject key0 = cacheObjProc.toCacheKeyObject(cacheObjCtx, key, true);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,136,public class SpringCacheManager implements CacheManager, InitializingBean {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,260,ignite = Ignition.start(cfgPath);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,262,ignite = Ignition.start(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,233,if (igfsCtx.configuration().getPathModes() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,234,for (Map.Entry<String, IgfsMode> e : igfsCtx.configuration().getPathModes().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,260,modeRslvr = new IgfsModeResolver(dfltMode, modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,620,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,667,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,685,if (!childrenModes.equals(Collections.singleton(PRIMARY))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,686,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,770,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,867,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,946,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,950,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,963,else if (mode == PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,964,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,991,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,995,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1028,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1071,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1086,if (info == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1087,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1264,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1284,if (!create) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1285,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1331,if (desc == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1332,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1354,private void checkConflictWithPrimary(IgfsPath path) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1355,if (secondaryFs != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1356,if (secondaryFs.info(path) != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1357,throw new IgfsInvalidPathException("Path mapped to a PRIMARY mode found in secondary file " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1388,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,22,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,26,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,44,private ArrayList<T2<IgfsPath, IgfsMode>> modes;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,50,private Map<IgfsPath, Set<IgfsMode>> childrenModesCache;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,61,if (modes != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,62,ArrayList<T2<IgfsPath, IgfsMode>> modes0 = new ArrayList<>(modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,65,Collections.sort(modes0, new Comparator<Map.Entry<IgfsPath, IgfsMode>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,67,Map.Entry<IgfsPath, IgfsMode> o2) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,68,return o2.getKey().components().size() - o1.getKey().components().size();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,72,this.modes = modes0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,75,childrenModesCache = new GridBoundedConcurrentLinkedHashMap<>(MAX_PATH_CACHE);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,95,if (startsWith(path, entry.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,117,public Set<IgfsMode> resolveChildrenModes(IgfsPath path) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,118,assert path != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,121,return Collections.singleton(dfltMode);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,122,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,123,Set<IgfsMode> children = childrenModesCache.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,125,if (children == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,126,children = new HashSet<>(IgfsMode.values().length, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,128,IgfsMode pathDefault = dfltMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,130,for (T2<IgfsPath, IgfsMode> child : modes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,131,if (startsWith(path, child.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,132,pathDefault = child.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,134,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,137,children.add(child.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,140,children.add(pathDefault);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,142,childrenModesCache.put(path, children);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,145,return children;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,164,private static boolean startsWith(IgfsPath path, IgfsPath prefix) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,165,List<String> p1Comps = path.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,166,List<String> p2Comps = prefix.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,169,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,171,for (int i = 0; i < p1Comps.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,174,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,177,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,181,return true;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,638,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(srcPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,640,if (childrenModes.contains(PROXY)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,642,clientLog.logRename(srcPath, PROXY, dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,646,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,648,clientLog.logRename(srcPath, modeRslvr.resolveMode(srcPath), dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,668,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,670,if (childrenModes.contains(PROXY)) {
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,453,return nextExecutionTimes(1, U.currentTimeMillis())[0];
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,90,import static org.apache.ignite.transactions.TransactionConcurrency.PESSIMISTIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,91,import static org.apache.ignite.transactions.TransactionIsolation.REPEATABLE_READ;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,494,IgniteInternalCache<?,?> prj = localCache(cacheName).forSubjectId(clientId).setSkipStore(skipStore);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,684,GridCacheAdapter<Object,Object> cache = ctx.cache().internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,1391,return c.sizeAsync(new CachePeekMode[]{CachePeekMode.PRIMARY});
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,20,import java.nio.ByteBuffer;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,390,protected Object getColumnValue(ResultSet rs, int colIdx, Class<?> type) throws SQLException {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,391,Object val = rs.getObject(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,394,return null;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,397,return rs.getInt(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,400,return rs.getLong(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,403,return rs.getDouble(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,406,return rs.getBoolean(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,409,return rs.getByte(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,412,return rs.getShort(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,415,return rs.getFloat(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,417,if (type == Integer.class || type == Long.class || type == Double.class ||
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,418,type == Byte.class || type == Short.class ||  type == Float.class) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,419,Number num = (Number)val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,422,return num.intValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,424,return num.longValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,426,return num.doubleValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,428,return num.byteValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,430,return num.shortValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,432,return num.floatValue();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,435,if (type == UUID.class) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,437,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,439,if (val instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,440,ByteBuffer bb = ByteBuffer.wrap((byte[])val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,442,long most = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,443,long least = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,445,return new UUID(most, least);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,449,return UUID.fromString((String)val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,452,return val;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,277,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,300,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,320,public IgniteFuture<?> addData(Collection<? extends Map.Entry<K, V>> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,340,public IgniteFuture<?> addData(Map<K, V> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,357,public void flush() throws CacheException, IgniteInterruptedException, IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,378,public void close(boolean cancel) throws CacheException, IgniteInterruptedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,828,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,948,IgniteCheckedException e = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,965,catch (IgniteCheckedException e0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,966,e = e0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,969,fut.onDone(null, e != null ? e : err);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,972,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1214,U.acquire(sem);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1240,incrementActiveTasks();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1633,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1634,filterChain.onSessionClosed(ses);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1636,catch (IgniteCheckedException e1) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1637,filterChain.onExceptionCaught(ses, e1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,353,GridCommunicationClient rmv = clients.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,355,if (rmv instanceof GridTcpNioCommunicationClient &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,356,((GridTcpNioCommunicationClient)rmv).session() == ses &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,357,clients.remove(id, rmv)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,358,rmv.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,361,GridNioRecoveryDescriptor recoveryData = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,363,if (recoveryData != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,364,if (recoveryData.nodeAlive(getSpiContext().node(id))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,365,if (!recoveryData.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,367,log.debug("Session was closed but there are unacknowledged messages, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,370,commWorker.addReconnectRequest(recoveryData);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,373,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,374,recoveryData.onNodeLeft();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2977,private final BlockingQueue<GridNioRecoveryDescriptor> q = new LinkedBlockingQueue<>();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2992,GridNioRecoveryDescriptor recoveryDesc = q.poll(idleConnTimeout, TimeUnit.MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2995,processRecovery(recoveryDesc);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3102,private void processRecovery(GridNioRecoveryDescriptor recoveryDesc) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3103,ClusterNode node = recoveryDesc.node();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3105,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3106,if (clients.containsKey(node.id()) ||
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3107,!recoveryDesc.nodeAlive(getSpiContext().node(node.id())) ||
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3109,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3111,catch (IgniteClientDisconnectedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3113,log.debug("Failed to ping node, client disconnected.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3115,return;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3118,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3120,log.debug("Recovery reconnect [rmtNode=" + recoveryDesc.node().id() + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3122,GridCommunicationClient client = reserveClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3124,client.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3126,catch (IgniteCheckedException | IgniteException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3127,if (recoveryDesc.nodeAlive(getSpiContext().node(node.id()))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3129,log.debug("Recovery reconnect failed, will retry " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3132,addReconnectRequest(recoveryDesc);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3134,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3136,log.debug("Recovery reconnect failed, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3139,onException("Recovery reconnect failed, node left [rmtNode=" + recoveryDesc.node().id() + "]",
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3140,e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3148,void addReconnectRequest(GridNioRecoveryDescriptor recoverySnd) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,3149,boolean add = q.add(recoverySnd);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,20,import java.io.File;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,21,import java.io.FilenameFilter;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,24,import java.net.MalformedURLException;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,495,private static String getEnv(String name, String dflt) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,496,String res = System.getProperty(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,499,res = System.getenv(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,501,return F.isEmpty(res) ? dflt : res;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,510,private static void addUrls(Collection<URL> res, File dir, final String startsWith) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,511,File[] files = dir.listFiles(new FilenameFilter() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,513,return startsWith == null || name.startsWith(startsWith);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,518,throw new IOException("Path is not a directory: " + dir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,521,res.add(file.toURI().toURL());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,553,return getEnv("HADOOP_PREFIX", getEnv("HADOOP_HOME", null));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,572,hadoopUrls = new ArrayList<>();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,574,String hadoopPrefix = hadoopHome();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,577,throw new IgniteCheckedException("Failed resolve Hadoop installation location. Either HADOOP_PREFIX or " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,580,String commonHome = getEnv("HADOOP_COMMON_HOME", hadoopPrefix + "/share/hadoop/common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,581,String hdfsHome = getEnv("HADOOP_HDFS_HOME", hadoopPrefix + "/share/hadoop/hdfs");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,582,String mapredHome = getEnv("HADOOP_MAPRED_HOME", hadoopPrefix + "/share/hadoop/mapreduce");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,585,addUrls(hadoopUrls, new File(commonHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,586,addUrls(hadoopUrls, new File(hdfsHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,587,addUrls(hadoopUrls, new File(mapredHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,589,addUrls(hadoopUrls, new File(hdfsHome), "hadoop-hdfs-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,591,addUrls(hadoopUrls, new File(commonHome), "hadoop-common-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,592,addUrls(hadoopUrls, new File(commonHome), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,593,addUrls(hadoopUrls, new File(commonHome + "/lib"), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,595,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,596,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-core");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,598,catch (Exception e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,599,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,36,import static org.apache.ignite.internal.processors.hadoop.HadoopClassLoader.hadoopHome;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,37,import static org.apache.ignite.internal.processors.hadoop.HadoopClassLoader.hadoopUrls;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,78,U.quietAndInfo(log, "HADOOP_HOME is set to " + hadoopHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,80,boolean ok = false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,82,try { // Check for Hadoop installation.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,83,hadoopUrls();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,85,ok = true;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,87,catch (IgniteCheckedException e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,88,U.quietAndWarn(log, e.getMessage());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,91,if (ok) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,92,hctx = new HadoopContext(
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,93,ctx,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,94,cfg,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,95,new HadoopJobTracker(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,96,new HadoopEmbeddedTaskExecutor(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,99,new HadoopShuffle());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,103,c.start(hctx);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,105,hadoop = new HadoopImpl(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,772,if (e.getValue() < maxPerNodeCnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,71,import static org.apache.ignite.transactions.TransactionIsolation.READ_COMMITTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/callback/PlatformCallbackGateway.java,91,enter();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,51,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,59,import static org.apache.ignite.cache.CacheMemoryMode.OFFHEAP_VALUES;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,313,long maxSpaceSize = cfg.getMaxSpaceSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,315,if (maxSpaceSize > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,317,long maxHeapSize = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,318,long offHeapSize = dataCacheCfg.getOffHeapMaxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,322,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater that size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,326,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater than size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,332,U.warn(log, "IGFS max space size is not specified but data cache values are stored off-heap (max " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,338,if (igfsDataSpaceMax == 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,339,long maxMem = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,342,long jvmFreeSize = (maxMem - 512 * 1024 * 1024);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,345,jvmFreeSize = maxMem / 2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,347,long dfltMaxSize = (long)(0.8f * maxMem);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,349,igfsDataSpaceMax = Math.min(dfltMaxSize, jvmFreeSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,503,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,505,log.debug("Failed to find write completion future for file in pending write map (most likely it was " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8532,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8533,Collection<InetSocketAddress> extAddrs0 = addrRslvr.getExternalAddresses(sockAddr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8536,extAddrs.addAll(extAddrs0);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8538,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8539,throw new IgniteSpiException("Failed to get mapped external addresses " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3556,spi.ipFinder.unregisterAddresses(locNode.socketAddresses());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java,263,spi.ipFinder.initializeLocalAddresses(locNode.socketAddresses());
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,20,import com.google.common.collect.Sets;
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,135,log.info("Initializing ZooKeeper IP Finder.");
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,158,log.info("Destroying ZooKeeper IP Finder.");
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,188,log.info("ZooKeeper IP Finder resolved addresses: " + answer);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,197,log.info("Registering addresses with ZooKeeper IP Finder: " + addrs);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,242,log.info("Unregistering addresses with ZooKeeper IP Finder: " + addrs);
modules/zookeeper/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/zk/TcpDiscoveryZookeeperIpFinder.java,221,.build();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8427,List<InetAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8486,List<InetSocketAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1700,A.notNull(trans, "trans");
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1703,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,29,import java.util.concurrent.atomic.AtomicBoolean;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,87,private volatile CountDownLatch internalLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,90,private final AtomicBoolean initGuard = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,241,internalLatch.countDown();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,248,if (initGuard.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1702,U.error(log, "Failed to unmarshal discovery data for component: "  + entry.getKey(), e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,33,import javax.servlet.http.HttpServletRequest;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,34,import javax.servlet.http.HttpServletRequestWrapper;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,35,import javax.servlet.http.HttpSession;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,39,super(new ArrayList<GridSqlElement>(on == null ? 2 : 3));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,45,addChild(on);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,68,return size() < 3 ? null : child(2);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,81,GridSqlElement on = on();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,84,buff.append(" \n ON ").append(StringUtils.unEnclose(on.getSQL()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,753,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,754,ClusterNode locNode = ctx.discovery().localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,873,for (CacheConfiguration cfg : ctx.config().getCacheConfiguration()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,874,GridCacheAdapter cache = caches.get(maskNull(cfg.getName()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,876,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,877,if (cfg.getRebalanceMode() == SYNC) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteServicesImpl.java,232,return ctx.service().serviceProxy(prj, name, svcItf, sticky);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,637,return new GridServiceProxy<>(prj, name, svcItf, sticky, ctx).proxy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,865,nm.setNonHeapMemoryUsed(metrics.getNonHeapMemoryUsed());
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,313,Collection<ClusterNode> all = ctx.discovery().allNodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,693,its.add(cache.localEntriesIterator(modes.primary, modes.backup));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,704,its.add(swapMgr.<K, V>swapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,707,its.add(swapMgr.<K, V>offheapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1181,return F.isEmpty(p) || isAll(e.<K1, V1>wrapLazyValue(), p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1716,return cacheCfg.getMemoryMode() == OFFHEAP_TIERED && isOffHeapEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1723,return cacheCfg.getMemoryMode() == OFFHEAP_TIERED || cacheCfg.getMemoryMode() == OFFHEAP_VALUES;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,150,public <K, V> Cache.Entry<K, V> wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1575,public <K, V> Iterator<Map.Entry<K, V>> lazySwapIterator() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1579,return lazyIterator(cctx.gridSwap().rawIterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1634,public <K, V> Iterator<Map.Entry<K, V>> lazyOffHeapIterator() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1638,return lazyIterator(offheap.iterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1666,final GridCloseableIterator<? extends Map.Entry<byte[], byte[]>> it) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1679,cur = new GridVersionedMapEntry<K, V>(cur0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2008,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2016,return cacheEntryIterator(this.<K, V>lazySwapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2021,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2048,return cacheEntryIterator(this.<K, V>lazyOffHeapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2053,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2259,public PartitionsIterator(Collection<Integer> parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2266,return cacheEntryIterator(GridCacheSwapManager.this.<K, V>lazyIterator(nextPartition(part)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2297,advance();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2325,private void advance() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2469,private Map.Entry<byte[], byte[]> entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2476,public GridVersionedMapEntry(Map.Entry<byte[], byte[]> entry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2483,KeyCacheObject key = cctx.toCacheKeyObject(entry.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2485,return key.value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2499,return e.value().value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1019,public Iterator<Cache.Entry<K, V>> localEntriesIterator(final boolean primary, final boolean backup) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1152,entry = next.wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2439,key = cctx.toCacheKeyObject(keyBytes()).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,549,res = secondaryFs.exists(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,953,Collection<IgfsPath> children = secondaryFs.listPaths(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,956,files.add(child.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,998,Collection<IgfsFile> children = secondaryFs.listFiles(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1000,for (IgfsFile child : children) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1797,IgfsFile status = secondaryFs.info(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,408,throw new IgniteCheckedException("Cannot start cache in PRIVATE or ISOLATED deployment mode: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,409,ctx.config().getDeploymentMode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,850,public boolean onTtlExpired(GridCacheVersion obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,484,boolean swapEnabled = cctx.swap().swapEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,505,CacheObject val = cctx.fromOffheap(offHeapPointer(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,524,long delta = e.expireTime() == 0 ? 0 : e.expireTime() - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,526,if (delta >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,527,CacheObject val = e.value();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,529,val = cctx.kernalContext().cacheObjects().prepareForCache(val, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,536,offHeapPointer(e.offheapPointer());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,540,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,541,clearIndex(e.value());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,556,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,558,if (expireTime > 0 && U.currentTimeMillis() >= expireTime) { // Don't swap entry if it's expired.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,560,if (cctx.offheapTiered()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,561,cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,563,offHeapPointer(0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,566,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,599,expireTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,601,valClsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,638,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,639,cctx.swap().remove(key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,709,CacheObject old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,710,CacheObject ret = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,714,boolean expired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,716,CacheObject expiredVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,718,boolean hasOldBytes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,724,startVer = ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,730,double delta;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,732,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,734,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,735,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,738,log.debug("Checked expiration time for entry [timeLeft=" + delta + ", entry=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,741,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,744,CacheObject val = this.val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,746,hasOldBytes = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,751,boolean valid = valid(tx != null ? tx.topologyVersion() : cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,754,if (val == null && !hasOldBytes && readSwap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,756,if (isNew() || !valid) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,759,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,760,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,763,clearIndex(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,765,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,768,unswap(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,773,val = unswap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,776,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,777,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,780,log.debug("Checked expiration time for entry [timeLeft=" + delta +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,784,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,790,old = expired || !valid ? null : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,792,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,793,expiredVal = val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,795,value(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,798,if (old == null && !hasOldBytes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,807,ret = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,810,if (evt && expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,811,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,812,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,813,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,814,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,815,owner,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,816,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,817,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,818,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,819,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,820,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,821,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,822,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,826,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,829,evt = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,832,if (evt && !expired && cctx.events().isRecordable(EVT_CACHE_OBJECT_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,849,boolean loadedFromStore = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,851,if (ret == null && readThrough) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,868,loadedFromStore = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,888,updateIndex(ret, expTime, nextVer, prevVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1045,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1379,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1706,unswap(retval);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2500,if (!hasValueUnlocked() || checkExpired()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2502,ver = nextVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2513,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2523,cctx.onDeferredDelete(this, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3107,CacheObject val = isNew ? unswap(true) : rawGetOrUnmarshalUnlocked(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3351,CacheObject expiredVal = saveOldValueUnlocked(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3353,boolean hasOldBytes = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3355,boolean expired = checkExpired();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3357,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3358,if (!obsolete()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3359,if (cctx.deferredDelete() && !detached() && !isInternal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3360,if (!deletedUnlocked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3363,deletedUnlocked(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3365,deferred = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3368,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3370,obsolete = true; // Success, will return "true".
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3374,clearIndex(expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3376,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3378,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3379,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3380,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3381,cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3382,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3383,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3384,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3385,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3386,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3387,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3388,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3389,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3393,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3417,return obsolete;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1199,public void remove(final KeyCacheObject key) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1207,int part = cctx.affinity().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,117,e.entry.onTtlExpired(obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,578,cctx.swap().remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,236,if (cctx.isReplicated() || cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,237,boolean primary = cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1055,val0 = CU.value(val, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1494,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1501,return new GridTuple3<>(false, cctx.unwrapTemporary(value(old0, old, false)), invokeRes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2072,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2283,return cacheObj != null ? cacheObj.value(cctx.cacheObjectContext(), cpy) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,239,resMap.put(key0 != null ? key0 : CU.value(key, cctx, true), res0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,396,ret.addEntryProcessResult(txEntry.context(), key, null, procRes, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1415,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), computed, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1422,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), null, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1876,compRes.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,472,return m.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1234,if (cctx.offheapTiered() && hadValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1235,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1237,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1328,cctx.config().getInterceptor().onAfterRemove(entry0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1589,boolean hasValPtr = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1600,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1601,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1603,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2196,boolean hasValPtr = hasOffHeapPointer();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2204,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2205,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2207,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,29,import org.apache.ignite.services.Service;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,80,public Service service() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,81,return cfg.getService();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,926,private Service copyAndInject(Service svc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,929,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,930,byte[] bytes = m.marshal(svc);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,934,ctx.resource().inject(cp);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,936,return cp;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,938,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,939,log.error("Failed to copy service (will reuse same instance): " + svc.getClass(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,941,return svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceDescriptorImpl.java,57,return dep.configuration().getService().getClass();
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,58,private String name;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,65,private int totalCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,68,private int maxPerNodeCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,71,private String cacheName;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,74,private Object affKey;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,78,private IgnitePredicate<ClusterNode> nodeFilter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,348,setFuture(ctx.cache().globalLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,349,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,350,ctx.cache().globalLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,440,final CacheQuery<Map.Entry<K,V>> qry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,497,return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K,V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,499,private Map.Entry<K,V> cur;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,505,Map.Entry<K,V> e = cur;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,235,size.increment();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,81,private transient WebSessionListener lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,148,public void listener(WebSessionListener lsnr) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,149,assert lsnr != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,151,this.lsnr = lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,254,lsnr.destroySession(id);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,180,private WebSessionListener lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,310,sesId = doFilter0(httpReq, res, chain);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,316,sesId = doFilter0(httpReq, res, chain);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,335,private String doFilter0(HttpServletRequest httpReq, ServletResponse res, FilterChain chain) throws IOException,
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,369,else {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,372,sesId = cached.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,378,cached.listener(lsnr);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,388,Collection<T2<String, Object>> updates = ((WebSession)ses).updates();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,405,String sesId = sesIdTransformer != null ? sesIdTransformer.apply(ses.getId()) : ses.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,25,import javax.cache.CacheException;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,26,import javax.cache.expiry.Duration;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,27,import javax.cache.expiry.ExpiryPolicy;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,28,import javax.cache.expiry.ModifiedExpiryPolicy;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,31,import org.apache.ignite.Ignite;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,32,import org.apache.ignite.IgniteCache;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,33,import org.apache.ignite.IgniteLogger;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,37,import org.apache.ignite.internal.util.typedef.internal.S;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,40,import static java.util.concurrent.TimeUnit.MILLISECONDS;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,53,private final int retries;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,56,private final IgniteLogger log;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,64,assert ignite != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,68,this.retries = retries > 0 ? retries : 1;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,70,log = ignite.log();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,76,public void destroySession(String sesId) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,77,assert sesId != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,94,public void updateAttributes(String sesId, Collection<T2<String, Object>> updates, int maxInactiveInterval) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,95,assert sesId != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,96,assert updates != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,99,log.debug("Session attributes updated [id=" + sesId + ", updates=" + updates + ']');
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,101,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,102,for (int i = 0; i < retries; i++) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,103,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,104,IgniteCache<String, WebSession> cache0;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,106,if (maxInactiveInterval > 0) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,107,long ttl = maxInactiveInterval * 1000;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,109,ExpiryPolicy plc = new ModifiedExpiryPolicy(new Duration(MILLISECONDS, ttl));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,113,else
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,116,cache0.invoke(sesId, new AttributesProcessor(updates));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,118,break;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,121,if (i == retries - 1) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,122,U.warn(log, "Failed to apply updates for session (maximum number of retries exceeded) [sesId=" +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,123,sesId + ", retries=" + retries + ']');
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,125,else {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,126,U.warn(log, "Failed to apply updates for session (will retry): " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,134,U.error(log, "Failed to update session attributes [id=" + sesId + ']', e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,140,return S.toString(WebSessionListener.class, this);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,162,if (f != null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,163,String spaceName = ((GridH2Table)getTable()).spaceName();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,165,p = f.forSpace(spaceName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,168,return new FilteringIterator(iter, U.currentTimeMillis(), p);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,221,IgniteBiPredicate<Object, Object> fltr) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,225,this.fltr = fltr;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,243,Object val = row.getValue(valCol).getObject();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,246,assert val != null;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,71,private String httpServerHost = null;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,80,private int httpServerPort = Integer.valueOf(DEFAULT_HTTP_SERVER_PORT);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,155,private String ignitePackageUrl = null;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,323,public void hostnameConstraint(Pattern pattern) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,324,this.hostnameConstraint = pattern;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,382,return httpServerHost;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,389,return httpServerPort;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,396,return ignitePackageUrl;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,431,public static ClusterProperties from(String config) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,435,if (config != null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,438,props.load(new FileInputStream(config));
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,445,prop.httpServerHost = getStringProperty(IGNITE_HTTP_SERVER_HOST, props, getNonLoopbackAddress());
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,450,prop.httpServerPort = Integer.valueOf(port);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,452,prop.httpServerPort = Integer.valueOf(getStringProperty(IGNITE_HTTP_SERVER_PORT, props,
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,458,prop.ignitePackageUrl = getStringProperty(IGNITE_PACKAGE_URL, props, null);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,479,String pattern = getStringProperty(IGNITE_HOSTNAME_CONSTRAINT, props, null);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,481,if (pattern != null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,483,prop.hostnameConstraint = Pattern.compile(pattern);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,502,private static double getDoubleProperty(String name, Properties fileProps, Double defaultVal) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,506,String property = System.getProperty(name);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,509,property = System.getenv(name);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,511,return property == null ? defaultVal : Double.valueOf(property);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,519,private static String getStringProperty(String name, Properties fileProps, String defaultVal) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,523,String property = System.getProperty(name);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,526,property = System.getenv(name);
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,528,return property == null ? defaultVal : property;
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,543,Enumeration<InetAddress> addresses = iface.getInetAddresses();
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,545,while (addresses.hasMoreElements()) {
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,546,InetAddress addr = addresses.nextElement();
modules/mesos/src/main/java/org/apache/ignite/mesos/ClusterProperties.java,553,throw new RuntimeException("Failed. Couldn't find non-loopback address");
modules/mesos/src/main/java/org/apache/ignite/mesos/IgniteFramework.java,66,JettyServer httpServer = new JettyServer();
modules/mesos/src/main/java/org/apache/ignite/mesos/IgniteFramework.java,68,httpServer.start(
modules/mesos/src/main/java/org/apache/ignite/mesos/IgniteFramework.java,107,credential);
modules/mesos/src/main/java/org/apache/ignite/mesos/IgniteFramework.java,117,httpServer.stop();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,26,import java.util.ArrayList;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,27,import java.util.Collections;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,28,import java.util.Comparator;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,29,import java.util.List;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,36,public static final String DOWNLOAD_LINK = "http://tiny.cc/updater/download_community.php";
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,39,public static final String DIRECT_DOWNLOAD_LINK = "http://www.gridgain.com/media/gridgain-community-fabric-";
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,45,private String latestVersion = null;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,57,public String getIgnite() {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,58,File folder = checkDownloadFolder();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,60,if (latestVersion == null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,61,List<String> files = findIgnites(folder);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,63,if (!files.isEmpty()) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,65,latestVersion = parseVersion(files.get(0));
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,66,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,67,latestVersion = parseVersion(Collections.max(files, new Comparator<String>() {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,70,return 0;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,72,String[] ver1 = parseVersion(f1).split("\\.");
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,73,String[] ver2 = parseVersion(f2).split("\\.");
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,79,return 1;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,80,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,81,return -1;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,87,latestVersion = updateIgnite(latestVersion);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,89,return "gridgain-community-fabric-" + latestVersion + ".zip";
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,96,private List<String> findIgnites(File folder) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,97,String[] files = folder.list();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,99,List<String> ignites = new ArrayList<>();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,101,if (files != null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,102,for (String fileName : files) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,104,ignites.add(fileName);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,108,return ignites;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,115,public String getIgnite(String version) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,116,File folder = checkDownloadFolder();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,118,String[] ignites = folder.list();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,120,String ignite = null;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,122,if (ignites != null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,123,for (String fileName : ignites) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,125,ignite = fileName;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,130,return ignite;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,132,return downloadIgnite(version);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,139,private String updateIgnite(String currentVersion) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,140,try {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,141,URL url;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,144,url = new URL(DOWNLOAD_LINK);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,145,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,146,url = new URL(DOWNLOAD_LINK + "?version=" + currentVersion);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,153,String redirectUrl = conn.getURL().toString();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,157,FileOutputStream outFile = new FileOutputStream(downloadFolder + "/" + fileName(redirectUrl));
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,163,return parseVersion(redirectUrl);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,167,return currentVersion;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,172,throw new RuntimeException("Failed update ignite.", e);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,180,public String downloadIgnite(String version) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,181,try {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,182,URL url = new URL(DIRECT_DOWNLOAD_LINK + version + ".zip");
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,184,HttpURLConnection conn = (HttpURLConnection)url.openConnection();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,186,int code = conn.getResponseCode();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,188,if (code == 200) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,189,checkDownloadFolder();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,191,String fileName = fileName(url.toString());
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,193,FileOutputStream outFile = new FileOutputStream(downloadFolder + fileName);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,195,outFile.getChannel().transferFrom(Channels.newChannel(conn.getInputStream()), 0, Long.MAX_VALUE);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,197,outFile.close();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,199,return fileName;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,201,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,202,throw new RuntimeException("Got unexpected response code. Response code: " + code);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,204,catch (IOException e) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,205,throw new RuntimeException("Failed update ignite.", e);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,218,return file;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,225,public static String parseVersion(String url) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,226,String[] split = url.split("-");
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,228,return split[split.length - 1].replaceAll(".zip", "");
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,42,private String configUrl;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,45,private String configName;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,52,public void init(ClusterProperties properties, IgniteProvider provider, String baseUrl) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,55,igniteUrl = baseUrl + IGNITE_PREFIX + provider.getIgnite();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,56,else
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,57,igniteUrl = baseUrl + IGNITE_PREFIX + provider.getIgnite(properties.igniteVer());
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,60,if (properties.userLibs() != null && !properties.userLibs().isEmpty()) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,61,File libsDir = new File(properties.userLibs());
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,81,if (properties.igniteCfg() != null) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,82,File cfg = new File(properties.igniteCfg());
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,85,configUrl = baseUrl + CONFIG_PREFIX + cfg.getName();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,87,configName = cfg.getName();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,91,configName = "ignite-default-config.xml";
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,93,configUrl = baseUrl + DEFAULT_CONFIG + configName;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,101,return configName;
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/ResourceProvider.java,122,return configUrl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1768,primary && writeThrough() && !req.skipStore(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,758,forceTransformBackups = reader.readBoolean("forceTransformBackups");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,766,futVer = reader.readMessage("futVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,774,invokeArgsBytes = reader.readObjectArray("invokeArgsBytes", MessageCollectionItemType.BYTE_ARR, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,846,byte syncModeOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,848,syncModeOrd = reader.readByte("syncMode");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,853,syncMode = CacheWriteSynchronizationMode.fromOrdinal(syncModeOrd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,858,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,866,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,874,ttls = reader.readMessage("ttls");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,882,vals = reader.readCollection("vals", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,890,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,28,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,45,import org.apache.ignite.internal.processors.cache.CacheLazyEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,562,protected void batchStoreCommit(Iterable<IgniteTxEntry> writeEntries) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,564,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,569,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,571,assert isWriteToStoreFromDhtValid(stores) : "isWriteToStoreFromDht can't be different within one transaction";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,573,boolean isWriteToStoreFromDht = F.first(stores).isWriteToStoreFromDht();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,575,if (near() || isWriteToStoreFromDht) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,576,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,577,if (writeEntries != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,578,Map<Object, IgniteBiTuple<Object, GridCacheVersion>> putMap = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,579,List<Object> rmvCol = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,580,CacheStoreManager writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,582,boolean skipNonPrimary = near() && isWriteToStoreFromDht;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,584,for (IgniteTxEntry e : writeEntries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,585,boolean skip = e.skipStore();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,587,if (!skip && skipNonPrimary) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,588,skip = e.cached().isNear() ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,589,e.cached().detached() ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,590,!e.context().affinity().primary(e.cached().partition(), topologyVersion()).isLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,594,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,596,boolean intercept = e.context().config().getInterceptor() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,599,e.cached().unswap(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,601,IgniteBiTuple<GridCacheOperation, CacheObject> res = applyTransformClosures(e, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,603,GridCacheContext cacheCtx = e.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,605,GridCacheOperation op = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,606,KeyCacheObject key = e.key();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,607,CacheObject val = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,608,GridCacheVersion ver = writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,610,if (op == CREATE || op == UPDATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,612,if (rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,613,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,615,writeStore.removeAll(this, rmvCol);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,618,rmvCol.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,620,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,624,if (writeStore != null && writeStore != cacheCtx.store()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,625,if (putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,626,writeStore.putAll(this, putMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,629,putMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,632,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,635,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,641,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,643,val = cacheCtx.toCacheObject(cacheCtx.unwrapTemporary(interceptorVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,647,writeStore = cacheCtx.store();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,649,if (writeStore.isWriteThrough()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,651,putMap = new LinkedHashMap<>(writeMap().size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,656,else if (op == DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,658,if (putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,659,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,661,writeStore.putAll(this, putMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,664,putMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,666,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,669,if (writeStore != null && writeStore != cacheCtx.store()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,670,if (rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,671,writeStore.removeAll(this, rmvCol);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,674,rmvCol.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,677,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,680,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,681,IgniteBiTuple<Boolean, Object> t = cacheCtx.config().getInterceptor().onBeforeRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,685,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,689,writeStore = cacheCtx.store();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,691,if (writeStore.isWriteThrough()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,693,rmvCol = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,699,log.debug("Ignoring NOOP entry for batch store commit: " + e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,702,if (putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,703,assert rmvCol == null || rmvCol.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,704,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,707,writeStore.putAll(this, putMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,710,if (rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,711,assert putMap == null || putMap.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,712,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,715,writeStore.removeAll(this, rmvCol);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,720,sessionEnd(stores, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,722,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,723,commitError(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,728,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,730,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,732,catch (Throwable ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,733,commitError(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,738,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,741,throw (Error)ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,743,throw new IgniteCheckedException("Failed to commit transaction to database: " + this, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,745,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,747,sessionEnd(stores, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1210,private void sessionEnd(Collection<CacheStoreManager> stores, boolean commit) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1211,Iterator<CacheStoreManager> it = stores.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1213,while (it.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1214,CacheStoreManager store = it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1216,store.sessionEnd(this, commit, !it.hasNext());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3505,private boolean isWriteToStoreFromDhtValid(Collection<CacheStoreManager> stores) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3506,if (stores != null && !stores.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3507,boolean exp = F.first(stores).isWriteToStoreFromDht();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3509,for (CacheStoreManager store : stores) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3511,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3515,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalEx.java,52,public void commitError(Throwable e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,182,Collection<IgfsBlockLocation> blocks;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,184,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,185,blocks = igfs.affinity(new IgfsPath(split0.file()), split0.start(), split0.length());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,187,catch (IgniteException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,188,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,191,assert blocks != null;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,195,return bestNode(blocks.iterator().next().nodeIds(), topIds, nodeLoads, false);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,196,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,198,Map<UUID, Long> nodeMap = new HashMap<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,200,List<UUID> bestNodeIds = null;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,201,long bestLen = -1L;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,203,for (IgfsBlockLocation block : blocks) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,204,for (UUID blockNodeId : block.nodeIds()) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,205,if (topIds.contains(blockNodeId)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,206,Long oldLen = nodeMap.get(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,207,long newLen = oldLen == null ? block.length() : oldLen + block.length();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,209,nodeMap.put(blockNodeId, newLen);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,211,if (bestNodeIds == null || bestLen < newLen) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,212,bestNodeIds = new ArrayList<>(1);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,214,bestNodeIds.add(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,216,bestLen = newLen;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,218,else if (bestLen == newLen) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,219,assert !F.isEmpty(bestNodeIds);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,221,bestNodeIds.add(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,227,if (bestNodeIds != null) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,228,return bestNodeIds.size() == 1 ? bestNodeIds.get(0) :
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,229,bestNode(bestNodeIds, topIds, nodeLoads, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceNotFoundException.java,33,super("Service node found: " + name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,222,ctx.service().cancel(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,587,return (T)ctxs.iterator().next().service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,609,return ctxs.iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,630,throw new IgniteException("Service does not implement specified interface [svcItf=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,633,return (T)ctx.service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,673,res.add((T)ctx.service());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,829,Service svc = assigns.service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,850,final Service cp = copyAndInject(svc);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,852,final ExecutorService exe = Executors.newSingleThreadExecutor(threadFactory);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,854,final ServiceContextImpl svcCtx = new ServiceContextImpl(assigns.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,855,UUID.randomUUID(), assigns.cacheName(), assigns.affinityKey(), cp, exe);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,857,ctxs.add(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,859,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,861,cp.init(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,863,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,864,log.error("Failed to initialize service (service will not be deployed): " + assigns.name(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,866,ctxs.remove(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,869,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,872,throw (RuntimeException)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,874,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,878,log.info("Starting service instance [name=" + svcCtx.name() + ", execId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,879,svcCtx.executionId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,882,exe.submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,884,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,885,cp.execute(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,887,catch (InterruptedException | IgniteInterruptedCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,889,log.debug("Service thread was interrupted [name=" + svcCtx.name() + ", execId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,890,svcCtx.executionId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,892,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,893,if (e.hasCause(InterruptedException.class) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,894,e.hasCause(IgniteInterruptedCheckedException.class)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,896,log.debug("Service thread was interrupted [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,899,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,900,U.error(log, "Service execution stopped with error [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,904,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,905,log.error("Service execution stopped with error [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,909,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,911,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,913,exe.shutdownNow();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,957,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,958,svcCtx.service().cancel(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,960,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,961,log.error("Failed to cancel service (ignoring) [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,965,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,967,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,969,ctx.resource().cleanup(svcCtx.service());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,971,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,972,log.error("Failed to clean up service (will ignore): " + svcCtx.name(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,42,import org.apache.ignite.internal.IgniteKernal;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,370,ServiceContextImpl svcCtx = ((IgniteKernal) ignite).context().service().serviceContext(svcName);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,55,private final Service svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,76,ServiceContextImpl(String name, UUID execId, String cacheName, Object affKey, Service svc,
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,82,this.svc = svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,115,Service service() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,137,catch (NoSuchMethodException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,561,IgniteUuid jobId = IgniteUuid.fromUuid(node.id());
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,521,return (Properties)System.getProperties().clone();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1587,boolean dfltAllowMatch = !(locPerms.defaultAllowAll() ^ rmtPerms.defaultAllowAll());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1854,private Set<IgniteUuid> procCustomMsgs = new GridBoundedLinkedHashSet<IgniteUuid>(MAX * 2);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,852,log.debug("Successfully executed GridComputeJobMasterLeaveAware.onMasterNodeLeft() callback " +
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,856,U.error(log, "Failed to execute GridComputeJobMasterLeaveAware.onMasterNodeLeft() callback " +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,745,throw new IgniteCheckedException("Task name specified by @GridComputeTaskName annotation" +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,795,String errMsg = "Failed to obtain remote job result policy for result from GridComputeTask.result(..) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,808,log.debug("Ignoring GridComputeTask.result(..) value since task is already reducing or" +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6442,return "GridNode [id=" + n.id() + ", order=" + n.order() + ", addr=" + n.addresses() +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,62,public static final String GET_ADDRS_QRY = "select hostname, port from tbl_addrs";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,65,public static final String REG_ADDR_QRY = "insert into tbl_addrs values (?, ?)";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,68,public static final String UNREG_ADDR_QRY = "delete from tbl_addrs where hostname = ? and port = ?";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,77,public static final String CHK_QRY = "select count(*) from tbl_addrs";
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/query/QueryCommandHandler.java,172,return new GridRestResponse(GridRestResponse.STATUS_FAILED, e.getMessage());
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheContinuousQueryExample.java,26,import org.apache.ignite.cache.CacheEntryEventSerializableFilter;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheContinuousQueryExample.java,83,qry.setRemoteFilter(new CacheEntryEventSerializableFilter<Integer, String>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheContinuousQueryExample.java,85,return e.getKey() > 10;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1618,igfsExecSvc, restExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1700,boolean needVal = intercept || retval || op == GridCacheOperation.TRANSFORM || !F.isEmptyOrNulls(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,40,import org.apache.ignite.internal.processors.cache.GridCacheReturn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,48,import org.apache.ignite.internal.util.typedef.C1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,184,ctx.resource().injectGeneric(locLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,212,boolean recordIgniteEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,214,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,224,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,227,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,228,U.error(cctx.logger(CacheContinuousQueryHandler.class), "CacheEntryEventFilter failed: " + e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,347,Collection<CacheContinuousQueryEntry> entries = (Collection<CacheContinuousQueryEntry>)objs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,36,public void onEntryUpdated(CacheContinuousQueryEvent<K, V> evt, boolean primary, boolean recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,213,lsnr.onEntryUpdated(evt, primary, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,263,lsnr.onEntryUpdated(evt, primary, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,633,private static class JCacheQueryLocalListener<K, V> implements CacheEntryUpdatedListener<K, V> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,635,private final CacheEntryListener<K, V> impl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,658,assert impl instanceof CacheEntryCreatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,665,assert impl instanceof CacheEntryUpdatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,672,assert impl instanceof CacheEntryRemovedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,679,assert impl instanceof CacheEntryExpiredListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,719,private CacheEntryEventFilter impl;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,21,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,24,import java.util.concurrent.ExecutionException;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,30,import java.util.concurrent.TimeoutException;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,38,public static final int DFLT_SEG_POOL_SIZE = 8;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,41,public static final int DFLT_CONCUR_LVL = 16;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,47,private final int segShift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,50,private final int segMask;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,55,public IgniteStripedThreadPoolExecutor() {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,56,execs = new ExecutorService[DFLT_CONCUR_LVL];
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,58,ThreadFactory factory = new IgniteThreadFactory(null);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,61,execs[i] = Executors.newFixedThreadPool(DFLT_SEG_POOL_SIZE, factory);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,64,int sshift = 0;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,65,int ssize = 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,67,while (ssize < DFLT_CONCUR_LVL) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,68,++sshift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,70,ssize <<= 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,73,segShift = 32 - sshift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,74,segMask = ssize - 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,86,List<Runnable> res = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,128,return execForTask(task).submit(task);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,133,return execForTask(task).submit(task, result);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,138,return execForTask(task).submit(task);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,143,throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,144,List<Future<T>> futs = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,147,futs.add(execForTask(task).submit(task));
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,149,boolean done = false;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,151,try {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,152,for (Future<T> fut : futs) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,153,try {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,154,fut.get();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,156,catch (ExecutionException | InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,161,done = true;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,163,return futs;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,165,finally {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,166,if (!done) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,168,fut.cancel(true);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,175,TimeUnit unit) throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,176,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,181,ExecutionException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,182,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,187,throws InterruptedException, ExecutionException, TimeoutException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,188,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,193,execForTask(cmd).execute(cmd);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,206,private int hash(int h) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,209,h += (h <<  15) ^ 0xffffcd7d;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,210,h ^= (h >>> 10);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,211,h += (h <<   3);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,212,h ^= (h >>>  6);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,213,h += (h <<   2) + (h << 14);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,214,return h ^ (h >>> 16);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,221,private <T> ExecutorService execForTask(T cmd) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,222,assert cmd != null;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,225,return execs[(hash(cmd.hashCode()) >>> segShift) & segMask];
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockServer.java,67,int endPort = startPort + ctx.config().getTimeServerPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,138,int lastPort = cfg.getPort() + cfg.getPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,140,for (int port0 = cfg.getPort(); port0 <= lastPort; port0++) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1560,for (int port = locPort; port < locPort + locPortRange; port++) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4458,for (port = spi.locPort; port < spi.locPort + spi.locPortRange; port++) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4465,break;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4468,if (port < spi.locPort + spi.locPortRange - 1) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4470,log.debug("Failed to bind to local port (will try next port within range) " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4473,onException("Failed to bind to local port. " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4476,else {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4477,throw new IgniteSpiException("Failed to bind TCP server socket (possibly all ports in range " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4485,log.info("Successfully bound to TCP port [port=" + port + ", localHost=" + spi.locHost + ']');
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,172,int lastPort = initPort + config().getPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,494,return start0(new GridStartContext(new IgniteConfiguration(), null, springCtx)).grid();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,507,return start(cfg, null);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,526,return start0(new GridStartContext(cfg, null, springCtx)).grid();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,893,new GridStartContext(cfg, springCfgUrl, springCtx == null ? cfgMap.get2() : springCtx));
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,927,private static IgniteNamedInstance start0(GridStartContext startCtx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,950,if (old != null) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,954,throw new IgniteCheckedException("Ignite instance with this name has already been started: " + name);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,204,return attrs.get(name);
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/XmlGenerator.java,202,addElement(doc, map, "entry", "key", field.javaName(), "value", field.javaTypeName());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,213,throw new IgniteCheckedException("Failed to perform handshake because actual Grid name differs from expected " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,217,throw new IgniteCheckedException("Failed to perform handshake because actual IGFS name differs from expected " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,27,import org.apache.ignite.Ignite;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,334,throw new IOException("Failed to communicate with IGFS.", err);
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,40,throw new IllegalStateException("Hadoop module is not found in class path.");
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,45,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,50,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,55,return new GridFinishedFuture<>(new IgniteCheckedException("Hadoop is not available."));
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,60,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,65,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,70,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,75,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,165,catch(ClusterTopologyServerNotFoundException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,856,private void moveNonTx(IgniteUuid fileId, @Nullable String srcFileName, IgniteUuid srcParentId, String destFileName,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1130,Map<String, IgfsListingEntry> transferListing = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1132,transferListing.putAll(rootListing);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2040,if (cfg.getName() != null ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2451,if (req.failIfExists() ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3268,private Iterable<Object> lifecycleAwares(CacheConfiguration ccfg, Object...objs) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3476,updateTtl(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,880,GridCacheVersion nextVer = nextVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1651,UUID evtNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1652,UUID affNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1656,boolean writeThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1657,boolean readThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1658,boolean retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1660,boolean evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1661,boolean metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1662,boolean primary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1663,boolean verCheck,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1664,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1666,GridDrType drType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1667,long explicitTtl,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1668,long explicitExpireTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1670,boolean conflictResolve,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1671,boolean intercept,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1299,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1300,boolean hasNear,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1301,GridNearAtomicUpdateRequest req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1302,GridNearAtomicUpdateResponse res,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1303,List<GridDhtCacheEntry> locked,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1304,GridCacheVersion ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1306,CI2<GridNearAtomicUpdateRequest, GridNearAtomicUpdateResponse> completionCb,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1307,boolean replicate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1308,String taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1921,boolean hasNear,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1922,int firstEntryIdx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1923,List<GridDhtCacheEntry> entries,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1925,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1931,CI2<GridNearAtomicUpdateRequest, GridNearAtomicUpdateResponse> completionCb,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1934,boolean replicate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1935,UpdateBatchResult batchRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1936,String taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1097,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1216,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1250,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,114,old = cache0.tryPutIfAbsent(id, clsName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,464,return dht.tryPutIfAbsent(key, val);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,1583,assert meta.phase() == PHASE_CANCELLING || err != null: "Invalid phase for cancel: " + meta;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,1601,cp.phase(PHASE_CANCELLING);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,358,DiscoveryData data = new DiscoveryData(ctx.localNodeId(), clientInfos);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1062,assert unackedMsg == null : unackedMsg;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,74,import org.apache.ignite.internal.util.io.GridByteArrayOutputStream;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2299,writeToSocket(sock, new TcpDiscoveryHandshakeRequest(locNodeId),
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2446,writeToSocket(sock, pendingMsg, timeoutHelper.nextTimeoutChunk(
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2490,writeToSocket(sock, msg, timeoutHelper.nextTimeoutChunk(spi.getSocketTimeout()));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3655,writeToSocket(sock, msg, spi.failureDetectionTimeoutEnabled() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5188,protected ClientMessageWorker(Socket sock, UUID clientNodeId) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5239,writeToSocket(sock, msg, spi.failureDetectionTimeoutEnabled() ?
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5348,private final GridByteArrayOutputStream bout = new GridByteArrayOutputStream(100 * 1024);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5440,throws IOException, IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5441,bout.reset();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,5443,spi.writeToSocket(sock, msg, bout, timeout);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,54,import org.apache.ignite.internal.util.io.GridByteArrayOutputStream;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1332,writeToSocket(sock, msg, new GridByteArrayOutputStream(8 * 1024), timeout); // 8K.
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1349,assert bout != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1352,marsh.marshal(msg, bout);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1358,IOException err = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1361,OutputStream out = sock.getOutputStream();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1363,bout.writeTo(out);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1365,out.flush();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1367,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,373,final IgniteCache cache = cctx.kernalContext().cache().jcache(cctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,882,tx.syncCommit(req.syncCommit());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,287,boolean sync = commit ? tx.syncCommit() : tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,355,boolean sync = commit ? tx.syncCommit() : tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,506,if (prep.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,507,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,508,prep.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,511,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,512,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,513,fut.onError(new IgniteCheckedException("Failed to commit transaction: " + CU.txString(this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,515,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,517,log.debug("Failed to optimistically prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,519,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,521,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,522,U.error(log, "Failed to prepare transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,524,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,527,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,530,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,531,f.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,534,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,535,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,536,fut.onError(new IgniteCheckedException("Failed to commit transaction: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,537,CU.txString(GridDhtTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,539,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,541,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,543,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,545,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,546,U.error(log, "Failed to prepare transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,548,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,556,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,558,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,559,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,560,fut.onError(new IgniteCheckedException("Failed to commit transaction: " + CU.txString(this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,562,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,564,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,566,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,568,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,569,U.error(log, "Failed to commit transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,571,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,589,final GridDhtTxFinishFuture fut = new GridDhtTxFinishFuture<>(cctx, this, /*rollback*/false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,593,if (prepFut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,594,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,596,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,597,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,600,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,602,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,604,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,606,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,607,U.error(log, "Failed to rollback transaction (will make the best effort to rollback remote nodes): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,608,this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,610,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,613,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,614,prepFut.complete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,616,prepFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,618,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,619,f.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,621,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,623,log.debug("Failed to prepare or rollback transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,626,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,628,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,629,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,631,CU.txString(GridDhtTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,634,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,635,U.error(log, "Failed to gracefully rollback transaction: " + CU.txString(GridDhtTxLocal.this),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,636,e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,638,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,244,return false; // Serializable will be enforced on primary mode.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,261,private boolean syncCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,262,return tx != null && tx.syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,268,private boolean syncRollback() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,269,return tx != null && tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,842,inTx() && tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,288,private boolean syncRollback() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,289,return tx != null && tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,321,private void onComplete() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,328,private boolean isSync() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,329,return tx.explicitLock() || (commit ? tx.syncCommit() : tx.syncRollback());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,356,boolean complete = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,364,onComplete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,567,tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,568,tx.syncRollback(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,89,boolean syncCommit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,90,boolean syncRollback,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,109,syncCommit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,110,syncRollback,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,273,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,300,return 24;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,195,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,240,return sync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,245,return sync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,267,private boolean sync() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,217,return false; // Serializable will be enforced on primary mode.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,383,public boolean enforceSerializable();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,435,public boolean syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,440,public boolean syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,519,public GridCacheVersion startVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,541,public GridCacheVersion endVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,193,protected boolean syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,196,protected boolean syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,694,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,699,return syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,704,return syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,710,public void syncCommit(boolean syncCommit) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,711,this.syncCommit = syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,717,public void syncRollback(boolean syncRollback) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,718,this.syncRollback = syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1164,return startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1169,return endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1895,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1940,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1945,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,2013,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,2033,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,388,tx.explicitLock(req.explicitLock());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,690,tx.syncCommit(req.syncCommit());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,703,tx.syncRollback(req.syncRollback());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4275,sb.a("group=").a(cacheName).a(',');
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,726,add0(src, "");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,99,import static org.apache.ignite.events.EventType.EVT_IGFS_DIR_RENAMED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,106,import static org.apache.ignite.events.EventType.EVT_IGFS_FILE_RENAMED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1268,IgfsSecondaryOutputStreamDescriptor desc = meta.appendDual(secondaryFs, path, bufSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1631,public IgfsSecondaryOutputStreamDescriptor createDual(final IgfsSecondaryFileSystem fs,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1632,final IgfsPath path,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1633,final boolean simpleCreate,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1635,final boolean overwrite,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1636,final int bufSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1637,final short replication,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1638,final long blockSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1640,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1642,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1643,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1644,assert fs != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1645,assert path != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1648,final Deque<IgfsEvent> pendingEvts = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1650,SynchronizationTask<IgfsSecondaryOutputStreamDescriptor> task =
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1651,new SynchronizationTask<IgfsSecondaryOutputStreamDescriptor>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1653,private OutputStream out;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1657,assert !infos.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1660,IgfsPath parentPath = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1662,for (IgfsPath curPath : infos.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1664,parentPath = curPath;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1667,assert parentPath != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1672,out = simpleCreate ? fs.create(path, overwrite) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1673,fs.create(path, bufSize, overwrite, replication, blockSize, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1675,IgfsPath parent0 = path.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1677,assert parent0 != null : "path.parent() is null (are we creating ROOT?): " + path;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1680,if (!parentPath.equals(parent0)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1681,parentInfo = synchronize(fs, parentPath, parentInfo, parent0, true, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1685,IgfsPath evtPath = parent0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1687,while (!parentPath.equals(evtPath)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1690,evtPath = evtPath.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1692,assert evtPath != null; // If this fails, then ROOT does not exist.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1698,IgfsFile status = fs.info(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1701,throw fsException("Failed to open output stream to the file created in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1704,throw fsException("Failed to open output stream to the file created in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1711,IgniteUuid oldId = putIfAbsentNonTx(parentInfo.id(), path.name(), newInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1713,if (oldId != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1716,id2InfoPrj.remove(oldId); // Remove the old one.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1759,U.closeQuiet(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1795,public IgfsSecondaryOutputStreamDescriptor appendDual(final IgfsSecondaryFileSystem fs, final IgfsPath path,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1796,final int bufSize) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1805,private OutputStream out;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1812,throw fsException("Failed to open output stream to the file in the " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1815,out = fs.append(path, bufSize, false, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1818,long len = info.length();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1819,int blockSize = info.blockSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1821,int remainder = (int)(len % blockSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1823,if (remainder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1824,int blockIdx = (int)(len / blockSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1846,U.closeQuiet(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1856,return synchronizeAndExecute(task, fs, true, path);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1151,if (!cctx.kernalContext().clientNode() && futQ.isEmpty() && preloadFinished) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1152,refreshPartitions(timeout);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,909,metrics.put(cache.context().cacheId(), cache.metrics());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsMXBeanImpl.java,26,class CacheMetricsMXBeanImpl implements CacheMetricsMXBean {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsMXBeanImpl.java,35,CacheMetricsMXBeanImpl(GridCacheAdapter<?, ?> cache) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,255,protected CacheMetricsMXBean mxBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,325,mxBean = new CacheMetricsMXBeanImpl(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3244,return mxBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,574,unregisterMbean(cctx.cache().mxBean(), cfg.getName(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1514,registerMbean(cache.mxBean(), cache.name(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,153,return delegate.metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,165,return delegate.mxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,219,return ctx.cache().metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,233,List<CacheMetrics> metrics = new ArrayList<>(grp.nodes().size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,235,for (ClusterNode node : grp.nodes()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,236,Map<Integer, CacheMetrics> nodeCacheMetrics = ((TcpDiscoveryNode)node).cacheMetrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,238,if (nodeCacheMetrics != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,239,CacheMetrics e = nodeCacheMetrics.get(context().cacheId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,242,metrics.add(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,246,return new CacheMetricsSnapshot(ctx.cache().metrics(), metrics);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,260,return ctx.cache().mxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,1412,public CacheMetrics metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,1419,public CacheMetricsMXBean mxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,1371,CacheMetrics metrics = c.cache().metrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,184,CacheMetrics m = c.metrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheResetMetricsTask.java,59,cache.mxBean().clear();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,728,for (long binAddr = tblAddr; binAddr < memCap; binAddr += 8) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,93,import static org.apache.ignite.internal.managers.communication.GridIoPolicy.SYSTEM_POOL;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1018,callIgfsLocalSafe(new GridPlainCallable<Object>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1020,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1021,igfsCtx.send(nodeId, topic, msg, SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1023,completionFut.onError(nodeId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1026,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1034,public Object call() throws Exception {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1037,public void apply(IgniteInternalFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1280,igfsCtx.send(nodeId, topic, new IgfsAckMessage(blocksMsg.fileId(), blocksMsg.id(), err),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1281,SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,347,igfsCtx.send(node, topic, msg, GridIoPolicy.SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,61,import static org.apache.ignite.internal.managers.communication.GridIoPolicy.SYSTEM_POOL;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,188,igfsCtx.send(nodeId, topic, msg, SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,20,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,21,import java.util.concurrent.ExecutorService;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,21,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,22,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,23,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,24,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,25,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,26,import java.util.ListIterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,27,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,28,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,29,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,103,new FileSystemConfiguration(cfg),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,104,new IgfsMetaManager(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,113,igfsCache.put(maskName(cfg.getName()), igfsCtx);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,891,startProcessor(new GridServiceProcessor(ctx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3375,TransactionConfiguration cfg = ctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4068,TransactionConfiguration tCfg = ctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4177,ctx.kernalContext().config().getTransactionConfiguration().getDefaultTxTimeout(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4854,ctx.kernalContext().config().getTransactionConfiguration().getDefaultTxTimeout(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,32,import static org.apache.ignite.transactions.TransactionIsolation.SERIALIZABLE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,50,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,66,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,127,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,423,IgfsFileInfo info = new IgfsFileInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2673,IgfsFileInfo updated = new IgfsFileInfo(fileInfo,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2675,modificationTime == -1 ? fileInfo.modificationTime() : modificationTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2677,id2InfoPrj.put(fileId, updated);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,202,String cacheName = U.firstNotNull(
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,219,Ignite webSesIgnite = G.ignite(gridName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,233,cache = webSesIgnite.cache(cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,236,throw new IgniteException("Cache for web sessions is not started (is it configured?): " + cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,238,CacheConfiguration cacheCfg = cache.getConfiguration(CacheConfiguration.class);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,241,throw new IgniteException("Cache for web sessions cannot be in FULL_ASYNC mode: " + cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,244,throw new IgniteException("Cache for web sessions cannot operate with lazy TTL. " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,248,U.quietAndWarn(webSesIgnite.log(), "Using LOCAL cache for web sessions caching " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,252,U.quietAndWarn(webSesIgnite.log(), "Using " + cacheCfg.getAtomicityMode() + " atomicity for web sessions " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,256,log.info("Started web sessions caching [gridName=" + gridName + ", cacheName=" + cacheName +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,259,txEnabled = cacheCfg.getAtomicityMode() == TRANSACTIONAL;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,261,lsnr = new WebSessionListener(webSesIgnite, cache, retries);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,337,WebSession cached;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,342,cached = cache.get(sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,448,return cached;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,50,private final IgniteCache<String, WebSession> cache;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,63,WebSessionListener(Ignite ignite, IgniteCache<String, WebSession> cache, int retries) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,65,assert cache != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,67,this.cache = cache;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,79,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,81,log.debug("Session destroyed: " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,83,catch (CacheException e) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,84,U.error(log, "Failed to remove session: " + sesId, e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,111,cache0 = cache.withExpiryPolicy(plc);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,114,cache0 = cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1737,writeObj0 = CU.value(oldVal, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1749,writeObj0 = CU.value(oldVal, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1753,writeObj0 = CU.value((CacheObject)writeObj, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1760,GridCacheVersionedEntryEx oldEntry = versionedEntry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3110,CU.value(val, cctx, true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1431,GridCacheVersionedEntryEx oldEntry = old.versionedEntry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1434,Object newVal0 = CU.value(newVal, txEntry.context(), false);
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,216,(t[0] < 10 ? "0" + t[0] : Long.toString(t[0]));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,257,mapper.map(job(r), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,266,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,309,mapper.map(job(c), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,318,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1028,return job instanceof ComputeJobMasterLeaveAware ? new C1MLA<>(job, arg) : new C1<>(job, arg);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1040,return c instanceof ComputeJobMasterLeaveAware ? new C2MLA<>(c) : new C2<>(c);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1052,return r instanceof ComputeJobMasterLeaveAware ? new C4MLA(r) : new C4(r);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1297,ComputeJob job = job(this.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1299,return Collections.singletonMap(job, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1351,ComputeJob job = job(this.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1353,return Collections.singletonMap(job, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1491,return Collections.singletonMap(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1540,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1596,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1650,mapper.map(job(job, arg), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1683,public C1(){
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1775,public C2(){
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1825,private static class C2MLA<R> extends C2<R> implements ComputeJobMasterLeaveAware{
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1866,public C4(){
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,214,cctx.kernalContext().igfsHelper().isIgfsBlockKey(key.value(cctx.cacheObjectContext(), false))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,589,U.detectObjectClassLoader(key.value(cctx.cacheObjectContext(), false)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1141,cctx.store().put(tx, keyValue(false), CU.value(val, cctx, false), newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1553,cctx.store().put(null, keyValue(false), CU.value(updated, cctx, false), ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1587,cctx.store().remove(null, keyValue(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1792,cctx.store().remove(null, keyValue(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1795,cctx.store().put(null, keyValue(false), CU.value(val, cctx, false), ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1844,cctx.store().remove(null, keyValue(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1847,cctx.store().put(null, keyValue(false), CU.value(val, cctx, false), ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3068,cctx.store().put(null, keyValue(false), CU.value(val, cctx, false), ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3109,return new GridCachePlainVersionedEntry<>(key.value(cctx.cacheObjectContext(), true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3834,U.detectObjectClassLoader(key.value(cctx.cacheObjectContext(), false)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,576,cctx.store().remove(null, keyValue(false));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,408,log.debug("Session created: " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,99,WebSession(HttpSession ses) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,102,id = ses.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,123,WebSession(HttpSession ses, boolean isNew) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,124,this(ses);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,132,void accessTime(long accessTime) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,133,this.accessTime = accessTime;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,260,void setNew(boolean isNew) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,261,this.isNew = isNew;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,349,cached = new WebSession(cached, false);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,391,lsnr.updateAttributes(ses.getId(), updates, ses.getMaxInactiveInterval());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,410,WebSession cached = new WebSession(ses, true);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,47,private static final long RETRY_DELAY = 1;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,174,WebSession ses = new WebSession(entry.getValue());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,209,return attrs.get(name);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,459,private static class RequestWrapper extends HttpServletRequestWrapper {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,461,private final WebSession ses;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,482,return ses;
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,50,this(DFLT_GRP, worker.gridName(), worker.name(), worker);
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,61,this(DFLT_GRP, gridName, threadName, r);
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,73,public IgniteThread(ThreadGroup grp, String gridName, String threadName, Runnable r) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteThreadFactory.java,58,return new IgniteThread(gridName, threadName, r);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,671,java.awt.Desktop.getDesktop().open(destFolder);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,673,catch (IOException e) {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,1551,customPrefsFile);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,631,svcItf.getSimpleName() + ", svcCls=" + ctx.service().getClass() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,151,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,152,ClusterNode node = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,154,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,155,node = nodeForService(name, sticky);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,158,throw new IgniteException("Failed to find deployed service: " + name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,161,if (node.isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,162,ServiceContextImpl svcCtx = ctx.service().serviceContext(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,165,return mtd.invoke(svcCtx.service(), args);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,167,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,169,return ctx.closure().callAsyncNoFailover(
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,170,BALANCE,
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,171,new ServiceProxyCallable(mtd.getName(), name, mtd.getParameterTypes(), args),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,172,Collections.singleton(node),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,173,false
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,174,).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,177,catch (GridServiceNotFoundException | ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,179,log.debug("Service was not found or topology changed (will retry): " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,181,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,182,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,184,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,185,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,187,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,188,throw new IgniteException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,194,rmtNode.compareAndSet(node, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,197,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,198,Thread.sleep(10);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,200,catch (InterruptedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,201,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,203,throw new IgniteException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,172,int nodesCnt = cctx.discovery().cacheAffinityNodes(cctx.name(), topVer).size();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,213,metrics = VisorCacheMetrics.from(ignite, cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,48,private transient Integer minSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,51,private transient Double avgSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,54,private transient Integer maxSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,153,public int minimumSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,154,if (minSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,155,minSize = Integer.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,158,minSize = Math.min(minSize, metric.keySize());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,161,return minSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,167,public double averageSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,168,if (avgSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,169,avgSize = 0.0d;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,172,avgSize += metric.keySize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,174,avgSize /= metrics.size();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,177,return avgSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,183,public int maximumSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,184,if (maxSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,185,maxSize = Integer.MIN_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,188,maxSize = Math.max(maxSize, metric.keySize());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,191,return maxSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,173,public static VisorCacheMetrics from(IgniteEx ignite, String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,174,VisorCacheMetrics cm = new VisorCacheMetrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,180,cm.name = cacheName;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,181,cm.mode = cacheProcessor.cacheMode(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,182,cm.sys = cacheProcessor.systemCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,186,cm.size = m.getSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,187,cm.keySize = m.getKeySize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,189,cm.reads = m.getCacheGets();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,190,cm.writes = m.getCachePuts() + m.getCacheRemovals();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,191,cm.hits = m.getCacheHits();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,192,cm.misses = m.getCacheMisses();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,194,cm.txCommits = m.getCacheTxCommits();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,195,cm.txRollbacks = m.getCacheTxRollbacks();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,197,cm.avgTxCommitTime = m.getAverageTxCommitTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,198,cm.avgTxRollbackTime = m.getAverageTxRollbackTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,200,cm.puts = m.getCachePuts();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,201,cm.removals = m.getCacheRemovals();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,202,cm.evictions = m.getCacheEvictions();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,204,cm.avgReadTime = m.getAverageGetTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,205,cm.avgPutTime = m.getAveragePutTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,206,cm.avgRemovalTime = m.getAverageRemoveTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,208,cm.readsPerSec = perSecond(m.getAverageGetTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,209,cm.putsPerSec = perSecond(m.getAveragePutTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,210,cm.removalsPerSec = perSecond(m.getAverageRemoveTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,211,cm.commitsPerSec = perSecond(m.getAverageTxCommitTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,212,cm.rollbacksPerSec = perSecond(m.getAverageTxRollbackTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,214,cm.qryMetrics = VisorCacheQueryMetrics.from(c.queryMetrics());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,216,cm.dhtEvictQueueCurrSize = m.getDhtEvictQueueCurrentSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,217,cm.txThreadMapSize = m.getTxThreadMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,218,cm.txXidMapSize = m.getTxXidMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,219,cm.txCommitQueueSize = m.getTxCommitQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,220,cm.txPrepareQueueSize = m.getTxPrepareQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,221,cm.txStartVerCountsSize = m.getTxStartVersionCountsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,222,cm.txCommittedVersionsSize = m.getTxCommittedVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,223,cm.txRolledbackVersionsSize = m.getTxRolledbackVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,224,cm.txDhtThreadMapSize = m.getTxDhtThreadMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,225,cm.txDhtXidMapSize = m.getTxDhtXidMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,226,cm.txDhtCommitQueueSize = m.getTxDhtCommitQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,227,cm.txDhtPrepareQueueSize = m.getTxDhtPrepareQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,228,cm.txDhtStartVerCountsSize = m.getTxDhtStartVersionCountsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,229,cm.txDhtCommittedVersionsSize = m.getTxDhtCommittedVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,230,cm.txDhtRolledbackVersionsSize = m.getTxDhtRolledbackVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,232,return cm;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,117,VisorCacheMetrics cm = VisorCacheMetrics.from(ignite, cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1719,U.warn(log, "Neither key nor value have property " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,103,this(true, id, 0, 0, null, null, null, null, false, System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,112,public IgfsFileInfo(boolean isDir, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,114,System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,123,this(true, null, 0, 0, null, listing, null, null, false, System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,134,IgfsFileInfo(int blockSize, @Nullable IgniteUuid affKey, boolean evictExclude,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,136,this(false, null, blockSize, 0, affKey, null, props, null, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,150,boolean evictExclude, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,151,this(false, null, blockSize, len, affKey, null, props, lockId, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,196,IgfsFileInfo(int blockSize, long len, boolean evictExclude, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,198,null, blockSize, len, null, null, props, null, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,242,this(isDir, id, blockSize, len, affKey, listing, props, null, lockId, cpProps, modificationTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,288,this.accessTime = accessTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,573,IgfsFileInfo info = resolveFileInfo(path, mode);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,576,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,578,return new IgfsFileImpl(path, info, data.groupBlockSize());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1001,IgfsFileInfo fsInfo = new IgfsFileInfo(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1002,child.blockSize(), child.length(), evictExclude(path, false), child.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1004,files.add(new IgfsFileImpl(child.path(), fsInfo, data.groupBlockSize()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1780,private IgfsFileInfo resolveFileInfo(IgfsPath path, IgfsMode mode) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1800,info = status.isDirectory() ? new IgfsFileInfo(true, status.properties()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1801,new IgfsFileInfo(status.blockSize(), status.length(), null, null, false,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1802,status.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1811,return info;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1477,id2InfoPrj.invokeAsync(parentId, new UpdateListingEntry(fileId, fileName, lenDelta, 0,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2342,IgfsFileInfo curInfo = status.isDirectory() ? new IgfsFileInfo(true, status.properties()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2344,igfsCtx.igfs().evictExclude(curPath, false), status.properties());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,344,IgfsFileInfo fsInfo = status.isDirectory() ? new IgfsFileInfo(true, properties(status)) :
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,345,new IgfsFileInfo((int)status.getBlockSize(), status.getLen(), null, null, false,
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,346,properties(status));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,132,GridCacheMvccCandidate owner) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,133,assert entry != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,134,assert owner != prev : "New and previous owner are identical instances: " + owner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,135,assert owner == null || prev == null || !owner.version().equals(prev.version()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,139,log.debug("Received owner changed callback [" + entry.key() + ", owner=" + owner + ", prev=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,140,prev + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,142,if (owner != null && (owner.local() || owner.nearLocal())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,145,if (futCol != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,163,log.debug("Lock future not found for owner change callback (will try transaction futures) [owner=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,164,owner + ", prev=" + prev + ", entry=" + entry + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,167,if (cctx.tm().onOwnerChanged(entry, owner)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,169,log.debug("Found transaction for changed owner: " + owner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,172,log.debug("Failed to find transaction for changed owner: " + owner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,998,loadMap.put(entry.key(), entry);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,323,wrapper.p2pUnmarshal(ctx.config().getMarshaller(), ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,372,filter = ctx.config().getMarshaller().unmarshal(filterBytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,164,topic = ctx.config().getMarshaller().unmarshal(topicBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,166,pred = ctx.config().getMarshaller().unmarshal(predBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,341,state = marsh.unmarshal(data, ses.getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,580,msg.topic(topicOrd >= 0 ? GridTopic.fromOrdinal(topicOrd) : marsh.unmarshal(msg.topicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,2049,msgTopic = marsh.unmarshal(msgTopicBytes, dep != null ? dep.classLoader() : null);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,2058,msgBody = marsh.unmarshal(ioMsg.bodyBytes(), dep != null ? dep.classLoader() : null);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,186,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,177,ldr = U.gridClassLoader();
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,894,res.events(marsh.<Collection<Event>>unmarshal(res.eventsBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,897,res.exception(marsh.<Throwable>unmarshal(res.exceptionBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1090,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1106,filter = marsh.unmarshal(req.filter(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,113,Object src = ctx.config().getMarshaller().unmarshal(msg.source(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,77,p = ctx.marshaller().unmarshal(bytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,123,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,434,args[i] = byteCol[i] == null ? null : marsh.unmarshal(byteCol[i], ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,578,col.add(bytes == null ? null : marsh.<T>unmarshal(bytes, ldr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,232,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,336,txNodes = ctx.marshaller().unmarshal(txNodesBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,103,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,122,affAssignment = ctx.marshaller().unmarshal(affAssignmentBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,122,checkCommittedErr = ctx.marshaller().unmarshal(checkCommittedErrBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,416,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,195,topic = ctx.marshaller().unmarshal(topicBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,121,parts = ctx.marshaller().unmarshal(partsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,110,parts = ctx.marshaller().unmarshal(partsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,206,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,111,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,115,marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(qry.reducer()), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,118,marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(qry.transform()), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,310,keyValFilter = mrsh.unmarshal(keyValFilterBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,316,trans = mrsh.unmarshal(transBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,319,args = mrsh.unmarshal(argsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,329,rdc = rdc != null ? marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(rdc), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,330,trans = trans != null ? marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(trans), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,140,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheSqlQuery.java,130,public void unmarshallParams(Marshaller m) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheSqlQuery.java,136,params = m.unmarshal(paramsBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,541,return ctx.config().getMarshaller().unmarshal(bytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,778,entryProcessorsCol = ctx.marshaller().unmarshal(transformClosBytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,193,val = marsh.unmarshal(valBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,224,key = marsh.unmarshal(keyBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,101,return ctx.kernalContext().cache().context().marshaller().unmarshal(bytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1098,c.job = marsh.unmarshal(closureBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1100,c.job = marsh.unmarshal(marsh.marshal(c.job), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1103,job = marsh.unmarshal(marsh.marshal(job), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,248,msg.data(marsh.unmarshal(msg.dataBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,547,msg.data(marsh.unmarshal(msg.dataBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,762,data.p2pUnmarshal(marsh, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,231,topic = marsh.unmarshal(req.responseTopicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,271,updater = marsh.unmarshal(req.updaterBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1417,jobPda0 != null ? jobPda0.classLoader() : U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1021,siblings0 = marsh.unmarshal(req.getSiblingsBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1034,dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1060,jobAttrs = marsh.unmarshal(req.getJobAttributesBytes(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1429,(Map<?, ?>)marsh.unmarshal(req.getAttributesBytes(), ses.getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,409,job = marsh.unmarshal(jobBytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,215,return marsh.unmarshal(valBytes, ldr == null ? U.gridClassLoader() : ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,144,Object topic = ctx.config().getMarshaller().unmarshal(req.topicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,442,res.result(ctx.config().getMarshaller().unmarshal(res.resultBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,932,Service cp = m.unmarshal(bytes, svc.getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1032,marsh.<Map<?, ?>>unmarshal(msg.getAttributesBytes(), task.getTask().getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1307,topic = marsh.unmarshal(req.topicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,762,Object res0 = loc ? res.getJobResult() : marsh.unmarshal(res.getJobResultBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,765,marsh.<IgniteException>unmarshal(res.getExceptionBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,768,marsh.<Map<Object, Object>>unmarshal(res.getJobAttributesBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,881,msg = spi.marsh.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1205,TcpDiscoveryAbstractMessage msg = spi.marsh.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1625,spi.onExchange(newNodeId, newNodeId, data, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2186,msgClone = spi.marsh.unmarshal(marshalledMsg, null);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3255,U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4785,TcpDiscoveryAbstractMessage msg = spi.marsh.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1449,T res = marsh.unmarshal(in == null ? sock.getInputStream() : in, U.gridClassLoader());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1360,return marshaller.unmarshal(bytes, null);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,414,qry.unmarshallParams(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,631,jobPda = new DataStreamerPda(key.value(cacheObjCtx, false),
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,632,entry.getValue() != null ? entry.getValue().value(cacheObjCtx, false) : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,633,rcvr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1295,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1296,jobPda0 = jobPda;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1298,assert jobPda0 != null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlAggregateFunction.java,35,private static final GridSqlFunctionType[] TYPE_INDEX = new GridSqlFunctionType[]{
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,93,private static final GridSqlOperationType[] OPERATION_OP_TYPES = new GridSqlOperationType[]{CONCAT, PLUS, MINUS, MULTIPLY, DIVIDE, null, MODULUS};
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,96,private static final GridSqlOperationType[] COMPARISON_TYPES = new GridSqlOperationType[]{EQUAL, BIGGER_EQUAL, BIGGER, SMALLER_EQUAL,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,204,private static final Getter<JdbcPreparedStatement,Command> COMMAND = getter(JdbcPreparedStatement.class, "command");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,213,private static volatile Getter<Command,Prepared> prepared;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,225,Getter<Command,Prepared> p = prepared;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,553,res.addChild(parseExpression(LEFT_CIS.get((ConditionInSelect) expression), calcTypes));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,559,res.addChild(new GridSqlSubquery(parse((Select) qry)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,621,GridSqlAggregateFunction res = new GridSqlAggregateFunction(DISTINCT.get((Aggregate)expression),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,622,TYPE.get((Aggregate)expression));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,624,Expression on = ON.get((Aggregate)expression);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,627,res.addChild(parseExpression(on, calcTypes));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,629,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,867,public void updateTtl(@Nullable GridCacheVersion ver, long ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,732,log.debug("Entry was not evicted [entry=" + entry + ", localNode=" + cctx.nodeId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,532,update(val, e.expireTime(), e.ttl(), e.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,553,if (cctx.isSwapOrOffheapEnabled() && !deletedUnlocked() && hasValueUnlocked() && !detached()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,569,if (cctx.offheapTiered() && hasOffHeapPointer()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,893,update(ret, expTime, ttl, nextVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,975,update(ret, expTime, ttl, nextVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1104,update(val, expireTime, ttl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1232,update(null, 0, 0, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1418,update(old, expireTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1561,update(updated, expireTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1598,update(null, CU.TTL_ETERNAL, CU.EXPIRE_TIME_ETERNAL, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1910,update(oldVal, initExpireTime, initTtl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2121,update(updated, newExpireTime, newTtl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2199,update(null, CU.TTL_ETERNAL, CU.EXPIRE_TIME_ETERNAL, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2506,update(null, 0L, 0L, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2680,protected final void update(@Nullable CacheObject val, long expireTime, long ttl, GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2695,cctx.ttl().addTrackedEntry(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2720,throws IgniteCheckedException, GridCacheEntryRemovedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2735,private void updateTtl(long ttl) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2834,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2835,if (heap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2836,GridTuple<CacheObject> val = peekGlobal(false, topVer, null, expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2839,return val.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2842,if (offheap || swap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2843,GridCacheSwapEntry e = cctx.swap().read(this, false, offheap, swap, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2845,return e != null ? e.value() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2848,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2850,catch (GridCacheFilterFailedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2851,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2853,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2886,throws GridCacheEntryRemovedException, GridCacheFilterFailedException, IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2914,return F.t(CU.<CacheObject>failed(failFast));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3013,update(val, CU.toExpireTime(ttl), ttl, nextVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3041,update(val, expTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3146,update(val, expTime, ttl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3361,update(null, 0L, 0L, ver0 = ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,178,res = Long.compare(entry.startVersion(), o.entry.startVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,193,return expireTime == that.expireTime && entry.startVersion() == that.entry.startVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,201,res = 31 * res + (int)(entry.startVersion() ^ (entry.startVersion() >>> 32));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,233,assert res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,841,if (swap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,842,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,843,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,848,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,850,catch (GridCacheEntryRemovedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,852,log.debug("Got removed entry: " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,856,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,857,entry = cache.peekEx(keys.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,860,entry.updateTtl(vers.get(i), ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,566,update(null, 0L, 0L, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,164,update(e.value(), e.expireTime(), e.ttl(), e.isNew() ? ver : e.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,815,final IgniteInternalCache<K, V> prj = prj0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,943,sendTtlUpdate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1022,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1038,private GridIterator<IgniteBiTuple<K, V>> offheapIterator(GridCacheQueryAdapter<?> qry, boolean backups) {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,79,true
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,40,import org.apache.ignite.cluster.ClusterTopologyException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,287,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,369,U.error(ctx.log(getClass()), "Failed to unmarshal entry.", ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,170,new DeploymentListener(), null, cache.context().affinityNode(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,173,new AssignmentListener(), null, cache.context().affinityNode(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1040,GridServiceDeployment dep = (GridServiceDeployment)e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1317,GridServiceAssignments assigns = (GridServiceAssignments)e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,50,import org.apache.ignite.services.ServiceDescriptor;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,213,private ClusterNode nodeForService(String name, boolean sticky) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,240,private ClusterNode randomNodeForService(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,244,Map<UUID, Integer> snapshot = serviceTopology(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,315,private Map<UUID, Integer> serviceTopology(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,316,for (ServiceDescriptor desc : ctx.service().serviceDescriptors()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,318,return desc.topologySnapshot();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,321,return null;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,258,true
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1264,res.remapKeys(req.keys());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,504,public boolean clear(GridCacheVersion ver, boolean readers,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,438,assert cctx.swap().swapEnabled() && cctx.swap().offHeapEnabled() : this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,453,if (cctx.swap().offheapSwapEvict(key, entry, partition(), evictVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2392,boolean ret;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2393,boolean rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2394,boolean marked;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2396,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2397,ret = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2398,rmv = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2399,marked = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2402,GridCacheVersion startVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2404,if (!F.isEmptyOrNulls(filter)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2405,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2406,startVer = this.ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2410,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2413,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2416,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2418,CacheObject val = saveValueForIndexUnlocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2420,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2421,if ((!hasReaders() || readers)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2425,log.debug("Entry could not be marked obsolete (it is still used): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2427,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2430,clearReaders();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2432,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2434,log.debug("Entry could not be marked obsolete (it still has readers): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2436,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2439,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2441,log.debug("Got removed entry when clearing (will simply return): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2443,ret = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2445,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2449,log.debug("Entry has been marked obsolete: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2451,clearIndex(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2453,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2455,ret = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2456,rmv = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2458,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2463,onMarkedObsolete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2466,cctx.cache().removeEntry(this); // Clear cache.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2468,return ret;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2776,GridCacheSwapEntry swapEntry = GridCacheSwapEntryImpl.unmarshal(valBytes, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2778,CacheObject val = swapEntry.value();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,109,private boolean offheapToSwapEvicts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,201,if (swapEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,202,offheapToSwapEvicts = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,206,assert offheapToSwapEvicts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1095,GridCacheSwapEntry e = swapEntry(GridCacheSwapEntryImpl.unmarshal(entry, false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1101,cctx.swap().writeToSwap(part, key, entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2187,GridCacheSwapEntry unmarshalled = unmarshalSwapEntry(e.getValue(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2189,return F.t(e.getKey(), swapEntry(unmarshalled));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2495,GridCacheSwapEntry e = unmarshalSwapEntry(entry.getValue(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,2497,swapEntry(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,390,if (item.prjPred == null || item.prjPred.apply(ctx.discovery().localNode())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,786,hnd,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,801,if (prjPred == null || prjPred.apply(ctx.discovery().node(ctx.localNodeId()))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,802,registered = registerHandler(node.id(), routineId, hnd, data.bufferSize(), data.interval(),
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,817,hnd.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,984,RemoteRoutineInfo info;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,989,info = rmtInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,999,unregisterHandler(routineId, info.hnd, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1736,return (T) cacheObjects().unwrapTemporary(this, obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1052,old = (retval || intercept) ? rawGetOrUnmarshalUnlocked(!retval) : this.val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1209,old = (retval || intercept) ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1373,boolean needVal = retval || intercept || op == GridCacheOperation.TRANSFORM || !F.isEmpty(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1382,old = needVal ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1872,oldVal = needVal ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2762,protected boolean isOffHeapValuesOnly() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2505,CacheObject obj = cctx.cacheObjects().toCacheObject(cctx.cacheObjectContext(), t.get2(), t.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2557,CacheObject obj = cctx.fromOffheap(ptr, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2559,V val = CU.value(obj, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2561,assert val != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2563,return val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2621,return new IgniteBiTuple<>(e.key(), (V)cctx.unwrapTemporary(e.value()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,23,interface CacheContinuousQueryListener<K, V> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,160,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,162,ConcurrentMap<UUID, CacheContinuousQueryListener> lsnrCol;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,165,lsnrCol = intLsnrCnt.get() > 0 ? intLsnrs : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,166,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,167,lsnrCol = lsnrCnt.get() > 0 ? lsnrs : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,170,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3685,ClusterGroup nodes = ctx.kernalContext().grid().cluster().forCacheNodes(ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3693,return ctx.kernalContext().closure().callAsync(BROADCAST,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3694,Arrays.asList(new LoadCacheClosure<>(ctx.name(), p, args, plc)),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3695,nodes.nodes());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,119,private Integer ttl;
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,140,+ " -J-Xmx" + c.getResource().getMemory() + "m"
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,141,+ " -J-Xms" + c.getResource().getMemory() + "m"
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,181,|| cont.getResource().getMemory() < props.memoryPerNode()) {
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,294,capability.setMemory((int)props.memoryPerNode());
modules/yarn/src/main/java/org/apache/ignite/yarn/ApplicationMaster.java,305,new Object[]{props.memoryPerNode(), props.cpusPerNode()});
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,294,ClusterProperties prop = new ClusterProperties();
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,296,prop.clusterName = getStringProperty(IGNITE_CLUSTER_NAME, props, DEFAULT_CLUSTER_NAME);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,298,prop.cpuPerNode = getDoubleProperty(IGNITE_RUN_CPU_PER_NODE, props, DEFAULT_CPU_PER_NODE);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,299,prop.memPerNode = getDoubleProperty(IGNITE_MEMORY_PER_NODE, props, DEFAULT_MEM_PER_NODE);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,300,prop.nodeCnt = getDoubleProperty(IGNITE_NODE_COUNT, props, DEFAULT_IGNITE_NODE_COUNT);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,302,prop.igniteUrl = getStringProperty(IGNITE_URL, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,303,prop.ignitePath = getStringProperty(IGNITE_PATH, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,304,prop.licencePath = getStringProperty(LICENCE_PATH, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,305,prop.jvmOpts = getStringProperty(IGNITE_JVM_OPTS, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,306,prop.igniteWorkDir = getStringProperty(IGNITE_WORKING_DIR, props, DEFAULT_IGNITE_WORK_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,307,prop.igniteLocalWorkDir = getStringProperty(IGNITE_LOCAL_WORK_DIR, props, DEFAULT_IGNITE_LOCAL_WORK_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,308,prop.igniteReleasesDir = getStringProperty(IGNITE_RELEASES_DIR, props, DEFAULT_IGNITE_RELEASES_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,309,prop.igniteCfg = getStringProperty(IGNITE_CONFIG_XML, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,310,prop.userLibs = getStringProperty(IGNITE_USERS_LIBS, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,312,String pattern = getStringProperty(IGNITE_HOSTNAME_CONSTRAINT, props, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,314,if (pattern != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,315,try {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,316,prop.hostnameConstraint = Pattern.compile(pattern);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,318,catch (PatternSyntaxException e) {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,319,log.log(Level.WARNING, "IGNITE_HOSTNAME_CONSTRAINT has invalid pattern. It will be ignore.", e);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,323,return prop;
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,334,ClusterProperties prop = new ClusterProperties();
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,336,prop.clusterName = getStringProperty(IGNITE_CLUSTER_NAME, null, DEFAULT_CLUSTER_NAME);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,338,prop.cpuPerNode = getDoubleProperty(IGNITE_RUN_CPU_PER_NODE, null, DEFAULT_CPU_PER_NODE);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,339,prop.memPerNode = getDoubleProperty(IGNITE_MEMORY_PER_NODE, null, DEFAULT_MEM_PER_NODE);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,340,prop.nodeCnt = getDoubleProperty(IGNITE_NODE_COUNT, null, DEFAULT_IGNITE_NODE_COUNT);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,342,prop.igniteUrl = getStringProperty(IGNITE_URL, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,343,prop.ignitePath = getStringProperty(IGNITE_PATH, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,344,prop.licencePath = getStringProperty(LICENCE_PATH, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,345,prop.jvmOpts = getStringProperty(IGNITE_JVM_OPTS, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,346,prop.igniteWorkDir = getStringProperty(IGNITE_WORKING_DIR, null, DEFAULT_IGNITE_WORK_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,347,prop.igniteLocalWorkDir = getStringProperty(IGNITE_LOCAL_WORK_DIR, null, DEFAULT_IGNITE_LOCAL_WORK_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,348,prop.igniteReleasesDir = getStringProperty(IGNITE_RELEASES_DIR, null, DEFAULT_IGNITE_RELEASES_DIR);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,349,prop.igniteCfg = getStringProperty(IGNITE_CONFIG_XML, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,350,prop.userLibs = getStringProperty(IGNITE_USERS_LIBS, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,352,String pattern = getStringProperty(IGNITE_HOSTNAME_CONSTRAINT, null, null);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,354,if (pattern != null) {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,355,try {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,356,prop.hostnameConstraint = Pattern.compile(pattern);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,358,catch (PatternSyntaxException e) {
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,359,log.log(Level.WARNING, "IGNITE_HOSTNAME_CONSTRAINT has invalid pattern. It will be ignore.", e);
modules/yarn/src/main/java/org/apache/ignite/yarn/ClusterProperties.java,363,return prop;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,231,if (cctx.kernalContext().config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3827,if (cctx.kernalContext().config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,582,if (cctx.kernalContext().config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,401,add(mini);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,412,mini.onDone(new IgniteTxRollbackCheckedException("Failed to commit transaction " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,415,else if (backup.isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,418,readyNearMappingFromBackup(mapping);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,421,mini.onDone(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,422,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,423,ClusterTopologyCheckedException cause =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,424,new ClusterTopologyCheckedException("Primary node left grid: " + nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,426,cause.retryReadyFuture(cctx.nextAffinityReadyFuture(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,428,mini.onDone(new IgniteTxRollbackCheckedException("Failed to commit transaction " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,432,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,459,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,461,cctx.io().send(backup, finishReq, tx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,463,mini.onDone(new IgniteTxHeuristicCheckedException("Failed to check for tx commit on " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,467,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,470,catch (IgniteCheckedException e) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java,25,import org.apache.ignite.IgniteCluster;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java,114,Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);
examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java,25,import org.apache.ignite.IgniteCluster;
examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java,116,Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,219,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,221,return mapKeyToPrimaryAndBackups(cacheName, key, ctx.discovery().topologyVersionEx());
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,320,GridCacheContext<Object,Object> cctx = cache.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,520,key = ((CacheObject) key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,803,return GridAffinityProcessor.this.mapKeysToNodes(cacheName, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,818,return GridAffinityProcessor.this.mapKeyToNode(cacheName, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,882,AffinityInfo cache = cache();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,884,return cache != null ? cache.assignment().get(part) : Collections.<ClusterNode>emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,899,return affinityCache(cacheName, new AffinityTopologyVersion(topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,905,private long topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,906,return ctx.discovery().topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,192,return aff.partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,204,return aff.partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,225,return aff.nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,352,return aff.primaryPartitions(nodeId, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,364,return aff.backupPartitions(nodeId, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,371,return aff.lastVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,58,return cctx.config().getAffinity().partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,154,key = ((CacheObject)key).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,156,return cctx.config().getAffinityMapper().affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,180,if (primary != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,181,Collection<K> mapped = res.get(primary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,183,if (mapped == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,184,mapped = new ArrayList<>(Math.max(keys.size() / nodesCnt, 16));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,186,res.put(primary, mapped);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,189,mapped.add(key);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,20,import org.apache.hadoop.fs.Path;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,27,import org.apache.hadoop.mapreduce.lib.input.FileSplit;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,32,import org.apache.ignite.internal.processors.hadoop.HadoopFileBlock;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,33,import org.apache.ignite.internal.processors.hadoop.HadoopInputSplit;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,51,HadoopInputSplit split = info().inputSplit();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,53,InputSplit nativeSplit;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,55,if (split instanceof HadoopFileBlock) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,56,HadoopFileBlock block = (HadoopFileBlock)split;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,58,nativeSplit = new FileSplit(new Path(block.file().toString()), block.start(), block.length(), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,60,else
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,61,nativeSplit = (InputSplit)taskCtx.getNativeSplit(split);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,63,assert nativeSplit != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1407,updatedVal = ctx.unwrapTemporary(invokeEntry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1409,updated = ctx.toCacheObject(updatedVal);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,293,Statement stmt = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,305,stmt = conn.createStatement();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,307,stmt.executeUpdate(CREATE_ADDRS_TABLE_QRY);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,309,conn.commit();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,325,U.closeQuiet(stmt);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,301,throw new IgniteCheckedException("IGFS metadata cache cannot start with enabled query indexing.");
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/DiscoveryCustomMessage.java,21,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/DiscoveryCustomMessage.java,40,public boolean incrementMinorTopologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,491,else if (type == DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,492,assert customMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,494,if (customMsg.incrementMinorTopologyVersion()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,495,minorTopVer++;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,497,verChanged = true;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,499,else
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,500,verChanged = false;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,505,type != EVT_CLIENT_NODE_RECONNECTED) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,514,final AffinityTopologyVersion nextTopVer = new AffinityTopologyVersion(topVer, minorTopVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheChangeBatch.java,87,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,74,import org.apache.ignite.internal.managers.discovery.CustomEventListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,616,ctx.discovery().setCustomEventListener(DynamicCacheChangeBatch.class,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,617,new CustomEventListener<DynamicCacheChangeBatch>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/AbstractContinuousMessage.java,55,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,127,return col;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,823,cacheCtx.preloader().unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/IgniteTransactions.java,22,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1407,private void registerExecutorMBeans(ExecutorService execSvc, ExecutorService sysExecSvc, ExecutorService p2pExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1408,ExecutorService mgmtExecSvc, ExecutorService restExecSvc) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2367,return ctx.cache().publicJCache(name, false);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2384,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), null, true, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2421,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), null, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2444,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), nearCfg, true, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2468,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), nearCfg, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2471,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), nearCfg, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2491,ctx.cache().dynamicStartCache(null, cacheName, nearCfg, true, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2518,ctx.cache().dynamicStartCache(null, cacheName, nearCfg, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2521,ctx.cache().dynamicStartCache(null, cacheName, nearCfg, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2549,IgniteInternalFuture stopFut = destroyCacheAsync(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2563,public IgniteInternalFuture<?> destroyCacheAsync(String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2567,return ctx.cache().dynamicDestroyCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2580,ctx.cache().getOrCreateFromTemplate(cacheName).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2596,public IgniteInternalFuture<?> getOrCreateCacheAsync(String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2601,return ctx.cache().getOrCreateFromTemplate(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,89,bytes = ctx.marshaller().marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2002,public IgniteInternalFuture<?> getOrCreateFromTemplate(String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2004,if (publicJCache(cacheName, false) != null) // Cache with given name already started.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2009,return dynamicStartCache(cfg, cacheName, null, false, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2103,boolean failIfNotStarted
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2105,return dynamicStartCache(ccfg, cacheName, nearCfg, CacheType.USER, failIfExists, failIfNotStarted);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2124,boolean failIfNotStarted
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2126,checkEmptyTransactions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2219,public IgniteInternalFuture<?> dynamicDestroyCache(String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2220,checkEmptyTransactions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2862,dynamicStartCache(null, name, null, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2965,return publicJCache(cacheName, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2979,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2994,dynamicStartCache(null, cacheName, null, false, failIfNotStarted).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1534,fut = ctx.kernalContext().cache().dynamicDestroyCache(ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,23,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,24,import org.apache.ignite.internal.processors.cache.GridCacheSharedContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,292,if (dhtVers != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,121,if (affAssignmentBytes != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,506,if (isMini(fut)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,507,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,509,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,510,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will ignore): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,512,found = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,750,private boolean isMini(IgniteInternalFuture<?> f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,751,return f.getClass().equals(MiniFuture.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,984,return S.toString(GridDhtLockFuture.class, this, super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockRequest.java,314,if (owned != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,23,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,236,public Collection<GridCacheVersion> pendingVersions() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,237,return pendingVers == null ? Collections.<GridCacheVersion>emptyList() : pendingVers;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,370,case 20:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,378,case 21:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,386,case 22:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,282,if (owned != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,573,entryProcessors = unmarshalCollection(entryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,575,invokeArgs = unmarshalInvokeArguments(invokeArgsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,579,nearEntryProcessors = unmarshalCollection(nearEntryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,166,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,179,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,576,entryProcessors = unmarshalCollection(entryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,587,invokeArgs = unmarshalInvokeArguments(invokeArgsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysResponse.java,176,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysResponse.java,193,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,151,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,153,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,157,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will fail): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,159,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,163,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,216,for (IgniteInternalFuture<IgniteInternalTx> fut : futures()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,217,if (isMini(fut)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,218,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,220,if (f.futureId().equals(res.miniId())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,221,assert f.node().id().equals(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,223,f.onResult(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,236,if (isMini(fut)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,237,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,242,f.onResult(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,314,private boolean isMini(IgniteInternalFuture<?> f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,315,return f.getClass().equals(MiniFuture.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,399,MiniFuture mini = new MiniFuture(backup, mapping);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,433,GridDhtTxFinishRequest finishReq = new GridDhtTxFinishRequest(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,434,cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,435,futureId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,436,mini.futureId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,437,tx.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,438,tx.xidVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,439,tx.commitVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,440,tx.threadId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,441,tx.isolation(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,442,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,443,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,444,tx.system(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,445,tx.ioPolicy(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,446,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,447,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,448,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,449,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,450,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,451,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,452,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,453,0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,454,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,457,finishReq.checkCommitted(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,462,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,468,mini.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,471,mini.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,591,MiniFuture fut = new MiniFuture(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,611,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,615,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,625,if (isMini(f)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,626,MiniFuture m = (MiniFuture)f;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,628,return "[node=" + m.node().id() + ", loc=" + m.node().isLocal() + ", done=" + f.isDone() + "]";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,644,private class MiniFuture extends GridFutureAdapter<IgniteInternalTx> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,649,private final IgniteUuid futId = IgniteUuid.randomUuid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,656,private ClusterNode backup;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,661,MiniFuture(GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,669,MiniFuture(ClusterNode backup, GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,670,this.backup = backup;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,671,this.m = m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,677,IgniteUuid futureId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,678,return futId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,684,public ClusterNode node() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,685,assert m != null || backup != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,687,return backup != null ? backup : m.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,693,public GridDistributedTxMapping mapping() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,694,return m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,700,void onResult(Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,702,log.debug("Failed to get future result [fut=" + this + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,705,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,711,void onResult(ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,713,log.debug("Remote node left grid while sending or waiting for reply (will fail): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,715,if (backup != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,718,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,720,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,722,onDone(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,728,void onResult(GridNearTxFinishResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,729,assert backup == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,732,onDone(res.error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,733,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,734,onDone(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,740,void onResult(GridDhtTxFinishResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,741,assert backup != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,764,return S.toString(MiniFuture.class, this, "done", isDone(), "cancelled", isCancelled(), "err", error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,265,if (ownedVals != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,288,for (IgniteTxKey key :filterFailedKeys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,272,if (keyValFilter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,279,if (rdc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,286,if (trans != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,293,if (!F.isEmpty(args)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,142,metadata = unmarshalCollection(metaDataBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,143,data = unmarshalCollection(dataBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1112,valid = prev == ACTIVE || prev == PREPARING || prev == PREPARED || prev == COMMITTING;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,794,expiryPlc =  ctx.marshaller().unmarshal(expiryPlcBytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,721,if (tx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,722,IgniteInternalFuture<IgniteInternalTx> rollbackFut = tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,725,rollbackFut.listen(CU.errorLogger(log));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,727,res = rollbackFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,1055,if (req.replyRequired()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,725,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,735,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1052,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,898,ctx.cache().dynamicStartCache(newCfg, cacheName, null, CacheType.INTERNAL, false, true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,204,fut = ((IgniteKernal)ctx.grid()).destroyCacheAsync(cacheName).chain(
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,216,fut = ((IgniteKernal)ctx.grid()).getOrCreateCacheAsync(cacheName).chain(
modules/core/src/main/java/org/apache/ignite/stream/socket/SocketStreamer.java,206,srv.stop();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,36,import org.apache.ignite.internal.processors.hadoop.v2.HadoopNativeCodeLoader;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,149,return loadFromBytes(name, HadoopNativeCodeLoader.class.getName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,18,package org.apache.ignite.internal.processors.hadoop.v2;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,20,import org.apache.hadoop.classification.InterfaceAudience;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,21,import org.apache.hadoop.classification.InterfaceStability;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,22,import org.apache.hadoop.conf.Configuration;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,29,public class HadoopNativeCodeLoader {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,36,public static boolean isNativeCodeLoaded() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,37,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,43,public static boolean buildSupportsSnappy() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,44,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,50,public static String getLibraryName() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,51,throw new IllegalStateException();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,61,public boolean getLoadNativeLibraries(Configuration conf) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,62,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,71,public void setLoadNativeLibraries(Configuration conf, boolean loadNativeLibraries) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,33,import java.util.concurrent.atomic.AtomicBoolean;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,128,String ignitePackagePrefix = "org.apache.ignite";
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,129,int len = ignitePackagePrefix.length();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,131,return cls.startsWith(ignitePackagePrefix) && (cls.indexOf("igfs.", len) != -1 || cls.indexOf(".fs.", len) != -1 || cls.indexOf("hadoop.", len) != -1);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,162,hasDeps = hasExternalDependencies(name, new HashSet<String>());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,272,boolean hasExternalDependencies(final String clsName, final Set<String> visited) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,294,visited.add(clsName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,296,final AtomicBoolean hasDeps = new AtomicBoolean();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,298,rdr.accept(new ClassVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,299,AnnotationVisitor av = new AnnotationVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,303,FieldVisitor fv = new FieldVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,305,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,307,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,311,MethodVisitor mv = new MethodVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,313,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,315,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,319,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,321,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,325,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,329,onType(owner);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,330,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,334,for (Object o : locTypes) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,336,onType((String)o);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,339,for (Object o : stackTypes) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,341,onType((String)o);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,346,Label lb2, int i) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,347,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,351,onType(owner);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,355,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,359,onType(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,363,void onClass(String depCls) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,364,assert validateClassName(depCls) : depCls;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,366,if (depCls.startsWith("java.")) // Filter out platform classes.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,367,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,370,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,372,Boolean res = cache.get(depCls);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,375,hasDeps.set(true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,378,void onType(String type) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,380,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,382,int off = 0;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,385,off++; // Handle arrays.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,388,type = type.substring(off);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,391,return; // Get rid of primitives.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,393,if (type.charAt(type.length() - 1) == ';') {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,394,assert type.charAt(0) == 'L' : type;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,396,type = type.substring(1, type.length() - 1);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,399,type = type.replace('/', '.');
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,401,onClass(type);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,405,String[] ifaces) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,406,onType(superName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,408,if (ifaces != null) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,410,onType(iface);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,415,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,417,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,421,onType(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,425,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,427,return fv;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,431,String[] exceptions) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,432,if (exceptions != null) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,434,onType(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,437,return mv;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,441,if (hasDeps.get()) // We already know that we have dependencies, no need to check parent.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,458,res = hasExternalDependencies(parentCls, visited);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,223,dfltModes.put("/ignite/primary", PRIMARY);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,225,if (secondaryFs != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,226,dfltModes.put("/ignite/proxy", PROXY);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,227,dfltModes.put("/ignite/sync", DUAL_SYNC);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,228,dfltModes.put("/ignite/async", DUAL_ASYNC);
modules/core/src/main/java/org/apache/ignite/internal/IgniteVersionUtils.java,56,VER_STR = IgniteProperties.get("ignite.version");
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,46,Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)(-([^0123456789][^-]+)(-SNAPSHOT)?)?(-(\\d+))?(-([\\da-f]+))?");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,448,qry = ctx.queries().createScanQuery(p != null ? p : ACCEPT_ALL, ((ScanQuery)filter).getPartition(),
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,314,private boolean sqlEscapeAll;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4248,public static String maskName(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4249,return cacheName == null ? "default" : cacheName;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,301,stmt.executeUpdate("SET SCHEMA \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,327,executeStatement("INFORMATION_SCHEMA", "CREATE SCHEMA IF NOT EXISTS \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,340,executeStatement("INFORMATION_SCHEMA", "DROP SCHEMA IF EXISTS \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,583,Connection c = connectionForThread(tbl.schema());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,800,private ResultSet executeQuery(String space, String qry, @Nullable Collection<Object> params,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,801,TableDescriptor tbl) throws IgniteCheckedException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,802,Connection conn = connectionForThread(tbl.schema());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1101,return "\"" + name + "\"";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1226,public static String schema(@Nullable String space) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1228,return "";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1230,return space;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1237,public static String space(String schema) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1238,assert schema != null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1240,return "".equals(schema) ? null : schema;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1435,String schema = schema(ccfg.getName());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1437,if (schemas.putIfAbsent(schema, new Schema(ccfg.getName(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1440,throw new IgniteCheckedException("Cache already registered: " + U.maskName(ccfg.getName()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1768,fullTblName = '\"' + IgniteH2Indexing.schema(schema.spaceName) + "\"." +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1769,escapeName(type.name(), schema.escapeAll());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1775,public String schema() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1776,return IgniteH2Indexing.schema(schema.spaceName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,2058,private Schema(@Nullable String spaceName, GridUnsafeMemory offheap, CacheConfiguration<?,?> ccfg) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,139,public static GridCacheTwoStepQuery split(JdbcPreparedStatement stmt, Object[] params, boolean collocated) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,143,Set<String> spaces = new HashSet<>();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,148,final GridSqlSelect mapQry = wrapUnion(collectAllSpaces(GridSqlQueryParser.parse(stmt), spaces));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,276,private static GridSqlQuery collectAllSpaces(GridSqlQuery qry, Set<String> spaces) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,280,collectAllSpaces(union.left(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,281,collectAllSpaces(union.right(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,286,collectAllSpacesInFrom(select.from(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,289,collectAllSpacesInSubqueries(el, spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,291,collectAllSpacesInSubqueries(select.where(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,301,private static void collectAllSpacesInFrom(GridSqlElement from, Set<String> spaces) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,306,collectAllSpacesInFrom(from.child(0), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,307,collectAllSpacesInFrom(from.child(1), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,313,spaces.add(IgniteH2Indexing.space(schema));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,316,collectAllSpaces(((GridSqlSubquery)from).select(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,318,collectAllSpacesInFrom(from.child(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,328,private static void collectAllSpacesInSubqueries(GridSqlElement el, Set<String> spaces) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,334,collectAllSpacesInSubqueries(child, spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,337,collectAllSpaces(((GridSqlSubquery)el).select(), spaces);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,160,GridSqlElement[] rdcExps = new GridSqlElement[mapQry.visibleColumns()];
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,167,aggregateFound |= splitSelectExpression(mapExps, rdcExps, colNames, i, collocated);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,175,for (GridSqlElement rdcExp : rdcExps) // Add corresponding visible reduce columns.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,176,rdcQry.addColumn(rdcExp, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,178,for (int i = rdcExps.length; i < mapExps.size(); i++)  // Add all extra map columns as invisible reduce columns.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,186,if (mapQry.havingColumn() >= 0 && !collocated) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,188,rdcQry.whereAnd(column(columnName(mapQry.havingColumn())));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,428,private static boolean splitSelectExpression(List<GridSqlElement> mapSelect, GridSqlElement[] rdcSelect,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,429,Set<String> colNames, final int idx, boolean collocated) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,445,alias = alias(columnName(idx), el);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,451,rdcSelect[idx] = alias;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,454,String mapColAlias = columnName(idx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,465,if (idx < rdcSelect.length) { // SELECT __C0 AS original_alias
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,466,GridSqlElement rdcEl = column(mapColAlias);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,468,if (colNames.add(rdcColAlias)) // To handle column name duplication (usually wildcard for few tables).
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,469,rdcEl = alias(rdcColAlias, rdcEl);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,471,rdcSelect[idx] = rdcEl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,614,return ctx.kernalContext().query().queryLocal(ctx, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,679,public <K, V> Iterator<Cache.Entry<K, V>> queryLocal(final GridCacheContext<?, ?> cctx, final SqlQuery qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,725,t.getKey(),
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,726,t.getValue());
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,274,orgCache.put(org1.id, org1);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,275,orgCache.put(org2.id, org2);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,20,import java.lang.reflect.AccessibleObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,21,import java.lang.reflect.Field;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,22,import java.lang.reflect.Member;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,23,import java.lang.reflect.Method;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,24,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,25,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,26,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,27,import java.util.Comparator;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,28,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,29,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,30,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,31,import java.util.LinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,32,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,33,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,34,import java.util.TreeSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,35,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,36,import java.util.concurrent.ExecutorService;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,37,import javax.cache.Cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,38,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1602,Object x = this.key ? key : val;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,136,return person.salary <= 1000;
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,79,public void apply(IgniteCache<String, Double> cache, Map.Entry<String, Double> e) {
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,83,Instrument inst = instCache.get(symbol);
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,86,inst = new Instrument(symbol);
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,90,inst.update(tick);
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,92,instCache.put(symbol, inst);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1569,return aff.isPrimary(n, e.key().value(e.context().cacheObjectContext(), false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1579,public static <K, V> IgnitePredicate<Cache.Entry<K, V>> cachePrimary0(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1580,final Affinity<K> aff,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1581,final ClusterNode n
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1582,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1583,return new IgnitePredicate<Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1585,return aff.isPrimary(n, e.getKey());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,18,package org.apache.ignite.examples.datagrid.store.dummy;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,20,import java.util.Map;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,21,import java.util.concurrent.ConcurrentHashMap;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,22,import org.apache.ignite.Ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,23,import org.apache.ignite.cache.store.CacheStoreAdapter;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,24,import org.apache.ignite.cache.store.CacheStoreSession;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,26,import org.apache.ignite.lang.IgniteBiInClosure;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,27,import org.apache.ignite.resources.CacheNameResource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,28,import org.apache.ignite.resources.CacheStoreSessionResource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,29,import org.apache.ignite.resources.IgniteInstanceResource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,30,import org.apache.ignite.transactions.Transaction;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,31,import org.jetbrains.annotations.Nullable;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,36,public class CacheDummyPersonStore extends CacheStoreAdapter<Long, Person> {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,39,private Ignite ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,43,private String cacheName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,47,private CacheStoreSession ses;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,50,private Map<Long, Person> dummyDB = new ConcurrentHashMap<>();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,54,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,56,System.out.println(">>> Store load [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,58,return dummyDB.get(key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,63,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,65,Long key = entry.getKey();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,66,Person val = entry.getValue();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,68,System.out.println(">>> Store put [key=" + key + ", val=" + val + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,70,dummyDB.put(key, val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,75,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,77,System.out.println(">>> Store remove [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,79,dummyDB.remove(key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,84,int cnt = (Integer)args[0];
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,86,System.out.println(">>> Store loadCache for entry count: " + cnt);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,90,Person p = new Person(i, "first-" + i, "last-" + 1);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,111,return ses != null ? ses.transaction() : null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,18,package org.apache.ignite.examples.datagrid.store.dummy;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,20,import java.util.UUID;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,21,import javax.cache.configuration.FactoryBuilder;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,22,import org.apache.ignite.Ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,23,import org.apache.ignite.IgniteCache;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,24,import org.apache.ignite.IgniteException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,25,import org.apache.ignite.Ignition;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,26,import org.apache.ignite.configuration.CacheConfiguration;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,27,import org.apache.ignite.examples.ExampleNodeStartup;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,28,import org.apache.ignite.examples.ExamplesUtils;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,30,import org.apache.ignite.transactions.Transaction;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,32,import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,42,public class CacheDummyStoreExample {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,44,private static final String CACHE_NAME = CacheDummyStoreExample.class.getSimpleName();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,47,public static final int MIN_MEMORY = 1024 * 1024 * 1024;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,50,private static final int ENTRY_COUNT = 100_000;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,53,private static final Long id = Math.abs(UUID.randomUUID().getLeastSignificantBits());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,61,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,62,ExamplesUtils.checkMinMemory(MIN_MEMORY);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,65,try (Ignite ignite = Ignition.start("examples/config/example-ignite.xml")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,66,System.out.println();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,67,System.out.println(">>> Cache store example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,69,CacheConfiguration<Long, Person> cacheCfg = new CacheConfiguration<>(CACHE_NAME);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,72,cacheCfg.setAtomicityMode(TRANSACTIONAL);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,75,cacheCfg.setCacheStoreFactory(FactoryBuilder.factoryOf(CacheDummyPersonStore.class));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,77,cacheCfg.setReadThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,78,cacheCfg.setWriteThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,80,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(cacheCfg)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,84,loadCache(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,88,executeTransaction(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,98,private static void loadCache(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,99,long start = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,102,cache.loadCache(null, ENTRY_COUNT);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,104,long end = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,106,System.out.println(">>> Loaded " + cache.size() + " keys with backups in " + (end - start) + "ms.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,114,private static void executeTransaction(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,115,try (Transaction tx = Ignition.ignite().transactions().txStart()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,116,Person val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,118,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,120,val = cache.getAndPut(id, new Person(id, "Isaac", "Newton"));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,122,System.out.println("Overwrote old value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,124,val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,126,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,128,tx.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,131,System.out.println("Read value after commit: " + cache.get(id));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/package-info.java,22,package org.apache.ignite.examples.datagrid.store.dummy;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,27,import javax.sql.DataSource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,28,import org.apache.ignite.IgniteException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,35,import org.h2.jdbcx.JdbcConnectionPool;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,43,public static final DataSource DATA_SRC =
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,44,JdbcConnectionPool.create("jdbc:h2:mem:example;DB_CLOSE_DELAY=-1", "", "");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,55,public CacheJdbcPersonStore() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,56,prepareDb();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,65,private void prepareDb() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,66,try (Connection conn = DATA_SRC.getConnection()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,67,conn.createStatement().execute(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,71,catch (SQLException e) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,72,throw new IgniteException("Failed to create database table.", e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,82,try (PreparedStatement st = conn.prepareStatement("select * from PERSONS where id = ?")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,140,try (PreparedStatement st = conn.prepareStatement("delete from PERSONS where id=?")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,159,try (PreparedStatement stmt = conn.prepareStatement("select * from PERSONS limit ?")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcStoreExample.java,85,lsnr.setDataSource(CacheJdbcPersonStore.DATA_SRC);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,18,package org.apache.ignite.examples.datagrid.store.spring;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,20,import java.sql.ResultSet;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,21,import java.sql.SQLException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,22,import java.util.concurrent.atomic.AtomicInteger;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,23,import javax.cache.Cache;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,24,import javax.cache.integration.CacheLoaderException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,25,import javax.sql.DataSource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,26,import org.apache.ignite.IgniteException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,27,import org.apache.ignite.cache.store.CacheStore;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,28,import org.apache.ignite.cache.store.CacheStoreAdapter;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,30,import org.apache.ignite.lang.IgniteBiInClosure;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,31,import org.springframework.dao.EmptyResultDataAccessException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,32,import org.springframework.jdbc.core.JdbcTemplate;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,33,import org.springframework.jdbc.core.RowCallbackHandler;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,34,import org.springframework.jdbc.core.RowMapper;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,35,import org.springframework.jdbc.datasource.DriverManagerDataSource;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,41,public class CacheSpringPersonStore extends CacheStoreAdapter<Long, Person> {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,43,public static final DataSource DATA_SRC = new DriverManagerDataSource("jdbc:h2:mem:example;DB_CLOSE_DELAY=-1");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,46,private JdbcTemplate jdbcTemplate;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,53,public CacheSpringPersonStore() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,54,jdbcTemplate = new JdbcTemplate(DATA_SRC);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,56,prepareDb();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,65,private void prepareDb() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,66,jdbcTemplate.update(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,73,System.out.println(">>> Store load [key=" + key + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,75,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,76,return jdbcTemplate.queryForObject("select * from PERSONS where id = ?", new RowMapper<Person>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,78,return new Person(rs.getLong(1), rs.getString(2), rs.getString(3));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,82,catch (EmptyResultDataAccessException ignored) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,83,return null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,89,Long key = entry.getKey();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,90,Person val = entry.getValue();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,92,System.out.println(">>> Store write [key=" + key + ", val=" + val + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,94,int updated = jdbcTemplate.update("update PERSONS set firstName = ?, lastName = ? where id = ?",
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,97,if (updated == 0) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,98,jdbcTemplate.update("insert into PERSONS (id, firstName, lastName) values (?, ?, ?)",
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,105,System.out.println(">>> Store delete [key=" + key + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,107,jdbcTemplate.update("delete from PERSONS where id = ?", key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,113,throw new CacheLoaderException("Expected entry count parameter is not provided.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,115,int entryCnt = (Integer)args[0];
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,117,final AtomicInteger cnt = new AtomicInteger();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,119,jdbcTemplate.query("select * from PERSONS limit ?", new RowCallbackHandler() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,121,Person person = new Person(rs.getLong(1), rs.getString(2), rs.getString(3));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,125,cnt.incrementAndGet();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,129,System.out.println(">>> Loaded " + cnt + " values into cache.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,18,package org.apache.ignite.examples.datagrid.store.spring;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,20,import java.util.UUID;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,21,import javax.cache.configuration.Factory;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,22,import javax.cache.configuration.FactoryBuilder;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,23,import org.apache.ignite.Ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,24,import org.apache.ignite.IgniteCache;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,25,import org.apache.ignite.IgniteException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,26,import org.apache.ignite.Ignition;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,27,import org.apache.ignite.cache.store.CacheStoreSessionListener;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,28,import org.apache.ignite.cache.store.jdbc.CacheJdbcStoreSessionListener;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,29,import org.apache.ignite.configuration.CacheConfiguration;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,30,import org.apache.ignite.examples.ExampleNodeStartup;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,31,import org.apache.ignite.examples.ExamplesUtils;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,33,import org.apache.ignite.transactions.Transaction;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,35,import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,45,public class CacheSpringStoreExample {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,47,private static final String CACHE_NAME = CacheSpringStoreExample.class.getSimpleName();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,50,public static final int MIN_MEMORY = 1024 * 1024 * 1024;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,53,private static final int ENTRY_COUNT = 100_000;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,56,private static final Long id = Math.abs(UUID.randomUUID().getLeastSignificantBits());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,64,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,65,ExamplesUtils.checkMinMemory(MIN_MEMORY);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,68,try (Ignite ignite = Ignition.start("examples/config/example-ignite.xml")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,69,System.out.println();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,70,System.out.println(">>> Cache store example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,72,CacheConfiguration<Long, Person> cacheCfg = new CacheConfiguration<>(CACHE_NAME);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,75,cacheCfg.setAtomicityMode(TRANSACTIONAL);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,78,cacheCfg.setCacheStoreFactory(FactoryBuilder.factoryOf(CacheSpringPersonStore.class));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,81,cacheCfg.setCacheStoreSessionListenerFactories(new Factory<CacheStoreSessionListener>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,83,CacheJdbcStoreSessionListener lsnr = new CacheJdbcStoreSessionListener();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,85,lsnr.setDataSource(CacheSpringPersonStore.DATA_SRC);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,87,return lsnr;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,91,cacheCfg.setReadThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,92,cacheCfg.setWriteThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,94,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(cacheCfg)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,98,loadCache(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,102,executeTransaction(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,112,private static void loadCache(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,113,long start = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,116,cache.loadCache(null, ENTRY_COUNT);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,118,long end = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,120,System.out.println(">>> Loaded " + cache.size() + " keys with backups in " + (end - start) + "ms.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,128,private static void executeTransaction(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,129,try (Transaction tx = Ignition.ignite().transactions().txStart()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,130,Person val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,132,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,134,val = cache.getAndPut(id, new Person(id, "Isaac", "Newton"));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,136,System.out.println("Overwrote old value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,138,val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,140,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,142,tx.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,145,System.out.println("Read value after commit: " + cache.get(id));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/package-info.java,22,package org.apache.ignite.examples.datagrid.store.spring;
examples/src/main/java/org/apache/ignite/examples/datagrid/starschema/CacheStarSchemaExample.java,63,private static int idGen = (int)System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectMessageWriter.java,43,stream.setBuffer(buf);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,61,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,65,System.out.println(">>> Cache auto store example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,71,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,73,val = cache.getAndPut(id, new Person(id, "Isaac", "Newton"));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,75,System.out.println("Overwrote old value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,79,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,84,System.out.println("Read value after commit: " + cache.get(id));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,881,return;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,895,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,896,assert readBuf.hasRemaining();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderEnum.java,61,cls = U.forName(reader.readString(), null);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableEnumArrayLazyValue.java,54,cls = U.forName(reader.readString(), null);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableObjectArrayLazyValue.java,53,cls = U.forName(reader.readString(), null);
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,121,public static final byte MAP_ENTRY = 26;
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,163,public static final byte TREE_SET = 5;
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,166,public static final byte CONC_SKIP_LIST_SET = 6;
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,175,public static final byte TREE_MAP = 3;
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,178,public static final byte CONC_HASH_MAP = 4;
modules/core/src/main/java/org/apache/ignite/internal/portable/GridPortableMarshaller.java,181,public static final byte PROPERTIES_MAP = 5;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,187,case MAP_ENTRY:
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,490,case MAP_ENTRY:
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,491,writer.doWriteMapEntry((Map.Entry<?, ?>)obj);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,493,break;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,42,import java.util.Properties;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,44,import java.util.TreeMap;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,45,import java.util.TreeSet;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,47,import java.util.concurrent.ConcurrentHashMap;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,49,import java.util.concurrent.ConcurrentSkipListSet;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,183,colTypes.put(TreeSet.class, GridPortableMarshaller.TREE_SET);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,184,colTypes.put(ConcurrentSkipListSet.class, GridPortableMarshaller.CONC_SKIP_LIST_SET);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,188,mapTypes.put(TreeMap.class, GridPortableMarshaller.TREE_MAP);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,189,mapTypes.put(ConcurrentHashMap.class, GridPortableMarshaller.CONC_HASH_MAP);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,190,mapTypes.put(ConcurrentHashMap8.class, GridPortableMarshaller.CONC_HASH_MAP);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,191,mapTypes.put(Properties.class, GridPortableMarshaller.PROPERTIES_MAP);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,228,registerPredefinedType(TreeSet.class, 0);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,229,registerPredefinedType(ConcurrentSkipListSet.class, 0);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,233,registerPredefinedType(TreeMap.class, 0);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,234,registerPredefinedType(ConcurrentHashMap.class, 0);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,235,registerPredefinedType(ConcurrentHashMap8.class, 0);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,315,case GridPortableMarshaller.MAP_ENTRY:
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,316,skipValue();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,317,skipValue();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,319,return;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,417,case GridPortableMarshaller.MAP_ENTRY:
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,675,case GridPortableMarshaller.TREE_SET:
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,676,case GridPortableMarshaller.CONC_SKIP_LIST_SET:
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,692,case GridPortableMarshaller.MAP_ENTRY:
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,693,return new PortableLazyMapEntry(this);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,20,import org.apache.ignite.internal.portable.GridPortableMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,25,import org.apache.ignite.internal.util.*;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,27,import java.util.*;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,113,byte colType;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,116,colType = GridPortableMarshaller.CONC_SKIP_LIST_SET;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,117,else
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,118,colType = writer.context().collectionType(c.getClass());
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,18,package org.apache.ignite.internal.portable.builder;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,20,import org.apache.ignite.internal.portable.*;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,22,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,27,class PortableLazyMapEntry implements Map.Entry<Object, Object>, PortableBuilderSerializationAware {
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,29,private final Object key;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,32,private Object val;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,37,PortableLazyMapEntry(PortableBuilderReader reader) {
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,38,key = reader.parseValue();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,39,val = reader.parseValue();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,44,return PortableUtils.unwrapLazy(key);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,49,return PortableUtils.unwrapLazy(val);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,54,Object res = getValue();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,56,this.val = val;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,58,return res;
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,63,writer.writeByte(GridPortableMarshaller.MAP_ENTRY);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,65,ctx.writeValue(writer, key);
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableLazyMapEntry.java,66,ctx.writeValue(writer, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheLazyEntry.java,76,public CacheLazyEntry(GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,383,val = cacheCtx.toCacheObject(invokeEntry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,720,boolean use;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,722,try {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,723,Method writeObj = cls.getDeclaredMethod("writeObject", ObjectOutputStream.class);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,724,Method readObj = cls.getDeclaredMethod("readObject", ObjectInputStream.class);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,732,catch (NoSuchMethodException e) {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,733,use = false;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,736,return use;
modules/hibernate/src/main/java/org/apache/ignite/cache/hibernate/HibernateTransactionalDataRegion.java,91,if (cache.configuration().getTransactionManagerLookupClassName() == null) {
modules/hibernate/src/main/java/org/apache/ignite/cache/hibernate/HibernateTransactionalDataRegion.java,92,TransactionConfiguration txCfg = ignite.configuration().getTransactionConfiguration();
modules/hibernate/src/main/java/org/apache/ignite/cache/hibernate/HibernateTransactionalDataRegion.java,95,throw new CacheException("Hibernate TRANSACTIONAL access strategy must have Ignite with " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,357,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,358,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,359,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,375,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,392,txEntry.entryProcessorCalculatedValue(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1212,CacheObject procVal = entry.entryProcessorCalculatedValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1214,entry.op(procVal == null ? DELETE : UPDATE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1215,entry.value(procVal, true, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,101,private CacheObject entryProcessorCalcVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,814,public CacheObject entryProcessorCalculatedValue() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,821,public void entryProcessorCalculatedValue(CacheObject entryProcessorCalcVal) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,50,public static final String CACHE_NAME = CacheAutoStoreLoadDataExample.class.getSimpleName();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,67,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(CacheConfig.jdbcPojoStoreCache(CACHE_NAME))) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,18,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,20,import org.apache.ignite.Ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,21,import org.apache.ignite.IgniteCache;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,22,import org.apache.ignite.IgniteException;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,23,import org.apache.ignite.Ignition;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,24,import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStore;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,25,import org.apache.ignite.configuration.CacheConfiguration;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,26,import org.apache.ignite.examples.ExampleNodeStartup;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,27,import org.apache.ignite.examples.ExamplesUtils;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,48,public class CacheAutoStoreLoadDataExample {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,50,public static final String CACHE_NAME = CacheAutoStoreLoadDataExample.class.getSimpleName();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,53,public static final int MIN_MEMORY = 1024 * 1024 * 1024;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,61,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,62,ExamplesUtils.checkMinMemory(MIN_MEMORY);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,64,try (Ignite ignite = Ignition.start("examples/config/example-ignite.xml")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,65,System.out.println();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,66,System.out.println(">>> Cache auto store load data example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,68,CacheConfiguration<Long, Person> cacheCfg = CacheConfig.jdbcPojoStoreCache(CACHE_NAME);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,70,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(cacheCfg)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,72,cache.loadCache(null, "java.lang.Long", "select * from PERSON where id <= 3");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,74,System.out.println("Loaded cache entries: " + cache.size());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,76,cache.clear();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,79,cache.loadCache(null);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,81,System.out.println("Loaded cache entries: " + cache.size());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,18,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,20,import java.sql.Types;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,21,import java.util.Arrays;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,22,import java.util.Collections;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,23,import javax.cache.configuration.Factory;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,24,import org.apache.ignite.cache.CacheTypeFieldMetadata;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,25,import org.apache.ignite.cache.CacheTypeMetadata;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,26,import org.apache.ignite.cache.store.CacheStore;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,27,import org.apache.ignite.cache.store.jdbc.CacheJdbcPojoStore;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,28,import org.apache.ignite.configuration.CacheConfiguration;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,30,import org.h2.jdbcx.JdbcConnectionPool;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,32,import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,37,public class CacheConfig {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,41,public static CacheConfiguration<Long, Person> jdbcPojoStoreCache(String name) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,42,CacheConfiguration<Long, Person> cfg = new CacheConfiguration<>(name);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,45,cfg.setAtomicityMode(TRANSACTIONAL);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,47,cfg.setCacheStoreFactory(new Factory<CacheStore<? super Long, ? super Person>>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,49,CacheJdbcPojoStore<Long, Person> store = new CacheJdbcPojoStore<>();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,51,store.setDataSource(JdbcConnectionPool.create("jdbc:h2:tcp://localhost/mem:ExampleDb", "sa", ""));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,53,return store;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,57,CacheTypeMetadata meta = new CacheTypeMetadata();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,59,meta.setDatabaseTable("PERSON");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,61,meta.setKeyType("java.lang.Long");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,64,meta.setKeyFields(Collections.singletonList(new CacheTypeFieldMetadata("ID", Types.BIGINT, "id", Long.class)));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,66,meta.setValueFields(Arrays.asList(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,67,new CacheTypeFieldMetadata("ID", Types.BIGINT, "id", long.class),
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,68,new CacheTypeFieldMetadata("FIRST_NAME", Types.VARCHAR, "firstName", String.class),
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,70,));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,72,cfg.setTypeMetadata(Collections.singletonList(meta));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,74,cfg.setWriteBehindEnabled(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,76,cfg.setReadThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,77,cfg.setWriteThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,79,return cfg;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/DbH2ServerStartup.java,18,package org.apache.ignite.examples.datagrid.store.auto;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1321,protected int fillKeyParameters(PreparedStatement stmt, int idx, EntryMapping em,
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1322,Object key) throws CacheException {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,357,for (TypeDescriptor desc : descs.descriptors()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,57,import org.apache.ignite.internal.processors.datastructures.GridCacheSetItemKey;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,82,private ConcurrentMap<IgniteUuid, GridConcurrentHashSet<GridCacheSetItemKey>> setDataMap =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,319,onSetItemUpdated((GridCacheSetItemKey)key0, rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,330,for (GridConcurrentHashSet<GridCacheSetItemKey> set : setDataMap.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,331,Iterator<GridCacheSetItemKey> iter = set.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,334,GridCacheSetItemKey key = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,439,GridConcurrentHashSet<GridCacheSetItemKey> set = setDataMap.get(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,448,Collection<GridCacheSetItemKey> keys = new ArrayList<>(BATCH_SIZE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,450,for (GridCacheSetItemKey key : set) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,532,private void onSetItemUpdated(GridCacheSetItemKey key, boolean rmv) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,533,GridConcurrentHashSet<GridCacheSetItemKey> set = setDataMap.get(key.setId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,539,GridConcurrentHashSet<GridCacheSetItemKey> old = setDataMap.putIfAbsent(key.setId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,50,import org.apache.ignite.internal.processors.datastructures.GridCacheSetItemKey;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,764,Collection<GridCacheSetItemKey> data = cctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,771,new C1<GridCacheSetItemKey, IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,777,new P1<GridCacheSetItemKey>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,111,private static final int MAX_UPDATE_RETRIES = 100;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,114,private static final long RETRY_DELAY = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,61,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,99,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,156,Map<GridCacheQueueItemKey, T> putMap = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,198,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,64,protected static final long RETRY_DELAY = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,367,removeKeys(cache, id, queueName, collocated, t.get1(), t.get2(), batchSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,421,Set<GridCacheQueueItemKey> keys = new HashSet<>(batchSize > 0 ? batchSize : 10);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,424,keys.add(itemKey(id, name, collocated, idx));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,537,protected GridCacheQueueItemKey itemKey(Long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,538,return itemKey(id, queueName, collocated(), idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,562,private static GridCacheQueueItemKey itemKey(IgniteUuid id, String queueName, boolean collocated, long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,563,return collocated ? new CollocatedItemKey(id, queueName, idx) : new GridCacheQueueItemKey(id, queueName, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,24,import org.apache.ignite.internal.processors.cache.GridCacheInternal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,32,class GridCacheQueueItemKey implements Externalizable, GridCacheInternal {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,113,int result = queueId.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,115,result = 31 * result + (int)(idx ^ (idx >>> 32));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,117,return result;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,69,private final IgniteInternalCache<GridCacheSetItemKey, Boolean> cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,143,GridConcurrentHashSet<GridCacheSetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,174,GridConcurrentHashSet<GridCacheSetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,183,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,196,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,209,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,234,Map<GridCacheSetItemKey, Boolean> addKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,250,add |= add(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,265,Set<GridCacheSetItemKey> rmvKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,281,rmv |= remove(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,298,Set<GridCacheSetItemKey> rmvKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,334,Collection<GridCacheSetItemKey> rmvKeys = new ArrayList<>(BATCH_SIZE);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,428,private void retryRemoveAll(final Collection<GridCacheSetItemKey> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,441,private void retryPutAll(final Map<GridCacheSetItemKey, Boolean> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,526,private GridCacheSetItemKey itemKey(Object item) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,527,return collocated ? new CollocatedItemKey(name, id, item) : new GridCacheSetItemKey(id, item);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,24,import org.apache.ignite.internal.processors.cache.GridCacheInternal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,33,public class GridCacheSetItemKey implements GridCacheInternal, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,63,public IgniteUuid setId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,70,public Object item() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,76,int result = setId.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,78,result = 31 * result + item.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,80,return result;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,172,Object obj = mc.ctor.newInstance();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java,177,Method setter = mc.setters.get(fldJavaName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,454,public PortableClassDescriptor descriptorForTypeId(boolean userType, int typeId, ClassLoader ldr) {
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderEnum.java,67,this.typeId = reader.portableContext().descriptorForClass(cls).typeId();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableEnumArrayLazyValue.java,60,compTypeId = reader.portableContext().descriptorForClass(cls).typeId();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableObjectArrayLazyValue.java,59,compTypeId = reader.portableContext().descriptorForClass(cls).typeId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,226,if (super.onDone(tx, e != null ? e : err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,228,this.tx.sendFinishReply(commit, error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,892,protected final boolean commitOnPrepare() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1249,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,281,private boolean syncCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,282,return tx != null && tx.syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,567,assert !m.empty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,569,final ClusterNode n = m.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,571,GridNearTxPrepareRequest req = new GridNearTxPrepareRequest(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,572,futId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,573,tx.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,574,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,576,m.writes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,577,m.near(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,578,txMapping.transactionNodes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,579,m.last(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,581,tx.onePhaseCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,582,tx.needReturnValue() && tx.implicit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,583,tx.implicitSingle(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,584,m.explicitLock(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,585,tx.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,586,tx.taskNameHash(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,589,for (IgniteTxEntry txEntry : m.writes()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,591,req.addDhtVersion(txEntry.txKey(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,595,if (m.near()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,596,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,597,tx.optimisticLockEntries(req.writes());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,599,tx.userPrepare();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,601,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,606,final MiniFuture fut = new MiniFuture(m, mappings);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,608,req.miniId(fut.futureId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,610,add(fut); // Append new future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,613,if (n.isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,617,IgniteInternalFuture<GridNearTxPrepareResponse> prepFut = cctx.tm().txHandler().prepareTx(n.id(), tx, req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,619,prepFut.listen(new CI1<IgniteInternalFuture<GridNearTxPrepareResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,621,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,622,fut.onResult(n.id(), prepFut.get());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,624,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,625,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,630,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,631,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,632,cctx.io().send(n, req, tx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,634,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,635,e.retryReadyFuture(cctx.nextAffinityReadyFuture(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,637,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,639,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,640,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/portable/CacheObjectPortableContext.java,49,super(kernalCtx, portableEnabled ? new CacheDefaultPortableAffinityKeyMapper() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,416,if (tx.isRollbackOnly()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,714,return null;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,20,import java.io.Serializable;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,22,import java.util.UUID;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,34,import org.apache.ignite.cache.query.annotations.QuerySqlField;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,35,import org.apache.ignite.cache.query.annotations.QueryTextField;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,83,CacheConfiguration<UUID, Organization> orgCacheCfg = new CacheConfiguration<>(ORG_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,86,orgCacheCfg.setIndexedTypes(UUID.class, Organization.class);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,88,CacheConfiguration<AffinityKey<UUID>, Person> personCacheCfg = new CacheConfiguration<>(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,94,IgniteCache<UUID, Organization> orgCache = ignite.getOrCreateCache(orgCacheCfg);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,131,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,133,ScanQuery<AffinityKey<UUID>, Person> scan = new ScanQuery<>(
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,134,new IgniteBiPredicate<AffinityKey<UUID>, Person>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,149,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,156,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, sql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,160,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, sql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,168,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,178,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, joinSql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,182,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, joinSql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,190,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,193,QueryCursor<Cache.Entry<AffinityKey<UUID>, Person>> masters =
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,194,cache.query(new TextQuery<AffinityKey<UUID>, Person>(Person.class, "Master"));
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,197,QueryCursor<Cache.Entry<AffinityKey<UUID>, Person>> bachelors =
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,198,cache.query(new TextQuery<AffinityKey<UUID>, Person>(Person.class, "Bachelor"));
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,208,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,229,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,247,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,268,IgniteCache<UUID, Organization> orgCache = Ignition.ignite().cache(ORG_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,277,IgniteCache<AffinityKey<UUID>, Person> personCache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,327,private static class Person implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,330,private UUID id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,334,private UUID orgId;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,338,private String firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,342,private String lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,346,private String resume;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,350,private double salary;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,353,private transient AffinityKey<UUID> key;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,364,Person(Organization org, String firstName, String lastName, double salary, String resume) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,366,id = UUID.randomUUID();
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,368,orgId = org.id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,370,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,371,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,372,this.resume = resume;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,373,this.salary = salary;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,382,public AffinityKey<UUID> key() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,384,key = new AffinityKey<>(id, orgId);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,386,return key;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,391,return "Person [firstName=" + firstName +
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,403,private static class Organization implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,406,private UUID id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,410,private String name;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,417,Organization(String name) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,418,id = UUID.randomUUID();
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,420,this.name = name;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,425,return "Organization [id=" + id + ", name=" + name + ']';
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,18,package org.apache.ignite.examples.datagrid.store;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,20,import java.io.Serializable;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,27,public class Person implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,29,private static final long serialVersionUID = 0L;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,32,private long id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,35,private String firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,38,private String lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,43,public Person() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,50,public Person(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,51,long id,
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,52,String firstName,
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,53,String lastName
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,54,) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,55,this.id = id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,56,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,57,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,65,public long getId() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,66,return id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,74,public void setId(long id) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,75,this.id = id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,83,public String getFirstName() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,84,return firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,92,public void setFirstName(String firstName) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,93,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,101,public String getLastName() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,102,return lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,110,public void setLastName(String lastName) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,111,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,117,return true;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,120,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,122,Person that = (Person)o;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,125,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,128,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,131,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,133,return true;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,138,int res = (int)(id ^ (id >>> 32));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,140,res = 31 * res + (firstName != null ? firstName.hashCode() : 0);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,142,res = 31 * res + (lastName != null ? lastName.hashCode() : 0);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,144,return res;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,149,return "Person [id=" + id +
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,27,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,28,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,29,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,62,meta.setValueType("org.apache.ignite.examples.datagrid.store.Person");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,25,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,88,for (int i = 0; i < cnt; i++) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,96,if (ignite.affinity(cacheName).isPrimaryOrBackup(ignite.cluster().localNode(), p.getId())) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,99,dummyDB.put(p.getId(), p);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,102,clo.apply(p.getId(), p);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,29,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,32,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,110,st.setString(1, val.getFirstName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,111,st.setString(2, val.getLastName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,112,st.setLong(3, val.getId());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,121,st.setLong(1, val.getId());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,122,st.setString(2, val.getFirstName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,123,st.setString(3, val.getLastName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,169,clo.apply(person.getId(), person);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcStoreExample.java,32,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,29,import org.apache.ignite.examples.datagrid.store.Person;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,95,val.getFirstName(), val.getLastName(), val.getId());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,99,val.getId(), val.getFirstName(), val.getLastName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringPersonStore.java,123,clo.apply(person.getId(), person);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/spring/CacheSpringStoreExample.java,32,import org.apache.ignite.examples.datagrid.store.Person;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableClassDescriptor.java,156,else
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderSerializer.java,101,writer.writeInt(writer.context().typeId(val.getClass().getName()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,426,assert false : "Got entry removed exception while holding transactional lock on entry: " + e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,43,import org.apache.ignite.internal.processors.cache.transactions.IgniteTxKey;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,47,import org.apache.ignite.internal.util.GridConcurrentHashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,76,private Collection<IgniteTxKey> lockKeys = new GridConcurrentHashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,94,lockKeys.remove(entry.txKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,97,onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,184,private boolean checkLocks() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,185,boolean locked = lockKeys.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,187,if (locked) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,189,log.debug("All locks are acquired for near prepare future: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,191,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,193,log.debug("Still waiting for locks [fut=" + this + ", keys=" + lockKeys + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,196,return locked;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearOptimisticTxPrepareFuture.java,684,lockKeys.add(entry.txKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,526,assert ownsLockUnsafe(entry) : "Lock is not owned for commit in PESSIMISTIC mode [entry=" + entry +
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridCompoundFuture.java,363,return "Compound future listener: " + GridCompoundFuture.this;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,141,typeMeta = VisorCacheTypeMetadata.list(ccfg.getTypeMetadata());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,48,VisorCacheTypeFieldMetadata fieldMetadata = new VisorCacheTypeFieldMetadata();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,50,fieldMetadata.dbName = f.getDatabaseName();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,51,fieldMetadata.dbType = f.getDatabaseType();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,52,fieldMetadata.javaName = f.getJavaName();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,53,fieldMetadata.javaType = U.compact(f.getJavaType().getName());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,55,return fieldMetadata;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,83,public static Collection<VisorCacheTypeMetadata> list(Collection<CacheTypeMetadata> types) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,85,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,87,final Collection<VisorCacheTypeMetadata> cfgs = new ArrayList<>(types.size());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,90,cfgs.add(from(type));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,92,return cfgs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3741,int size = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,1487,IgniteInternalCache<K, V> forSubjectId(UUID subjId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,551,int sum = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,301,txEntry.cached(entry);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,90,static final char[] LOWER_CASE_CHARS;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,93,static final char MAX_LOWER_CASE_CHAR = 0x7e;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,98,static {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,99,LOWER_CASE_CHARS = new char[MAX_LOWER_CASE_CHAR + 1];
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,102,LOWER_CASE_CHARS[c] = Character.toLowerCase(c);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,331,idMapper = new IdMapperWrapper(idMapper);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,513,BASIC_CLS_ID_MAPPER,
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,613,String shortTypeName = typeName(typeName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,615,Integer id = predefinedTypeNames.get(shortTypeName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,643,return idMapper;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,646,return DFLT_ID_MAPPER;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,648,return BASIC_CLS_ID_MAPPER;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,658,return idMapper != null ? idMapper : DFLT_ID_MAPPER;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,703,DFLT_ID_MAPPER,
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,750,int id = idMapper.typeId(clsName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,762,String typeName = typeName(clsName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,920,private static int lowerCaseHashCode(String str) {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,921,int len = str.length();
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,923,int h = 0;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,925,for (int i = 0; i < len; i++) {
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,926,int c = str.charAt(i);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,928,c = c <= MAX_LOWER_CASE_CHAR ? LOWER_CASE_CHARS[c] : Character.toLowerCase(c);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,930,h = 31 * h + c;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,933,return h;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,946,this.mapper = mapper;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,951,int id = 0;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,954,id = mapper.typeId(clsName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,956,return id != 0 ? id : lowerCaseHashCode(typeName(clsName));
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,961,int id = 0;
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,964,id = mapper.fieldId(typeId, fieldName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,966,return id != 0 ? id : lowerCaseHashCode(fieldName);
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,973,return clsName.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/portable/PortableContext.java,978,return lowerCaseHashCode(fieldName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,819,injectResources(keyValFilter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,821,final GridDhtCacheAdapter dht = cctx.isLocal() ? null : (cctx.isNear() ? cctx.near().dht() : cctx.dht());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,823,final GridCacheAdapter cache = dht != null ? dht : cctx.cache();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,825,final ExpiryPolicy plc = cctx.expiry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,827,final AffinityTopologyVersion topVer = cctx.affinity().affinityTopologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,829,final boolean backups = qry.includeBackups() || cctx.isReplicated();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,831,final GridCloseableIteratorAdapter<IgniteBiTuple<K, V>> heapIt =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,832,new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,833,private IgniteBiTuple<K, V> next;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,835,private IgniteCacheExpiryPolicy expiryPlc = cctx.cache().expiryPolicy(plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,837,private Iterator<K> iter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,839,private GridDhtLocalPartition locPart;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,842,Integer part = qry.partition();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,845,iter = backups ? prj.keySetx().iterator() : prj.primaryKeySet().iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,847,iter = F.emptyIterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,848,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,849,locPart = dht.topology().localPartition(part, topVer, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,852,if (locPart == null || locPart.state() != OWNING || !locPart.reserve() ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,854,throw new GridDhtUnreservedPartitionException(part,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,855,cctx.affinity().affinityTopologyVersion(), "Partition can not be reserved");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,857,iter = new Iterator<K>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,858,private Iterator<KeyCacheObject> iter0 = locPart.keySet().iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,861,return iter0.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,865,KeyCacheObject key = iter0.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,867,return key.value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,871,iter0.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,876,advance();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,880,return next != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,885,throw new NoSuchElementException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,887,IgniteBiTuple<K, V> next0 = next;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,889,advance();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,891,return next0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,894,private void advance() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,895,IgniteBiTuple<K, V> next0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,897,while (iter.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,898,next0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,900,K key = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,902,V val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,904,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,905,GridCacheEntryEx entry = cache.peekEx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,907,CacheObject cacheVal =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,908,entry != null ? entry.peek(true, false, false, topVer, expiryPlc) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,912,catch (GridCacheEntryRemovedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,913,val = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,915,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,917,log.debug("Failed to peek value: " + e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,919,val = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,922,if (dht != null && expiryPlc != null && expiryPlc.readyToFlush(100)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,923,dht.sendTtlUpdateRequest(expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,925,expiryPlc = cctx.cache().expiryPolicy(plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,928,if (val != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,929,next0 = F.t(key, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,932,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,933,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,934,next0 = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,938,next = next0 != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,939,new IgniteBiTuple<>(next0.getKey(), next0.getValue()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,940,null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,947,sendTtlUpdate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,950,locPart.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,953,private void sendTtlUpdate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,954,if (dht != null && expiryPlc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,955,dht.sendTtlUpdateRequest(expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,957,expiryPlc = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,961,private boolean checkPredicate(Map.Entry<K, V> e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,962,if (keyValFilter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,963,Map.Entry<K, V> e0 = (Map.Entry<K, V>)cctx.unwrapPortableIfNeeded(e, qry.keepPortable());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,965,return keyValFilter.apply(e0.getKey(), e0.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,968,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,972,final GridIterator<IgniteBiTuple<K, V>> it;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,974,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,975,List<GridIterator<IgniteBiTuple<K, V>>> iters = new ArrayList<>(3);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,977,iters.add(heapIt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,980,iters.add(offheapIterator(qry, backups));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,983,iters.add(swapIterator(qry, backups));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,985,it = new CompoundIterator<>(iters);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,987,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,988,it = heapIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,990,return new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,992,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,996,return it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1000,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1004,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1005,heapIt.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1007,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1009,((PlatformCacheEntryFilter)keyValFilter).onClose();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,568,return F.transform(cfg.getUserAttributes().entrySet(), new C1<Map.Entry<String, ?>, String>() {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,586,return F.isEmpty(beans) ? Collections.<String>emptyList() : F.transform(beans, F.<LifecycleBean>string());
modules/core/src/main/java/org/apache/ignite/mxbean/IgniteMXBean.java,20,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/mxbean/IgniteMXBean.java,87,public Collection<String> getUserAttributesFormatted();
modules/core/src/main/java/org/apache/ignite/mxbean/IgniteMXBean.java,152,public Collection<String> getLifecycleBeansFormatted();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheStoreBalancingWrapper.java,42,public static final int DFLT_LOAD_ALL_THRESHOLD = 5;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/store/GridCacheStoreManagerAdapter.java,115,singleThreadGate = store == null ? null : new CacheStoreBalancingWrapper<>(store);
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,76,IgniteConfiguration c = loadConfiguration(args.configuration());
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,83,boolean cl = args.isClientOnly() && !args.isNearCache() && !clientMode ?
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,84,false : args.isClientOnly();
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,144,ignite = Ignition.start(c);
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,152,private static IgniteConfiguration loadConfiguration(String springCfgPath) throws Exception {
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,194,return cfgMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,601,public boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,602,return exchWorker.topologyChanged();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,655,Collection<ClusterNode> rmts = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1278,boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1279,return !futQ.isEmpty() || busy;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,394,rebalanceMode = cc.getRebalanceMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,48,import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionSupplyMessage;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,272,processFailedMessage(nodeId, cacheMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,368,private void processFailedMessage(UUID nodeId, GridCacheMessage msg) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,462,GridDhtPartitionSupplyMessage req = (GridDhtPartitionSupplyMessage)msg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,464,U.error(log, "Supply message cannot be unmarshalled.", req.classError());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,574,private void processMessage(UUID nodeId, GridCacheMessage msg,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,575,IgniteBiInClosure<UUID, GridCacheMessage> c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,456,obsolete = markObsolete0(obsoleteVer, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1306,if (obsoleteVer == null || !(marked = markObsolete0(obsoleteVer, true))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2423,if (!(marked = markObsolete0(ver, true))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2481,obsolete = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2514,obsolete = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2542,marked = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2560,protected final boolean markObsolete0(GridCacheVersion ver, boolean clear) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2575,obsoleteVersionExtras(obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2899,rmv = markObsolete0(cctx.versions().next(this.ver), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3691,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3739,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3815,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3874,rmv = markObsolete0(cctx.versions().next(this.ver), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3987,protected void obsoleteVersionExtras(@Nullable GridCacheVersion obsoleteVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3988,extras = (extras != null) ? extras.obsoleteVersion(obsoleteVer) : obsoleteVer != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3989,new GridCacheObsoleteEntryExtras(obsoleteVer) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,29,import java.util.concurrent.ConcurrentLinkedQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1258,cacheCtx.preloader().addAssignments(e.getValue(), forcePreload);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,94,public void addAssignments(GridDhtPreloaderAssignments assignments, boolean forcePreload);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,33,import java.util.NavigableMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,35,import java.util.TreeMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,101,import org.apache.ignite.internal.util.future.GridCompoundFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,166,private final NavigableMap<Integer, IgniteInternalFuture<?>> preloadFuts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,169,private int maxRebalanceOrder;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,209,preloadFuts = new TreeMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,392,if (cc.getRebalanceMode() != CacheRebalanceMode.NONE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,393,assertParameter(cc.getRebalanceThreadPoolSize() > 0, "rebalanceThreadPoolSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,614,maxRebalanceOrder = validatePreloadOrder(ctx.config().getCacheConfiguration());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,844,for (Map.Entry<String, GridCacheAdapter<?, ?>> e : caches.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,845,GridCacheAdapter cache = e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,847,if (maxRebalanceOrder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,848,CacheConfiguration cfg = cache.configuration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,850,int order = cfg.getRebalanceOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,852,if (order > 0 && order != maxRebalanceOrder && cfg.getCacheMode() != LOCAL) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,853,GridCompoundFuture fut = (GridCompoundFuture)preloadFuts.get(order);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,855,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,856,fut = new GridCompoundFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,858,preloadFuts.put(order, fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,861,fut.add(cache.preloader().syncFuture());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,867,((GridCompoundFuture<Object, Object>)fut).markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2741,Map.Entry<Integer, IgniteInternalFuture<?>> entry = preloadFuts.lowerEntry(order);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2743,return entry == null ? null : entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,542,public boolean clearInternal(GridCacheVersion ver, boolean swap) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,551,if (!markObsolete0(ver, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,33,import org.apache.ignite.internal.util.future.GridFinishedFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,41,import org.apache.ignite.internal.util.typedef.internal.GPC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,49,import javax.cache.CacheException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,50,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,51,import java.util.HashMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,52,import java.util.Iterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,53,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,54,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,55,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,56,import java.util.concurrent.CopyOnWriteArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,57,import java.util.concurrent.atomic.AtomicReference;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,58,import java.util.concurrent.atomic.AtomicStampedReference;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,59,import java.util.concurrent.locks.ReentrantLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,288,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,413,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,481,IgniteInternalFuture<Boolean> tryEvictAsync(boolean updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,500,return new GridFinishedFuture<>(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,503,return cctx.closures().callLocalSafe(new GPC<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,505,return tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,526,boolean tryEvict(boolean updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,528,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,547,((GridDhtPreloader)cctx.preloader()).onPartitionEvicted(this, updateSeq);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,551,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,554,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,594,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,641,if (cached.clearInternal(clearVer, swap)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,73,assert updateSeq > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,330,return S.toString(GridDhtPartitionDemandMessage.class, this, "partCnt", parts.size(), "super",
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,331,super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,18,package org.apache.ignite.internal.processors.cache.distributed.dht.preloader;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,20,import java.util.ArrayList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,21,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,22,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,23,import java.util.HashSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,24,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,25,import java.util.List;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,26,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,27,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,28,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,29,import java.util.concurrent.BlockingQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,30,import java.util.concurrent.BrokenBarrierException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,31,import java.util.concurrent.CyclicBarrier;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,32,import java.util.concurrent.LinkedBlockingDeque;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,33,import java.util.concurrent.atomic.AtomicLong;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,34,import java.util.concurrent.atomic.AtomicReference;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,35,import java.util.concurrent.locks.ReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,36,import java.util.concurrent.locks.ReentrantReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,37,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,38,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,39,import org.apache.ignite.cache.CacheRebalanceMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,40,import org.apache.ignite.cluster.ClusterNode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,41,import org.apache.ignite.events.DiscoveryEvent;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,42,import org.apache.ignite.internal.IgniteInternalFuture;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,43,import org.apache.ignite.internal.IgniteInterruptedCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,44,import org.apache.ignite.internal.cluster.ClusterTopologyCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,45,import org.apache.ignite.internal.processors.affinity.AffinityTopologyVersion;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,46,import org.apache.ignite.internal.processors.cache.CacheEntryInfoCollection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,47,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,48,import org.apache.ignite.internal.processors.cache.GridCacheEntryEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,49,import org.apache.ignite.internal.processors.cache.GridCacheEntryInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,50,import org.apache.ignite.internal.processors.cache.GridCacheEntryRemovedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,51,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtInvalidPartitionException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,52,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtLocalPartition;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,53,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtPartitionTopology;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,54,import org.apache.ignite.internal.processors.timeout.GridTimeoutObject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,55,import org.apache.ignite.internal.processors.timeout.GridTimeoutObjectAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,56,import org.apache.ignite.internal.util.GridLeanSet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,57,import org.apache.ignite.internal.util.future.GridFutureAdapter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,58,import org.apache.ignite.internal.util.tostring.GridToStringInclude;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,59,import org.apache.ignite.internal.util.typedef.CI1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,60,import org.apache.ignite.internal.util.typedef.CI2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,61,import org.apache.ignite.internal.util.typedef.F;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,62,import org.apache.ignite.internal.util.typedef.internal.CU;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,63,import org.apache.ignite.internal.util.typedef.internal.LT;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,64,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,65,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,66,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,67,import org.apache.ignite.lang.IgnitePredicate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,68,import org.apache.ignite.lang.IgniteUuid;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,69,import org.apache.ignite.thread.IgniteThread;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,70,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,72,import static java.util.concurrent.TimeUnit.MILLISECONDS;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,73,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_OBJECT_LOADED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,74,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_PART_DATA_LOST;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,75,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_PART_LOADED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,76,import static org.apache.ignite.events.EventType.EVT_CACHE_REBALANCE_STOPPED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,77,import static org.apache.ignite.internal.GridTopic.TOPIC_CACHE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,78,import static org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtPartitionState.MOVING;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,79,import static org.apache.ignite.internal.processors.dr.GridDrType.DR_NONE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,80,import static org.apache.ignite.internal.processors.dr.GridDrType.DR_PRELOAD;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,87,public class GridDhtPartitionDemandPool {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,89,private final SupplyMessage DUMMY_TOP = new SupplyMessage();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,92,private final GridCacheContext<?, ?> cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,95,private final IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,98,private final ReadWriteLock busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,102,private final Collection<DemandWorker> dmdWorkers;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,105,private IgnitePredicate<GridCacheEntryInfo> preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,109,private SyncFuture syncFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,112,private final AtomicLong timeout;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,115,private CyclicBarrier barrier;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,118,private final ReadWriteLock demandLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,121,private int poolSize;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,124,private AtomicReference<GridTimeoutObject> lastTimeoutObj = new AtomicReference<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,127,private volatile GridDhtPartitionsExchangeFuture lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,133,public GridDhtPartitionDemandPool(GridCacheContext<?, ?> cctx, ReadWriteLock busyLock) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,134,assert cctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,135,assert busyLock != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,137,this.cctx = cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,138,this.busyLock = busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,140,log = cctx.logger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,142,boolean enabled = cctx.rebalanceEnabled() && !cctx.kernalContext().clientNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,144,poolSize = enabled ? cctx.config().getRebalanceThreadPoolSize() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,146,if (enabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,147,barrier = new CyclicBarrier(poolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,149,dmdWorkers = new ArrayList<>(poolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,152,dmdWorkers.add(new DemandWorker(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,154,syncFut = new SyncFuture(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,156,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,157,dmdWorkers = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,159,syncFut = new SyncFuture(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,162,syncFut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,165,timeout = new AtomicLong(cctx.config().getRebalanceTimeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,171,void start() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,172,if (poolSize > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,174,new IgniteThread(cctx.gridName(), "preloader-demand-worker", w).start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,181,void stop() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,182,U.cancel(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,185,log.debug("Before joining on demand workers: " + dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,187,U.join(dmdWorkers, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,190,log.debug("After joining on demand workers: " + dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,192,lastExchangeFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,194,lastTimeoutObj.set(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,200,IgniteInternalFuture<?> syncFuture() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,201,return syncFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,209,void preloadPredicate(IgnitePredicate<GridCacheEntryInfo> preloadPred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,210,this.preloadPred = preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,216,int poolSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,217,return poolSize;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,223,void onExchangeFutureAdded() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,224,synchronized (dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,226,w.addMessage(DUMMY_TOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,233,void forcePreload() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,234,GridTimeoutObject obj = lastTimeoutObj.getAndSet(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,237,cctx.time().removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,239,final GridDhtPartitionsExchangeFuture exchFut = lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,241,if (exchFut != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,243,log.debug("Forcing rebalance event for future: " + exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,245,exchFut.listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,247,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,252,log.debug("Ignoring force rebalance request (no topology event happened yet).");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,258,private boolean enterBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,260,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,263,log.debug("Failed to enter to busy state (demander is stopping): " + cctx.nodeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,265,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,271,private void leaveBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,272,busyLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,279,private void preloadEvent(int type, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,280,preloadEvent(-1, type, discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,288,private void preloadEvent(int part, int type, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,289,assert discoEvt != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,291,cctx.events().addPreloadEvent(part, type, discoEvt.eventNode(), discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,298,private boolean dummyTopology(SupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,299,return msg == DUMMY_TOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,310,assert w != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,319,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,321,return deque.poll(time, MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,329,private Collection<ClusterNode> pickedOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,330,Collection<ClusterNode> affNodes = cctx.affinity().nodes(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,332,int affCnt = affNodes.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,334,Collection<ClusterNode> rmts = remoteOwners(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,336,int rmtCnt = rmts.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,339,return rmts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,341,List<ClusterNode> sorted = new ArrayList<>(rmts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,344,Collections.sort(sorted, CU.nodeComparator(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,347,return sorted.subList(0, affCnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,355,private Collection<ClusterNode> remoteOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,356,return F.view(cctx.dht().topology().owners(p, topVer), F.remoteNodes(cctx.nodeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,363,void addAssignments(final GridDhtPreloaderAssignments assigns, boolean force) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,365,log.debug("Adding partition assignments: " + assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,367,long delay = cctx.config().getRebalanceDelay();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,369,if (delay == 0 || force) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,370,assert assigns != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,372,synchronized (dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,373,for (DemandWorker w : dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,374,w.addAssignments(assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,376,w.addMessage(DUMMY_TOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,380,else if (delay > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,381,assert !force;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,383,GridTimeoutObject obj = lastTimeoutObj.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,386,cctx.time().removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,388,final GridDhtPartitionsExchangeFuture exchFut = lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,390,assert exchFut != null : "Delaying rebalance process without topology event.";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,392,obj = new GridTimeoutObjectAdapter(delay) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,394,exchFut.listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,396,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,402,lastTimeoutObj.set(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,404,cctx.time().addTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,411,void unwindUndeploys() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,412,demandLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,414,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,415,cctx.deploy().unwind(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,417,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,418,demandLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,424,return S.toString(GridDhtPartitionDemandPool.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,430,private class DemandWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,432,private int id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,435,private final LinkedBlockingDeque<GridDhtPreloaderAssignments> assignQ = new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,438,private final LinkedBlockingDeque<SupplyMessage> msgQ =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,439,new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,442,private long cntr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,445,private IgniteLogger log = GridDhtPartitionDemandPool.this.log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,450,private DemandWorker(int id) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,451,super(cctx.gridName(), "preloader-demand-worker", GridDhtPartitionDemandPool.this.log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,453,assert id >= 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,455,this.id = id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,461,void addAssignments(GridDhtPreloaderAssignments assigns) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,462,assert assigns != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,464,assignQ.offer(assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,467,log.debug("Added assignments to worker: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,473,private boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,474,return !assignQ.isEmpty() || cctx.shared().exchange().topologyChanged();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,480,private void addMessage(SupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,482,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,484,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,485,assert dummyTopology(msg) || msg.supply().workerId() == id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,487,msgQ.offer(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,489,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,490,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,497,private void growTimeout(long timeout) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,498,long newTimeout = (long)(timeout * 1.5D);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,502,newTimeout = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,506,U.warn(log, "Increased rebalancing message timeout from " + timeout + "ms to " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,507,newTimeout + "ms.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,518,private boolean preloadEntry(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,519,ClusterNode pick,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,520,int p,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,521,GridCacheEntryInfo entry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,522,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,523,) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,524,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,525,GridCacheEntryEx cached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,527,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,528,cached = cctx.dht().entryEx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,531,log.debug("Rebalancing key [key=" + entry.key() + ", part=" + p + ", node=" + pick.id() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,533,if (cctx.dht().isIgfsDataCache() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,534,cctx.dht().igfsDataSpaceUsed() > cctx.dht().igfsDataSpaceMax()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,535,LT.error(log, null, "Failed to rebalance IGFS data cache (IGFS space size exceeded maximum " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,539,cached.context().cache().removeIfObsolete(cached.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,541,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,544,if (preloadPred == null || preloadPred.apply(entry)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,545,if (cached.initialValue(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,546,entry.value(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,547,entry.version(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,548,entry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,549,entry.expireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,550,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,551,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,552,cctx.isDrEnabled() ? DR_PRELOAD : DR_NONE
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,553,)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,554,cctx.evicts().touch(cached, topVer); // Start tracking.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,557,cctx.events().addEvent(cached.partition(), cached.key(), cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,558,(IgniteUuid)null, null, EVT_CACHE_REBALANCE_OBJECT_LOADED, entry.value(), true, null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,559,false, null, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,562,log.debug("Rebalancing entry is already in cache (will ignore) [key=" + cached.key() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,566,log.debug("Rebalance predicate evaluated to false for entry (will ignore): " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,568,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,570,log.debug("Entry has been concurrently removed while rebalancing (will ignore) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,571,cached.key() + ", part=" + p + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,573,catch (GridDhtInvalidPartitionException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,575,log.debug("Partition became invalid during rebalancing (will ignore): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,577,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,580,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,581,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,583,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,584,throw new IgniteCheckedException("Failed to cache rebalanced entry (will stop rebalancing) [local=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,585,cctx.nodeId() + ", node=" + pick.id() + ", key=" + entry.key() + ", part=" + p + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,588,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,595,public Object topic(long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,596,return TOPIC_CACHE.topic(cctx.namexx(), cctx.nodeId(), id, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,609,private Set<Integer> demandFromNode(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,610,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,611,final AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,612,GridDhtPartitionDemandMessage d,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,613,GridDhtPartitionsExchangeFuture exchFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,614,) throws InterruptedException, IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,615,GridDhtPartitionTopology top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,617,cntr++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,619,d.topic(topic(cntr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,620,d.workerId(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,622,Set<Integer> missed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,625,Collection<Integer> remaining = d.partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,628,drainQueue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,631,return missed;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,633,cctx.io().addOrderedHandler(d.topic(), new CI2<UUID, GridDhtPartitionSupplyMessage>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,635,addMessage(new SupplyMessage(nodeId, msg));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,639,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,640,boolean retry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,644,do {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,645,retry = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,648,d = new GridDhtPartitionDemandMessage(d, remaining);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,650,long timeout = GridDhtPartitionDemandPool.this.timeout.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,652,d.timeout(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,655,log.debug("Sending demand message [node=" + node.id() + ", demand=" + d + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,658,cctx.io().send(node, d, cctx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,662,while (!isCancelled() && !topologyChanged()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,663,SupplyMessage s = poll(msgQ, timeout, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,666,if (s == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,667,if (msgQ.isEmpty()) { // Safety check.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,668,U.warn(log, "Timed out waiting for partitions to load, will retry in " + timeout +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,672,growTimeout(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,675,cctx.io().removeOrderedHandler(d.topic());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,678,d = new GridDhtPartitionDemandMessage(d, remaining);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,681,d.topic(topic(++cntr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,684,cctx.io().addOrderedHandler(d.topic(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,685,new CI2<UUID, GridDhtPartitionSupplyMessage>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,687,GridDhtPartitionSupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,688,addMessage(new SupplyMessage(nodeId, msg));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,693,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,695,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,697,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,698,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,702,if (dummyTopology(s)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,704,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,705,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,706,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,710,if (!s.senderId().equals(node.id())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,711,U.warn(log, "Received supply message from unexpected node [expectedId=" + node.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,714,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,718,log.debug("Received supply message: " + s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,720,GridDhtPartitionSupplyMessage supply = s.supply();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,723,if (supply.classError() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,725,log.debug("Class got undeployed during preloading: " + supply.classError());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,727,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,730,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,734,for (Map.Entry<Integer, CacheEntryInfoCollection> e : supply.infos().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,735,int p = e.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,737,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,738,GridDhtLocalPartition part = top.localPartition(p, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,740,assert part != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,742,if (part.state() == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,743,boolean reserved = part.reserve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,745,assert reserved : "Failed to reserve partition [gridName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,746,cctx.gridName() + ", cacheName=" + cctx.namex() + ", part=" + part + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,748,part.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,750,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,751,Collection<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,754,for (GridCacheEntryInfo entry : e.getValue().infos()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,755,if (!invalidParts.contains(p)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,756,if (!part.preloadingPermitted(entry.key(), entry.version())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,758,log.debug("Preloading is not permitted for entry due to " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,762,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,765,if (!preloadEntry(node, p, entry, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,766,invalidParts.add(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,769,log.debug("Got entries for invalid partition during " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,775,boolean last = supply.last().contains(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,779,if (last) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,780,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,782,top.own(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,785,log.debug("Finished rebalancing partition: " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,788,preloadEvent(p, EVT_CACHE_REBALANCE_PART_LOADED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,789,exchFut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,792,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,793,part.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,794,part.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,797,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,798,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,801,log.debug("Skipping rebalancing partition (state is not MOVING): " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,804,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,805,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,808,log.debug("Skipping rebalancing partition (it does not belong on current node): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,812,remaining.removeAll(s.supply().missed());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,817,missed.add(miss);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,820,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,822,if (s.supply().ack()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,823,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,825,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,829,while (retry && !isCancelled() && !topologyChanged());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,831,return missed;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,833,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,834,cctx.io().removeOrderedHandler(d.topic());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,841,private void drainQueue() throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,842,while (!msgQ.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,843,SupplyMessage msg = msgQ.take();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,846,log.debug("Drained supply message: " + msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,852,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,853,int rebalanceOrder = cctx.config().getRebalanceOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,855,if (!CU.isMarshallerCache(cctx.name())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,857,log.debug("Waiting for marshaller cache preload [cacheName=" + cctx.name() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,859,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,860,cctx.kernalContext().cache().marshallerCache().preloader().syncFuture().get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,862,catch (IgniteInterruptedCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,864,log.debug("Failed to wait for marshaller cache preload future (grid is stopping): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,867,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,869,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,870,throw new Error("Ordered preload future should never fail: " + e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,874,if (rebalanceOrder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,875,IgniteInternalFuture<?> fut = cctx.kernalContext().cache().orderedPreloadFuture(rebalanceOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,877,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,878,if (fut != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,880,log.debug("Waiting for dependant caches rebalance [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,883,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,886,catch (IgniteInterruptedCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,888,log.debug("Failed to wait for ordered rebalance future (grid is stopping): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,891,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,893,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,894,throw new Error("Ordered rebalance future should never fail: " + e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,898,GridDhtPartitionsExchangeFuture exchFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,900,boolean stopEvtFired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,902,while (!isCancelled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,903,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,904,barrier.await();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,906,if (id == 0 && exchFut != null && !exchFut.dummy() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,907,cctx.events().isRecordable(EVT_CACHE_REBALANCE_STOPPED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,909,if (!cctx.isReplicated() || !stopEvtFired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,910,preloadEvent(EVT_CACHE_REBALANCE_STOPPED, exchFut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,912,stopEvtFired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,916,catch (BrokenBarrierException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,917,throw new InterruptedException("Demand worker stopped.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,921,GridDhtPreloaderAssignments assigns = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,924,assigns = poll(assignQ, cctx.gridConfig().getNetworkTimeout(), this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,926,demandLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,928,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,929,exchFut = assigns.exchangeFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,933,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,935,boolean resync = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,939,while (!isCancelled() && !topologyChanged() && !resync) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,940,Collection<Integer> missed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,944,for (ClusterNode node : assigns.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,946,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,948,GridDhtPartitionDemandMessage d = assigns.remove(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,953,continue; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,955,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,956,Set<Integer> set = demandFromNode(node, assigns.topologyVersion(), d, exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,958,if (!set.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,960,log.debug("Missed partitions from node [nodeId=" + node.id() + ", missed=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,961,set + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,963,missed.addAll(set);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,966,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,967,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,969,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,971,log.debug("Node left during rebalancing (will retry) [node=" + node.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,974,resync = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,976,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,978,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,979,U.error(log, "Failed to receive partitions from node (rebalancing will not " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,985,if (!missed.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,987,log.debug("Reassigning partitions that were missed: " + missed);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,989,assert exchFut.exchangeId() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,991,cctx.shared().exchange().forceDummyExchange(true, exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,993,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,994,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,997,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,998,demandLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1000,syncFut.onWorkerDone(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1003,cctx.shared().exchange().scheduleResendPartitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1006,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1008,syncFut.onWorkerDone(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1014,return S.toString(DemandWorker.class, this, "assignQ", assignQ, "msgQ", msgQ, "super", super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1023,void updateLastExchangeFuture(GridDhtPartitionsExchangeFuture lastFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1024,lastExchangeFut = lastFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1031,GridDhtPreloaderAssignments assign(GridDhtPartitionsExchangeFuture exchFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1033,GridDhtPartitionTopology top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1036,return new GridDhtPreloaderAssignments(exchFut, top.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1038,int partCnt = cctx.affinity().partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1040,assert exchFut.forcePreload() || exchFut.dummyReassign() ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1041,exchFut.exchangeId().topologyVersion().equals(top.topologyVersion()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1045,GridDhtPreloaderAssignments assigns = new GridDhtPreloaderAssignments(exchFut, top.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1047,AffinityTopologyVersion topVer = assigns.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1049,for (int p = 0; p < partCnt; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1050,if (cctx.shared().exchange().hasPendingExchange()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1052,log.debug("Skipping assignments creation, exchange worker has pending assignments: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1053,exchFut.exchangeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1055,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1059,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1060,GridDhtLocalPartition part = top.localPartition(p, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1062,assert part != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1063,assert part.id() == p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1065,if (part.state() != MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1067,log.debug("Skipping partition assignment (state is not MOVING): " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1069,continue; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1072,Collection<ClusterNode> picked = pickedOwners(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1074,if (picked.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1075,top.own(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1077,if (cctx.events().isRecordable(EVT_CACHE_REBALANCE_PART_DATA_LOST)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1078,DiscoveryEvent discoEvt = exchFut.discoveryEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1080,cctx.events().addPreloadEvent(p,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1081,EVT_CACHE_REBALANCE_PART_DATA_LOST, discoEvt.eventNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1082,discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1086,log.debug("Owning partition as there are no other owners: " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1088,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1089,ClusterNode n = F.first(picked);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1091,GridDhtPartitionDemandMessage msg = assigns.get(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1093,if (msg == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1094,assigns.put(n, msg = new GridDhtPartitionDemandMessage(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1095,top.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1096,exchFut.exchangeId().topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1097,cctx.cacheId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1100,msg.addPartition(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1105,return assigns;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1111,private class SyncFuture extends GridFutureAdapter<Object> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1113,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1116,private Collection<DemandWorker> remaining;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1121,private SyncFuture(Collection<DemandWorker> workers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1122,assert workers.size() == poolSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1124,remaining = Collections.synchronizedList(new LinkedList<>(workers));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1130,void onWorkerDone(DemandWorker w) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1132,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1136,log.debug("Completed full partition iteration for worker [worker=" + w + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1138,if (remaining.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1140,log.debug("Completed sync future.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1142,onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1150,private static class SupplyMessage {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1152,private UUID sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1155,private GridDhtPartitionSupplyMessage supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1160,private SupplyMessage() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1168,SupplyMessage(UUID sndId, GridDhtPartitionSupplyMessage supply) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1169,this.sndId = sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1170,this.supply = supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1176,UUID senderId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1177,return sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1183,GridDhtPartitionSupplyMessage supply() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1184,return supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1189,return S.toString(SupplyMessage.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,18,package org.apache.ignite.internal.processors.cache.distributed.dht.preloader;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,21,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,22,import java.util.LinkedList;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,23,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,24,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,25,import java.util.concurrent.BlockingQueue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,26,import java.util.concurrent.LinkedBlockingDeque;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,27,import java.util.concurrent.locks.ReadWriteLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,28,import org.apache.ignite.IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,29,import org.apache.ignite.IgniteLogger;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,30,import org.apache.ignite.cluster.ClusterNode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,31,import org.apache.ignite.internal.IgniteInterruptedCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,32,import org.apache.ignite.internal.cluster.ClusterTopologyCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,33,import org.apache.ignite.internal.managers.deployment.GridDeploymentInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,34,import org.apache.ignite.internal.processors.cache.GridCacheContext;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,35,import org.apache.ignite.internal.processors.cache.GridCacheEntryEx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,36,import org.apache.ignite.internal.processors.cache.GridCacheEntryInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,37,import org.apache.ignite.internal.processors.cache.GridCacheEntryInfoCollectSwapListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,38,import org.apache.ignite.internal.processors.cache.GridCacheSwapEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,39,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtLocalPartition;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,40,import org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtPartitionTopology;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,41,import org.apache.ignite.internal.util.lang.GridCloseableIterator;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,42,import org.apache.ignite.internal.util.typedef.CI2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,43,import org.apache.ignite.internal.util.typedef.internal.U;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,44,import org.apache.ignite.internal.util.worker.GridWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,45,import org.apache.ignite.lang.IgniteBiTuple;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,46,import org.apache.ignite.lang.IgnitePredicate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,47,import org.apache.ignite.thread.IgniteThread;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,48,import org.jetbrains.annotations.Nullable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,50,import static java.util.concurrent.TimeUnit.MILLISECONDS;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,51,import static org.apache.ignite.internal.processors.cache.distributed.dht.GridDhtPartitionState.OWNING;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,56,class GridDhtPartitionSupplyPool {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,58,private final GridCacheContext<?, ?> cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,61,private final IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,64,private final ReadWriteLock busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,67,private GridDhtPartitionTopology top;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,70,private final Collection<SupplyWorker> workers = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,73,private final BlockingQueue<DemandMessage> queue = new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,76,private final boolean depEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,79,private IgnitePredicate<GridCacheEntryInfo> preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,85,GridDhtPartitionSupplyPool(GridCacheContext<?, ?> cctx, ReadWriteLock busyLock) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,86,assert cctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,87,assert busyLock != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,89,this.cctx = cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,90,this.busyLock = busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,92,log = cctx.logger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,94,top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,96,if (!cctx.kernalContext().clientNode()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,97,int poolSize = cctx.rebalanceEnabled() ? cctx.config().getRebalanceThreadPoolSize() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,100,workers.add(new SupplyWorker());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,102,cctx.io().addHandler(cctx.cacheId(), GridDhtPartitionDemandMessage.class, new CI2<UUID, GridDhtPartitionDemandMessage>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,104,processDemandMessage(id, m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,109,depEnabled = cctx.gridDeploy().enabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,115,void start() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,117,new IgniteThread(cctx.gridName(), "preloader-supply-worker", w).start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,123,void stop() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,124,U.cancel(workers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,125,U.join(workers, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,127,top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,135,void preloadPredicate(IgnitePredicate<GridCacheEntryInfo> preloadPred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,136,this.preloadPred = preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,142,int poolSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,143,return cctx.config().getRebalanceThreadPoolSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,149,private boolean enterBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,151,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,154,log.debug("Failed to enter to busy state (supplier is stopping): " + cctx.nodeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,156,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,163,private void processDemandMessage(UUID nodeId, GridDhtPartitionDemandMessage d) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,165,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,167,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,168,if (cctx.rebalanceEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,170,log.debug("Received partition demand [node=" + nodeId + ", demand=" + d + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,172,queue.offer(new DemandMessage(nodeId, d));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,174,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,175,U.warn(log, "Received partition demand message when rebalancing is disabled (will ignore): " + d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,177,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,178,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,185,private void leaveBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,186,busyLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,196,assert w != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,205,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,207,return deque.poll(2000, MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,213,private class SupplyWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,215,private IgniteLogger log = GridDhtPartitionSupplyPool.this.log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,220,private SupplyWorker() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,221,super(cctx.gridName(), "preloader-supply-worker", GridDhtPartitionSupplyPool.this.log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,226,while (!isCancelled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,227,DemandMessage msg = poll(queue, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,230,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,232,ClusterNode node = cctx.discovery().node(msg.senderId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,234,if (node == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,236,log.debug("Received message from non-existing node (will ignore): " + msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,238,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,241,processMessage(msg, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,249,private void processMessage(DemandMessage msg, ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,250,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,251,assert node != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,253,GridDhtPartitionDemandMessage d = msg.message();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,255,GridDhtPartitionSupplyMessage s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,258,long preloadThrottle = cctx.config().getRebalanceThrottle();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,260,boolean ack = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,262,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,263,for (int part : d.partitions()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,264,GridDhtLocalPartition loc = top.localPartition(part, d.topologyVersion(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,266,if (loc == null || loc.state() != OWNING || !loc.reserve()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,269,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,272,log.debug("Requested partition is not owned by local node [part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,275,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,278,GridCacheEntryInfoCollectSwapListener swapLsnr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,280,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,281,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,282,swapLsnr = new GridCacheEntryInfoCollectSwapListener(log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,284,cctx.swap().addOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,285,cctx.swap().addSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,288,boolean partMissing = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,290,for (GridCacheEntryEx e : loc.entries()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,291,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,293,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,296,log.debug("Demanding node does not need requested partition [part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,299,partMissing = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,301,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,304,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,305,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,308,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,312,U.sleep(preloadThrottle);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,314,s = new GridDhtPartitionSupplyMessage(d.workerId(), d.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,318,GridCacheEntryInfo info = e.info();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,320,if (info != null && !info.isNew()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,322,s.addEntry(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,324,log.debug("Rebalance predicate evaluated to false (will not sender cache entry): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,325,info);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,330,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,332,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,333,GridCloseableIterator<Map.Entry<byte[], GridCacheSwapEntry>> iter =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,334,cctx.swap().iterator(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,337,if (iter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,338,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,339,boolean prepared = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,341,for (Map.Entry<byte[], GridCacheSwapEntry> e : iter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,342,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,345,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,348,log.debug("Demanding node does not need requested partition " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,351,partMissing = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,353,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,356,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,357,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,360,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,364,U.sleep(preloadThrottle);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,366,s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,370,GridCacheSwapEntry swapEntry = e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,372,GridCacheEntryInfo info = new GridCacheEntryInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,374,info.keyBytes(e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,375,info.ttl(swapEntry.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,376,info.expireTime(swapEntry.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,377,info.version(swapEntry.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,378,info.value(swapEntry.value());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,381,s.addEntry0(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,382,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,384,log.debug("Rebalance predicate evaluated to false (will not send " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,387,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,391,if (depEnabled && !prepared) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,392,ClassLoader ldr = swapEntry.keyClassLoaderId() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,393,cctx.deploy().getClassLoader(swapEntry.keyClassLoaderId()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,394,swapEntry.valueClassLoaderId() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,395,cctx.deploy().getClassLoader(swapEntry.valueClassLoaderId()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,396,null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,399,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,401,if (ldr instanceof GridDeploymentInfo) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,402,s.prepare((GridDeploymentInfo)ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,404,prepared = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,410,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,412,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,413,iter.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,419,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,420,cctx.swap().removeOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,421,cctx.swap().removeSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,424,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,425,Collection<GridCacheEntryInfo> entries = swapLsnr.entries();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,427,swapLsnr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,429,for (GridCacheEntryInfo info : entries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,430,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,433,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,436,log.debug("Demanding node does not need requested partition " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,440,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,443,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,444,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,447,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,449,s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,450,d.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,455,s.addEntry(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,457,log.debug("Rebalance predicate evaluated to false (will not sender cache entry): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,458,info);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,463,s.last(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,465,if (ack) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,466,s.markAck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,468,break; // Partition for loop.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,471,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,472,loc.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,474,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,475,cctx.swap().removeOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,476,cctx.swap().removeSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,481,reply(node, d, s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,483,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,484,U.error(log, "Failed to send partition supply message to node: " + node.id(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,496,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,497,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,499,log.debug("Replying to partition demand [node=" + n.id() + ", demand=" + d + ", supply=" + s + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,501,cctx.io().sendOrderedMessage(n, d.topic(), s, cctx.ioPolicy(), d.timeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,503,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,505,catch (ClusterTopologyCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,507,log.debug("Failed to send partition supply message because node left grid: " + n.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,509,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,517,private static class DemandMessage extends IgniteBiTuple<UUID, GridDhtPartitionDemandMessage> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,519,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,525,DemandMessage(UUID sndId, GridDhtPartitionDemandMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,526,super(sndId, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,532,public DemandMessage() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,539,UUID senderId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,540,return get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,546,public GridDhtPartitionDemandMessage message() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,547,return get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,552,return "DemandMessage [senderId=" + senderId() + ", msg=" + message() + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,28,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,83,private GridDhtPartitionSupplyPool supplyPool;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,86,private GridDhtPartitionDemandPool demandPool;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,181,supplyPool = new GridDhtPartitionSupplyPool(cctx, busyLock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,182,demandPool = new GridDhtPartitionDemandPool(cctx, busyLock);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,202,supplyPool.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,203,demandPool.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,210,assert supplyPool != null && demandPool != null : "preloadPredicate may be called only after start()";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,212,supplyPool.preloadPredicate(preloadPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,213,demandPool.preloadPredicate(preloadPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,228,supplyPool.stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,231,demandPool.stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,238,if (err == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,241,final long start = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,243,final CacheConfiguration cfg = cctx.config();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,245,if (cfg.getRebalanceDelay() >= 0 && !cctx.kernalContext().clientNode()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,246,U.log(log, "Starting rebalancing in " + cfg.getRebalanceMode() + " mode: " + cctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,248,demandPool.syncFuture().listen(new CI1<Object>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,250,U.log(log, "Completed rebalancing in " + cfg.getRebalanceMode() + " mode " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,256,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,257,startFut.onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,267,demandPool.onExchangeFutureAdded();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,272,demandPool.updateLastExchangeFuture(lastFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,277,return demandPool.assign(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,282,demandPool.addAssignments(assignments, forcePreload);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,294,return cctx.kernalContext().clientNode() ? startFut : demandPool.syncFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,566,demandPool.forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,571,demandPool.unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,699,return;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridTuple4.java,242,return F.eq(val1, t.val2) && F.eq(val2, t.val2) && F.eq(val3, t.val3) && F.eq(val4, t.val4);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,1959,void simulateNodeFailure() {
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,57,if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(), 2)) {
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,58,System.out.println();
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,59,System.out.println(">>> Please start at least 2 cluster nodes to run example.");
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,60,System.out.println();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,174,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,568,final GridNearTxPrepareResponse res = createPrepareResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,574,IgniteInternalFuture<IgniteInternalTx> fut = this.err.get() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,575,tx.commitAsync() : tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,577,fut.listen(new CIX1<IgniteInternalFuture<IgniteInternalTx>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,579,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,581,sendPrepareResponse(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,583,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,584,U.error(log, "Failed to send prepare response for transaction: " + tx, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,604,GridNearTxPrepareResponse res = createPrepareResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,655,private GridNearTxPrepareResponse createPrepareResponse() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,657,Throwable prepErr = err.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1865,TransactionState state = tx.state();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1218,assert nodeIds != null;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshallerUtils.java,287,return (short)ObjectStreamClass.lookup(cls).getSerialVersionUID();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,152,import static org.apache.ignite.internal.processors.task.GridTaskThreadContextKey.TC_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1062,public List<GridCacheClearAllRunnable<K, V>> splitClearLocally() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1063,assert CLEAR_ALL_SPLIT_THRESHOLD > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1065,int keySize = size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1067,int cnt = Math.min(keySize / CLEAR_ALL_SPLIT_THRESHOLD + (keySize % CLEAR_ALL_SPLIT_THRESHOLD != 0 ? 1 : 0),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1068,Runtime.getRuntime().availableProcessors());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1071,cnt = 1; // Still perform cleanup since there could be entries in swap.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1073,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1075,List<GridCacheClearAllRunnable<K, V>> res = new ArrayList<>(cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1078,res.add(new GridCacheClearAllRunnable<>(this, obsoleteVer, i, cnt));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1080,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1085,return clearLocally0(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1090,clearLocally0(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1097,List<GridCacheClearAllRunnable<K, V>> jobs = splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1135,public void clearLocally(Collection<KeyCacheObject> keys, boolean readers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1137,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1139,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1141,for (KeyCacheObject key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1142,GridCacheEntryEx e = peekEx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1144,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1146,e.clear(obsoleteVer, readers, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1148,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1149,U.error(log, "Failed to clearLocally entry (will continue to clearLocally other entries): " + e,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1150,ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1163,private boolean clearLocally(GridCacheVersion obsoleteVer, K key, @Nullable CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1164,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1165,KeyCacheObject cacheKey = ctx.toCacheKeyObject(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1167,GridCacheEntryEx entry = ctx.isSwapOrOffheapEnabled() ? entryEx(cacheKey) : peekEx(cacheKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1170,return entry.clear(obsoleteVer, false, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1172,catch (GridDhtInvalidPartitionException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1173,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1175,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1176,U.error(log, "Failed to clearLocally entry for key: " + key, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1179,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1185,clearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1187,clearRemotes(0, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1193,clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1195,clearRemotes(0, Collections.singleton(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1201,clearLocallyAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1203,clearRemotes(0, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1208,return clearKeysAsync(Collections.singleton(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1213,return clearKeysAsync(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1222,private void clearRemotes(long timeout, @Nullable final Set<? extends K> keys) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1224,Collection<ClusterNode> nodes =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1225,ctx.grid().cluster().forCacheNodes(name(), true, true, false).forRemotes().nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1227,if (!nodes.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1228,ctx.kernalContext().task().setThreadContext(TC_TIMEOUT, timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1230,ctx.kernalContext().task().setThreadContext(TC_SUBGRID, nodes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1232,ctx.kernalContext().task().execute(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1233,new ClearTask(ctx.name(), ctx.affinity().affinityTopologyVersion(), keys), null).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1239,return clearKeysAsync(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1246,private IgniteInternalFuture<?> clearKeysAsync(final Set<? extends K> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1247,Collection<ClusterNode> nodes = ctx.grid().cluster().forCacheNodes(name(), true, true, false).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1249,if (!nodes.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1250,ctx.kernalContext().task().setThreadContext(TC_SUBGRID, nodes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1253,new ClearTask(ctx.name(), ctx.affinity().affinityTopologyVersion(), keys), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4433,public void clearLocally0(Collection<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4438,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4441,validateCacheKeys(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4446,clearLocally(obsoleteVer, k, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4454,public boolean clearLocally0(K key, @Nullable CacheEntryPredicate... filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4455,A.notNull(key, "key");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4458,validateCacheKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4460,ctx.checkSecurity(SecurityPermission.CACHE_REMOVE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4462,return clearLocally(ctx.versions().next(), key, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5181,cache.clearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5212,cache.clearLocallyAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5989,public ClearTask(String cacheName, AffinityTopologyVersion topVer, Set<? extends K> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5998,Map<ComputeJob, ClusterNode> jobs = new HashMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6001,jobs.put(keys == null ? new GlobalClearAllJob(cacheName, topVer) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6002,new GlobalClearKeySetJob<K>(cacheName, topVer, keys),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6003,node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheClearAllRunnable.java,60,public GridCacheClearAllRunnable(GridCacheAdapter<K, V> cache, GridCacheVersion obsoleteVer, int id, int totalCnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheClearAllRunnable.java,141,e.clear(obsoleteVer, false, CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentMap.java,1971,ctx.cache().clearLocally0(new KeySet<K, V>(map, filter, false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,944,delegate.clearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,992,return delegate.clearAsync(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1016,delegate.clearLocallyAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1314,setFuture(delegate.clearAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,929,public void clearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,962,public void clearLocallyAll(Set<? extends K> keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteInternalCache.java,1018,public IgniteInternalFuture<?> clearAsync(Set<? extends K> keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,976,return ctx.affinityNode() ? super.splitClearLocally() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,102,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,454,return super.clearLocally0(key, filter) | dht().clearLocally0(key, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,460,super.clearLocally0(keys, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,462,dht().clearLocally0(keys, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,541,List<GridCacheClearAllRunnable<K, V>> dhtJobs = dht().splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,551,return super.splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheClearAllRunnable.java,41,super(cache, obsoleteVer, dhtJob.id(), dhtJob.totalCount());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheClearAllRunnable.java,43,assert dhtJob != null;
examples/src/main/java/org/apache/ignite/examples/datagrid/hibernate/package-info.java,22,package org.apache.ignite.examples.datagrid.hibernate;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/package-info.java,22,package org.apache.ignite.examples.datagrid.store.hibernate;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,30,import org.apache.ignite.events.IgfsEvent;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,35,import org.apache.ignite.internal.managers.eventstorage.GridEventStorageManager;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,66,private final GridEventStorageManager evts;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,99,evts = igfsCtx.kernalContext().event();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,221,deleteDirectory(TRASH_ID, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,231,data.delete(info).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,235,if (evts.isRecordable(EVT_IGFS_FILE_PURGED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,237,evts.record(new IgfsEvent(info.path(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,238,igfsCtx.kernalContext().discovery().localNode(), EVT_IGFS_FILE_PURGED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,239,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,240,LT.warn(log, null, "Removing file without path info: " + info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,258,private void deleteDirectory(IgniteUuid parentId, IgniteUuid id) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,268,Map<String, IgfsListingEntry> listing = info.listing();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,271,return; // Directory is empty.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,273,Map<String, IgfsListingEntry> delListing;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,276,delListing = listing;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,277,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,278,delListing = new HashMap<>(MAX_DELETE_BATCH, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,280,int i = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,282,for (Map.Entry<String, IgfsListingEntry> entry : listing.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,283,delListing.put(entry.getKey(), entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,286,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,290,GridCompoundFuture<Object, ?> fut = new GridCompoundFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,293,for (IgfsListingEntry entry : delListing.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,294,if (!cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,296,deleteDirectory(id, entry.fileId());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,297,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,298,IgfsFileInfo fileInfo = meta.info(entry.fileId());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,300,if (fileInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,301,assert fileInfo.isFile();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,303,fut.add(data.delete(fileInfo));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,307,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,308,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,321,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,328,break; // All entries were deleted.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,331,break; // Entry was deleted concurrently.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,64,import org.apache.ignite.igfs.IgfsPathAlreadyExistsException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,102,import static org.apache.ignite.events.EventType.EVT_IGFS_FILE_CREATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,117,import static org.apache.ignite.internal.processors.igfs.IgfsFileInfo.TRASH_ID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,127,private static final Map<String, String> DFLT_DIR_META = F.asMap(PROP_PERMISSION, PERMISSION_DFLT_VAL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,792,if (res && desc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,793,if (desc.isFile) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,795,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,798,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_DIR_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1079,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_READ));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1100,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_READ));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1155,IgfsMode mode = resolveMode(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1173,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1179,IgfsPath parent = path.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1183,mkdirs(parent, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1185,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1188,IgniteUuid parentId = ids.size() >= 2 ? ids.get(ids.size() - 2) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1191,throw new IgfsPathNotFoundException("Failed to resolve parent directory: " + parent);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1193,String fileName = path.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1196,IgfsFileInfo info = new IgfsFileInfo(cfg.getBlockSize(), affKey, evictExclude(path, true), props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1199,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1200,IgniteUuid oldId = meta.putIfAbsent(parentId, fileName, info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1203,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1206,throw new IgfsPathAlreadyExistsException("Failed to create file (file already exists): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1207,path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1209,IgfsFileInfo oldInfo = meta.info(oldId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1211,assert oldInfo != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1214,throw new IgfsPathAlreadyExistsException("Failed to create file (path points to a " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1219,deleteFile(path, new FileDescriptor(parentId, fileName, oldId, oldInfo.isFile()), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1222,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1226,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1228,info = meta.lock(info.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1230,IgfsEventAwareOutputStream os = new IgfsEventAwareOutputStream(path, info, parentId,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1234,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1236,return os;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1259,IgfsMode mode = resolveMode(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1276,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1278,IgfsFileInfo info = meta.info(ids.get(ids.size() - 1));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1281,IgniteUuid parentId = ids.size() >= 2 ? ids.get(ids.size() - 2) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1283,if (info == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1291,throw new IgfsPathNotFoundException("Failed to resolve parent directory: " + path.parent());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1293,info = new IgfsFileInfo(cfg.getBlockSize(), /**affinity key*/null, evictExclude(path, true), props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1295,IgniteUuid oldId = meta.putIfAbsent(parentId, path.name(), info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1298,info = meta.info(oldId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1301,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1304,assert info != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1307,throw new IgfsPathIsDirectoryException("Failed to open file (not a file): " + path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1309,info = meta.lock(info.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1312,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1314,return new IgfsEventAwareOutputStream(path, info, parentId, bufSize == 0 ?
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1315,cfg.getStreamBufferSize() : bufSize, mode, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1609,private void deleteFile(IgfsPath path, FileDescriptor desc, boolean rmvLocked) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1610,IgniteUuid parentId = desc.parentId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1611,IgniteUuid fileId = desc.fileId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1613,if (parentId == null || ROOT_ID.equals(fileId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1614,assert parentId == null && ROOT_ID.equals(fileId) : "Invalid file descriptor: " + desc;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1616,return; // Never remove the root directory!
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1620,return; // Never remove trash directory.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1622,meta.removeIfEmpty(parentId, desc.fileName, fileId, path, rmvLocked);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,2159,private <T> T safeOp(Callable<T> action) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,2162,return action.call();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,71,import org.apache.ignite.internal.util.typedef.internal.LT;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,81,import static org.apache.ignite.events.EventType.EVT_IGFS_FILE_DELETED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,82,import static org.apache.ignite.events.EventType.EVT_IGFS_FILE_PURGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,449,public IgfsFileInfo lock(IgniteUuid fileId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,462,throw new IgniteCheckedException("Failed to lock file (file not found): " + fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,464,IgfsFileInfo newInfo = lockInfo(oldInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,466,boolean put = metaCache.put(fileId, newInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,496,public IgfsFileInfo lockInfo(IgfsFileInfo info) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,497,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,498,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,499,assert info != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,502,throw new IgniteCheckedException("Failed to lock file (file is being concurrently written) [fileId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,503,info.id() + ", lockId=" + info.lockId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,505,return new IgfsFileInfo(info, IgniteUuid.randomUuid(), info.modificationTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,507,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,508,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,511,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,512,throw new IllegalStateException("Failed to get lock info because Grid is stopping: " + info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,545,throw fsException(new IgfsPathNotFoundException("Failed to unlock file (file not found): " + fileId));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,548,throw new IgniteCheckedException("Failed to unlock file (inconsistent file lock ID) [fileId=" + fileId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,555,assert put : "Value was not stored in cache [fileId=" + fileId + ", newInfo=" + newInfo + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,707,private Map<String, IgfsListingEntry> directoryListing(IgniteUuid fileId, boolean skipTx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,726,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,727,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,728,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,729,assert validTxState(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,730,assert parentId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,731,assert fileName != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,732,assert newFileInfo != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,734,IgniteUuid res = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,736,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,738,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,739,res = putIfAbsentNonTx(parentId, fileName, newFileInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,741,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,743,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,744,tx.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,747,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,749,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,750,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,753,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,754,throw new IllegalStateException("Failed to put file because Grid is stopping [parentId=" + parentId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,781,throw fsException(new IgfsPathNotFoundException("Failed to lock parent directory (not found): " + parentId));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,940,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,941,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,942,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,943,assert validTxState(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,945,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,947,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,949,lockIds(parentId, fileId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,950,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,951,lockIds(fileId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,953,IgfsFileInfo fileInfo = removeIfEmptyNonTx(parentId, fileName, fileId, path, rmvLocked);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,955,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,957,delWorker.signal();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,959,return fileInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,961,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,962,tx.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,965,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,966,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,969,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,970,throw new IllegalStateException("Failed to remove file system entry because Grid is stopping [parentId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,971,parentId + ", fileName=" + fileName + ", fileId=" + fileId + ", path=" + path + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,987,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,988,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,989,assert parentId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,990,assert fileName != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,991,assert fileId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,992,assert !ROOT_ID.equals(fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,995,log.debug("Remove file: [parentId=" + parentId + ", fileName= " + fileName + ", fileId=" + fileId + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,998,IgfsFileInfo fileInfo = id2InfoPrj.get(fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,999,IgfsFileInfo parentInfo = id2InfoPrj.get(parentId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1001,if (fileInfo == null || parentInfo == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1002,if (parentInfo != null) { // fileInfo == null
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1003,IgfsListingEntry entry = parentInfo.listing().get(fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1007,throw new IgniteCheckedException("Failed to remove file (file system is in inconsistent state) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1011,return null; // Parent directory or removed file cannot be locked (not found?).
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1014,assert parentInfo.isDirectory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1017,throw fsException("Failed to remove file (file is opened for writing) [fileName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1018,fileName + ", fileId=" + fileId + ", lockId=" + fileInfo.lockId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1021,if (fileInfo.isDirectory()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1022,Map<String, IgfsListingEntry> listing = fileInfo.listing();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1025,throw fsException(new IgfsDirectoryNotEmptyException("Failed to remove file (directory is not empty)" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1030,IgfsListingEntry listingEntry = parentInfo.listing().get(fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1033,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1036,softDeleteNonTx(parentId, fileName, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1040,id2InfoPrj.invoke(fileId, new UpdatePath(path));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1042,return builder(fileInfo).path(path).build();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1283,id2InfoPrj.getAndRemove(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1708,IgniteUuid.randomUuid(), igfsCtx.igfs().evictExclude(path, false), status.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1727,if (evts.isRecordable(EVT_IGFS_FILE_PURGED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1728,delFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1730,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1731,t.get(); // Ensure delete succeeded.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1733,evts.record(new IgfsEvent(path, locNode, EVT_IGFS_FILE_PURGED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1735,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1736,LT.warn(log, e, "Old file deletion failed in DUAL mode [path=" + path +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1747,pendingEvts.add(new IgfsEvent(path, locNode, EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1809,IgfsFileInfo info = infos.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1837,info = lockInfo(info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1839,metaCache.put(info.id(), info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1841,return new IgfsSecondaryOutputStreamDescriptor(infos.get(path.parent()).id(), info, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1851,throw new IgniteCheckedException("Failed to append to the file due to secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1960,throw new IgniteCheckedException("Failed to synchronize path due to secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2039,throw new IgniteCheckedException("Failed to create the path due to secondary file system exception: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2040,path, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2207,throw new IgniteCheckedException("Failed to delete the path due to secondary file system exception: ",
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2208,err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2236,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2261,throw new IgniteCheckedException("Failed to update the path due to secondary file system exception: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2262,path, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2326,throw new IgniteCheckedException("Failed to create path the locally because secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2605,private <K, V> boolean putx(IgniteInternalCache<K, V> cache, K key, IgniteClosure<V, V> c) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,62,import org.apache.ignite.igfs.IgfsParentNotDirectoryException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,97,import static org.apache.ignite.events.EventType.EVT_IGFS_DIR_CREATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,862,Map<String, String> props0 = props == null ? DFLT_DIR_META : props;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,866,if (mode != PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,873,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,876,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,877,List<String> components = path.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,879,assert ids.size() == components.size() + 1 : "Components doesn't contain ROOT element" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,882,IgniteUuid parentId = ROOT_ID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,884,IgfsPath curPath = path.root();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,886,for (int step = 0, size = components.size(); step < size; step++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,887,IgniteUuid fileId = ids.get(step + 1); // Skip the first ROOT element.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,889,if (fileId == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,890,IgfsFileInfo fileInfo = new IgfsFileInfo(true, props0); // Create new directory.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,892,String fileName = components.get(step); // Get current component name.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,894,curPath = new IgfsPath(curPath, fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,896,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,898,IgniteUuid oldId = meta.putIfAbsent(parentId, fileName, fileInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,900,fileId = oldId == null ? fileInfo.id() : oldId; // Update node ID.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,903,evts.record(new IgfsEvent(curPath, localNode(), EVT_IGFS_DIR_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,905,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,907,log.debug("Failed to create directory [path=" + path + ", parentId=" + parentId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,911,IgfsFileInfo stored = meta.info(meta.fileId(parentId, fileName));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,914,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,917,throw new IgfsParentNotDirectoryException("Failed to create directory (parent " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,920,fileId = stored.id(); // Update node ID.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,924,assert fileId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,926,parentId = fileId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1358,IgfsFileInfo oldInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1359,IgfsFileInfo parentInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1376,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1410,assert metaCache.get(parentId) != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,81,import org.apache.ignite.internal.util.GridBoundedConcurrentLinkedHashMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,211,new GridBoundedConcurrentLinkedHashMap<>(DISCOVERY_HISTORY_SIZE, DISCOVERY_HISTORY_SIZE, 0.7f, 1);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,468,if (type == EVT_NODE_JOINED && node.isLocal() && ctx.clientDisconnected()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,469,discoCacheHist.clear();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,471,topHist.clear();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,473,topSnap.set(new Snapshot(AffinityTopologyVersion.ZERO, null));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,623,discoWrk.addEvent(type, nextTopVer, node, topSnapshot, customMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,44,private UUID locNodeId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,48,locNodeId = cctx.localNodeId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,99,locNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,119,locNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1883,for (DynamicCacheChangeRequest req : batch.requests()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1884,assert !req.template() : req;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1886,String name = req.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1888,boolean sysCache = CU.isMarshallerCache(name) || CU.isUtilityCache(name) || CU.isAtomicsCache(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1890,if (!sysCache) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1891,DynamicCacheDescriptor desc = registeredCaches.get(maskNull(req.cacheName()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1893,if (desc != null && desc.deploymentId().equals(req.deploymentId())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1894,Map<UUID, Boolean> nodes = batch.clientNodes().get(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1896,assert nodes != null : req;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1897,assert nodes.containsKey(joiningNodeId) : nodes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1899,ctx.discovery().addClientNode(req.cacheName(), joiningNodeId, nodes.get(joiningNodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1902,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1903,ctx.discovery().addClientNode(req.cacheName(), joiningNodeId, false);
modules/core/src/main/java/org/apache/ignite/igfs/IgfsPath.java,53,private static final String SLASH = "/";
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,219,IgfsFileInfo(Map<String, IgfsListingEntry> listing, IgfsFileInfo old) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,56,import org.apache.ignite.igfs.IgfsDirectoryNotEmptyException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,778,res = delete0(desc, path.parent(), recursive);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,818,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,819,IgfsPath curPath = parentPath == null ? new IgfsPath() : new IgfsPath(parentPath, desc.fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,821,if (desc.isFile) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,822,deleteFile(curPath, desc, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,824,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,826,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,827,if (recursive) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,828,meta.softDelete(desc.parentId, desc.fileName, desc.fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,830,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,832,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,833,Map<String, IgfsListingEntry> infoMap = meta.directoryListing(desc.fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,835,if (F.isEmpty(infoMap)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,836,deleteFile(curPath, desc, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,838,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,840,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,842,throw new IgfsDirectoryNotEmptyException("Failed to remove directory (directory is not empty " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1517,IgniteUuid id = meta.softDelete(null, null, ROOT_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,604,IgfsFileInfo info = new IgfsFileInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,606,id2InfoPrj.putIfAbsent(ROOT_ID, info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,608,map = new GridLeanMap<>(map);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,610,map.put(ROOT_ID, info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,614,return map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,773,validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,778,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,792,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,876,validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1054,IgniteUuid softDelete(@Nullable IgniteUuid parentId, @Nullable String pathName, IgniteUuid pathId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1059,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1063,lockIds(pathId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1064,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1065,lockIds(parentId, pathId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1067,IgniteUuid resId = softDeleteNonTx(parentId, pathName, pathId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1073,return resId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1084,throw new IllegalStateException("Failed to perform soft delete because Grid is stopping [parentId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1085,parentId + ", pathName=" + pathName + ", pathId=" + pathId + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2245,throws Exception {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2251,assert path.parent() == null || infos.get(path.parent()) != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2253,return updatePropertiesNonTx(infos.get(path.parent()).id(), infos.get(path).id(), path.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2254,props);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlElement.java,28,protected List<GridSqlElement> children;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,30,import static org.apache.ignite.internal.processors.query.h2.sql.GridSqlFunctionType.CONVERT;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,73,throw new NullPointerException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,116,if (type == CAST) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,117,String castType = resultType().sql();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,119,assert !F.isEmpty(castType) : castType;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,120,assert size() == 1;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,122,buff.append(child().getSQL()).append(" AS ").append(castType);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,124,else if (type == CONVERT) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,125,String castType = resultType().sql();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,127,assert !F.isEmpty(castType) : castType;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,128,assert size() == 1;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,130,buff.append(child().getSQL()).append(',').append(castType);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,132,else if (type == GridSqlFunctionType.EXTRACT) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,133,ValueString v = (ValueString)((GridSqlConst)child(0)).value();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,134,buff.append(v.getString()).append(" FROM ").append(child(1).getSQL());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,136,else {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,137,for (GridSqlElement e : children) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,138,buff.appendExceptFirst(", ");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,139,buff.append(e.getSQL());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlPlaceholder.java,48,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,22,import java.util.HashSet;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,25,import java.util.Set;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,60,import org.h2.value.Value;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,296,Set<TableFilter> allFilters = new HashSet<>(select.getTopFilters());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,311,allFilters.remove(filter);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,319,assert allFilters.isEmpty();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,422,if (calcTypes) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,423,GridSqlType type = GridSqlType.UNKNOWN;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,425,if (expression.getType() != Value.UNKNOWN) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,426,Column c = new Column(null, expression.getType(), expression.getPrecision(), expression.getScale(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,427,expression.getDisplaySize());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,429,type = new GridSqlType(c.getType(), c.getScale(), c.getPrecision(), c.getDisplaySize(), c.getCreateSQL());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,432,res.resultType(type);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,580,for (Expression arg : f.getArgs()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,581,if (arg == null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,583,throw new IllegalStateException("Function type with null arg: " + f.getFunctionType());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,585,res.addChild(GridSqlPlaceholder.EMPTY);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,587,else
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,588,res.addChild(parseExpression(arg, calcTypes));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,592,if (f.getFunctionType() == Function.CAST || f.getFunctionType() == Function.CONVERT) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,593,Column c = new Column(null, f.getType(), f.getPrecision(), f.getScale(), f.getDisplaySize());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,595,res.resultType(new GridSqlType(c.getType(), c.getScale(), c.getPrecision(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,596,c.getDisplaySize(), c.getCreateSQL()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlType.java,65,public GridSqlType(int type, int scale, long precision, int displaySize, String sql) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/CustomEventListener.java,30,public void onCustomEvent(ClusterNode snd, T msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,530,lsnr.onCustomEvent(node, customMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,202,for (DynamicCacheChangeRequest req : batch.requests()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,205,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,206,cctx.cache().completeStartFuture(req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,118,import org.apache.ignite.internal.portable.api.PortableMarshaller;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,619,onCacheChangeRequested(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2367,private void onCacheChangeRequested(DynamicCacheChangeBatch batch) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,33,import org.apache.ignite.cluster.ClusterNode;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,237,ClusterNode node = ctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,239,if (ctx.config().isPeerClassLoadingEnabled() && node != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,242,GridCacheDeploymentManager depMgr =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,243,ctx.cache().internalCache(cacheName).context().deploy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,323,GridCacheAdapter<K, V> cache = ctx.cache().<K, V>internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,886,List<CacheCollectionInfo> caches = utilityDataCache.localPeek(DATA_STRUCTURES_CACHE_KEY, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,283,restReq = new GridRestTaskRequest();
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,236,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,241,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,251,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,336,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,235,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,240,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,250,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc2/JdbcDatabaseMetadata.java,335,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,22,import java.util.Set;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,144,cctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,145,xidVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,146,implicit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,147,implicitSingle,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,148,sys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,149,plc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,150,concurrency,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,151,isolation,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,152,timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,156,txSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,219,long msgId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1131,GridCacheContext cacheCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1132,IgniteTxKey key,
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,74,public IgniteLogger getLogger(Object ctgr);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,81,public void trace(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,88,public void debug(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,95,public void info(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,102,public void warning(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,110,public void warning(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,117,public void error(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,125,public void error(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,132,public boolean isTraceEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,139,public boolean isDebugEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,146,public boolean isInfoEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,153,public boolean isQuiet();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,160,public String fileName();
modules/core/src/main/java/org/apache/ignite/internal/portable/builder/PortableBuilderReader.java,677,return new PortableLazySet(this, size);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,148,HttpURLConnection conn = (HttpURLConnection)url.openConnection();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,152,if (code == 200) {
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,155,checkDownloadFolder();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,159,outFile.getChannel().transferFrom(Channels.newChannel(conn.getInputStream()), 0, Long.MAX_VALUE);
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,161,outFile.close();
modules/mesos/src/main/java/org/apache/ignite/mesos/resource/IgniteProvider.java,171,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1631,long remainingTime = U.currentTimeMillis() - (tx.startTime() + tx.timeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1636,long timeout = tx.timeout() == 0 ? 0 : remainingTime;
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,62,CacheConfiguration<String, Instrument> instCfg = new CacheConfiguration<>("instCache");
examples/src/main/java/org/apache/ignite/examples/streaming/StreamVisitorExample.java,70,IgniteCache<String, Double> mktCache = ignite.getOrCreateCache("marketTicks"); // Default config.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,590,expiryPlc = ctx.marshaller().unmarshal(expiryPlcBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3308,marshaller.unmarshal(marshaller.marshal(val.getCacheStoreFactory()),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,3309,val.getCacheStoreFactory().getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,256,public VisorCache history() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,257,VisorCache c = new VisorCache();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,154,storeCfg = VisorCacheStoreConfiguration.from(ignite, ccfg);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,155,qryCfg = VisorCacheQueryConfiguration.from(ccfg);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java,67,public static VisorCacheQueryConfiguration from(CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheStoreConfiguration.java,73,public static VisorCacheStoreConfiguration from(IgniteEx ignite, CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorJob.java,133,VisorCache cache = new VisorCache().from(ignite, cacheName, arg.sample());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,92,import static org.apache.ignite.transactions.TransactionConcurrency.OPTIMISTIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,93,import static org.apache.ignite.transactions.TransactionConcurrency.PESSIMISTIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,100,import static org.apache.ignite.transactions.TransactionState.ROLLED_BACK;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,952,throw new IgniteCheckedException("Default grid instance has already been started.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1546,Object val = ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx, entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1548,updated.value(ctx.cacheObjectContext(), false));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,724,public <T extends DiscoveryCustomMessage> void setCustomEventListener(Class<T> msgCls, CustomEventListener<T> lsnr) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1060,while (true){
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,1381,) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2264,addr: for (InetSocketAddress addr : spi.getNodeAddresses(next, sameHost)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,2267,if (locNodeAddrs.contains(addr)){
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,3370,else  {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4609,(!spi.isSslEnabled() ? " missed SSL configuration?" : "" ) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4616,(!spi.isSslEnabled() ? " missing SSL configuration on remote node?" : "" ) +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4730,U.error(log, "Caught exception on handshake [err=" + e +", sock=" + sock + ']', e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4757,U.error(log, "Caught exception on handshake [err=" + e +", sock=" + sock + ']', e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,4759,onException("Caught exception on handshake [err=" + e +", sock=" + sock + ']', e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,385,HttpSession ses = httpReq.getSession(false);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,387,if (ses != null && ses instanceof WebSession) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3551,if (replaceExisting) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3552,if (ctx.store().isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3553,Collection<ClusterNode> nodes = ctx.grid().cluster().forDataNodes(name()).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3556,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3558,return ctx.closures().callAsyncNoFailover(BROADCAST,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3559,new LoadKeysCallable<>(ctx.name(), keys, true, plc),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3560,nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3561,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3573,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3574,Collection<ClusterNode> nodes = ctx.grid().cluster().forDataNodes(name()).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3577,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3580,new LoadKeysCallable<>(ctx.name(), keys, false, plc),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3622,public void localLoad(Collection<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3624,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5496,cache.localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,422,super.localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,306,dht().localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,403,ctx.noValArray(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,902,cctx.exchange().dumpPendingObjects();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8460,return F.viewListReadOnly(res, F.<InetAddress>identity());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8507,return F.viewListReadOnly(res, F.<InetSocketAddress>identity());
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1698,public static <T1, T2> List<T2> viewListReadOnly(@Nullable final List<? extends T1> c,
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1707,return new GridSerializableList<T2>() {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1709,return trans.apply(c.get(idx));
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1699,final IgniteClosure<? super T1, T2> trans) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1705,assert c != null;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1714,return F.<T1, T2>iterator(c, trans, true);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1718,return c.size();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1722,return c.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1738,public static <T1, T2> List<T2> transformList(Collection<? extends T1> c,
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1739,IgniteClosure<? super T1, T2> trans, @Nullable IgnitePredicate<? super T1>... p) {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1740,A.notNull(c, "c", trans, "trans");
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1743,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridFunc.java,1745,return new ArrayList<>(transform(retain(c, true, p), trans));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,531,clearAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,535,log.debug("Evicted partition: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,538,clearSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,541,cctx.dr().partitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,543,cctx.dataStructures().onPartitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,545,rent.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,549,clearDeferredDeletes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,811,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,1266,return;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java,1050,continue;
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,311,if ("CONSOLE_ERR".equals(appender.getName())) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,350,else
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,352,rootCategory.addAppender(createConsoleAppender(Level.OFF));
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,373,private Appender createConsoleAppender(Level maxLevel) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,377,Appender app = new ConsoleAppender(new PatternLayout(fmt), ConsoleAppender.SYSTEM_OUT);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2TreeIndex.java,259,public GridH2Row findOne(GridSearchRowPointer row) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,625,return (QueryCursor<R>)ctx.kernalContext().query().queryLocalFields(ctx, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,627,return (QueryCursor<R>)ctx.kernalContext().query().queryTwoStep(ctx, p);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java,925,Integer res = sendMessageDirectly(joinReq, addr);
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,20,import com.amazonaws.AmazonClientException;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,21,import com.amazonaws.AmazonServiceException;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,22,import com.amazonaws.ClientConfiguration;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,23,import com.amazonaws.auth.AWSCredentials;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,24,import com.amazonaws.services.s3.AmazonS3;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,25,import com.amazonaws.services.s3.AmazonS3Client;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,26,import com.amazonaws.services.s3.model.ObjectListing;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,27,import com.amazonaws.services.s3.model.ObjectMetadata;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,28,import com.amazonaws.services.s3.model.S3Object;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/S3CheckpointSpi.java,29,import com.amazonaws.services.s3.model.S3ObjectSummary;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,20,import com.google.common.base.Charsets;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,21,import com.google.common.base.Predicate;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,22,import com.google.common.base.Supplier;
modules/cloud/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/cloud/TcpDiscoveryCloudIpFinder.java,23,import com.google.common.io.Files;
modules/core/src/main/java/org/apache/ignite/igfs/IgfsParentNotDirectoryException.java,20,import org.jetbrains.annotations.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheLockTimeoutException.java,20,import org.apache.ignite.internal.processors.cache.version.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,20,import java.io.Externalizable;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,22,import java.io.ObjectInput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,23,import java.io.ObjectOutput;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,24,import java.util.Collections;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,25,import java.util.Map;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformContext.java,41,import java.util.Collection;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/PlatformNativeException.java,20,import org.apache.ignite.internal.util.typedef.internal.S;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cache/query/PlatformContinuousQuery.java,25,import javax.cache.event.CacheEntryUpdatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/platform/message/PlatformMessageFilter.java,23,import java.util.UUID;
modules/core/src/main/java/org/apache/ignite/internal/tck/TCKMBeanServerBuilder.java,20,import com.sun.jmx.mbeanserver.JmxMBeanServer;
modules/core/src/main/java/org/apache/ignite/internal/util/GridConcurrentFactory.java,20,import java.util.concurrent.ConcurrentMap;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,21,import org.apache.ignite.internal.util.typedef.*;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/impl.java,20,import java.lang.annotation.*;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,20,import org.apache.ignite.internal.util.lang.*;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,20,import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,21,import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,22,import com.google.api.client.googleapis.json.GoogleJsonResponseException;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,23,import com.google.api.client.http.InputStreamContent;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,24,import com.google.api.client.http.javanet.NetHttpTransport;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,25,import com.google.api.client.json.jackson2.JacksonFactory;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,26,import com.google.api.services.storage.Storage;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,27,import com.google.api.services.storage.StorageScopes;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,28,import com.google.api.services.storage.model.Bucket;
modules/gce/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/gce/TcpDiscoveryGoogleStorageIpFinder.java,29,import com.google.api.services.storage.model.StorageObject;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,38,import org.apache.ignite.spi.indexing.IndexingQueryFilter;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/IgniteScheduleProcessor.java,20,import it.sauronsoftware.cron4j.Scheduler;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,20,import it.sauronsoftware.cron4j.InvalidPatternException;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,21,import it.sauronsoftware.cron4j.Predictor;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,22,import it.sauronsoftware.cron4j.Scheduler;
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,23,import it.sauronsoftware.cron4j.SchedulingPattern;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,20,import com.jcraft.jsch.ChannelExec;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,21,import com.jcraft.jsch.ChannelShell;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,22,import com.jcraft.jsch.JSch;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,23,import com.jcraft.jsch.JSchException;
modules/ssh/src/main/java/org/apache/ignite/internal/util/nodestart/StartNodeCallableImpl.java,24,import com.jcraft.jsch.Session;
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteBenchmarkArguments.java,20,import com.beust.jcommander.Parameter;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,210,int idx = clsName.indexOf(".class");
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,213,clsName = clsName.substring(0, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,328,while (workersCnt.sum() != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,329,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,330,Thread.sleep(200);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,332,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,333,interrupted = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,31,protected GridCacheContext cctx;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,18,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,20,import java.io.File;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,21,import java.io.IOException;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,22,import java.io.RandomAccessFile;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,23,import java.net.InetAddress;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,24,import java.net.ServerSocket;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,25,import java.net.UnknownHostException;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,26,import java.nio.channels.FileLock;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,27,import org.apache.ignite.IgniteSystemProperties;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,32,public class GridJmxPortFinder {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,34,public static final String IGNITE_JMX_PORT = "IGNITE_JMX_PORT";
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,37,private static final int MIN_PORT = 49112;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,40,private static final int MAX_PORT = 65535;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,45,private GridJmxPortFinder() {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,55,public static void main(String[] args) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,56,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,57,InetAddress.getLocalHost();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,59,catch (UnknownHostException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,62,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,65,int jmxPort = IgniteSystemProperties.getInteger(IGNITE_JMX_PORT, -1);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,67,if (jmxPort != -1) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,68,System.out.println(jmxPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,70,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,73,RandomAccessFile ra = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,74,FileLock lock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,76,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,77,File file = new File(System.getProperty("java.io.tmpdir"), "ignite.lastport.tmp");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,79,file.setReadable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,80,file.setWritable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,82,ra = new RandomAccessFile(file, "rw");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,84,lock = ra.getChannel().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,86,ra.seek(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,88,String startPortStr = ra.readLine();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,90,int startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,92,if (startPortStr != null && !startPortStr.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,93,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,94,startPort = Integer.valueOf(startPortStr) + 1;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,97,startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,99,catch (NumberFormatException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,104,int port = findPort(startPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,106,ra.setLength(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,108,ra.writeBytes(String.valueOf(port));
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,111,System.out.println(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,113,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,116,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,118,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,119,lock.release();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,121,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,126,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,127,ra.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,129,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,141,private static int findPort(int startPort) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,142,for (int port = startPort; port <= MAX_PORT; port++) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,144,return port;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,147,return 0;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,156,private static boolean isAvailable(int port) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,157,ServerSocket sock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,159,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,160,sock = new ServerSocket(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,162,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,164,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,165,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,167,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,168,if (sock != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,169,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,170,sock.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,172,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,61,private boolean noJMX;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,139,case "-nojmx":
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,140,noJMX = true;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,142,break;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/CommandLineTransformer.java,164,addArgWithValue(sb, "NO_JMX", formatBooleanValue(noJMX));
