File,Line_number,SRC
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,38,import javax.jms.IllegalStateException;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,166,PooledSession result;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,167,result = (PooledSession) pool.createSession(transacted, ackMode);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,62,private MessageProducer producer;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,63,private TopicPublisher publisher;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,64,private QueueSender sender;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,66,private Session session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,74,this.session = session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,137,if (session != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,139,session.close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,272,if (session instanceof XASession) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,273,return ((XASession) session).getXAResource();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,286,session.run();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,375,if (session == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,376,throw new IllegalStateException("The session has already been closed");
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,378,return session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,389,if (producer == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,391,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,392,if (producer == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,393,producer = getInternalSession().createProducer(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,398,result = producer;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,414,if (sender == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,416,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,417,if (sender == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,418,sender = ((QueueSession) getInternalSession()).createSender(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,423,result = sender;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,439,if (publisher == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,441,synchronized (this) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,442,if (publisher == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,443,publisher = ((TopicSession) getInternalSession()).createPublisher(null);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,448,result = publisher;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,485,return "PooledSession { " + session + " }";
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,19,import java.io.StringReader;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,25,import javax.xml.xpath.XPathExpressionException;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,28,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,29,import org.apache.activemq.util.ByteArrayInputStream;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,30,import org.xml.sax.InputSource;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,35,private final javax.xml.xpath.XPathExpression expression;
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,38,public JAXPXPathEvaluator(String xpathExpression) {
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,40,try {
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,41,XPath xpath = FACTORY.newXPath();
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,42,expression = xpath.compile(xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,44,throw new RuntimeException("Invalid XPath expression: " + xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,64,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-broker/src/main/java/org/apache/activemq/filter/JAXPXPathEvaluator.java,73,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,19,import java.io.StringReader;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,26,import javax.xml.xpath.XPathExpressionException;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,29,import org.apache.activemq.command.Message;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,30,import org.apache.activemq.util.ByteArrayInputStream;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,32,import org.xml.sax.InputSource;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,37,private final javax.xml.xpath.XPathExpression expression;
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,40,public XalanXPathEvaluator(String xpathExpression) {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,42,try {
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,43,XPath xpath = FACTORY.newXPath();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,44,expression = xpath.compile(xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,46,throw new RuntimeException("Invalid XPath expression: " + xpathExpression);
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,66,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-broker/src/main/java/org/apache/activemq/filter/XalanXPathEvaluator.java,75,return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue();
activemq-client/src/main/java/org/apache/activemq/filter/XPathExpression.java,78,return c.getConstructor(new Class[] {String.class});
activemq-client/src/main/java/org/apache/activemq/filter/XPathExpression.java,83,return (XPathEvaluator)EVALUATOR_CONSTRUCTOR.newInstance(new Object[] {xpath});
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/ReplicatedLevelDBStoreViewMBean.java,37,String getZkSessionTmeout();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,22,import java.io.FilterOutputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,28,import java.util.zip.DeflaterOutputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,30,import java.util.zip.InflaterInputStream;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,134,if (compressed) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,837,ActiveMQConnection connection = getConnection();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,838,if (connection != null && connection.isUseCompression()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,839,compressed = true;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommandSupport.java,45,arguments.add(0, "--jmxlocal");
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,55,locked = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1335,sd.orderIndex.put(
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,613,DeliveryState remoteState = delivery.getRemoteState();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,651,delivery.disposition(Accepted.getInstance());
activemq-broker/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,213,env.put(Context.SECURITY_PRINCIPAL, user);
activemq-broker/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,214,env.put(Context.SECURITY_CREDENTIALS, password);
activemq-broker/src/main/java/org/apache/activemq/security/LDAPAuthorizationMap.java,472,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-broker/src/main/java/org/apache/activemq/security/LDAPAuthorizationMap.java,475,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,128,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,131,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,193,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,322,doRFC2254Encoding(dn), username
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,21,import java.util.Queue;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,24,import java.util.concurrent.ConcurrentLinkedQueue;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,73,protected final Queue<ConsumerInfo> consumers = new ConcurrentLinkedQueue<ConsumerInfo>();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,106,consumers.offer(info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,151,for (Iterator<ConsumerInfo> iter = consumers.iterator(); iter.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,152,ConsumerInfo value = iter.next();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,153,ActiveMQTopic topic = AdvisorySupport.getConsumerAdvisoryTopic(value.getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,154,fireConsumerAdvisory(context, value.getDestination(), topic, value, info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,269,consumers.remove(info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,626,public Queue<ConsumerInfo> getAdvisoryConsumers() {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,627,return consumers;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,110,protected IdGenerator idGenerator;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,383,idGenerator = new IdGenerator();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,434,if (localBridgeStarted.compareAndSet(false, true)) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,519,if (remoteBridgeStarted.compareAndSet(false, true)) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,811,for (Iterator i = subscriptionMapByLocalId.values().iterator(); i.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,812,DemandSubscription ds = (DemandSubscription) i.next();
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,48,return rv == null ? null : rv;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,65,if (lv == null) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,66,return null;
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,68,if (!lv.booleanValue()) {
activemq-client/src/main/java/org/apache/activemq/filter/LogicExpression.java,73,return rv == null ? null : rv;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,399,Integer rc = (Integer) TypeConversionSupport.convert(value, Integer.class);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,405,else {
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,27,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,28,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,30,import java.io.FileInputStream;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,31,import java.io.InputStream;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,32,import java.net.URI;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,33,import java.security.KeyStore;
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,37,public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) {
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,38,super(wireFormat, remoteUrl);
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,53,SSLSocketFactory sslSocketFactory =
activemq-http/src/main/java/org/apache/activemq/transport/https/HttpsClientTransport.java,54,new SSLSocketFactory((javax.net.ssl.SSLSocketFactory) javax.net.ssl.SSLSocketFactory.getDefault(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,55,public class JmsFrameTranslator extends LegacyFrameTranslator implements
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,56,BrokerContextAware {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,62,public ActiveMQMessage convertFrame(ProtocolConverter converter,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,63,StompFrame command) throws JMSException, ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,66,String transformation = headers.get(Stomp.Headers.TRANSFORMATION);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,67,if (headers.containsKey(Stomp.Headers.CONTENT_LENGTH) || transformation.equals(Stomp.Transformations.JMS_BYTE.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,74,switch (Stomp.Transformations.getValue(transformation)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,75,case JMS_OBJECT_XML:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,76,in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,77,msg = createObjectMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,78,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,79,case JMS_OBJECT_JSON:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,80,in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,81,msg = createObjectMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,82,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,83,case JMS_MAP_XML:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,84,in = new XppReader(new StringReader(text), XppFactory.createDefaultParser());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,85,msg = createMapMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,86,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,87,case JMS_MAP_JSON:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,88,in = new JettisonMappedXmlDriver().createReader(new StringReader(text));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,89,msg = createMapMessage(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,90,break;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,91,default:
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,92,throw new Exception("Unkown transformation: " + transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,95,command.getHeaders().put(Stomp.Headers.TRANSFORMATION_ERROR, e.getMessage());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,99,FrameTranslator.Helper.copyStandardHeadersFromFrameToMessage(converter, command, msg, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,104,public StompFrame convertMessage(ProtocolConverter converter,
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,105,ActiveMQMessage message) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,108,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,109,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,110,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,111,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,113,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,114,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,116,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,117,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,119,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_OBJECT_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,123,command.setContent(marshall(msg.getObject(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,125,.getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,126,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,129,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,130,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,131,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,132,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,134,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,135,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,137,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,138,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,140,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_MAP_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,144,command.setContent(marshall((Serializable)msg.getContentMap(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,145,headers.get(Stomp.Headers.TRANSFORMATION)).getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,146,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,148,AdvisorySupport.ADIVSORY_MESSAGE_TYPE.equals(message.getType())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,150,StompFrame command = new StompFrame();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,151,command.setAction(Stomp.Responses.MESSAGE);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,152,Map<String, String> headers = new HashMap<String, String>(25);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,153,command.setHeaders(headers);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,155,FrameTranslator.Helper.copyStandardHeadersFromMessageToFrame(
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,156,converter, message, command, this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,158,if (!headers.containsKey(Stomp.Headers.TRANSFORMATION)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,159,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,162,if (headers.get(Stomp.Headers.TRANSFORMATION).equals(Stomp.Transformations.JMS_XML.toString())) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,163,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_XML.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,165,headers.put(Stomp.Headers.TRANSFORMATION, Stomp.Transformations.JMS_ADVISORY_JSON.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,168,String body = marshallAdvisory(message.getDataStructure(),
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,169,headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,171,return command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,173,return super.convertMessage(converter, message);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,202,Map<String, Object> map = (Map<String, Object>)getXStream().unmarshal(in);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,286,public  BrokerContext getBrokerContext() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,207,return findTranslator(header, null);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,210,protected FrameTranslator findTranslator(String header, ActiveMQDestination destination) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,214,translator = (FrameTranslator) FRAME_TRANSLATOR_FINDER
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,215,.newInstance(header);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,217,if (destination != null && AdvisorySupport.isAdvisoryTopic(destination)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,897,return findTranslator(message.getStringProperty(Stomp.Headers.TRANSFORMATION), message.getDestination()).convertMessage(this, message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,368,XAException e = new XAException("Transaction '" + xid + "' has not been started.");
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,369,e.errorCode = XAException.XAER_NOTA;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,92,XAException xae = new XAException("STORE COMMIT FAILED: Transaction rolled back");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,93,xae.errorCode = XAException.XA_RBOTHER;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,100,XAException xae = new XAException("Cannot call " + callName + " now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,101,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,107,XAException xae = new XAException("Cannot do 2 phase commit if the transaction has not been prepared");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,108,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,121,XAException xae = new XAException("PRE-PREPARE FAILED: Transaction rolled back");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,122,xae.errorCode = XAException.XA_RBOTHER;
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,158,throw new XAException("Invalid state");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,170,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,171,xae.errorCode = XAException.XAER_RMERR;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,799,xae.errorCode = XAException.XAER_RMERR;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,93,boolean answer = index >= firstIndex;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,122,firstIndex += BitArray.LONG_SIZE;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,146,if (firstIndex < 0) {
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,147,firstIndex = (int) (index - (index % BitArray.LONG_SIZE));
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,149,answer = (int)((index - firstIndex) / BitArray.LONG_SIZE);
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,162,if (firstIndex >= 0) {
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,163,answer = (int)((index - firstIndex) - (BitArray.LONG_SIZE * getBin(index)));
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,171,if (firstIndex >=0) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,646,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,647,LOG.debug("Recover: " + flag);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,653,final FailoverTransport failoverTransport = this.connection.getTransport().narrow(FailoverTransport.class);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,654,if (failoverTransport != null && !failoverTransport.isConnected()) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,657,xaException.errorCode = XAException.XAER_RMERR;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,658,throw xaException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,671,LOG.trace("recover({})={}", flag, answer);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,656,XAException xaException = new XAException("Failover transport not connected: " + this.getConnection().getTransport());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,358,setConnection(original);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2559,result = scheduler = new Scheduler("ActiveMQConnection["+info.getConnectionId().getValue()+"] Scheduler");
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2560,scheduler.start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2218,return createInputStream(dest, messageSelector, noLocal,  -1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1416,if (!session.isTransacted()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1417,LOG.warn("Duplicate non transacted dispatch to consumer: "  + getConsumerId() + ", poison acking: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1418,posionAck(md, "Duplicate non transacted delivery to " + getConsumerId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1421,LOG.debug(getConsumerId() + " tracking transacted redelivery of duplicate: " + md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1423,boolean needsPoisonAck = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1424,synchronized (deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1425,if (previouslyDeliveredMessages != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1426,previouslyDeliveredMessages.put(md.getMessage().getMessageId(), true);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1430,needsPoisonAck = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1433,if (needsPoisonAck) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1434,LOG.warn("acking duplicate delivery as poison, redelivery must be pending to another"
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1435,+ " consumer on this connection, failoverRedeliveryWaitPeriod="
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1436,+ failoverRedeliveryWaitPeriod + ". Message: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1437,posionAck(md, "Duplicate dispatch with transacted redeliver pending on another consumer, connection: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1438,+ session.getConnection().getConnectionInfo().getConnectionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1440,if (transactedIndividualAck) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1441,immediateIndividualTransactedAck(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1443,session.sendAck(new MessageAck(md, MessageAck.DELIVERED_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,785,ack.setFirstMessageId(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,786,ack.setLastMessageId(node.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,213,long seq = persistenceAdapter.getStoreSequenceIdForMessageId(ack.getLastMessageId(), destination)[0];
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,187,try {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,189,registry.getRegistryMutext().wait(timeout);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,192,broker = registry.lookup(brokerName);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,67,IntrospectionSupport.getProperties(this, props, POOL_PROPS_PREFIX);
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,147,Map<ActiveMQDestination, NetworkDestinationView> gc = null;
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,150,if (gc == null) {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,151,gc = new HashMap<ActiveMQDestination, NetworkDestinationView>();
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,153,gc.put(entry.getKey(), entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,157,if (gc != null) {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,158,for (Map.Entry<ActiveMQDestination, NetworkDestinationView> entry : gc.entrySet()) {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,159,map.remove(entry.getKey());
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,160,ObjectName objectName = destinationObjectNameMap.get(entry.getKey());
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,161,if (objectName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,162,try {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,163,if (objectName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,164,brokerService.getManagementContext().unregisterMBean(objectName);
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,167,LOG.debug("Network bridge could not be unregistered in JMX: {}", e.getMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/network/MBeanBridgeDestination.java,170,entry.getValue().close();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,32,import javax.jms.QueueConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,76,private List<DestinationBridge> inboundBridges = new CopyOnWriteArrayList<DestinationBridge>();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,77,private List<DestinationBridge> outboundBridges = new CopyOnWriteArrayList<DestinationBridge>();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,89,DestinationBridge bridge = (DestinationBridge)lru.getValue();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,483,if (this.foreignConnection.compareAndSet((QueueConnection)connection, null)) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,617,private ThreadFactory factory = new ThreadFactory() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,267,createConnection();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,159,private long waitForSlaveTimeout = 600000L;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,251,private String configurationUrl;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,918,while (!isStarted() && !stopped.get() && !waitSucceeded) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AMQPProtocolDiscriminator.java,62,static final private ArrayList<Command> pendingCommands = new ArrayList<Command>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,563,scheduler.schedualPeriodically(expireMessagesTask, getExpireMessagesPeriod());
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,34,public Scheduler (String name) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,38,public void executePeriodically(final Runnable task, long period) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,39,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,40,timer.schedule(timerTask, period, period);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,41,timerTasks.put(task, timerTask);
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,51,public synchronized void schedualPeriodically(final Runnable task, long period) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,81,if (this.timer != null) {
activemq-client/src/main/java/org/apache/activemq/thread/Scheduler.java,82,this.timer.cancel();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,260,LOG.warn("Transport (" + transport + ") failed, reason:  "
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,199,connectionsPool.setLifo(true);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,206,connectionsPool.setLifo(false);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,209,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,216,while (connection == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,217,connection = connectionsPool.borrowObject(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,218,synchronized (connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,219,if (connection.getConnection() != null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,220,connection.incrementReferenceCount();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,221,break;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,225,connectionsPool.returnObject(key, connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,226,connection = null;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,230,throw createJmsException("Error while attempting to retrieve a connection from the pool", e);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,233,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,234,connectionsPool.returnObject(key, connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,236,throw createJmsException("Error when returning connection to the pool", e);
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,30,private LinkedList<BitArray> list;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,32,private int firstIndex = -1;
activemq-client/src/main/java/org/apache/activemq/util/BitArrayBin.java,172,result = firstIndex;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,252,destinationsLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,253,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,254,return destinations;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,256,destinationsLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,103,LOG.warn("{} - cursor got duplicate: {}, {}", new Object[]{ this, message.getMessageId(), message.getPriority() });
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,104,duplicate(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,198,LOG.debug(this + " duplicate add {}", node.getMessage(), new Throwable("duplicated detected"));
activemq-broker/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,79,Destination existing = this.getDestinationMap().get(destination);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,134,if (context != null && context.getXid() != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,135,message.getMessageId().setEntryLocator(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,137,onAdd(messageId, sequenceId, message.getPriority());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,284,Set<Destination> destinationSet = regionBroker.getDestinations(convert(commandDestination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,285,for (Destination destination : destinationSet) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,103,case QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,104,return new ActiveMQQueue(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,105,case TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,106,return new ActiveMQTopic(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,107,case TEMP_QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,108,return new ActiveMQTempQueue(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,109,case TEMP_TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,110,return new ActiveMQTempTopic(name);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,111,default:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,112,throw new IllegalArgumentException("Invalid default destination type: " + defaultType);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,121,return (ActiveMQDestination)dest;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,136,return new ActiveMQTempQueue(((TemporaryQueue)dest).getQueueName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,139,return new ActiveMQTempTopic(((TemporaryTopic)dest).getTopicName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,142,return new ActiveMQQueue(((Queue)dest).getQueueName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,145,return new ActiveMQTopic(((Topic)dest).getTopicName());
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,170,return compare(this, (ActiveMQDestination)that);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,225,final int len = physicalName.length();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,229,for (int i = 0; i < len; i++) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,325,ActiveMQDestination d = (ActiveMQDestination)o;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,348,this.options = (Map<String, String>)in.readObject();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,353,case QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,354,return "Queue";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,355,case TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,356,return "Topic";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,357,case TEMP_QUEUE_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,358,return "TempQueue";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,359,case TEMP_TOPIC_TYPE:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,360,return "TempTopic";
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,361,default:
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,362,throw new IllegalArgumentException("Invalid destination type: " + getDestinationType());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,664,if (tracked == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,351,for (Iterator iter = headers.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,352,Map.Entry entry = (Map.Entry) iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,353,msg.setObjectProperty((String) entry.getKey(), entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,373,connection.close();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,90,for (String selector : selectors) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,91,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,92,final BooleanExpression expression = getExpression(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,93,matches = expression.matches(msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,94,if (matches) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,95,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,98,LOG.error(e.getMessage(), e);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,43,return load(classDesc.getName(), cl, inLoader);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,54,return Proxy.getProxyClass(cl, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Proxy.getProxyClass(inLoader, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,62,return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
activemq-client/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,67,throw new ClassNotFoundException(null, e);
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,97,public XStream getXStream() {
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,113,XStream xstream = new XStream();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/JmsFrameTranslator.java,255,xstream = new XStream();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,86,return e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,273,InputStream in = null;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,275,if ((in = BrokerService.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,276,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,277,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,278,version = reader.readLine();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,41,Map properties = loadProperties(brokerURI);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,51,protected Map loadProperties(URI brokerURI) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,58,if (file.exists()) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,75,if (inputStream != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,76,properties.load(inputStream);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,77,inputStream.close();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,81,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,82,Properties systemProperties = System.getProperties();
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,83,properties.putAll(systemProperties);
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,87,return properties;
activemq-broker/src/main/java/org/apache/activemq/broker/PropertiesBrokerFactory.java,98,protected BrokerService createBrokerService(URI brokerURI, Map properties) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,263,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,264,int len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,265,while (len >= 0) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,266,out.write(buffer, 0, len);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,267,len = in.read(buffer);
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,269,in.close();
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,270,out.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,130,InputStream tsStream = getInputStream(trustStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,132,trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,133,TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,135,tmf.init(trustedCertStore);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,136,trustStoreManagers = tmf.getTrustManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,149,ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,150,ks.load(bin, keyStorePassword.toCharArray());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,152,keystoreManagers = kmf.getKeyManagers();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,162,InputStream in = getInputStream(fileName);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,163,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,164,byte[] buf = new byte[512];
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,165,int i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,166,while (i > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,167,out.write(buf, 0, i);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,168,i = in.read(buf);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,170,in.close();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,171,return out.toByteArray();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,43,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,58,OutputStream os = connection.getOutputStream();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,60,byte[] buf = new byte[transferPolicy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,61,for (int c = fis.read(buf); c != -1; c = fis.read(buf)) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,62,os.write(buf, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,63,os.flush();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,65,os.close();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,66,fis.close();
activemq-client/src/main/java/org/apache/activemq/blob/FTPBlobUploadStrategy.java,42,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,68,return uploadStream(message, new FileInputStream(file));
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,77,FileOutputStream out = new FileOutputStream(f);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,78,byte[] buffer = new byte[policy.getBufferSize()];
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,79,for (int c = in.read(buffer); c != -1; c = in.read(buffer)) {
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,80,out.write(buffer, 0, c);
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,81,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,83,out.flush();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,84,out.close();
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,126,String fileName = message.getJMSMessageID().replaceAll(":", "_");
activemq-client/src/main/java/org/apache/activemq/blob/FileSystemBlobStrategy.java,127,return new File(rootFile, fileName);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,194,FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,195,destinationChannel.write(buf);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,196,destinationChannel.close();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,218,FileChannel sourceChannel = new FileInputStream(from).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,219,FileChannel destinationChannel = new FileOutputStream(dest).getChannel();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,220,sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,221,sourceChannel.close();
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,222,destinationChannel.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,91,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,94,in.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,142,InputStream is = blob.getBinaryStream();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,144,ByteArrayOutputStream os = new ByteArrayOutputStream((int)blob.length());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,145,int ch;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,146,while ((ch = is.read()) >= 0) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,147,os.write(ch);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,149,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,150,os.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,152,return os.toByteArray();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,50,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,51,InputStream is = rs.getBinaryStream(index);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,52,ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,58,is.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/StreamJDBCAdapter.java,59,os.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,199,RandomAccessFile file = new RandomAccessFile(tmpFile, "r");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,200,file.seek(diskBoundLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,201,file.read(diskBound);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,202,file.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,20,import java.io.IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,206,RandomAccessFile raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,207,raf.setLength(size);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,210,long start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,211,long now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,212,int ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,213,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,214,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,215,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,217,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,218,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,219,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,220,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,221,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,230,raf.getChannel().force(!SKIP_METADATA_UPDATE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,231,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,238,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,239,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,240,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,241,ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,242,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,243,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,244,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,246,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,247,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,248,raf.write(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,249,raf.getChannel().force(false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,250,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,251,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,257,raf.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,262,raf = new RandomAccessFile(file, "rw");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,263,start = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,264,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,265,ioCount = 0;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,266,while (true) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,267,if ((now - start) > sampleInterval) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,268,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,270,raf.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,271,for (long i = 0; i + data.length < size; i += data.length) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,272,raf.seek(i);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,273,raf.readFully(data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,274,ioCount++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,275,now = System.currentTimeMillis();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,281,raf.close();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,86,InputStream in = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,88,if ((in = ProtocolConverter.class.getResourceAsStream("/org/apache/activemq/version.txt")) != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,89,BufferedReader reader = new BufferedReader(new InputStreamReader(in));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,90,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,91,version = reader.readLine();
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,265,LOG.info("Loading properties file: " + configFile.getAbsolutePath());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClientSystem.java,266,fileProps.load(new FileInputStream(configFile));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,198,BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile)));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,199,String line;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,200,while ((line = reader.readLine()) != null) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,201,if (line.startsWith("[TP-DATA]")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,202,handleCsvData(REPORT_PLUGIN_THROUGHPUT, line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,203,parsePerfCsvData("tpdata", line.substring("[TP-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,205,handleCsvData(REPORT_PLUGIN_CPU, line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,206,parsePerfCsvData("cpudata", line.substring("[CPU-DATA]".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,208,xmlFileWriter.println("<info>" + line + "</info>");
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/reports/XmlFilePerfReportWriter.java,210,xmlFileWriter.println("<error>" + line + "</error>");
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,327,CronEntry dayOfMonth = new CronEntry("DayOfMonth", tokens.get(DAY_OF_MONTH), 1, 31);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,143,long delay = ( redeliveryCount == 0 ?
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,144,redeliveryPolicy.getInitialRedeliveryDelay() :
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,145,redeliveryPolicy.getNextRedeliveryDelay(getExistingDelay(messageReference)));
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,202,private int getExistingDelay(MessageReference messageReference) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,203,Object val = messageReference.getMessage().getProperty(REDELIVERY_DELAY);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,204,if (val instanceof Long) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,205,return ((Long)val).intValue();
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,207,return 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,31,import org.apache.activemq.DestinationDoesNotExistException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,169,dest.addSubscription(context, sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,266,return getDispatchedQueueSize() - info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,631,destination.getDestinationStatistics().getDispatched().subtract(references.size());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,940,md.getMessage().onMessageRolledBack();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,959,&& redeliveryCounter > redeliveryPolicy.getMaximumRedeliveries()) {
activemq-client/src/main/java/org/apache/activemq/RedeliveryPolicy.java,101,long nextDelay = redeliveryDelay;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,19,import java.util.Map;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,27,import org.apache.camel.converter.ObjectConverter;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,70,private ActiveMQMessage getMessage(Exchange exchange) throws Exception {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,71,ActiveMQMessage result;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,72,Message camelMessage;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,74,camelMessage = exchange.getOut();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,76,camelMessage = exchange.getIn();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,79,Map<String, Object> headers = camelMessage.getHeaders();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,86,if (camelMessage instanceof JmsMessage) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,87,JmsMessage jmsMessage = (JmsMessage) camelMessage;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,88,if (jmsMessage.getJmsMessage() instanceof ActiveMQMessage) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,89,result = (ActiveMQMessage) jmsMessage.getJmsMessage();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,91,setJmsHeaders(result, headers);
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,93,throw new IllegalStateException("Not the original message from the broker " + jmsMessage.getJmsMessage());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,99,return result;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,102,private void setJmsHeaders(ActiveMQMessage message, Map<String, Object> headers) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,103,message.setReadOnlyProperties(false);
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,105,if (entry.getKey().equalsIgnoreCase("JMSDeliveryMode")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,106,Object value = entry.getValue();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,107,if (value instanceof Number) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,108,Number number = (Number) value;
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,109,message.setJMSDeliveryMode(number.intValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,112,if (entry.getKey().equalsIgnoreCase("JmsPriority")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,113,Integer value = ObjectConverter.toInteger(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,114,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,115,message.setJMSPriority(value.intValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,118,if (entry.getKey().equalsIgnoreCase("JMSTimestamp")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,119,Long value = ObjectConverter.toLong(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,120,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,121,message.setJMSTimestamp(value.longValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,124,if (entry.getKey().equalsIgnoreCase("JMSExpiration")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,125,Long value = ObjectConverter.toLong(entry.getValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,126,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,127,message.setJMSExpiration(value.longValue());
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,130,if (entry.getKey().equalsIgnoreCase("JMSRedelivered")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,131,message.setJMSRedelivered(ObjectConverter.toBool(entry.getValue()));
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,133,if (entry.getKey().equalsIgnoreCase("JMSType")) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,134,Object value = entry.getValue();
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,135,if (value != null) {
activemq-camel/src/main/java/org/apache/activemq/camel/component/broker/BrokerProducer.java,136,message.setJMSType(value.toString());
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,22,import java.io.BufferedReader;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,25,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,54,private final ConcurrentHashMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>();
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,106,if( !isImportingUs(bundle) ) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,107,debug("The bundle does not import us: "+ bundle.getBundleId());
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,108,return;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,110,bundleWrappers.put(bundle.getBundleId(), new BundleWrapper(bundle));
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,137,Class clazz = serviceCache.get(path);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,209,|| isImportingClass(bundle, PersistenceAdapter.class);
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,212,private boolean isImportingClass(Bundle bundle, Class clazz) {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,213,try {
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,214,return bundle.loadClass(clazz.getName())==clazz;
activemq-broker/src/main/java/org/apache/activemq/util/osgi/Activator.java,216,return false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,60,List<PersistenceAdapter> adapters = new LinkedList<PersistenceAdapter>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,108,void doCommitAddOp(TransactionContext c, long storeSequenceIdForMessageId) throws SQLException, IOException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,71,final Set<Long> recoveredAdditions = new LinkedHashSet<Long>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,127,this.isPrioritizedMessages() ? message.getPriority() : 0, context != null ? context.getXid() : null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,156,recoveredAdditions.add(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,297,if (!recoveredAdditions.isEmpty()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,298,for (Iterator<Long> iterator = recoveredAdditions.iterator(); iterator.hasNext(); )  {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,299,Long sequenceId = iterator.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,300,iterator.remove();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,301,maxReturned--;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,302,if (sequenceId <= lastRecoveredSequenceId.get()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,303,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(adapter.doGetMessageById(c, sequenceId)));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,304,LOG.trace("recovered add {} {}", this, msg.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,305,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,773,public void commitAdd(ConnectionContext context, MessageId messageId) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,777,getAdapter().doCommitAddOp(c, sequence);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,93,updateFromPreparedStateCommands.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,95,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,96,return addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,100,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,101,return addMessageCommand.getMessageStore();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,105,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,106,JDBCPersistenceAdapter jdbcPersistenceAdapter = (JDBCPersistenceAdapter) persistenceAdapter;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,107,Message message = addMessageCommand.getMessage();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,108,jdbcPersistenceAdapter.commitAdd(context, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,109,((JDBCMessageStore)addMessageCommand.getMessageStore()).onAdd(
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,112,message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,117,public void setMessageStore(MessageStore messageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,118,throw new RuntimeException("MessageStore already known");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,122,tx.messages = updateFromPreparedStateCommands;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,123,preparedTransactions.put(txid, tx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,152,((JDBCPersistenceAdapter) persistenceAdapter).commitAdd(ctx,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,153,removeMessageCommand.getMessageAck().getLastMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,175,tx.add(new AddMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,176,MessageStore messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,178,public Message getMessage() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,179,return message;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,183,public MessageStore getMessageStore() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,184,return messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,188,public void run(ConnectionContext context) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,189,((JDBCPersistenceAdapter)persistenceAdapter).commitAdd(null, message.getMessageId());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,194,public void setMessageStore(MessageStore messageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,195,this.messageStore = messageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,620,+ " SET XID = NULL WHERE ID = ?";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1043,public void doCommitAddOp(TransactionContext c, long sequence) throws SQLException, IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1659,final TreeSet<Integer> gcCandidates = new TreeSet<Integer>(gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1666,if (completeFileSet.contains(referencedFileId) && !gcCandidates.contains(referencedFileId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,594,public void preProcessDispatch(MessageDispatch messageDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,595,Message message = messageDispatch.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1138,processRemoveConnection(cs.getInfo().getConnectionId(), 0l);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,24,import javax.jms.Connection;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,26,import javax.jms.JMSException;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,27,import javax.jms.Session;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,43,public class ConnectionPool {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1923,LOG.error("Memory Usage for the Broker (" + memLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1985,LOG.error("Temporary Store limit is " + storeLimit / (1024 * 1024) +
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,109,if (!isFull() && matched.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,112,dispatch(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,113,setSlowConsumer(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,115,if (info.getPrefetchSize() > 1 && matched.size() > info.getPrefetchSize()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,117,if (!isSlowConsumer()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,118,LOG.warn("{}: has twice its prefetch limit pending, without an ack; it appears to be slow", toString());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,119,setSlowConsumer(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,120,for (Destination dest: destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,121,dest.slowConsumer(getContext(), this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,125,if (maximumPendingMessages != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,126,boolean warnedAboutWait = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,127,while (active) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,128,synchronized (matchedListMutex) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,154,synchronized (matchedListMutex) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,199,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,187,public void deactivate(boolean keepDurableSubsActive) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,217,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,218,if (count != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,219,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,221,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,550,if (lastDeiveredSequenceId != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,555,LOG.debug("found lastDeliveredSeqID: {}, message reference: {}", lastDeiveredSequenceId, ref.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,206,removed.deactivate(false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,150,private long lastDeliveredSequenceId;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,50,private final AtomicBoolean monitorStarted = new AtomicBoolean(false);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,60,private boolean keepAliveResponseRequired;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,110,startMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,115,stopMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,152,stopMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,176,public boolean isKeepAliveResponseRequired() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,177,return this.keepAliveResponseRequired;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,180,public void setKeepAliveResponseRequired(boolean value) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,181,this.keepAliveResponseRequired = value;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,184,public boolean isMonitorStarted() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,185,return this.monitorStarted.get();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,196,synchronized void startMonitorThread() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,199,if (protocolConverter == null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,200,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,203,if (monitorStarted.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,204,return;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,207,if (readKeepAliveTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,211,if (readKeepAliveTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,212,monitorStarted.set(true);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,219,if (readKeepAliveTime > 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,220,READ_CHECK_TIMER.schedule(readCheckerTask, readKeepAliveTime, readGraceTime);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,226,synchronized void stopMonitorThread() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,227,if (monitorStarted.compareAndSet(true, false)) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,228,if (readCheckerTask != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,229,readCheckerTask.cancel();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,771,monitor.startMonitorThread();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,139,if( stopped.compareAndSet(false, true) ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,994,if (checkpointThread != null && !checkpointThread.isAlive()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,238,if (getPrefetchSize() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,240,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,241,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,242,int newExtension = Math.max(0, currentExtension - index);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,243,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,244,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,249,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,250,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,251,int newExtension = Math.max(currentExtension, index);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,252,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,253,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,287,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,288,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,289,int newExtension = Math.max(0, currentExtension - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,290,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,291,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,316,if (usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,519,return dispatched.size() - prefetchExtension.get() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,540,return info.getPrefetchSize() + prefetchExtension.get() - dispatched.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,175,private boolean messagePrioritySupported = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/group/CachedMessageGroupMap.java,35,cache = new LRUMap<String, ConsumerId>(size);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,122,if (sub.isActive()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,123,throw new JMSException("Durable consumer is in use for client: " + clientId + " and subscriptionName: " + subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,156,+ " subscriberName: " + key.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,173,sub.deactivate(keepDurableSubsActive);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpHeader.java,34,setBuffer(buffer);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpHeader.java,74,if (!value.startsWith(PREFIX) || value.length() != 8) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpHeader.java,82,return buffer.toString();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,32,private final AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioSslTransport.java,52,amqpNioTransportHelper.processCommand(plain);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,50,private final AmqpNioTransportHelper amqpNioTransportHelper = new AmqpNioTransportHelper(this);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransport.java,114,amqpNioTransportHelper.processCommand(inputBuffer);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,17,package org.apache.activemq.transport.amqp;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,19,import java.io.ByteArrayInputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,20,import java.io.DataInputStream;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,21,import java.io.IOException;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,22,import java.nio.ByteBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,24,import org.apache.activemq.transport.TransportSupport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,25,import org.fusesource.hawtbuf.Buffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,26,import org.slf4j.Logger;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,27,import org.slf4j.LoggerFactory;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,29,public class AmqpNioTransportHelper {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,31,private final DataInputStream amqpHeaderValue = new DataInputStream(new ByteArrayInputStream(new byte[] { 'A', 'M', 'Q', 'P' }));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,32,private final Integer AMQP_HEADER_VALUE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,33,private static final Logger LOG = LoggerFactory.getLogger(AmqpNioTransportHelper.class);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,34,protected int nextFrameSize = -1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,35,protected ByteBuffer currentBuffer;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,36,private boolean magicConsumed = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,37,private final TransportSupport transportSupport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,39,public AmqpNioTransportHelper(TransportSupport transportSupport) throws IOException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,40,AMQP_HEADER_VALUE = amqpHeaderValue.readInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,41,this.transportSupport = transportSupport;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,44,protected void processCommand(ByteBuffer plain) throws Exception {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,47,if (nextFrameSize == -1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,50,if (plain.remaining() < 4) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,51,if (currentBuffer == null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,52,currentBuffer = ByteBuffer.allocate(4);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,56,while (currentBuffer.hasRemaining() && plain.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,57,currentBuffer.put(plain.get());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,61,if (currentBuffer.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,62,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,64,currentBuffer.flip();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,65,nextFrameSize = currentBuffer.getInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,70,if (currentBuffer != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,73,while (currentBuffer.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,74,currentBuffer.put(plain.get());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,77,currentBuffer.flip();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,78,nextFrameSize = currentBuffer.getInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,80,nextFrameSize = plain.getInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,87,while (true) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,89,if (nextFrameSize == AMQP_HEADER_VALUE) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,90,nextFrameSize = handleAmqpHeader(plain);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,91,if (nextFrameSize == -1) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,92,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,95,validateFrameSize(nextFrameSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,101,if (currentBuffer == null || (currentBuffer.limit() == 4)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,102,currentBuffer = ByteBuffer.allocate(nextFrameSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,103,currentBuffer.putInt(nextFrameSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,106,if (currentBuffer.remaining() >= plain.remaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,107,currentBuffer.put(plain);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,109,byte[] fill = new byte[currentBuffer.remaining()];
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,110,plain.get(fill);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,111,currentBuffer.put(fill);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,117,if (currentBuffer.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,118,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,120,currentBuffer.flip();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,121,LOG.debug("Calling doConsume with position {} limit {}", currentBuffer.position(), currentBuffer.limit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,122,transportSupport.doConsume(AmqpSupport.toBuffer(currentBuffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,123,currentBuffer = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,124,nextFrameSize = -1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,127,if (plain.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,128,if (plain.remaining() < 4) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,129,currentBuffer = ByteBuffer.allocate(4);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,130,while (currentBuffer.hasRemaining() && plain.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,131,currentBuffer.put(plain.get());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,133,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,135,nextFrameSize = plain.getInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,138,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,144,private void validateFrameSize(int frameSize) throws IOException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,145,if (nextFrameSize > AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,146,throw new IOException("Frame size of " + nextFrameSize + "larger than max allowed " + AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,150,private int handleAmqpHeader(ByteBuffer plain) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,151,int nextFrameSize;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,153,LOG.debug("Consuming AMQP_HEADER");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,154,currentBuffer = ByteBuffer.allocate(8);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,155,currentBuffer.putInt(AMQP_HEADER_VALUE);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,156,while (currentBuffer.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,157,currentBuffer.put(plain.get());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,159,currentBuffer.flip();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,160,if (!magicConsumed) { // The first case we see is special and has to be handled differently
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,161,transportSupport.doConsume(new AmqpHeader(new Buffer(currentBuffer)));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,162,magicConsumed = true;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,164,transportSupport.doConsume(AmqpSupport.toBuffer(currentBuffer));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,166,currentBuffer = null;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,168,if (plain.hasRemaining()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,169,if (plain.remaining() < 4) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,170,nextFrameSize = 4;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,172,nextFrameSize = plain.getInt();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,175,nextFrameSize = -1;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportHelper.java,178,return nextFrameSize;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,254,amqpTransport.getWireFormat().magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,259,amqpTransport.getWireFormat().magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,77,boolean magicRead = false;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,85,return new AmqpHeader(magic);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,206,private boolean messagePrioritySupported = true;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,269,this.transactedIndividualAck = session.connection.isTransactedIndividualAck() || this.nonBlockingRedelivery;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,231,long x = s1.getConsumerInfo().getLastDeliveredSequenceId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,232,long y = s2.getConsumerInfo().getLastDeliveredSequenceId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,433,LOG.debug("{} add sub: {}, dequeues: {}, dispatched: {}, inflight: {}", new Object[]{ getActiveMQDestination().getQualifiedName(), getDestinationStatistics().getDequeues().getCount(), getDestinationStatistics().getDispatched().getCount(), getDestinationStatistics().getInflight().getCount() });
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,504,LOG.debug("{} remove sub: {}, lastDeliveredSeqId: {}, dequeues: {}, dispatched: {}, inflight: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2062,consumersLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2071,consumersLock.writeLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2157,subscription.getConsumerInfo().setLastDeliveredSequenceId(subscription.getConsumerInfo().getLastDeliveredSequenceId() - 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2173,subs.getConsumerInfo().setLastDeliveredSequenceId(subs.getConsumerInfo().getLastDeliveredSequenceId() + 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFile.java,84,IOHelper.moveFile(file,targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,23,import java.util.ArrayList;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,24,import java.util.Collections;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,25,import java.util.HashMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,26,import java.util.Iterator;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,27,import java.util.LinkedHashMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,28,import java.util.List;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,29,import java.util.Map;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,30,import java.util.Set;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,31,import java.util.Timer;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,32,import java.util.TimerTask;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,33,import java.util.TreeMap;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,98,protected File directoryArchive = new File(DEFAULT_ARCHIVE_DIRECTORY);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,437,dataFile.move(getDirectoryArchive());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,438,LOG.debug("moved data file " + dataFile + " to " + getDirectoryArchive());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,441,LOG.debug("Discarded data file " + dataFile);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,443,LOG.warn("Failed to discard data file " + dataFile.getFile());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1380,Transport t = transport;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1381,if (null != t){
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1382,ServiceSupport.dispose(t);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1423,Transport t = this.transport;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1424,if (null != t){
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1425,ServiceSupport.dispose(t);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,203,IOException ioe=new IOException("Unexpected error occured: " + e);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1132,MessageDispatch md = dispatchedInTx.getFirst();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1133,MessageAck pendingTxAck = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, dispatchedInTx.size());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1134,pendingTxAck.setTransactionId(md.getMessage().getTransactionId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1135,pendingTxAck.setFirstMessageId(dispatchedInTx.getLast().getMessage().getMessageId());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1137,LOG.trace("Sending commit Ack to ActiveMQ: {}", pendingTxAck);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1139,dispatchedInTx.clear();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1141,sendToActiveMQ(pendingTxAck, new ResponseHandler() {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1143,public void onResponse(IAmqpProtocolConverter converter, Response response) throws IOException {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1144,if (response.isException()) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1146,Throwable exception = ((ExceptionResponse) response).getException();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1147,exception.printStackTrace();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1148,sender.close();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1151,pumpProtonToSocket();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,65,import org.apache.qpid.proton.amqp.messaging.Accepted;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,66,import org.apache.qpid.proton.amqp.messaging.AmqpValue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,67,import org.apache.qpid.proton.amqp.messaging.Modified;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,68,import org.apache.qpid.proton.amqp.messaging.Rejected;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,69,import org.apache.qpid.proton.amqp.messaging.Released;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,70,import org.apache.qpid.proton.amqp.messaging.Target;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,71,import org.apache.qpid.proton.amqp.messaging.TerminusDurability;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,646,if (receiver.getCredit() <= (prefetch * .2)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,647,LOG.trace("Sending more credit ({}) to producer: {}", prefetch - receiver.getCredit(), producerId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,648,receiver.flow(prefetch - receiver.getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,659,if (receiver.getCredit() <= (prefetch * .2)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,660,LOG.trace("Sending more credit ({}) to producer: {}", prefetch - receiver.getCredit(), producerId);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,661,receiver.flow(prefetch - receiver.getCredit());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,910,sendToActiveMQ(new RemoveInfo(consumerId), null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1094,writeFile.sync();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,56,private AtomicBoolean failed = new AtomicBoolean(false);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,62,public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,63,super(copy);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,64,connectFailures = copy.connectFailures;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,65,reconnectDelay = copy.reconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,66,connectTime = copy.connectTime;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,67,failed.set(copy.failed.get());
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,96,taskRunner.shutdown();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1082,if (txState.getOutcome() instanceof DeliveryState) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1083,LOG.trace("onDelivery: TX delivery state = {}", state);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1084,state = (DeliveryState) txState.getOutcome();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1085,if (state instanceof Accepted) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1087,delivery.disposition(new Accepted());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,314,((AmqpDeliveryListener) link.getContext()).onClose();
activemq-client/src/main/java/org/apache/activemq/filter/AnyDestination.java,31,physicalName = "0";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,373,AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,430,AckEntry pendingAck = this.pedingAcks.get(ackId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,21,import java.util.LinkedList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,43,private final List<Destination> destinations = new LinkedList<Destination>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,86,for (Destination destination : destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,99,destinations.removeAll(disposed);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,167,this.destinations.add(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,887,broker.preProcessDispatch(messageDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2026,if (!pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2029,pagedInPendingDispatch = doActualDispatch(pagedInPendingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2034,if (list != null && !list.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2035,if (pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2036,pagedInPendingDispatch.addAll(doActualDispatch(list));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2038,for (MessageReference qmr : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2039,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2040,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2043,doWakeUp = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,609,LOG.error("Failed to persist JMSRedeliveryFlag on {} in {}", message.getMessageId(), message.getDestination(), error);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1326,metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1345,metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1392,metadata.lastUpdate = ackLocation;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1023,+ ", memory=" + memoryUsage.getPercentUsage() + "%, size=" + size + ", in flight groups="
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1024,+ messageGroupOwners;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1935,destination.getPhysicalName(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,343,LOG.trace(destination.getPhysicalName() + " resetBatching, existing last recovered seqId: " + lastRecoveredSequenceId.get());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1264,messagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1281,messagesLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2763,MessageOrderCursor cursor = new MessageOrderCursor();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2864,if (highPriorityIndex.containsKey(tx, sequence)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2865,lastHighKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2866,cursor.highPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2868,lastLowKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2869,cursor.lowPriorityCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2872,LOG.warn("setBatch: sequence " + sequence + " not found in orderindex:" + this);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,32,import org.apache.activemq.command.ActiveMQDestination;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,33,import org.apache.activemq.command.ActiveMQMessage;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,34,import org.apache.activemq.command.ActiveMQTempQueue;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,35,import org.apache.activemq.command.Command;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,36,import org.apache.activemq.command.ConnectionError;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,37,import org.apache.activemq.command.ConnectionId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,38,import org.apache.activemq.command.ConnectionInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,39,import org.apache.activemq.command.ConsumerId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,40,import org.apache.activemq.command.ConsumerInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,41,import org.apache.activemq.command.DestinationInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,42,import org.apache.activemq.command.ExceptionResponse;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,43,import org.apache.activemq.command.LocalTransactionId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,44,import org.apache.activemq.command.MessageAck;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,45,import org.apache.activemq.command.MessageDispatch;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,46,import org.apache.activemq.command.MessageId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,47,import org.apache.activemq.command.ProducerId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,48,import org.apache.activemq.command.ProducerInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,49,import org.apache.activemq.command.RemoveInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,50,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,51,import org.apache.activemq.command.Response;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,52,import org.apache.activemq.command.SessionId;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,53,import org.apache.activemq.command.SessionInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,54,import org.apache.activemq.command.ShutdownInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,55,import org.apache.activemq.command.TransactionInfo;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,279,Link link = event.getLink();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,280,((AmqpDeliveryListener) link.getContext()).drainCheck();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,229,ConnectionContext oldContext = clientIdSet.get(clientId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,237,TransportConnection transportConnection = (TransportConnection) connection;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,625,if (message.getExpiration() != 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,626,if (message.getTimestamp() == 0) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,627,message.setTimestamp(System.currentTimeMillis());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,628,message.setExpiration(message.getTimestamp() + message.getExpiration());
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1233,sender.open();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSubscription.java,48,return new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,101,storeHasMessages = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,282,this.storeHasMessages = !this.batchList.isEmpty() || !hadSpace;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1756,private final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2318,private String key(KahaDestination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1189,while (shouldPageInMoreForBrowse(max)) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/ActiveMQJMSVendor.java,90,String destinationName = name.substring(name.lastIndexOf("://") + 3);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,231,if (context.isAllowLinkStealing()){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,232,clientIdSet.remove(clientId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,233,if (oldContext.getConnection() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,234,Connection connection = oldContext.getConnection();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,235,LOG.warn("Stealing link for clientId {} From Connection {}", clientId, oldContext.getConnection());
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,236,if (connection instanceof TransportConnection){
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,238,transportConnection.stopAsync();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,240,connection.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,243,LOG.error("Not Connection for {}", oldContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,247,+ oldContext.getConnection().getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,60,public static final int MAX_AUDIT_DEPTH = 2048;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,79,private static final int MAX_ASYNC_JOBS = 10000;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,353,long[] storedValues = persistenceAdapter.getStoreSequenceIdForMessageId(messageId, destination);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,836,long[] getStoreSequenceIdForMessageId(MessageId messageId, ActiveMQDestination destination) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,838,TransactionContext c = getTransactionContext();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,68,if (!continuation.isResumed() && !continuation.isInitial()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,43,import org.apache.activemq.broker.region.Destination;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,44,import org.apache.activemq.broker.region.RegionBroker;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,416,KahaAddMessageCommand command = new KahaAddMessageCommand();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,639,final String key = identity.toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,640,lockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,646,indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,647,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,648,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,650,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,651,StoredDestination sd = getStoredDestination(dest, tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,652,Long location = sd.messageIdIndex.get(tx, key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,653,if (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,654,sd.orderIndex.setBatch(tx, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,659,indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,662,unlockAsyncJobQueue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,680,this.localDestinationSemaphore.tryAcquire(this.maxAsyncJobs, 60, TimeUnit.SECONDS);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,125,protected int prefetch = 100;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,786,receiver.flow(prefetch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,806,receiver.flow(prefetch);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,1260,consumerInfo.setPrefetchSize(100);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,826,messageSent(messageContext.context, messageContext.message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1245,if (ref.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,56,if (n.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,58,if (!broker.isExpired(n)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,59,LOG.debug("ignoring ack {}, for already expired message: {}", ack, n);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,60,return;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,135,int maxFrameSize = AmqpWireFormat.DEFAULT_MAX_FRAME_SIZE;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpProtocolConverter.java,147,this.protonTransport.setMaxFrameSize(maxFrameSize);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpWireFormat.java,37,public static final int DEFAULT_MAX_FRAME_SIZE = 1024 * 1024 * 1;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,33,import java.util.concurrent.ConcurrentHashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,39,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,50,import javax.transaction.xa.XAException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,78,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,91,import org.apache.activemq.transaction.Transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,104,public class Queue extends BaseDestination implements Task, UsageListener {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,749,final ConcurrentHashMap<Transaction, SendSync> sendSyncs = new ConcurrentHashMap<Transaction, SendSync>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,750,private final LinkedList<Transaction> orderIndexUpdates = new LinkedList<Transaction>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,753,class SendSync extends Synchronization {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,755,class MessageContext {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,756,public Message message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,757,public ConnectionContext context;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,759,public MessageContext(ConnectionContext context, Message message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,760,this.context = context;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,761,this.message = message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,765,final Transaction transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,766,List<MessageContext> additions = new ArrayList<MessageContext>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,768,public SendSync(Transaction transaction) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,769,this.transaction = transaction;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,772,public void add(ConnectionContext context, Message message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,773,additions.add(new MessageContext(context, message));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,777,public void beforeCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,778,synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,779,orderIndexUpdates.addLast(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,784,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,785,ArrayList<SendSync> syncs = new ArrayList<SendSync>(200);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,786,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,787,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,788,synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,789,Transaction next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,790,while( next!=null && next.isCommitted() ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,791,syncs.add(sendSyncs.remove(orderIndexUpdates.removeFirst()));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,792,next = orderIndexUpdates.peek();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,795,for (SendSync sync : syncs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,796,sync.processSend();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,799,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,801,for (SendSync sync : syncs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,802,sync.processSent();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,807,private void processSend() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,809,for (Iterator<MessageContext> iterator = additions.iterator(); iterator.hasNext(); ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,810,MessageContext messageContext = iterator.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,813,if (broker.isExpired(messageContext.message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,814,broker.messageExpired(messageContext.context, messageContext.message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,815,destinationStatistics.getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,816,iterator.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,817,continue;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,819,sendMessage(messageContext.message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,820,messageContext.message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,824,private void processSent() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,825,for (MessageContext messageContext : additions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,831,public void afterRollback() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,832,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,833,for (MessageContext messageContext : additions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,834,messageContext.message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,837,sendSyncs.remove(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,842,class OrderedNonTransactionWorkTx extends Transaction {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,845,public void commit(boolean onePhase) throws XAException, IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,849,public void rollback() throws XAException, IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,853,public int prepare() throws XAException, IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,854,return 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,858,public TransactionId getTransactionId() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,859,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,863,public Logger getLog() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,864,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,868,public boolean isCommitted() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,869,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,873,public void addSynchronization(Synchronization s) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,874,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,875,s.beforeCommit();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,877,LOG.error("Failed to add not transactional message to orderedWork", e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,883,private void registerSendSync(Message message, ConnectionContext context) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,884,final Transaction transaction =
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,886,: new OrderedNonTransactionWorkTx();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,887,Queue.SendSync currentSync = sendSyncs.get(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,888,if (currentSync == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,889,currentSync = new Queue.SendSync(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,890,transaction.addSynchronization(currentSync);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,891,sendSyncs.put(transaction, currentSync);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,893,currentSync.add(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,900,boolean needsOrderingWithTransactions = context.isInTransaction();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,926,synchronized (orderIndexUpdates) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,927,needsOrderingWithTransactions |= !orderIndexUpdates.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,929,if (needsOrderingWithTransactions ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,933,message.incrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,935,registerSendSync(message, context);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,939,sendMessage(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,944,if (!needsOrderingWithTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1852,final void sendMessage(final Message msg) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1855,messages.addMessageLast(msg);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,85,public void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,89,addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,90,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,26,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,43,private MessageId lastCachedId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,44,private TransactionId lastTx;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,186,public final synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,190,LOG.trace("{} - enabling cache for empty store {}", this, node.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,195,lastCachedId = node.getMessageId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,196,lastTx = node.getMessage().getTransactionId();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,209,if (lastCachedId != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,210,LOG.debug("{} - disabling cache, lastCachedId: {} last-tx: {} current node Id: {} node-tx: {} batchList size: {}",
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,211,new Object[]{ this, lastCachedId, lastTx, node.getMessageId(), node.getMessage().getTransactionId(), batchList.size() });
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,212,setBatch(lastCachedId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,213,lastCachedId = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,214,lastTx = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,256,for (Iterator<MessageReference>i = batchList.iterator();i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,MessageReference msg = i.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,309,+ ",maxBatchSize:" + maxBatchSize + ",hasSpace:" + hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,206,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,207,tryAddMessageLast(node, 0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PendingMessageCursor.java,87,void addMessageLast(MessageReference node) throws Exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,186,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,90,public synchronized void addMessageLast(MessageReference node) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,100,persistent.addMessageLast(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,100,public synchronized void addMessageLast(MessageReference node) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,101,public void addMessage(ConnectionContext context, Message message) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,225,if (context != null && context.getXid() != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,226,ack.getLastMessageId().setEntryLocator(seq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,776,long sequence = (Long)messageId.getEntryLocator();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,789,getAdapter().doRemoveMessage(c, (Long)ack.getLastMessageId().getEntryLocator(), null);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,111,(Long)message.getMessageId().getEntryLocator(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,173,message.getMessageId().setEntryLocator(id);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,203,msg.getMessageId().setEntryLocator(id);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,391,throw new SQLException("Failed to remove message");
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,930,this.batchStatments = batchStatements;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1162,printQuery(c, "Select * from ACTIVEMQ_MSGS ORDER BY ID", System.out);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1163,printQuery(c, "Select * from ACTIVEMQ_ACKS", System.out);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,77,public class KahaDBStore extends MessageDatabase implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,200,LOG.warn("Receovered Store uses a different OpenWire version[{}] " +
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,280,void rollbackStatsOnDuplicate(KahaDestination commandDestination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,281,if (brokerService != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,282,RegionBroker regionBroker = (RegionBroker) brokerService.getRegionBroker();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,283,if (regionBroker != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,286,destination.getDestinationStatistics().getMessages().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,287,destination.getDestinationStatistics().getEnqueues().decrement();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,377,return result.getFuture();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,415,public void addMessage(ConnectionContext context, Message message) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,424,store(command, isEnableJournalDiskSyncs() && message.isResponseRequired(), null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,637,public void setBatch(MessageId identity) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,45,import org.apache.activemq.store.kahadb.MessageDatabase.AddOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,47,import org.apache.activemq.store.kahadb.MessageDatabase.RemoveOpperation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,297,theStore.store(new KahaCommitCommand().setTransactionInfo(info), theStore.isEnableJournalDiskSyncs(), preCommit, postCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,339,if (op.getClass() == AddOpperation.class) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,340,AddOpperation addOp = (AddOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,345,RemoveOpperation rmOp = (RemoveOpperation) op;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,257,public MessageDatabase() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,520,if (operation instanceof AddOpperation) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,521,AddOpperation add = (AddOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,525,RemoveOpperation removeOpperation = (RemoveOpperation) operation;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,887,process(message, lastRecoveryPosition, (Runnable)null, (Runnable)null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,954,return store(data, false, null,null, onJournalStoreComplete);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,957,public Location store(JournalCommand<?> data, boolean sync, Runnable before,Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,967,public Location store(JournalCommand<?> data, boolean sync, Runnable before, Runnable after, Runnable onJournalStoreComplete) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,978,process(data, location, before, after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1052,process(data, location, (Runnable) null, (Runnable) null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1070,void process(JournalCommand<?> data, final Location location, final Runnable before, final Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1074,process(command, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1089,process(command, location, before, after);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1130,protected void process(final KahaAddMessageCommand command, final Location location) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1132,List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1133,inflightTx.add(new AddOpperation(command, location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1140,updateIndex(tx, command, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1167,List<Operation> inflightTx = getInflightTx(command.getTransactionInfo(), location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1168,inflightTx.add(new RemoveOpperation(command, location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1222,protected void process(KahaCommitCommand command, Location location, final Runnable before, final Runnable after) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1234,before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1240,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1243,if (before != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1244,before.run();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1246,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1248,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1249,for (Operation op : messagingTx) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1250,op.execute(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1254,metadata.lastUpdate = location;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1256,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1290,void updateIndex(Transaction tx, KahaAddMessageCommand command, Location location) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1296,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1316,rollbackStatsOnDuplicate(command.getDestination());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1348,abstract void rollbackStatsOnDuplicate(KahaDestination commandDestination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2364,private List<Operation> getInflightTx(KahaTransactionInfo info, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2402,class AddOpperation extends Operation<KahaAddMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2404,public AddOpperation(KahaAddMessageCommand command, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2410,updateIndex(tx, command, location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2415,class RemoveOpperation extends Operation<KahaRemoveMessageCommand> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2417,public RemoveOpperation(KahaRemoveMessageCommand command, Location location) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2931,Iterator<Entry<Long, MessageKeys>> iterator = index.iterator(tx, sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2966,return new MessageOrderIterator(tx,cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2970,return new MessageOrderIterator(tx,m);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2989,MessageOrderIterator(Transaction tx, MessageOrderCursor m) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2990,this.defaultIterator = defaultPriorityIndex.iterator(tx, m.defaultCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2992,this.highIterator = highPriorityIndex.iterator(tx, m.highPriorityCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2997,this.lowIterator = lowPriorityIndex.iterator(tx, m.lowPriorityCursorPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeIndex.java,232,return getRoot(tx).iterator(tx, initialKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,87,private BTreeIterator(Transaction tx, BTreeNode<Key,Value> current, int nextIndex) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,634,public Iterator<Map.Entry<Key,Value>> iterator(final Transaction tx, Key startKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,639,return getLeafNode(tx, this, startKey).iterator(tx, startKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,645,return new BTreeIterator(tx, this, idx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeNode.java,650,return new BTreeIterator(tx, getFirstLeafNode(tx), 0);
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,19,public class SizeStatisticImpl extends StatisticImpl{
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,40,if(isDoReset()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,123,c.getConnection().commit();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,152,c.getConnection().commit();
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,46,private boolean logMessageEvents = false;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,88,public boolean isLogMessageEvents() {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,89,return logMessageEvents;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,95,public void setLogMessageEvents(boolean logMessageEvents) {
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,96,this.logMessageEvents = logMessageEvents;
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,607,buf.append(", logMessageEvents=");
activemq-broker/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,608,buf.append(isLogMessageEvents());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2447,connector.setBrokerService(this);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2524,protected TransportConnector startTransportConnector(TransportConnector connector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,362,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1235,LOG.trace("max {}, alreadyPagedIn {}, messagesCount {}, memoryUsage {}%", new Object[]{max, alreadyPagedIn, destinationStatistics.getMessages().getCount(), memoryUsage.getPercentUsage()});
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,93,if (server != null){
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,94,setAllowLinkStealing(server.isAllowLinkStealing());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,585,return allowLinkStealing;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,111,public Destination[] createDestination(int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,113,if (getClient().isDestComposite()) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,114,return new Destination[] {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,118,Destination[] dest = new Destination[destCount];
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,123,return dest;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,127,public Destination createCompositeDestination(int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,128,return createCompositeDestination(getClient().getDestName(), destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,131,protected Destination createCompositeDestination(String name, int destIndex, int destCount) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,133,String simpleName;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,135,if (name.startsWith("queue://")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,136,simpleName = name.substring("queue://".length());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,138,simpleName = name.substring("topic://".length());
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,140,simpleName = name;
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,151,return createDestination(compDestName);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,154,protected Destination createDestination(String name) throws JMSException {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,155,if (name.startsWith("queue://")) {
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,156,return getSession().createQueue(name.substring("queue://".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,158,return getSession().createTopic(name.substring("topic://".length()));
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/AbstractJmsClient.java,160,return getSession().createTopic(name);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,211,Destination[] dest = createDestination(destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,80,Destination[] dest = createDestination(destIndex, destCount);
activemq-tooling/activemq-perf-maven-plugin/src/main/java/org/apache/activemq/tool/JmsProducerClient.java,167,Destination[] dest = createDestination(destIndex, destCount);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,21,import javax.jms.JMSException;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,25,import org.fusesource.mqtt.codec.*;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,29,TcpTransport transport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,31,DataByteArrayOutputStream currentCommand = new DataByteArrayOutputStream();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,32,boolean processedHeader = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,33,String action;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,34,byte header;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,35,int contentLength = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,36,int previousByte = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,37,int payLoadRead = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,39,public MQTTCodec(TcpTransport transport) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,40,this.transport = transport;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,43,public void parse(DataByteArrayInputStream input, int readSize) throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,44,int i = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,45,byte b;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,46,while (i++ < readSize) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,47,b = input.readByte();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,49,if (!processedHeader && b == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,50,previousByte = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,51,continue;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,54,if (!processedHeader) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,55,i += processHeader(b, input);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,56,if (contentLength == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,57,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,62,if (contentLength == -1) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,64,if (b == 0) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,65,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,67,currentCommand.write(b);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,71,if (payLoadRead == contentLength) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,72,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,73,i += processHeader(b, input);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,75,currentCommand.write(b);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,76,payLoadRead++;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,81,previousByte = b;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,83,if (processedHeader && payLoadRead == contentLength) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,84,processCommand();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,93,private int processHeader(byte header, DataByteArrayInputStream input) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,94,this.header = header;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,95,byte digit;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,96,int multiplier = 1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,97,int read = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,98,int length = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,99,do {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,100,digit = input.readByte();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,101,length += (digit & 0x7F) * multiplier;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,102,multiplier <<= 7;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,103,read++;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,106,contentLength = length;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,107,processedHeader = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,108,return read;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,112,private void processCommand() throws Exception {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,113,MQTTFrame frame = new MQTTFrame(currentCommand.toBuffer().deepCopy()).header(header);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,114,transport.doConsume(frame);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,115,processedHeader = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,116,currentCommand.reset();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,117,contentLength = -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,118,payLoadRead = 0;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,121,public static String commandType(byte header) throws IOException, JMSException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,123,byte messageType = (byte) ((header & 0xF0) >>> 4);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,124,switch (messageType) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,125,case PINGREQ.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,126,return "PINGREQ";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,128,case CONNECT.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,129,return "CONNECT";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,131,case DISCONNECT.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,132,return "DISCONNECT";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,134,case SUBSCRIBE.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,135,return "SUBSCRIBE";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,137,case UNSUBSCRIBE.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,138,return "UNSUBSCRIBE";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,140,case PUBLISH.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,141,return "PUBLISH";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,143,case PUBACK.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,144,return "PUBACK";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,146,case PUBREC.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,147,return "PUBREC";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,149,case PUBREL.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,150,return "PUBREL";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,152,case PUBCOMP.TYPE: {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,153,return "PUBCOMP";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,155,default:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTCodec.java,156,return "UNKNOWN";
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransport.java,32,MQTTCodec codec;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,456,((org.apache.activemq.broker.region.Topic)dest).recoverRetroactiveMessages(connectionContext, subscription);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,112,if( command instanceof ActiveMQMessage) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,116,if( handler!=null ) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,286,if( connect.cleanSession() ) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,370,if( mqttSubscriptionByTopic.containsKey(topicName)) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,381,onUnSubscribe(topicName);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,391,if ( !connect.cleanSession() && connect.clientId() != null && topicQoS.ordinal() >= QoS.AT_LEAST_ONCE.ordinal() ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,45,public void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,48,Set matchingDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,51,VirtualDestination virtualDestination = (VirtualDestination)iter.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,68,for (VirtualDestination virt: virtualDestinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,73,public synchronized void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,51,return selectorAware ? new SelectorAwareVirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal()) :
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,52,new VirtualTopicInterceptor(destination, getPrefix(), getPostfix(), isLocal());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,65,public void remove(Destination destination) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,126,return new StringBuilder("VirtualTopic:").append(prefix).append(',').append(name).append(',').append(postfix).append(',').append(selectorAware).append(',').append(local).toString();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTSslTransportFactory.java,22,import org.apache.activemq.broker.BrokerContext;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBrokerPlugin.java,22,import org.codehaus.jackson.JsonParseException;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,20,import java.util.Arrays;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,36,import org.apache.activemq.command.TransactionId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,97,private long inactiveTimoutBeforeGC = DEFAULT_INACTIVE_TIMEOUT_BEFORE_GC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,254,public void setMemoryUsage(MemoryUsage memoryUsage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,255,this.memoryUsage = memoryUsage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,675,public long getInactiveTimoutBeforeGC() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,676,return this.inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,682,public void setInactiveTimoutBeforeGC(long inactiveTimoutBeforeGC) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,683,this.inactiveTimoutBeforeGC = inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,714,&& destinationStatistics.messages.getCount() == 0 && getInactiveTimoutBeforeGC() > 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,722,if ((System.currentTimeMillis() - this.lastActiveTime) >= getInactiveTimoutBeforeGC()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Destination.java,57,long getInactiveTimoutBeforeGC();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,91,public long getInactiveTimoutBeforeGC() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,92,return next.getInactiveTimoutBeforeGC();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,36,import org.apache.activemq.broker.*;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,858,log.info("{} Inactive for longer than {} ms - removing ...", dest.getName(), dest.getInactiveTimoutBeforeGC());
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,98,private long inactiveTimoutBeforeGC = BaseDestination.DEFAULT_INACTIVE_TIMEOUT_BEFORE_GC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,190,destination.setInactiveTimoutBeforeGC(getInactiveTimoutBeforeGC());
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,879,return this.inactiveTimoutBeforeGC;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,883,this.inactiveTimoutBeforeGC = inactiveTimoutBeforeGC;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,40,import org.apache.activemq.command.*;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,52,import org.fusesource.mqtt.codec.*;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,256,ack.code(CONNACK.Code.CONNECTION_REFUSED_SERVER_UNAVAILABLE);
activemq-console/src/main/java/org/apache/activemq/console/command/store/StoreExporter.java,46,import org.codehaus.jackson.map.ObjectMapper;
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/dto/LogDelete.java,20,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/dto/LogWrite.java,19,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/dto/Login.java,20,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/dto/Transfer.java,20,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
activemq-leveldb-store/src/main/java/org/apache/activemq/leveldb/replicated/dto/WalAck.java,20,import org.codehaus.jackson.annotate.JsonIgnoreProperties;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,19,import org.codehaus.jackson.annotate.JsonProperty;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,20,import org.codehaus.jackson.map.DeserializationConfig;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,21,import org.codehaus.jackson.map.ObjectMapper;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,22,import org.codehaus.jackson.map.SerializationConfig;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,23,import org.codehaus.jackson.map.annotate.JsonDeserialize;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,24,import org.codehaus.jackson.map.annotate.JsonSerialize;
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,36,MAPPER.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,37,MAPPER.disable(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES);
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,42,TO_STRING_MAPPER.disable(DeserializationConfig.Feature.FAIL_ON_UNKNOWN_PROPERTIES);
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Partitioning.java,43,TO_STRING_MAPPER.enable(SerializationConfig.Feature.INDENT_OUTPUT);
activemq-partition/src/main/java/org/apache/activemq/partition/dto/Target.java,19,import org.codehaus.jackson.annotate.JsonProperty;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,20,import java.nio.channels.SocketChannel;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,46,ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, getDefaultKeepAliveTime(), TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,48,private long i = 0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,51,public Thread newThread(Runnable runnable) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,52,this.i++;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,53,final Thread t = new Thread(runnable, "ActiveMQ NIO Worker " + this.i);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,54,return t;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,75,throws IOException {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,78,while( selection == null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,81,if( worker.isReleased() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,85,selection = new SelectorSelection(worker, socketChannel, listener);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorManager.java,91,selection = new SelectorSelection(worker, socketChannel, listener);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,22,import java.nio.channels.SocketChannel;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,36,private AtomicBoolean closed = new AtomicBoolean();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,38,public SelectorSelection(final SelectorWorker worker, final SocketChannel socketChannel, Listener listener) throws ClosedChannelException {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,44,SelectorSelection.this.key = socketChannel.register(worker.selector, 0, SelectorSelection.this);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,80,if( closed.compareAndSet(false, true) ) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,298,while (!isStopped()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,299,Socket socket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,301,socket = serverSocket.accept();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,302,if (socket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,303,if (isStopped() || getAcceptListener() == null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,304,socket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,306,if (useQueueForAccept) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,307,socketQueue.put(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,309,handleSocket(socket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,316,if (!isStopping()) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,317,onAcceptError(e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,319,LOG.warn("run()", e);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,320,onAcceptError(e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,90,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, long priority, int maxReturned, boolean isPrioritizeMessages, JDBCMessageRecoveryListener listener) throws Exception;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,112,long sequenceId = persistenceAdapter.getNextSequenceId();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,125,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,154,protected void onAdd(MessageId messageId, long sequenceId, byte priority) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,155,if (lastRecoveredSequenceId.get() > 0 && sequenceId < lastRecoveredSequenceId.get()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,238,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,309,adapter.doRecoverNextMessages(c, destination, lastRecoveredSequenceId.get(), lastRecoveredPriority.get(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,745,synchronized(sequenceGenerator) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,746,return sequenceGenerator.getNextSequenceId();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,319,protected void onAdd(MessageId messageId, long sequenceId, byte priority) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,326,sequenceIdCache.put(messageId, new long[]{sequenceId, priority});
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,110,message.getMessageId(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,190,((JDBCMessageStore)messageStore).onAdd(message.getMessageId(), ((Long)message.getMessageId().getEntryLocator()).longValue(), message.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,501,+ " WHERE CONTAINER=? AND ID > ? AND XID IS NULL ORDER BY ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,514,+ " AND ((ID > ? AND PRIORITY = ?) OR PRIORITY < ?)"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1080,public void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq,
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1093,s.setLong(2, nextSeq);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1095,s.setLong(3, priority);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/GenericResourceManager.java,154,final XAConnection xaConnection = connFactory.createXAConnection(rm.getUserName(), rm.getPassword());
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,24,import javax.jms.XAConnectionFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,66,private ConnectionFactory connectionFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,148,public ConnectionFactory getConnectionFactory() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,162,public void setConnectionFactory(final ConnectionFactory toUse) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,163,if (toUse instanceof XAConnectionFactory) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,164,connectionFactory = new ConnectionFactory() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,166,public Connection createConnection() throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,167,return ((XAConnectionFactory)toUse).createXAConnection();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,170,public Connection createConnection(String userName, String password) throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,171,return ((XAConnectionFactory)toUse).createXAConnection(userName, password);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,254,if (key.getUserName() == null && key.getPassword() == null) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,255,return connectionFactory.createConnection();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,257,return connectionFactory.createConnection(key.getUserName(), key.getPassword());
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,60,public class PooledConnectionFactory implements ConnectionFactory {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,23,import javax.jms.JMSException;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,24,import javax.jms.QueueConnection;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,25,import javax.jms.QueueConnectionFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,26,import javax.jms.TopicConnection;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,27,import javax.jms.TopicConnectionFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,126,public QueueConnection createQueueConnection() throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,127,return (QueueConnection) createConnection();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,131,public QueueConnection createQueueConnection(String userName, String password) throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,132,return (QueueConnection) createConnection(userName, password);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,136,public TopicConnection createTopicConnection() throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,137,return (TopicConnection) createConnection();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,141,public TopicConnection createTopicConnection(String userName, String password) throws JMSException {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/XaPooledConnectionFactory.java,142,return (TopicConnection) createConnection(userName, password);
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,86,Map brokerOptions = IntrospectionSupport.extractProperties(options, "broker.");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,67,host = (String)brokerData.getParameters().get("brokerName");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,82,String config = (String)options.remove("brokerConfig");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,183,if (broker == null && waitForStart > 0) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransportFactory.java,188,LOG.debug("waiting for broker named: " + brokerName + " to start");
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,199,public Object chooseValue(ActiveMQDestination destination) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,204,SortedSet sortedSet = new TreeSet(set);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1773,static protected class MessageKeysMarshaller extends VariableMarshaller<MessageKeys> {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1774,static final MessageKeysMarshaller INSTANCE = new MessageKeysMarshaller();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1778,return new MessageKeys(dataIn.readUTF(), LocationMarshaller.INSTANCE.readPayload(dataIn));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1784,LocationMarshaller.INSTANCE.writePayload(object.location, dataOut);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2782,defaultPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2785,lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2788,highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,423,if (subscription != null){
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,424,subscription.resetConsumedCount();
activemq-http/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,61,return getXStream().fromXML(reader);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,220,LOG.info("Corrupt journal records found in '"+dataFile.getFile()+"' between offsets: "+sequence);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,356,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,377,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,402,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_DESTINATION, payload.getMessageId().toString());
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,23,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,45,private final Map<MessageId, Object> audit = new HashMap<MessageId, Object>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,71,if (!audit.containsKey(messageId)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,72,audit.put(messageId, Boolean.TRUE);
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,73,return false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueBrowserSubscription.java,76,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,136,if (map.values().contains(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,137,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,140,for (PendingNode value : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,141,if (value.getMessage().equals(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,142,return true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,227,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,656,node.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,205,Message messageSend = (Message) this.wireFormat.unmarshal(packet);
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,244,messageSend.setMessageId(new MessageId(this.producerId, this.messageIdGenerator.getNextSequenceId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1044,if (data instanceof KahaSubscriptionCommand) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1045,KahaSubscriptionCommand kahaSubscriptionCommand = (KahaSubscriptionCommand)data;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1046,if (kahaSubscriptionCommand.hasSubscriptionInfo()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1048,LOG.debug("ignoring add sub command during recovery replay:" + data);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1049,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,23,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,304,throw new UnsupportedOperationException("You cannot dynamically change the selector for durable topic subscriptions");
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,154,if (destination == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,159,if (destination.isQueue() == destination2.isQueue()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,205,return sortedSet.last();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1984,if (storeLimit > dirFreeSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1988,dirFreeSpace / (1024 * 1024) + " mb.");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1989,usage.getTempUsage().setLimit(dirFreeSpace);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,420,ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,445,ConnectionContext context = new ConnectionContext();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,76,if (text == null && getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,77,text = decodeContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,84,private String decodeContent() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,86,if (getContent() != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,89,ByteSequence bodyAsBytes = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,90,if (bodyAsBytes != null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,91,is = new ByteArrayInputStream(bodyAsBytes);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,92,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,93,is = new InflaterInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,95,DataInputStream dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,96,text = MarshallingSupport.readUTF8(dataIn);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,97,dataIn.close();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,138,MarshallingSupport.writeUTF8(dataOut, this.text);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,185,text = decodeContent();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,42,import org.apache.activemq.broker.jmx.ProducerViewMBean;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,130,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,131,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,132,return destinationViewMBean;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,116,storeContent();
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,61,DemandSubscription sub = createDemandSubscription(dest);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,62,sub.setStaticallyIncluded(true);
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,63,if (dest.isTopic()) {
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,64,sub.getLocalInfo().setSubscriptionName(getSubscriberName(dest));
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,67,addSubscription(sub);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,823,if (session.isClientAcknowledge()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,222,protected Object sendMutex = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,if (!isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,67,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,unregisterMBean(byClientIdName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,unregisterMBean(byAddressName);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,70,byClientIdName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,byAddressName = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,307,if (node.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,308,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,309,Destination regionDestination = nodeDest;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,310,regionDestination.messageExpired(context, this, node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,312,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,313,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,296,if (bytesRead == 0) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,339,while (true) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,340,switch (sslEngine.getHandshakeStatus()) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,341,case NEED_UNWRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,342,secureRead(ByteBuffer.allocate(sslSession.getApplicationBufferSize()));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,343,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,344,case NEED_TASK:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,345,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,346,while ((task = sslEngine.getDelegatedTask()) != null) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,347,taskRunnerFactory.execute(task);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,349,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,350,case NEED_WRAP:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,351,((NIOOutputStream) buffOut).write(ByteBuffer.allocate(0));
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,352,break;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,353,case FINISHED:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,354,case NOT_HANDSHAKING:
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,355,finishHandshake();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,356,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2860,if (defaultPriorityIndex.containsKey(tx, sequence)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2861,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2862,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2873,lastDefaultKey = sequence;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2874,cursor.defaultCursorPosition = nextPosition.longValue();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,250,private int storeOpenWireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,30,byte PROTOCOL_STORE_VERSION = 6;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,41,public static final int DEFAULT_VERSION = CommandTypes.PROTOCOL_STORE_VERSION;
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,69,this(DEFAULT_VERSION);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,128,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,211,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,249,dataOut.writeInt(size);
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,279,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,302,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,346,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,385,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,412,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,425,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,458,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[dataType & 0xFF];
activemq-client/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,476,DataStreamMarshaller dsm = (DataStreamMarshaller)dataMarshallers[type & 0xFF];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,128,protected int openwireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,164,openwireVersion = OpenWireFormat.DEFAULT_VERSION;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1025,if (!isEmptyTopic(entry, tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1026,rc.add(convert(entry.getKey()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1032,throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1033,boolean isEmptyTopic = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1034,ActiveMQDestination dest = convert(entry.getKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1035,if (dest.isTopic()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1036,StoredDestination loadedStore = getStoredDestination(convert(dest), tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1037,if (loadedStore.subscriptionAcks.isEmpty(tx)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1038,isEmptyTopic = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1041,return isEmptyTopic;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,253,if (adapter instanceof PersistenceAdapter) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,268,if (adapter instanceof PersistenceAdapter) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,276,if (adapter.getDestinations().isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,277,stopAdapter(adapter, destination.toString());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,278,File adapterDir = adapter.getDirectory();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,279,if (adapterDir != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,280,if (IOHelper.deleteFile(adapterDir)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,281,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,282,LOG.info("deleted per destination adapter directory for: " + destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,285,if (LOG.isTraceEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,286,LOG.info("failed to deleted per destination adapter directory for: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,55,private final boolean keepDurableSubsActive;
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,191,this.usageManager.getMemoryUsage().removeUsageListener(this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,657,if( !isDropped(node) && canDispatch(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,661,if (node!=QueueMessageReference.NULL_MESSAGE && node.isExpired()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,492,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,493,LOG.debug(getConsumerId() + " received expired message: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,501,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,502,LOG.debug(getConsumerId() + " received with excessive redelivered: " + md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,719,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,720,LOG.debug("remove: " + this.getConsumerId() + ", lastDeliveredSequenceId:" + lastDeliveredSequenceId);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,739,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,740,LOG.debug(getConsumerId() + " clearing unconsumed list (" + unconsumedMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,847,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,848,LOG.debug("on close, rollback duplicate: " + old.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1028,if ( !oldPendingAck.isDeliveredAck()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1029,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1030,LOG.debug("Sending old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1034,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1035,LOG.debug("dropping old pending ack " + oldPendingAck + ", new pending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1042,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1043,LOG.debug("ackLater: sending: " + pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1136,LOG.info("waiting for redelivery of " + numberNotReplayed + " in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1137,+ previouslyDeliveredMessages.transactionId +  ", to consumer :" + this.getConsumerId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1159,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1160,LOG.debug("previously delivered message has not been replayed in transaction: "
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1161,+ previouslyDeliveredMessages.transactionId
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1162,+ " , messageId: " + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1336,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1337,LOG.trace("rollback non redelivered: " + entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1394,LOG.error(getConsumerId() + " Exception while processing message: " + md.getMessage().getMessageId(), e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1420,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1473,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1474,LOG.debug(getConsumerId() + " tracking existing transacted " + previouslyDeliveredMessages.transactionId +
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1479,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1480,LOG.debug(getConsumerId() + " rolling back delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1489,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1490,LOG.debug(getConsumerId() + " clearing delivered list (" + deliveredMessages.size() + ") on transport interrupt");
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1591,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1592,LOG.info("Consumer:{} is performing scheduled delivery of outstanding optimized Acks", info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,667,continue;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,24,import java.util.concurrent.atomic.AtomicLong;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,69,protected AtomicLong lastRecoveredSequenceId = new AtomicLong(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,70,protected AtomicLong lastRecoveredPriority = new AtomicLong(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,316,lastRecoveredSequenceId.set(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,317,lastRecoveredPriority.set(msg.getPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,345,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,354,lastRecoveredSequenceId.set(storedValues[0]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,355,lastRecoveredPriority.set(storedValues[1]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,357,lastRecoveredSequenceId.set(-1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,358,lastRecoveredPriority.set(Byte.MAX_VALUE -1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,362,+ ", priority: " + lastRecoveredPriority.get());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1081,long priority, int maxReturned, boolean isPrioritizedMessages, JDBCMessageRecoveryListener listener) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1096,s.setLong(4, priority);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,21,import java.util.Iterator;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,22,import java.util.LinkedHashSet;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,23,import java.util.Set;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,346,lastRecoveredPriority.set(Byte.MAX_VALUE - 1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1091,s.setMaxRows(Math.min(maxReturned * 2, maxRows));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,248,private boolean rewriteOnRedelivery = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2110,for(Long sequenceId : pendingAcks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2192,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2193,sd.messageReferences.put(ackPosition, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2216,sd.messageReferences.put(messageSequence+1, Long.valueOf(0L));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2279,if (count != null){
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2280,long references = count.longValue() - 1;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,161,throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,75,protected ThreadPoolExecutor connectionSerivce;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,119,connectionSerivce = createExecutor();
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,170,ThreadPoolUtils.shutdown(connectionSerivce);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,171,connectionSerivce = null;
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,496,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,521,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,536,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,549,this.connectionSerivce.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,574,do
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,583,if (connectionSerivce.isTerminating()) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,612,while (maxRetries < ++attempt && !connectionSerivce.isTerminating());
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,31,private int maxReconnectAttempts = -1;
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,32,private int maxInitialConnectAttempts = -1;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,94,public void start() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,254,protected MBeanServer getMBeanServer() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1313,LOG.warn("Duplicate message add attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,150,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,151,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,152,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,211,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,334,public String findAllDurableSubMessagesStatement() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,335,if (findAllDurableSubMessagesStatement == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,337,+ " M, " + getFullAckTableName() + " D "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,338,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,339,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID"
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,340,+ " ORDER BY M.ID";
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/Statements.java,342,return findAllDurableSubMessagesStatement;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,225,String selector = subscription.getConsumerInfo().getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,229,String s1 = info.getSelector();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,230,if (s1 == null ^ selector == null || (s1 != null && !s1.equals(selector))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,250,info.setSelector(selector);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,819,private void rollback(MessageId poisoned) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,820,dispatchLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,821,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,822,for (DurableTopicSubscription durableTopicSubscription : durableSubscribers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,823,durableTopicSubscription.getPending().rollback(poisoned);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,826,dispatchLock.readLock().unlock();
activemq-client/src/main/java/org/apache/activemq/command/CommandTypes.java,27,byte PROTOCOL_VERSION = 10;
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,594,if (getBrokerService().getDefaultSocketURIString() != null) {
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,34,PREDEFINED_OBJNAME_QUERY.setProperty("Broker", "type=Broker,brokerName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,35,PREDEFINED_OBJNAME_QUERY.setProperty("Connection", "type=Broker,connector=clientConnectors,connectionName=%1,*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,36,PREDEFINED_OBJNAME_QUERY.setProperty("Connector", "type=Broker,brokerName=*,connector=clientConnectors,connectorName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,37,PREDEFINED_OBJNAME_QUERY.setProperty("NetworkConnector", "type=Broker,brokerName=%1,connector=networkConnectors,networkConnectorName=*");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,38,PREDEFINED_OBJNAME_QUERY.setProperty("Queue", "type=Broker,brokerName=*,destinationType=Queue,destinationName=%1");
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,39,PREDEFINED_OBJNAME_QUERY.setProperty("Topic", "type=Broker,brokerName=*,destinationType=Topic,destinationName=%1,*");
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,918,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,919,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,920,doStartTransaction();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,921,ack.setTransactionId(getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,922,if (ack.getTransactionId() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,923,getTransactionContext().addSynchronization(new Synchronization() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,925,final int clearRequestCount = (clearRequestsCounter.get() == Integer.MAX_VALUE ? clearRequestsCounter.incrementAndGet() : clearRequestsCounter.get());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,927,public void beforeEnd() throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,929,if (ack.getTransactionId().isXATransaction() && !connection.hasDispatcher(ack.getConsumerId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,930,LOG.debug("forcing rollback - {} consumer no longer active on {}", ack, connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,931,throw new TransactionRolledBackException("consumer " + ack.getConsumerId() + " no longer active on " + connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,933,LOG.trace("beforeEnd ack {}", ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,934,sendAck(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,938,public void afterRollback() throws Exception {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,939,LOG.trace("rollback {}", ack, new Throwable("here"));
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,942,connection.rollbackDuplicate(ActiveMQSession.this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,945,if (clearRequestsCounter.get() > clearRequestCount) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,946,LOG.debug("No redelivery of {} on rollback of {} due to failover of {}", md, ack.getTransactionId(), connection.getTransport());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,947,return;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,951,if (ack.getTransactionId().isXATransaction() && !connection.hasDispatcher(ack.getConsumerId())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,952,LOG.debug("No local redelivery of {} on rollback of {} because consumer is no longer active on {}", md, ack.getTransactionId(), connection.getTransport());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,953,return;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,956,RedeliveryPolicy redeliveryPolicy = connection.getRedeliveryPolicy();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,957,int redeliveryCounter = md.getMessage().getRedeliveryCounter();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,958,if (redeliveryPolicy.getMaximumRedeliveries() != RedeliveryPolicy.NO_MAXIMUM_REDELIVERIES
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,964,MessageAck ack = new MessageAck(md, MessageAck.POSION_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,965,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,966,ack.setPoisonCause(new Throwable("Exceeded ra redelivery policy limit:" + redeliveryPolicy));
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,967,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,971,MessageAck ack = new MessageAck(md, MessageAck.REDELIVERED_ACK_TYPE, 1);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,972,ack.setFirstMessageId(md.getMessage().getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,973,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,977,long redeliveryDelay = redeliveryPolicy.getInitialRedeliveryDelay();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,978,for (int i = 0; i < redeliveryCounter; i++) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,979,redeliveryDelay = redeliveryPolicy.getNextRedeliveryDelay(redeliveryDelay);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,981,connection.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,984,public void run() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,993,LOG.trace("{} onMessage({})", this, message.getMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,994,messageListener.onMessage(message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,997,LOG.error("error dispatching message: ", e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1004,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1006,if (ack.getTransactionId() == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1008,asyncSendPacket(ack);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1010,connection.onClientInternalException(e);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1015,if (deliveryListener != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,1016,deliveryListener.afterDelivery(this, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2101,return "ActiveMQSession {id=" + info.getSessionId() + ",started=" + started.get() + "}";
activemq-console/src/main/java/org/apache/activemq/console/Main.java,115,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,116,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,219,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/Main.java,262,runTask.invoke(task.newInstance(), args, System.in, System.out);
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,108,return -1;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,826,switch (command.qos()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,827,case AT_LEAST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,828,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,830,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,831,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,832,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,834,PUBACK ack = new PUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,835,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,836,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,840,case EXACTLY_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,841,return new ResponseHandler() {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,843,public void onResponse(MQTTProtocolConverter converter, Response response) throws IOException {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,844,if (response.isException()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,845,LOG.warn("Failed to send MQTT Publish: ", command, ((ExceptionResponse) response).getException());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,847,PUBREC ack = new PUBREC();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,848,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,849,synchronized (publisherRecs) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,850,publisherRecs.put(command.messageId(), ack);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,852,converter.getMQTTTransport().sendToMQTT(ack.encode());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,856,case AT_MOST_ONCE:
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,857,break;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,405,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,406,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,407,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,408,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,409,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2459,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,44,public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config,
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,45,Transport localTransport, Transport remoteTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,46,return createBridge(config, localTransport, remoteTransport, null);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,77,map.put("network", "true");
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,52,protected boolean network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,344,public boolean isNetwork() {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,345,return network;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,348,public void setNetwork(boolean network) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,349,this.network = network;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,380,ObjectInstance result = getMBeanServer().registerMBean(bean, name);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,381,this.registeredMBeanNames.put(name, result.getObjectName());
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,138,doConsume((Command)command);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,241,private final Object persistenceAdapterLock = new Object();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,622,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,623,persistenceAdapterLock.notifyAll();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,649,synchronized (persistenceAdapterLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,650,persistenceAdapterLock.wait();
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,157,protected boolean isDoHandleReplyTo() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,164,protected void setDoHandleReplyTo(boolean doHandleReplyTo) {
activemq-broker/src/main/java/org/apache/activemq/store/SharedFileLocker.java,65,Thread.sleep(lockAcquireSleepInterval);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,124,cf = createConnectionFactory(getInfo());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,90,if (AdvisorySupport.isMasterBrokerAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,91,subscriptionRecoveryPolicy = new LastImageSubscriptionRecoveryPolicy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,92,setAlwaysRetroactive(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,94,subscriptionRecoveryPolicy = new RetainedMessageSubscriptionRecoveryPolicy(null);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,305,ObjectName inactiveName = subscriptionKeys.get(subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1469,sd.messageIdIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1470,sd.locationIndex.clear(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1471,sd.orderIndex.clear(tx);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,37,private RandomAccessFile readFile;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,67,readFile = new RandomAccessFile(file, "rw");
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,70,lock = readFile.getChannel().tryLock(0, Math.max(1, readFile.getChannel().size()), false);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,132,if (readFile != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,134,readFile.close();
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,137,readFile = null;
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,95,if (peer.async || !peer.started.get()) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,261,public void setMessageQueue(LinkedBlockingQueue<Object> asyncQueue) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,262,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,263,if (messageQueue == null) {
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,264,messageQueue = asyncQueue;
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,49,private AtomicBoolean handlingException = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,72,String message = cause.getMessage();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,73,if (cause instanceof SQLException && message.contains(sqlExceptionMessage)) {
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,74,LOG.info("Ignoring SQLException, " + exception, cause);
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,75,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1865,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1877,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1878,jobSchedulerStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1880,RuntimeException exception = new RuntimeException(
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1882,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1883,throw exception;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,499,super.removeSubscription(context, sub, lastDeiveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,507,lastDeiveredSequenceId,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,552,if (ref.getMessageId().getBrokerSequenceId() == lastDeiveredSequenceId) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,571,if (lastDeiveredSequenceId == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,908,message.getMessageId().setBrokerSequenceId(getDestinationSequenceId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,673,long lastDeliveredSequenceId = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,701,doSyncSendPacket(info.createRemoveCommand(), closeTimeout);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,231,private long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,881,ActiveMQMessage message = (ActiveMQMessage)md.getMessage();
activemq-client/src/main/java/org/apache/activemq/command/ConsumerInfo.java,66,private transient long lastDeliveredSequenceId;
activemq-client/src/main/java/org/apache/activemq/command/RemoveInfo.java,34,protected long lastDeliveredSequenceId;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/AnnotatedMBean.java,194,entry.getParameters().put("arguments", objects);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,332,public String sendTextMessage(String body, String user, String password) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,337,public String sendTextMessage(Map<String, String> headers, String body, String userName, String password) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,606,JournalCommand<?> message = load(recoveryPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,607,metadata.lastUpdate = recoveryPosition;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,608,process(message, recoveryPosition, lastIndoubtPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,609,redoCounter++;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,829,for (StoredDestination sd : storedDestinations.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,211,if ( size>=0 ) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,29,import org.apache.commons.pool.KeyedPoolableObjectFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,30,import org.apache.commons.pool.impl.GenericKeyedObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,31,import org.apache.commons.pool.impl.GenericObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,92,return true;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,245,return this.sessionPool.getMaxActive();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,249,this.sessionPool.setMaxActive(maximumActiveSessionPerConnection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,291,this.sessionPool.setWhenExhaustedAction(
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,292,(block ? GenericObjectPool.WHEN_EXHAUSTED_BLOCK : GenericObjectPool.WHEN_EXHAUSTED_FAIL));
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,296,return this.sessionPool.getWhenExhaustedAction() == GenericObjectPool.WHEN_EXHAUSTED_BLOCK;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,306,return this.sessionPool.getMaxWait();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/ConnectionPool.java,324,this.sessionPool.setMaxWait(blockIfSessionPoolIsFullTimeout);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,26,import org.apache.commons.pool.KeyedPoolableObjectFactory;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,27,import org.apache.commons.pool.impl.GenericKeyedObjectPool;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,79,new KeyedPoolableObjectFactory<ConnectionKey, ConnectionPool>() {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,82,public void activateObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,86,public void destroyObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,87,try {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,88,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,89,LOG.trace("Destroying connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,91,connection.close();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,93,LOG.warn("Close connection failed for connection: " + connection + ". This exception will be ignored.",e);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,98,public ConnectionPool makeObject(ConnectionKey key) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,99,Connection delegate = createConnection(key);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,115,return connection;
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,119,public void passivateObject(ConnectionKey key, ConnectionPool connection) throws Exception {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,123,public boolean validateObject(ConnectionKey key, ConnectionPool connection) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,137,this.connectionsPool.setMaxIdle(1);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,357,return getConnectionsPool().getMaxIdle();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,368,getConnectionsPool().setMaxIdle(maxConnections);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledSession.java,49,import org.apache.commons.pool.KeyedObjectPool;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,99,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,120,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,124,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,125,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,128,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,67,private ActiveMQMessageAudit audit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,289,Synchronization sync = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,292,if (transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,293,sync = new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,295,public void afterRollback() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,296,if (audit != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,297,audit.rollback(message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,301,transaction.addSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,304,if (audit == null || !audit.isDuplicate(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,305,context.setTransaction(transaction);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,306,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,307,next.send(producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,309,context.setTransaction(originalTx);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,312,if (sync != null && transaction != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,313,transaction.removeSynchronization(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,315,LOG.debug("IGNORING duplicate message {}", message);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,382,public synchronized void brokerServiceStarted() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,383,super.brokerServiceStarted();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,385,audit = new ActiveMQMessageAudit();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,208,private boolean supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1738,public boolean isSupportFailOver() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1739,return this.supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1746,public void setSupportFailOver(boolean supportFailOver) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1747,this.supportFailOver = supportFailOver;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,384,if (getBrokerService().isSupportFailOver() && audit == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,560,if (destination != null && !AdvisorySupport.isAdvisoryTopic(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,642,message.decrementReferenceCount();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,643,matched.remove(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,644,discarded++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,645,if(destination != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,646,destination.getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,648,LOG.debug("{}, discarding message {}", this, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,649,Destination dest = (Destination) message.getRegionDestination();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,650,if (dest != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,651,dest.messageDiscarded(getContext(), this, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,653,broker.getRoot().sendToDeadLetterQueue(getContext(), message, this, new Throwable("TopicSubDiscard. ID:" + info.getConsumerId()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1630,if (userSpecifiedClientID) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1631,info.setClientId(null);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1632,userSpecifiedClientID = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1634,clientIDSet = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2026,cleanup();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,143,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,148,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,153,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,159,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,184,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,189,MemoryTransactionStore.this.addMessage(getDelegate(), send);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,194,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,200,MemoryTransactionStore.this.addMessage(getDelegate(), message);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,313,void addMessage(final MessageStore destination, final Message message) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,343,destination.addMessage(null, message);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1624,if (isConnectionInfoSentToBroker) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1625,if (!transportFailed.get() && !closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1626,syncSendPacket(info.createRemoveCommand());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1628,isConnectionInfoSentToBroker = false;
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1636,started.set(false);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,237,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,604,LOG.info("Recovering from the journal ...");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,534,if (cur.getType() == 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/view/MessageBrokerView.java,39,private Map<ActiveMQDestination,BrokerDestinationView> destinationViewMap = new LRUCache<ActiveMQDestination, BrokerDestinationView>();
activemq-broker/src/main/java/org/apache/activemq/broker/view/MessageBrokerView.java,201,if (destination.isTopic() && destination.isTemporary()){
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,85,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpNioTransportFactory.java,86,return super.compositeConfigure(transport, format, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,47,IntrospectionSupport.setProperties(transport, options);
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFactory.java,48,return super.compositeConfigure(transport, format, options);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,55,import org.apache.activemq.broker.region.cursors.OrderedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,56,import org.apache.activemq.broker.region.cursors.PendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,57,import org.apache.activemq.broker.region.cursors.PendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,58,import org.apache.activemq.broker.region.cursors.PrioritizedPendingList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,59,import org.apache.activemq.broker.region.cursors.StoreQueueCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,60,import org.apache.activemq.broker.region.cursors.VMPendingMessageCursor;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,116,protected PendingList pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,117,protected PendingList redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,346,if (prioritizedMessages && this.pagedInPendingDispatch instanceof OrderedPendingList) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,347,pagedInPendingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,348,redeliveredWaitingDispatch = new PrioritizedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,350,pagedInPendingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,351,redeliveredWaitingDispatch = new OrderedPendingList();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,584,redeliveredWaitingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,592,if (!redeliveredWaitingDispatch.isEmpty() && (! this.brokerService.isStopping())) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1193,doBrowseList(browseList, max, pagedInPendingDispatch, pagedInPendingDispatchLock, connectionContext, "pagedInPendingDispatch");
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1644,pageInMoreMessages |= !pagedInPendingDispatch.isEmpty();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1656,if (pageInMoreMessages || hasBrowsers || !redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1761,pagedInPendingDispatch.remove(r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1905,if (pagedInPendingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1906,pagedInPendingDispatch.addAll(newlyPaged);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1910,if (!pagedInPendingDispatch.contains(qmr)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1911,pagedInPendingDispatch.addMessageLast(qmr);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1928,pagedInPendingSize = pagedInPendingDispatch.size();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2021,if (!redeliveredWaitingDispatch.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2024,redeliveredWaitingDispatch = doActualDispatch(redeliveredWaitingDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2239,for (MessageReference ref : pagedInPendingDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2242,pagedInPendingDispatch.remove(ref);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2292,+ pagedInPendingDispatch.size() + ") for subscription: "
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,91,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,97,prefetchExtension.incrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,108,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,119,pullTimeout(dispatchCounterBeforePull);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,133,final void pullTimeout(long dispatchCounterBeforePull) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,135,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,150,if( !destinations.contains(node.getRegionDestination()) && node!=QueueMessageReference.NULL_MESSAGE) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,216,int index = 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,234,index++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,329,public Response pullMessage(ConnectionContext context, MessagePull pull) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,332,if (getPrefetchSize() == 0 ) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,335,prefetchExtension.incrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,339,if (currentDispatchedCount == dispatchedCounter.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,343,prefetchExtension.decrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,353,pullTimeout(currentDispatchedCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,366,private final void pullTimeout(long currentDispatchedCount) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,368,if (currentDispatchedCount == dispatchedCounter.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,374,prefetchExtension.decrementAndGet();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,586,Message message = node.getMessage();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,20,import java.util.concurrent.Future;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyMessageStore.java,141,return asyncAddTopicMessage(context,message,canOptimizeHint);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,26,import java.util.Collection;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,27,import java.util.HashSet;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,28,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,29,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,30,import java.util.Set;
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,167,getRootNode(key).appendMatchingValues(answer, paths, 0);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,222,public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,228,if (path.equals(ANY_DESCENDENT)) {
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,56,idGeneratorPort = Integer.parseInt(System.getProperty(PROPERTY_IDGENERATOR_PORT, "0"));
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,57,LOG.trace("Using port {}", idGeneratorPort);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,58,hostName = InetAddressUtil.getLocalHostName();
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,59,ss = new ServerSocket(idGeneratorPort);
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,60,stub = "-" + ss.getLocalPort() + "-" + System.currentTimeMillis() + "-";
activemq-client/src/main/java/org/apache/activemq/util/IdGenerator.java,61,Thread.sleep(100);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,167,return findWildcardMatches(key);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,121,if (deleteOnUnlock) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,143,return lock != null && lock.isValid() && file.exists();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,443,if (value instanceof Double) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,446,if (value instanceof Float) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,449,if (value instanceof UTF8Buffer) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,450,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,452,if (value instanceof String) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,453,return Float.valueOf(value.toString()).floatValue();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,455,throw new MessageFormatException(" cannot read a double from " + value.getClass().getName());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,562,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,680,if (this.version.equals(Stomp.V1_1) && subscriptionId == null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,691,if (this.version.equals(Stomp.V1_1)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2802,if (highPriorityIndex != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2803,Entry<Long, MessageKeys> lastEntry = highPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2804,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2805,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2807,lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2808,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2809,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2811,lastEntry = lowPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2812,if (lastEntry != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2813,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2818,Entry<Long, MessageKeys> lastEntry = defaultPriorityIndex.getLast(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2820,nextMessageId = lastEntry.getKey() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,372,public synchronized void close() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,373,if (!started) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,374,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,376,if (this.timer != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,377,this.timer.cancel();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,379,accessorPool.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,381,fileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,382,fileByFileMap.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,383,dataFiles.clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,384,lastAppendLocation.set(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,385,started = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,221,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,43,private Map<String, String> userPasswords;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,44,private Map<String, Set<Principal>> userGroups;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,76,userPasswords = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/security/SimpleAuthenticationPlugin.java,77,userGroups = new HashMap<String, Set<Principal>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/util/DiskBenchmark.java,55,System.out.println("File " + file + " allready exists, will not benchmark.");
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopic.java,57,if (destination.isQueue() && destination.isPattern() && broker.getDestinations(destination).isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,117,answer.addAll(child.getValue().removeValues());
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMapNode.java,118,answer.addAll(child.getValue().removeDesendentValues());
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,190,tr.shutdown(TimeUnit.SECONDS.toMillis(1));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,202,if (TRANSPORTLOG.isDebugEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,203,TRANSPORTLOG.debug(this + " failed: " + e, e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,205,TRANSPORTLOG.warn(this + " failed: " + e);
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,96,private long lastUpdated;
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,221,protected void query() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/security/SimpleCachedLDAPAuthorizationMap.java,690,entries.clear();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,77,protected final List<Command> dispatchQueue = new LinkedList<Command>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,101,private final Map<ProducerId, ProducerBrokerExchange> producerExchanges = new HashMap<ProducerId, ProducerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,102,private final Map<ConsumerId, ConsumerBrokerExchange> consumerExchanges = new HashMap<ConsumerId, ConsumerBrokerExchange>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractSubscription.java,232,if (info.getPrefetchSize() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/ListNode.java,197,entryToRemove = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,764,if (isAutoAcknowledgeEach()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,765,synchronized(deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,777,pendingAck = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1032,session.sendAck(oldPendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1041,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter + ackCounter - additionalWindowSize)) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1047,deliveredCounter = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1048,additionalWindowSize = 0;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,149,private MessageAck pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,771,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,776,ack = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,955,if (pendingAck != null && deliveredCounter > 0) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,956,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1018,MessageAck oldPendingAck = pendingAck;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1019,pendingAck = new MessageAck(md, ackType, deliveredCounter);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1020,pendingAck.setTransactionId(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1021,if( oldPendingAck==null ) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1022,pendingAck.setFirstMessageId(pendingAck.getLastMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1024,pendingAck.setFirstMessageId(oldPendingAck.getFirstMessageId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1045,session.sendAck(pendingAck);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1046,pendingAck=null;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,334,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,335,connected.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,945,messageSent(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,599,List<MessageReference> rc = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,605,rc.addAll(pending.remove(context, destination));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,608,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,614,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,617,updateDestinationStats(rc, destination, dispatched);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,620,return rc;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,623,private void updateDestinationStats(List<MessageReference> rc, Destination destination, List<MessageReference> dispatched) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,630,rc.addAll(references);
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,238,if (paramTypes.length != 0 && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/security/DefaultAuthorizationMap.java,250,if (paramTypes.length != 0 && methods[i].getName().equals("setName") && paramTypes[0].equals(String.class)) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,162,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,164,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,166,if (outboundQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,168,if (outboundQueueConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,170,.lookup(outboundQueueConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,178,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,181,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,182,newConnection = outboundQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,183,.createQueueConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,185,newConnection = outboundQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,190,newConnection = (QueueConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,193,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,194,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,196,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,198,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,201,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,202,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,206,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,208,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,209,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,214,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,220,final QueueConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,222,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,224,if (localQueueConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,225,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,227,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,229,.lookup(localConnectionFactoryName, QueueConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,230,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,231,newConnection = localQueueConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,232,.createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,234,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,237,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,240,newConnection = embeddedConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,243,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,244,newConnection = localQueueConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,245,createQueueConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,247,newConnection = localQueueConnectionFactory.createQueueConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,253,newConnection = (QueueConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,256,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,257,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,259,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,261,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,264,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,265,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,269,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,271,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,272,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsQueueConnector.java,277,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,160,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,162,if (foreignConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,164,if (outboundTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,166,if (outboundTopicConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,168,.lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,176,throw new JMSException("Cannot create foreignConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,179,if (outboundUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,180,newConnection = outboundTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,181,.createTopicConnection(outboundUsername, outboundPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,183,newConnection = outboundTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,188,newConnection = (TopicConnection) foreignConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,191,if (outboundClientId != null && outboundClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,192,newConnection.setClientID(getOutboundClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,194,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,196,outboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,199,initializeInboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,200,initializeOutboundDestinationBridgesOutboundSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,204,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,206,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,207,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,212,foreignConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,218,final TopicConnection newConnection;
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,220,if (localConnection.get() == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,222,if (localTopicConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,223,if (embeddedConnectionFactory == null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,225,if (localConnectionFactoryName != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,227,.lookup(localConnectionFactoryName, TopicConnectionFactory.class);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,228,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,229,newConnection = localTopicConnectionFactory
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,230,.createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,232,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,235,throw new JMSException("Cannot create localConnection - no information");
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,238,newConnection = embeddedConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,241,if (localUsername != null) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,242,newConnection = localTopicConnectionFactory.
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,243,createTopicConnection(localUsername, localPassword);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,245,newConnection = localTopicConnectionFactory.createTopicConnection();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,251,newConnection = (TopicConnection) localConnection.getAndSet(null);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,254,if (localClientId != null && localClientId.length() > 0) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,255,newConnection.setClientID(getLocalClientId());
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,257,newConnection.start();
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,259,inboundMessageConvertor.setConnection(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,262,initializeInboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,263,initializeOutboundDestinationBridgesLocalSide(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,267,newConnection.setExceptionListener(new ExceptionListener() {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,269,public void onException(JMSException exception) {
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,270,handleConnectionFailure(newConnection);
activemq-broker/src/main/java/org/apache/activemq/network/jms/SimpleJmsTopicConnector.java,275,localConnection.set(newConnection);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,621,addConsumerBrokerExchange(info.getConsumerId());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1454,private ConsumerBrokerExchange addConsumerBrokerExchange(ConsumerId id) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1459,TransportConnectionState state = lookupConnectionState(id);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1460,context = state.getContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1462,SessionState ss = state.getSessionState(id.getParentId());
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,67,protected ServerSocket serverSocket;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,109,protected BlockingQueue<Socket> socketQueue = new LinkedBlockingQueue<Socket>();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,115,protected AtomicInteger currentTransportCount = new AtomicInteger();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,132,this.serverSocket = serverSocketFactory.createServerSocket(bind.getPort(), backlog, addr);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,133,configureServerSocket(this.serverSocket);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,408,if (serverSocket != null) {
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,409,serverSocket.close();
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,410,serverSocket = null;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,412,super.doStop(stopper);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,137,private boolean resetNeeded;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,26,import org.apache.activemq.transport.InactivityMonitor;
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,60,LOG.trace("Not created with a TextWireFormat: " + wireFormat);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,90,HttpClientTransport httpTransport = (HttpClientTransport)transport.narrow(HttpClientTransport.class);
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,91,if(httpTransport != null && httpTransport.isTrace() ) {
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,100,transport = new InactivityMonitor(transport, null /* ignore wire format as no negotiation over http */);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,124,return getConnection().getExceptionListener();
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,134,getConnection().setExceptionListener(exceptionListener);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,111,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,112,LOG.trace("Created new connection: {}", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,125,if (LOG.isTraceEnabled()) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,126,LOG.trace("Connection has expired: {} and will be destroyed", connection);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java,277,connectionsPool != null ? connectionsPool.getNumActive() : 0);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,115,private final TransportListener disposedListener = new DefaultTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,private final TransportListener myTransportListener = createTransportListener();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,183,TransportListener createTransportListener() {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,187,Command command = (Command) o;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,188,if (command == null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,189,return;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,191,if (command.isResponse()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,192,Object object = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,193,synchronized (requestMap) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,194,object = requestMap.remove(Integer.valueOf(((Response) command).getCorrelationId()));
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,196,if (object != null && object.getClass() == Tracked.class) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,197,((Tracked) object).onResponses(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,204,if (command.isConnectionControl()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,205,handleConnectionControl((ConnectionControl) command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,207,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,208,transportListener.onCommand(command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,215,handleTransportFailure(error);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,218,transportListener.onException(new InterruptedIOException());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,224,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,225,transportListener.transportInterupted();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,231,if (transportListener != null) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,232,transportListener.transportResumed();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,261,+ (reconnectOk ? "," : ", not") + " attempting to automatically reconnect", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,340,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,341,LOG.debug("Started " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,366,LOG.debug("Stopped " + this);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,401,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,402,LOG.trace("Stopped backup: " + transport);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,575,myTransportListener.onCommand(response);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,585,myTransportListener.onCommand(dispatch);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,601,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,602,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,607,if (LOG.isInfoEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,608,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,616,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,617,LOG.debug("Interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,642,LOG.debug("Cannot track the command " + command, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,680,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,681,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,690,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,691,LOG.debug("Send oneway attempt: " + i + " failed for command:" + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,759,LOG.error("Failed to parse URI: " + u);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,803,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,804,LOG.debug("urlList connectionList:" + l + ", from: " + uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,848,if (LOG.isTraceEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,849,LOG.trace("restore requestMap, replay: " + command);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,903,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,941,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,942,LOG.debug("Doing rebalance from: " + connectedTransportURI + " to " + connectList);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,951,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,952,LOG.debug("Caught an exception stopping existing transport for rebalance", e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1013,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1014,LOG.debug("Attempting  " + connectFailures + "th  connect to: " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1016,transport.setTransportListener(myTransportListener);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1019,if (started &&  !firstConnection) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1023,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1024,LOG.debug("Connection established");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1048,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1049,LOG.debug("transport resumed by transport listener not set");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1055,LOG.info("Successfully connected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1057,LOG.info("Successfully reconnected to " + uri);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1064,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1065,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1072,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1073,LOG.debug("Stop of failed transport: " + transport +
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1089,LOG.error("Failed to connect to " + uris + " after: " + connectFailures + " attempt(s)");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1386,LOG.error("Failed to Lookup INetAddress for URI[ " + first + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1388,LOG.error("Failed to Lookup INetAddress for URI[ " + second + " ] : " + e);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,987,if (transport == null && !firstConnection && (reconnectDelay > 0) && !disposed) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,988,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,989,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,990,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,992,try {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,993,sleepMutex.wait(reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,995,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1124,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1125,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,38,ManagedRegionBroker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,39,String currentState = "Good";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,170,this.currentState = "Getting Worried {";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,172,currentState += hs + " , ";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,174,currentState += " }";
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/HealthView.java,176,this.currentState = "Good";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,260,journal = new Journal() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,262,protected void cleanup() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,263,super.cleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,264,txStoreCleanup();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,267,journal.setDirectory(getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,268,journal.setMaxFileLength(journalMaxFileLength);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,269,journal.setWriteBatchSize(journalWriteBatchSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,270,IOHelper.mkdirs(journal.getDirectory());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,271,journal.start();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,272,recoverPendingLocalTransactions();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,273,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,293,journal.close();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,294,journal = null;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,851,if (compressed) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,875,ByteSequence data = getContent();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,876,if (data == null) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,877,data = new ByteSequence(new byte[] {}, 0, 0);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,879,InputStream is = new ByteArrayInputStream(data);
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,880,if (isCompressed()) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,881,if (data.length != 0) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,882,is = new ByteArrayInputStream(decompress(data));
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,885,length = data.getLength();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,888,dataIn = new DataInputStream(is);
activemq-client/src/main/java/org/apache/activemq/command/Message.java,145,copy.content = content;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,146,copy.marshalledProperties = marshalledProperties;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,292,return this.maxBrowsePageSize > 0 ? this.maxBrowsePageSize : getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1190,pageInMessages(!memoryUsage.isFull(110));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1290,doPageIn(true, false);  // signal no expiry processing needed.
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1658,pageInMessages(hasBrowsers);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1898,doPageIn(force, true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1901,private void doPageIn(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1902,PendingList newlyPaged = doPageInForDispatch(force, processExpired);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1920,private PendingList doPageInForDispatch(boolean force, boolean processExpired) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1924,int toPageIn = Math.min(getMaxPageSize(), messages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1933,LOG.debug("{} toPageIn: {}, Inflight: {}, pagedInMessages.size {}, pagedInPendingDispatch.size {}, enqueueCount: {}, dequeueCount: {}, memUsage:{}",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1934,new Object[]{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1936,toPageIn,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1937,destinationStatistics.getInflight().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1938,pagedInMessages.size(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1939,pagedInPendingSize,
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1940,destinationStatistics.getEnqueues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1941,destinationStatistics.getDequeues().getCount(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1949,if (toPageIn > 0 && (force || (!consumers.isEmpty() && pagedInPendingSize < getMaxPageSize()))) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1957,while (messages.hasNext() && count < toPageIn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2176,protected void pageInMessages(boolean force) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2177,doDispatch(doPageInForDispatch(force, true));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2195,boolean zeroPrefetch = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2199,zeroPrefetch |= s.getPrefetchSize() == 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2206,if (total == 0 && zeroPrefetch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2207,total = 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1051,Checksum checksum = new Adler32();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1055,for (PageWrite w : batch) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1056,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1066,writeFile.seek(toOffset(w.page.getPageId()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1067,writeFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1068,w.done();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1072,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1074,if (recoveryPageCount > recoveryFileMaxPageCount) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1075,int t = Math.max(recoveryFileMinPageCount, batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1076,recoveryFile.setLength(recoveryFileSizeForPages(t));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1080,recoveryFile.seek(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1082,recoveryFile.writeLong(nextTxid.get());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1086,recoveryFile.writeLong(checksum.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1088,recoveryFile.writeInt(batch.size());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1093,if (enableRecoveryFile) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,721,if (isGcIfInactive()&& this.lastActiveTime != 0l) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,283,return safeGetBroker().getTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,288,return safeGetBroker().getQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,293,return safeGetBroker().getTemporaryTopics();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,298,return safeGetBroker().getTemporaryQueues();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,303,return safeGetBroker().getTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,308,return safeGetBroker().getDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,313,return safeGetBroker().getQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,318,return safeGetBroker().getTemporaryTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,323,return safeGetBroker().getTemporaryQueueSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,328,return safeGetBroker().getInactiveDurableTopicSubscribers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,333,return safeGetBroker().getTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,338,return safeGetBroker().getQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,343,return safeGetBroker().getTemporaryTopicProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,348,return safeGetBroker().getTemporaryQueueProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,353,return safeGetBroker().getDynamicDestinationProducers();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,21,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,24,import java.util.Map;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,26,import java.util.Set;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,34,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,36,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,79,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,83,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,229,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,233,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,234,MessageDispatch md = (MessageDispatch)i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1343,LOG.warn("Non existent message update attempt rejected. Destination: {}://{}, Message id: {}", command.getDestination().getType(), command.getDestination().getName(), command.getMessageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1628,if (pendingAcks == null || pendingAcks.size() <= 1) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,87,worker.release();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,62,return retainCounter.get()==0;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,72,Runnable task;
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,73,while( (task= ioTasks.poll()) !=null ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,91,processIoTasks();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,93,int count = selector.select(10);
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,101,Set keys = selector.selectedKeys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,103,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,104,final SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,107,final SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,109,if( key.isValid() ) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,137,Set keys = selector.keys();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,138,for (Iterator i = keys.iterator(); i.hasNext();) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,139,SelectionKey key = (SelectionKey)i.next();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,140,SelectorSelection s = (SelectorSelection)key.attachment();
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorWorker.java,148,ignore.printStackTrace();
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,34,private BrokerSupport() {
activemq-broker/src/main/java/org/apache/activemq/util/BrokerSupport.java,51,public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,748,ActiveMQDestination deadLetterDestination = deadLetterStrategy.getDeadLetterQueueFor(message, subscription);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,634,getPersistenceAdapter().setUsageManager(getProducerSystemUsage());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,635,getPersistenceAdapter().setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,636,LOG.info("Using Persistence Adapter: {}", getPersistenceAdapter());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,640,getPersistenceAdapter().start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,778,stopper.stop(getManagementContext());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1157,if (persistenceAdapter == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,620,startException = e;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,654,startException = t;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,664,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,665,return;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,775,stopper.stop(persistenceAdapter);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,920,if (startException != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1156,public PersistenceAdapter getPersistenceAdapter() throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2913,public Throwable getStartException() {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,100,public void unlock() {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,537,LOG.debug("{} detail: {}", message, cause);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,291,message.setRegionDestination(Queue.this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1673,metadata.ackMessageFileMap.remove(candidate);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1660,boolean result = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1661,boolean empty = true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1663,File directory = getTmpDataDirectory();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1664,if (directory.exists() && directory.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1665,File[] files = directory.listFiles();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1666,if (files != null && files.length > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1667,empty = false;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1668,for (int i = 0; i < files.length; i++) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1669,File file = files[i];
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1670,if (!file.isDirectory()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1671,result &= file.delete();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1676,if (!empty) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1677,String str = result ? "Successfully deleted" : "Failed to delete";
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1678,LOG.info("{} temporary storage", str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1685,this.tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1700,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1701,tempDataStore.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1703,RuntimeException exception = new RuntimeException("Failed to start provided temp data store: " + tempDataStore, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1704,LOG.error(exception.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1705,throw exception;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,805,if (LOG.isInfoEnabled()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,806,LOG.info("Some journal files are missing: " + missingJournalFiles);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,822,missingPredicates.add(new BTreeVisitor.BetweenVisitor<Location, Long>(new Location(id, (int) seq.getFirst()), new Location(id, (int) seq.getLast() + 1)));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,854,throw new IOException("Detected missing/corrupt journal files. "+matches.size()+" messages affected.");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/BTreeVisitor.java,169,return first+" <= key < "+last;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,184,public void doStart() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,92,message.setRegionDestination(regionDestination);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,332,ActiveMQTopic topic = AdvisorySupport.getExpiredMessageTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,349,ActiveMQTopic topic = AdvisorySupport.getMessageConsumedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,354,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,355,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,370,ActiveMQTopic topic = AdvisorySupport.getMessageDeliveredAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,375,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,376,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,391,ActiveMQTopic topic = AdvisorySupport.getMessageDiscardedAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,400,ActiveMQDestination destination = payload.getDestination();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,401,if (destination != null) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,480,ActiveMQTopic topic = AdvisorySupport.getMessageDLQdAdvisoryTopic(messageReference.getMessage().getDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,461,message.setRegionDestination(this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,639,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,737,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,738,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,716,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,724,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,725,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,655,boolean interrupted = Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,660,if (interrupted) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,661,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,19,import java.io.InterruptedIOException;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,32,import org.apache.activemq.command.Command;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,38,import org.apache.activemq.command.Response;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,326,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,401,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,402,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,404,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,406,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,412,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,413,beforeEnd();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,415,throw toXAException(e);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,417,setXid(null);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,457,IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,521,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,561,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,621,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,726,syncSendPacketWithInterruptionHandling(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,767,private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,768,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,769,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,771,if (e.getLinkedException() instanceof InterruptedIOException) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,772,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,773,Thread.interrupted();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,774,return this.connection.syncSendPacket(command);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,776,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,780,throw e;
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,42,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,43,if (LOG.isDebugEnabled()) {
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,44,LOG.debug("Operation interupted: " + e, e);
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,46,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/FutureResponse.java,58,throw new InterruptedIOException("Interrupted.");
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,67,FutureResponse future = new FutureResponse(responseCallback);
activemq-client/src/main/java/org/apache/activemq/transport/ResponseCorrelator.java,125,dispose(error);
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,97,if (!readyCountDownLatch.await(negotiateTimeout, TimeUnit.MILLISECONDS)) {
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,101,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/WireFormatNegotiator.java,102,throw new InterruptedIOException();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,132,public FailoverTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,159,public FanoutTransport() throws InterruptedIOException {
activemq-client/src/main/java/org/apache/activemq/util/ThreadPoolUtils.java,127,executorService.shutdownNow();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,745,sd.locationIndex.remove(tx, keys.location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,746,sd.messageIdIndex.remove(tx, keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,747,metadata.producerSequenceIdTracker.rollback(keys.messageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,748,undoCounter++;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,64,boolean matches = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,65,MessageEvaluationContext msgContext = new NonCachedMessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,66,msgContext.setDestination(dest.getActiveMQDestination());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,67,msgContext.setMessageReference(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,68,List<Subscription> subs = dest.getConsumers();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,69,for (Subscription sub : subs) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,70,if (sub.matches(message, msgContext)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,71,matches = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,72,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,75,if (matches == false) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,76,matches = tryMatchingCachedSubs(broker, dest, msgContext);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,78,return matches;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1397,md.setRollbackCause(e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,903,checkUsage(context, producerExchange, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,904,sendLock.lockInterruptibly();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,905,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,906,if (store != null && message.isPersistent()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,907,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,909,if (messages.isCacheEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,910,result = store.asyncAddQueueMessage(context, message, isOptimizeStorage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,911,result.addListener(new PendingMarshalUsageTracker(message));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,913,store.addMessage(context, message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,915,if (isReduceMemoryFootprint()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,916,message.clearMarshalledState();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,921,resetNeeded = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,922,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,942,sendLock.unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,96,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,391,LOG.info("socketQueue interuppted - stopping");
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,392,if (!isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/util/IOHelper.java,189,throw new IOException("Failed to move " + src + " to " + targetDirectory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,59,BrokerService brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,448,this.brokerService = brokerService;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,456,public BrokerService getBrokerService() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,457,return brokerService;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTNIOSSLTransportFactory.java,41,TcpTransportServer result = new TcpTransportServer(this, location, serverSocketFactory) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,147,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,148,if (trace && peerCerts != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,149,LOG.debug("Peer Identity has been verified\n");
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,151,return peerCerts;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTTransportFilter.java,153,return null;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,77,usageLock.readLock().lock();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,83,inputBuffer = ByteBuffer.allocate(8 * 1024);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOTransport.java,87,NIOOutputStream outPutStream = new NIOOutputStream(channel, 16 * 1024);
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,60,if (System.getProperty(getVmLockKey()) != null) {
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,61,throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,63,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,78,System.setProperty(getVmLockKey(), new Date().toString());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,92,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,114,System.getProperties().remove(getVmLockKey());
activemq-broker/src/main/java/org/apache/activemq/util/LockFile.java,117,lock = null;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,600,&& !Thread.currentThread().isInterrupted()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1060,indexLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1064,indexLock.readLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1301,long id = sd.orderIndex.getNextMessageId(priority);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1388,LOG.debug("no message sequence exists for id: " + command.getMessageId() + " and sub: " + command.getSubscriptionKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2935,long getNextMessageId(int priority) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,359,Map transactionMap = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,360,synchronized (xaTransactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,361,transactionMap = xid.isXATransaction() ? xaTransactions : context.getTransactions();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,363,Transaction transaction = (Transaction)transactionMap.get(xid);
activemq-http/src/main/java/org/apache/activemq/transport/SecureSocketConnectorFactory.java,22,import org.apache.activemq.transport.https.Krb5AndCertsSslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,19,import java.io.IOException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,20,import java.net.ServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,21,import java.security.KeyManagementException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,22,import java.security.NoSuchAlgorithmException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,23,import java.security.NoSuchProviderException;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,24,import java.security.Principal;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,25,import java.util.Collections;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,26,import java.util.List;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,27,import java.util.Random;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,28,import javax.net.ssl.SSLContext;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,29,import javax.net.ssl.SSLServerSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,30,import javax.net.ssl.SSLSocket;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,32,import org.eclipse.jetty.http.HttpSchemes;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,33,import org.eclipse.jetty.io.EndPoint;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,34,import org.eclipse.jetty.server.Request;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,35,import org.eclipse.jetty.server.ssl.ServletSSL;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,36,import org.eclipse.jetty.server.ssl.SslSocketConnector;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,37,import org.eclipse.jetty.util.ssl.SslContextFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,38,import org.slf4j.Logger;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,39,import org.slf4j.LoggerFactory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,47,public class Krb5AndCertsSslSocketConnector extends SslSocketConnector {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,48,public static final List<String> KRB5_CIPHER_SUITES = Collections.unmodifiableList(Collections.singletonList("TLS_KRB5_WITH_3DES_EDE_CBC_SHA"));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,49,static {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,50,System.setProperty("https.cipherSuites", KRB5_CIPHER_SUITES.get(0));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,53,private static final Logger LOG = LoggerFactory.getLogger(Krb5AndCertsSslSocketConnector.class);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,55,private static final String REMOTE_PRINCIPAL = "remote_principal";
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,57,public enum MODE {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,58,KRB, CERTS, BOTH
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,61,private boolean useKrb;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,62,private boolean useCerts;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,64,public Krb5AndCertsSslSocketConnector() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,66,super();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,67,useKrb = false;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,68,useCerts = true;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,69,setPasswords();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,72,public static boolean isKrb(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,73,return mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,76,public void setMode(String mode) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,77,useKrb = mode == MODE.KRB.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,78,useCerts = mode == MODE.CERTS.toString() || mode == MODE.BOTH.toString();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,79,logIfDebug("useKerb = " + useKrb + ", useCerts = " + useCerts);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,84,private void setPasswords() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,85,if (!useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,86,Random r = new Random();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,87,System.setProperty("jetty.ssl.password", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,88,System.setProperty("jetty.ssl.keypassword", String.valueOf(r.nextLong()));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,93,public SslContextFactory getSslContextFactory() {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,94,final SslContextFactory factory = super.getSslContextFactory();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,96,if (useCerts) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,97,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,100,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,101,SSLContext context = factory.getProvider() == null ? SSLContext.getInstance(factory.getProtocol()) : SSLContext.getInstance(factory.getProtocol(),
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,102,factory.getProvider());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,103,context.init(null, null, null);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,104,factory.setSslContext(context);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,110,return factory;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,121,protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,122,logIfDebug("Creating new KrbServerSocket for: " + host);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,123,SSLServerSocket ss = null;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,125,if (useCerts) // Get the server socket from the SSL super impl
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,126,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,127,else { // Create a default server socket
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,128,try {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,129,ss = (SSLServerSocket) super.newServerSocket(host, port, backlog);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,131,LOG.warn("Could not create KRB5 Listener", e);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,132,throw new IOException("Could not create KRB5 Listener: " + e.toString());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,137,if (useKrb) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,138,ss.setNeedClientAuth(true);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,139,String[] combined;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,140,if (useCerts) { // combine the cipher suites
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,141,String[] certs = ss.getEnabledCipherSuites();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,142,combined = new String[certs.length + KRB5_CIPHER_SUITES.size()];
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,143,System.arraycopy(certs, 0, combined, 0, certs.length);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,144,System.arraycopy(KRB5_CIPHER_SUITES.toArray(new String[0]), 0, combined, certs.length, KRB5_CIPHER_SUITES.size());
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,146,combined = KRB5_CIPHER_SUITES.toArray(new String[0]);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,149,ss.setEnabledCipherSuites(combined);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,151,return ss;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,155,public void customize(EndPoint endpoint, Request request) throws IOException {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,156,if (useKrb) { // Add Kerberos-specific info
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,157,SSLSocket sslSocket = (SSLSocket) endpoint.getTransport();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,158,Principal remotePrincipal = sslSocket.getSession().getPeerPrincipal();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,159,logIfDebug("Remote principal = " + remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,160,request.setScheme(HttpSchemes.HTTPS);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,161,request.setAttribute(REMOTE_PRINCIPAL, remotePrincipal);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,163,if (!useCerts) { // Add extra info that would have been added by
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,165,String cipherSuite = sslSocket.getSession().getCipherSuite();
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,166,Integer keySize = Integer.valueOf(ServletSSL.deduceKeyLength(cipherSuite));
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,167,;
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,169,request.setAttribute("javax.servlet.request.cipher_suite", cipherSuite);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,170,request.setAttribute("javax.servlet.request.key_size", keySize);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,175,super.customize(endpoint, request);
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,178,private void logIfDebug(String s) {
activemq-http/src/main/java/org/apache/activemq/transport/https/Krb5AndCertsSslSocketConnector.java,180,LOG.debug(s);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,28,import org.apache.activemq.transport.tcp.SslTransportServer;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,91,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,92,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,93,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,94,isSSL = transportConnector.getServer().isSslServer();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,99,if (isSSL) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,113,boolean isSSL;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,114,Connector connector = context.getConnector();
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,115,if (connector instanceof TransportConnector) {
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,116,TransportConnector transportConnector = (TransportConnector) connector;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,117,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,119,isSSL = false;
activemq-broker/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,122,if (isSSL) {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,73,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,79,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,103,int nextHour = getNext(hours, currentHours);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,109,int nextMinutes = getNext(minutes, currentMinutes);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,126,int nextMonth = getNext(month, currentMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,153,nextWeekDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,157,nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth);
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,193,static int getNext(final CronEntry entry, final int current) throws MessageFormatException {
activemq-client/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,212,result = entry.end + first - entry.start - current;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1479,BrokerSupport.resend(context, m.getMessage(), dest);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1480,removeMessage(context, m);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1481,messagesLock.writeLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1483,messages.rollback(m.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1484,if (isDLQ()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1485,DeadLetterStrategy stratagy = getDeadLetterStrategy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1486,stratagy.rollback(m.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1489,messagesLock.writeLock().unlock();
activemq-osgi/src/main/java/org/apache/activemq/osgi/ActiveMQServiceFactory.java,105,broker.waitUntilStarted();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,65,public void marshal(Object command, DataOutput os) throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,66,StompFrame stomp = (org.apache.activemq.transport.stomp.StompFrame)command;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,68,if (stomp.getAction().equals(Stomp.Commands.KEEPALIVE)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,69,os.write(Stomp.BREAK);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,70,return;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,73,StringBuilder buffer = new StringBuilder();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,88,os.write(buffer.toString().getBytes("UTF-8"));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,52,protected final LinkedHashMap<MessageId, MessageDispatch> dispatchedMessage = new LinkedHashMap<MessageId, MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,53,protected final LinkedList<MessageDispatch> unconsumedMessage = new LinkedList<MessageDispatch>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,68,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,69,synchronized (this) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,70,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,186,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1524,gcCandidateSet.remove(lastUpdate.getDataFileId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1512,pageFile.flush();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2307,public long getStoredMessageCount(Transaction tx, StoredDestination sd, String subscriptionKey) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2308,SequenceSet messageSequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2309,if (messageSequences != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2310,long result = messageSequences.rangeSize();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2312,return result > 0 ? result - 1 : 0;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,205,Vector<TransactionInfo> toRollback = new Vector<TransactionInfo>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2444,List<TransportConnector> al = new ArrayList<TransportConnector>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,999,LOG.error("KahaDB failed to store to Journal", ioe);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,200,firstAsyncException = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,203,if (firstAsyncException != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,204,throw firstAsyncException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,382,logger.info("Journal failed while writing at: " + wb.offset);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,384,firstAsyncException = e;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,385,if (wb != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,386,wb.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,387,wb.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,389,if (nextWriteBatch != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,390,nextWriteBatch.exception.set(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,391,nextWriteBatch.latch.countDown();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,416,if (write.onComplete != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1481,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1483,public void execute(Transaction tx) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1484,checkpointUpdate(tx, cleanup);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1500,void checkpointUpdate(Transaction tx, boolean cleanup) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2108,protected ObjectName createNetworkConnectorObjectName(NetworkConnector connector) throws MalformedObjectNameException {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2443,Set<ActiveMQDestination> durableDestinations = getBroker().getDurableDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2483,connector.setBrokerName(getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2484,connector.setDurableDestinations(durableDestinations);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2485,if (getDefaultSocketURIString() != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2486,connector.setBrokerURL(getDefaultSocketURIString());
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2488,if (networkConnectorStartExecutor != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2489,networkConnectorStartExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2491,public void run() {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2492,try {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2493,LOG.info("Async start of {}", connector);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2494,connector.start();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2496,LOG.error("Async start of network connector: {} failed", connector, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2501,connector.start();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,45,private ExecutorService executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,83,if (initDone.compareAndSet(false, true)) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,86,if (dedicatedTaskRunner || "true".equalsIgnoreCase(System.getProperty("org.apache.activemq.UseDedicatedTaskRunner"))) {
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,87,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,89,executor = createDefaultExecutor();
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,91,LOG.debug("Initialized TaskRunnerFactory[{}] using ExecutorService: {}", name, executor);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,103,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,105,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,116,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,118,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,129,executor = null;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,131,initDone.set(false);
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,187,return executor;
activemq-client/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,191,this.executor = executor;
activemq-client/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,178,IntrospectionSupport.setProperties(socket, transportOptions);
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,139,public static boolean setProperties(Object target, Map props) {
activemq-client/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,152,iter.remove();
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,349,subscriptions.put(info.getConsumerId(), sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,275,boolean isActive = destinationStatistics.getConsumers().getCount() != 0 ||
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,276,destinationStatistics.getProducers().getCount() != 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,277,if (isActive && isGcWithNetworkConsumers() && destinationStatistics.getConsumers().getCount() != 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,191,super.removeSubscription(context, sub, lastDeliveredSequenceId);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,193,consumers.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,193,if (sub.matches(destination)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,194,throw new JMSException("Destination still has an active subscription: " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,144,addSubscriptionsForDestination(context, dest);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1543,LOG.trace("gc candidates after producerSequenceIdTrackerLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1551,LOG.trace("gc candidates after ackMessageFileMapLocation:" + dataFileId + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1562,LOG.trace("gc candidates after tx range:" + Arrays.asList(inProgressTxRange) + ", " + gcCandidateSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,427,if (writeFile.length() < PAGE_FILE_HEADER_SIZE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,428,writeFile.setLength(PAGE_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,430,nextFreePageId.set((writeFile.length() - PAGE_FILE_HEADER_SIZE) / pageSize);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1289,do {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1291,pagedInMessagesLock.readLock().lock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1292,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1293,list = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1295,pagedInMessagesLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1298,for (MessageReference ref : list) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1300,QueueMessageReference r = (QueueMessageReference) ref;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1301,removeMessage(c, r);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1309,if (this.destinationStatistics.getMessages().getCount() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1312,gc();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1313,this.destinationStatistics.getMessages().setCount(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1314,getMessages().clear();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,126,protected transient Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,132,destinations = new BTreeIndex<String, StoredDestination>(pageFile, is.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,285,metadata.destinations = new BTreeIndex<String, StoredDestination>(pageFile, tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,406,IOHelper.mkdirs(directory);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,426,if( opened.compareAndSet(true, false)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,511,HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,554,ArrayList<TranInfo> infos = new ArrayList<TranInfo>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,630,Set<TransactionId> toRollback = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,631,Set<TransactionId> toDiscard = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,734,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,798,HashSet<Integer> missingJournalFiles = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,810,ArrayList<BTreeVisitor.Predicate<Location>> missingPredicates = new ArrayList<BTreeVisitor.Predicate<Location>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1288,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1398,referenceFileIds = new HashSet<Integer>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1516,final TreeSet<Integer> completeFileSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1517,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(completeFileSet);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1865,final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1866,final HashSet<String> subscriptionCache = new LinkedHashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1874,value.orderIndex.defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1875,value.locationIndex = new BTreeIndex<Location, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1876,value.messageIdIndex = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1879,value.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1880,value.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1882,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1888,LinkedHashMap<String, SequenceSet> temp = new LinkedHashMap<String, SequenceSet>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1893,new BTreeIndex<Long, HashSet<String>>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1918,value.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1931,value.subLocations = new ListIndex<String, Location>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1937,value.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1946,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1947,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, dataIn.readLong());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1953,value.orderIndex.lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1958,value.orderIndex.highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2041,rc.locationIndex = new BTreeIndex<Location, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2042,rc.messageIdIndex = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2045,rc.subscriptions = new BTreeIndex<String, KahaSubscriptionCommand>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2046,rc.subscriptionAcks = new BTreeIndex<String, LastAck>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2047,rc.ackPositions = new ListIndex<String, SequenceSet>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2048,rc.subLocations = new ListIndex<String, Location>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2086,rc.subscriptionCursors = new HashMap<String, MessageOrderCursor>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2227,ArrayList<Long> unreferenced = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2245,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2290,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2326,private final LinkedHashMap<TransactionId, List<Operation>> inflightTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2328,protected final LinkedHashMap<TransactionId, List<Operation>> preparedTransactions = new LinkedHashMap<TransactionId, List<Operation>>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2329,protected final Set<String> ackedAndPrepared = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2330,protected final Set<String> rolledBackAcks = new HashSet<String>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2793,defaultPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2795,lowPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2796,highPriorityIndex = new BTreeIndex<Long, MessageKeys>(pageFile, tx.allocate());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,771,if (e instanceof SecurityException) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,773,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,95,private boolean starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,96,private boolean pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,200,if (!stopping.get() && !pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,275,if (pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,293,if (!pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,915,if (pendingStop || stopping.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,973,starting = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,994,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1022,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1046,pendingStop = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1047,if (starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1258,public synchronized boolean isStarting() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1259,return starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1272,protected synchronized void setStarting(boolean starting) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1273,this.starting = starting;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1279,public synchronized boolean isPendingStop() {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1280,return pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1283,protected synchronized void setPendingStop(boolean pendingStop) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1284,this.pendingStop = pendingStop;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,41,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,135,private final AtomicBoolean started = new AtomicBoolean();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,557,this.subscriptionRecoveryPolicy.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,558,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,559,memoryUsage.start();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,569,if (taskRunner != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,570,taskRunner.shutdown();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,572,this.subscriptionRecoveryPolicy.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,573,if (memoryUsage != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,574,memoryUsage.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,576,if (this.topicStore != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,577,this.topicStore.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,580,scheduler.cancel(expireMessagesTask);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,151,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,153,public void onSelect(SelectorSelection selection) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,154,serviceRead();
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,158,public void onError(SelectorSelection selection, Throwable error) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,159,if (error instanceof IOException) {
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,160,onException((IOException) error);
activemq-client/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,162,onException(IOExceptionSupport.create(error));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,831,final ArrayList<Long> matches = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,835,matches.add(value);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,846,for (Long sequenceId : matches) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,58,private static final int MAX_BATCH_SIZE = 32*1024*1024;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1298,private Runnable listener;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1319,this.listener = listener;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,21,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,269,if (ack.isStandardAck() || ack.isPoisonAck() || ack.isIndividualAck()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,270,if (context.isInTransaction()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,271,context.getTransaction().addSynchronization(new Synchronization() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,274,public void afterCommit() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,281,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,298,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,299,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,302,prefetchExtension.addAndGet(ack.getMessageCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,303,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,304,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,319,dispatchMatched();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,320,return;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,325,throw new JMSException("Invalid acknowledgment: " + ack);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,486,return getDispatchedQueueSize() >= info.getPrefetchSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,499,return getDispatchedQueueSize() <= (info.getPrefetchSize() * .4);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,507,return getDispatchedQueueSize() >= (info.getPrefetchSize() * .9);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,55,private final List<JobListener> jobListeners = new CopyOnWriteArrayList<JobListener>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,203,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,223,final List<Job> result = new ArrayList<Job>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,297,startTime = (startTime / 1000) * 1000;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,349,values = new ArrayList<JobLocation>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,451,List<Long> keys = new ArrayList<Long>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,524,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,658,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), tx.allocate().getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/scheduler/JobSchedulerImpl.java,669,this.index = new BTreeIndex<Long, List<JobLocation>>(this.store.getPageFile(), in.readLong());
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,76,private boolean disposed;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,93,private boolean started;
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,133,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMapMessage.java,134,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,211,public void clearMarshalledState() throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQObjectMessage.java,212,super.clearMarshalledState();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,149,public void clearMarshalledState() throws JMSException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,605,LOG.debug("setting prefetch: {}, on subscription: {}; resulting value: {}", new Object[]{ control.getPrefetch(), control.getConsumerId(), sub.getConsumerInfo().getCurrentPrefetchSize()});
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,25,import java.util.concurrent.atomic.AtomicInteger;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,59,protected final AtomicInteger prefetchExtension = new AtomicInteger();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,413,for (Destination dest : destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,414,dest.wakeup();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,850,protected int getPrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,851,return this.prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,80,+ this.prefetchExtension + ", pending=" + getPendingQueueSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,68,private final AtomicInteger prefetchExtension = new AtomicInteger(0);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,464,protected Region getRegion(ActiveMQDestination destination) throws JMSException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/plist/PListStoreImpl.java,276,this.directory = new File(IOHelper.getDefaultDataDirectory() + File.pathSeparator + "delayedDB");
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,345,private boolean hasDurableSubChanged(ConsumerInfo info1, ConsumerInfo info2) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,44,public class MemoryPersistenceAdapter implements PersistenceAdapter {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,56,public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore, TransactionIdTransformerAware {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,46,public class MultiKahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, BrokerServiceAware {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,53,public boolean equals(Object o) {
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,54,ConversionKey x = (ConversionKey)o;
activemq-client/src/main/java/org/apache/activemq/util/TypeConversionSupport.java,55,return x.from == from && x.to == to;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,145,return;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,150,if (!done) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,151,queued = true;
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,154,if (queued) {
activemq-client/src/main/java/org/apache/activemq/thread/PooledTaskRunner.java,155,executor.execute(runable);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1997,LOG.warn("{}, duplicate message {} paged in, is cursor audit disabled? Removing from store and redirecting to dlq", this, ref.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2000,store.removeMessage(connectionContext, new MessageAck(ref.getMessage(), MessageAck.POSION_ACK_TYPE, 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,2001,broker.getRoot().sendToDeadLetterQueue(connectionContext, ref.getMessage(), null, new Throwable("duplicate paged in from store for " + destination));
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,133,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,134,if (trace && peerCerts != null) {
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,135,LOG.debug("Peer Identity has been verified\n");
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,137,return peerCerts;
activemq-amqp/src/main/java/org/apache/activemq/transport/amqp/AmqpTransportFilter.java,139,return null;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,21,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,32,import org.apache.activemq.store.AbstractMessageStore;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,84,if( removed !=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,97,for (Iterator<Message> iter = messageTable.values().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,128,int count = 0;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,129,for (Iterator iter = messageTable.entrySet().iterator(); iter.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,130,Map.Entry entry = (Entry)iter.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,132,count++;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,134,lastBatchId = (MessageId)entry.getKey();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,136,listener.recoverMessageReference((MessageId)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,138,listener.recoverMessage((Message)msg);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,164,return (MemoryMessageStore)value;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,167,MessageStore delegate = ((ProxyMessageStore)value).getDelegate();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,193,public File getDirectory(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryPersistenceAdapter.java,200,public long size(){
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,22,import java.util.Iterator;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,24,import java.util.Map.Entry;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,48,public MemoryTopicMessageStore(ActiveMQDestination destination, Map<MessageId, Message> messageTable, Map<SubscriptionKey, SubscriptionInfo> subscriberDatabase) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,64,for (Iterator<MemoryTopicSub> i = topicSubMap.values().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,65,MemoryTopicSub sub = i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,70,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,71,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,85,MemoryTopicSub sub = new MemoryTopicSub();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,88,for (Iterator i = messageTable.entrySet().iterator(); i.hasNext();) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,89,Map.Entry entry = (Entry)i.next();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,90,sub.addMessage((MessageId)entry.getKey(), (Message)entry.getValue());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,97,org.apache.activemq.util.SubscriptionKey key = new SubscriptionKey(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,34,private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>();
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,38,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,46,synchronized(this) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTopicSub.java,52,if( removed!=null ) {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,136,this.persistenceAdapter=persistenceAdapter;
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,215,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,216,MessageId messageId, MessageAck ack) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,217,MemoryTransactionStore.this.acknowledge((TopicMessageStore)getDelegate(), clientId,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,257,public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,298,listener.recover((XATransactionId)txid, tx.getMessages(), tx.getAcks());
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,377,public void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,378,final MessageId messageId, final MessageAck ack) throws IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,239,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,240,return listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,244,return listener.recoverMessageReference(new MessageId(reference));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,687,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,709,KahaAckMessageFileMapCommand audit = (KahaAckMessageFileMapCommand) load(metadata.ackMessageFileMapLocation);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessor.java,92,throw new IOException("Invalid location: " + location + ", : " + e, e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1105,JournalCommand<?> command = load(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1106,KahaAddMessageCommand addMessage = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1107,switch (command.type()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1108,case KAHA_UPDATE_MESSAGE_COMMAND:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1109,addMessage = ((KahaUpdateMessageCommand)command).getMessage();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1110,break;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1111,default:
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1112,addMessage = (KahaAddMessageCommand) command;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1114,Message msg = (Message) wireFormat.unmarshal(new DataInputStream(addMessage.getMessage().newInput()));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1115,return msg;
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,229,if (broker.isExpired(node)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,233,((Destination)node.getRegionDestination()).getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,234,broker.messageExpired(getContext(), node, this);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,611,if (LOG.isInfoEnabled() && redoCounter % 100000 == 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,612,LOG.info("@" + recoveryPosition +  ", "  + redoCounter + " entries recovered ..");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,42,private boolean used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,57,used = true;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,71,public synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,72,used = false;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,76,return used;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,97,synchronized void clearUsedMark() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,98,for (Pool pool : pools.values()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,99,pool.clearUsedMark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAccessorPool.java,103,synchronized void disposeUnused() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,388,protected synchronized void cleanup() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,692,boolean expired = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,693,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,694,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,696,Message message = messageReference.getMessage();
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,697,synchronized (message) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,698,expired = stampAsExpired(message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,701,LOG.warn("unexpected exception on message expiry determination for: {}", messageReference, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,704,return expired;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,489,if (broker.isExpired(message)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,490,getDestinationStatistics().getExpired().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,491,broker.messageExpired(context, message, null);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,471,if (broker.isExpired(reference)) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,20,import java.sql.Connection;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,21,import java.sql.PreparedStatement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,22,import java.sql.SQLException;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,23,import java.sql.Statement;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,155,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,72,protected ReadWriteLock cleanupExclusiveLock = new ReentrantReadWriteLock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,85,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,86,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,125,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,135,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,154,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,165,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,184,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,193,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,204,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,217,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,246,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,258,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,269,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,278,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,298,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,308,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,320,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,329,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,340,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,349,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,359,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,370,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,394,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,405,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,424,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,434,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,451,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,460,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,487,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,498,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,526,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,546,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,557,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,568,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,589,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,600,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,624,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,635,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,660,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,671,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,686,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,705,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,742,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,751,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,770,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,780,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,798,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,807,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,817,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,825,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,833,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,841,cleanupExclusiveLock.writeLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,844,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatementWithPriority());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,851,cleanupExclusiveLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,861,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,875,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,900,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,908,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,981,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,996,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1005,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1037,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1045,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1053,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1064,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1073,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1084,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1122,cleanupExclusiveLock.readLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1132,cleanupExclusiveLock.readLock().lock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1143,cleanupExclusiveLock.readLock().unlock();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,148,result.setDurableDestinations(dest);
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,150,return result;
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,153,protected Transport createLocalTransport() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkConnector.java,154,return TransportFactory.connect(localURI);
activemq-broker/src/main/java/org/apache/activemq/network/jms/JmsConnector.java,578,Thread.sleep(policy.getNextDelay(attempt));
activemq-broker/src/main/java/org/apache/activemq/network/jms/ReconnectionPolicy.java,235,nextDelay = nextDelay * (long)(attempt * backOffMultiplier);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,48,import static javax.xml.bind.DatatypeConverter.parseBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,49,import static javax.xml.bind.DatatypeConverter.printBase64Binary;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,83,public void doCreateTables(TransactionContext c) throws SQLException, IOException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,84,Statement s = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,92,boolean alreadyExists = false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,93,ResultSet rs = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,94,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,95,rs = c.getConnection().getMetaData().getTables(null, null, this.statements.getFullMessageTableName(),
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,96,new String[] { "TABLE" });
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,97,alreadyExists = rs.next();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,100,close(rs);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,102,s = c.getConnection().createStatement();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,103,String[] createStatments = this.statements.getCreateSchemaStatements();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,104,for (int i = 0; i < createStatments.length; i++) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,107,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,108,LOG.debug("Executing SQL: " + createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,109,s.execute(createStatments[i]);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,111,if (alreadyExists) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,112,LOG.debug("Could not create JDBC tables; The message table already existed." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,114,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,116,LOG.warn("Could not create JDBC tables; they could already exist." + " Failure was: "
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,118,+ " Vendor code: " + e.getErrorCode());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,119,JDBCPersistenceAdapter.log("Failure details: ", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,126,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,127,s.close();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,134,final BrokerService brokerService = this.broker.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,186,BrokerService bService = connector.getBrokerService();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,187,if (bService.isShutdownOnSlaveFailure()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,188,if (brokerInfo != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,189,if (brokerInfo.isSlaveBroker()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,190,LOG.error("Slave has exception: {} shutting down master now.", e.getMessage(), e);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,191,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,192,doStop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,193,bService.stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,195,LOG.warn("Failed to stop the master", ex);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1331,MBeanNetworkListener listener = new MBeanNetworkListener(broker.getBrokerService(), config, broker.getBrokerService().createDuplexNetworkConnectorObjectName(duplexName));
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1334,duplexBridge.setBrokerService(broker.getBrokerService());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1424,result.setLastStoredSequenceId(broker.getBrokerService().getPersistenceAdapter().getLastProducerSequenceId(id));
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,104,XAException xae = new XAException("Prepare cannot be called now.");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,105,xae.errorCode = XAException.XAER_PROTO;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,185,XAException xae = new XAException("PRE COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,186,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,200,XAException xae = new XAException("POST COMMIT FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/Transaction.java,201,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,416,void done() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,417,try {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,418,browser.decrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,420,LOG.warn("decrement ref on browser: " + browser, e);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1654,boolean hasBrowsers = browserDispatches.size() > 0;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1667,try{
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1682,LOG.debug("dispatch to browser: {}, already dispatched/paged count: {}", browser, alreadyDispatchedMessages.size());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1684,for (MessageReference node : alreadyDispatchedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1947,toPageIn = Math.min(getConsumerMessageCountBeforeFull(), toPageIn);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1782,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1792,getDestinationStatistics().getDequeues().increment();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1818,if (!reference.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1819,reference.drop();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1820,destinationStatistics.getMessages().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,561,for (MessageReference ref : unAckedMessages) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,583,if (!qmr.isDropped()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,35,private boolean copyMessage = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,39,return new CompositeDestinationFilter(destination, getForwardTo(), isForwardOnly(), isCopyMessage(), isConcurrentSend());
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,84,return copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestination.java,93,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,45,private boolean copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,48,public CompositeDestinationFilter(Destination next, Collection forwardDestinations, boolean forwardOnly, boolean copyMessage, boolean concurrentSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,52,this.copyMessage = copyMessage;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,116,Message forwarded_message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,117,if (copyMessage) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,118,forwarded_message = message.copy();
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,119,forwarded_message.setDestination(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,121,else {
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,122,forwarded_message = message;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/CompositeDestinationFilter.java,127,regionBroker.send(context, forwarded_message);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,676,for (Destination dest :destinations) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,677,dest.slowConsumer(context, this);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,22,import javax.jms.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,25,import org.apache.activemq.command.*;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,35,private ActiveMQMessageTransformation() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,48,ActiveMQDestination activeMQDestination = null;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,50,if (destination != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,51,if (destination instanceof ActiveMQDestination) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,52,return (ActiveMQDestination)destination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,55,if (destination instanceof TemporaryQueue) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,56,activeMQDestination = new ActiveMQTempQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,58,activeMQDestination = new ActiveMQTempTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,60,activeMQDestination = new ActiveMQQueue(((Queue)destination).getQueueName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,62,activeMQDestination = new ActiveMQTopic(((Topic)destination).getTopicName());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,67,return activeMQDestination;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,149,BlobMessage blobMessage = (BlobMessage)message;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,150,ActiveMQBlobMessage msg = new ActiveMQBlobMessage();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,151,msg.setConnection(connection);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,153,msg.setBlobDownloader(new BlobDownloader(connection.getBlobTransferPolicy()));
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,155,try {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,156,msg.setURL(blobMessage.getURL());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageTransformation.java,160,activeMessage = msg;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,283,this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,54,private long reconnectDelay = initialReconnectDelay;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,137,LOG.debug("Failure occurred soon after the discovery event was generated.  It will be classified as a connection failure: "+event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,142,LOG.warn("Reconnect attempts exceeded "+maxReconnectAttempts+" tries.  Reconnecting has been disabled for: " + event);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,146,synchronized (sleepMutex) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,147,try {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,148,if (!running.get()) {
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,149,LOG.debug("Reconnecting disabled: stopped");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,150,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,153,LOG.debug("Waiting "+event.reconnectDelay+" ms before attempting to reconnect.");
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,154,sleepMutex.wait(event.reconnectDelay);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,156,LOG.debug("Reconnecting disabled: " + ie);
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,157,Thread.currentThread().interrupt();
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,158,return;
activemq-client/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,162,if (!useExponentialBackOff) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,113,FileInputStream fis = new FileInputStream(persistFile);
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,114,try {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,124,fis.close();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,67,public CompositeType getCompositeType() throws OpenDataException {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,34,import org.apache.activemq.store.PListStore;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,42,import org.apache.activemq.util.ByteSequence;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,398,expireOldMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,414,protected synchronized void expireOldMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,420,discardExpiredMessage(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,430,if (LOG.isTraceEnabled()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,432,LOG.trace("{}, flushToDisk() mem list size: {} {}", new Object[]{ name, memoryList.size(), (systemUsage != null ? systemUsage.getMemoryUsage() : "") });
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,480,UNSUBACK ack = new UNSUBACK();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,481,ack.messageId(command.messageId());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,482,sendToMQTT(ack.encode());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,641,LOG.info("Usage Manager Memory Limit ({}) reached on {}, size {}. Producers will be throttled to the rate at which messages are removed from this destination to prevent flooding it. See http://activemq.apache.org/producer-flow-control.html for more info.",
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,642,memoryUsage.getLimit(), getActiveMQDestination().getQualifiedName(), destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,45,protected boolean hadSpace = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,41,private final Broker broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,47,public QueueStorePrefetch(Queue queue, Broker broker) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,50,this.broker = broker;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,104,hadSpace = this.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,105,if (!broker.getBrokerService().isPersistent() || hadSpace) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,106,this.store.recoverNextMessages(this.maxBatchSize, this);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/QueueStorePrefetch.java,107,dealWithDuplicates(); // without the index lock
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,50,this.persistent = new QueueStorePrefetch(queue, broker);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,312,public boolean recoverMessage(long sequenceId, byte[] data) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,313,Message msg = (Message)wireFormat.unmarshal(new ByteSequence(data));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,314,msg.getMessageId().setBrokerSequenceId(sequenceId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,315,listener.recoverMessage(msg);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,318,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,321,public boolean recoverMessageReference(String reference) throws Exception {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,322,if (listener.hasSpace()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,323,listener.recoverMessageReference(new MessageId(reference));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,324,return true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,326,return false;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,611,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,617,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,647,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,653,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1101,while (rs.next() && count < maxReturned) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1110,while (rs.next() && count < maxReturned) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,578,if (counter >= maxReturned) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,128,if (info != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ProducerView.java,129,return info.isDispatchAsync();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,972,String str = brokerName.replaceAll("[^a-zA-Z0-9\\.\\_\\-\\:]", "_");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,974,LOG.error("Broker Name: {} contained illegal characters - replaced with {}", brokerName, str);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1527,vmConnectorURI = new URI("vm://" + getBrokerName().replaceAll("[^a-zA-Z0-9\\.\\_\\-]", "_"));
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,132,activeEvents.remove(uri);
activemq-broker/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,141,activeEvents.remove(uri);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,280,LOG.warn("Exception occurred processing: \n" + command + ": " + exception.toString());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,973,LOG.debug("Stomp Connect heartbeat conf RW[" + hbReadInterval + "," + hbWriteInterval + "]");
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,988,LOG.warn("Could not send a receipt for " + command, e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,267,throw new ProtocolException("Unknown STOMP action: " + action);
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,91,if (escape == (0xFFFF & c)) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,93,if (i >= like.length()) {
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,95,break;
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,102,regexp.append(".*?"); // Do a non-greedy match
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,104,regexp.append("."); // match one
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,106,regexp.append("\\x");
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,107,regexp.append(Integer.toHexString(0xFFFF & c));
activemq-client/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,109,regexp.append(c);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1665,ArrayList<MessageReference> alreadyDispatchedMessages = null;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1668,alreadyDispatchedMessages = new ArrayList<MessageReference>(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,152,Iterator<MessageReference> iterator = iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,145,List<MessageReference> messageReferences = new ArrayList<MessageReference>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,146,for (PendingNode pendingNode : map.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,147,messageReferences.add(pendingNode.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,149,return messageReferences;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,650,TransactionInfo info = new TransactionInfo(getConnectionId(), null, TransactionInfo.RECOVER);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,651,try {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,652,this.connection.checkClosedOrFailed();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,660,this.connection.ensureConnectionInfoSent();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,662,DataArrayResponse receipt = (DataArrayResponse)this.connection.syncSendPacket(info);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,663,DataStructure[] data = receipt.getData();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,664,XATransactionId[] answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,665,if (data instanceof XATransactionId[]) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,666,answer = (XATransactionId[])data;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,668,answer = new XATransactionId[data.length];
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,669,System.arraycopy(data, 0, answer, 0, data.length);
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,672,return answer;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,674,throw toXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,physicalConnection.cleanup();
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,795,xae.errorCode = original.errorCode;
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,796,if (xae.errorCode == XA_OK) {
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,801,xae.initCause(original);
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,48,private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers;
activemq-client/src/main/java/org/apache/activemq/state/ConnectionState.java,147,recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,575,LOG.error("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,576,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,579,LOG.warn("Network connection between {} and {} shutdown due to a remote error: {}", new Object[]{
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,580,localBroker, remoteBroker, error
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,338,LOG.error("Failed to create TopicSubscription ", e);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,47,protected void initializeStreams() throws IOException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,48,codec = new StompCodec(this);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,49,super.initializeStreams();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,50,if (inputBuffer.position() != 0 && inputBuffer.hasRemaining()) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,51,serviceRead();
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,238,if( !targetScores.isEmpty() ) {
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,240,int bestScore=0;
activemq-partition/src/main/java/org/apache/activemq/partition/PartitionBroker.java,242,if( entry.getValue().value > bestScore ) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,916,public void setObjectProperty(String name, Object value) throws JMSException {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,917,initializeWriting();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,918,super.setObjectProperty(name, value);
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,449,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,460,public int getMaxAuditDepth() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,209,public int getMaxProducersToAudit() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,226,public int getMaxAuditDepth() {
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,21,private long maxSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,22,private long minSize;
activemq-client/src/main/java/org/apache/activemq/management/SizeStatisticImpl.java,78,public synchronized long getMinSize() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,125,private Marshaller<Key> keyMarshaller;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/index/HashIndex.java,395,public synchronized void setKeyMarshaller(Marshaller<Key> marshaller) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,136,PreparedStatement statement = connection.prepareStatement(getStatements().getCurrentDateTime());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,137,ResultSet resultSet = statement.executeQuery();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,138,long result = 0l;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,139,if (resultSet.next()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,140,Timestamp timestamp = resultSet.getTimestamp(1);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,141,long diff = System.currentTimeMillis() - timestamp.getTime();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,142,if (Math.abs(diff) > maxAllowableDiffFromDBTime) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,144,result = (-diff);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,146,LOG.info(getLeaseHolderId() + " diff adjust from db: " + result + ", db time: " + timestamp);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,148,return result;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,408,class BrowserDispatch {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,409,QueueBrowserSubscription browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,411,public BrowserDispatch(QueueBrowserSubscription browserSubscription) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,412,browser = browserSubscription;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,413,browser.incrementQueueRef();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,424,public QueueBrowserSubscription getBrowser() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,425,return browser;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,429,ConcurrentLinkedQueue<BrowserDispatch> browserDispatches = new ConcurrentLinkedQueue<BrowserDispatch>();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,478,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,479,browserDispatches.add(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,589,browserDispatches.remove(sub);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1673,Iterator<BrowserDispatch> browsers = browserDispatches.iterator();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1675,BrowserDispatch browserDispatch = browsers.next();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1680,QueueBrowserSubscription browser = browserDispatch.getBrowser();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1696,browserDispatches.remove(browserDispatch);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1699,LOG.warn("exception on dispatch to browser: {}", browserDispatch.getBrowser(), e);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,29,import javax.jms.Destination;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,260,LOG.info("Loaded the Bouncy Castle security provider.");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,128,String clientId = activationSpec.getClientId();
activemq-http/src/main/java/org/apache/activemq/transport/http/HttpClientTransport.java,69,public static final int MAX_CLIENT_TIMEOUT = 30000;
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,97,public boolean waitForSpace(long timeout) throws InterruptedException {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,109,while (percentUsage >= 100 ) {
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,110,waitForSpaceCondition.await(timeout, TimeUnit.MILLISECONDS);
activemq-client/src/main/java/org/apache/activemq/usage/MemoryUsage.java,112,usageLock.readLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,51,final Set<TransactionId> recoveredPendingCommit = new HashSet<TransactionId>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,303,recoveredPendingCommit.addAll(inflightTransactions.keySet());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,304,LOG.info("pending local transactions: " + recoveredPendingCommit);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,359,if (recoveredPendingCommit.contains(txid)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,300,process(load(location));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,319,public void process(JournalCommand<?> command) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,323,getTx(TransactionIdConversion.convert(prepareCommand.getTransactionInfo()));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,116,private final IdGenerator ACK_ID_GENERATOR = new IdGenerator();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,130,private static class AckEntry {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,132,private final String messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,133,private final StompSubscription subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,135,public AckEntry(String messageId, StompSubscription subscription) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,136,this.messageId = messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,137,this.subscription = subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,public MessageAck onMessageAck(TransactionId transactionId) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,141,return subscription.onStompMessageAck(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,144,public MessageAck onMessageNack(TransactionId transactionId) throws ProtocolException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,145,return subscription.onStompMessageNack(messageId, transactionId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,148,public String getMessageId() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,149,return this.messageId;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,153,public StompSubscription getSubscription() {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,154,return this.subscription;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,375,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,432,messageId = pendingAck.getMessageId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,606,stompSubscription = new StompSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,608,stompSubscription = new StompQueueBrowserSubscription(this, subscriptionId, consumerInfo, headers.get(Stomp.Headers.TRANSFORMATION));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,865,String ackId = null;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,866,if (version.equals(Stomp.V1_2) && sub.getAckMode() != Stomp.Headers.Subscribe.AckModeValues.AUTO && md.getMessage() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,867,AckEntry pendingAck = new AckEntry(md.getMessage().getMessageId().toString(), sub);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,868,ackId = this.ACK_ID_GENERATOR.generateId();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,869,this.pedingAcks.put(ackId, pendingAck);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,871,try {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,872,sub.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,874,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,875,this.pedingAcks.remove(ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,30,public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,31,super(stompTransport, subscriptionId, consumerInfo, transformation);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,35,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompQueueBrowserSubscription.java,38,super.onMessageDispatch(md, ackId);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,24,import java.util.Map.Entry;
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,59,public StompSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,66,void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,74,dispatchedMessage.put(message.getMessageId(), md);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,99,if (ackId != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,103,protocolConverter.getStompTransport().sendToStomp(command);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,107,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,113,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,115,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,116,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,117,if (unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,118,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,123,ack = new MessageAck(unconsumedMessage.getLast(), MessageAck.STANDARD_ACK_TYPE, unconsumedMessage.size());
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,124,unconsumedMessage.clear();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,137,if (!dispatchedMessage.containsKey(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,145,if (ackMode == CLIENT_ACK) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,152,for (Iterator<?> iter = dispatchedMessage.entrySet().iterator(); iter.hasNext();) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,155,Map.Entry entry = (Entry)iter.next();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,156,MessageId id = (MessageId)entry.getKey();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,157,MessageDispatch msg = (MessageDispatch)entry.getValue();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,160,if (!unconsumedMessage.contains(msg)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,161,unconsumedMessage.add(msg);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,165,iter.remove();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,169,if (id.equals(msgId)) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,170,ack.setLastMessageId(id);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,183,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,205,unconsumedMessage.add(dispatchedMessage.get(msgId));
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,208,dispatchedMessage.remove(msgId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,879,sd.orderIndex.setBatch(tx, cursorPos);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,917,sd.orderIndex.setBatch(tx, pos);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,971,try {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,972,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,974,if (taskRunnerFactory != null) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,975,taskRunner = taskRunnerFactory.createTaskRunner(this, "ActiveMQ Connection Dispatcher: "
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,976,+ getRemoteAddress());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,978,taskRunner = null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,980,transport.start();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,981,active = true;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,982,BrokerInfo info = connector.getBrokerInfo().copy();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,983,if (connector.isUpdateClusterClients()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,984,info.setPeerBrokerInfos(this.broker.getPeerBrokerInfos());
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,986,info.setPeerBrokerInfos(null);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,988,dispatchAsync(info);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,990,connector.onStarted(this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,995,throw e;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1000,setStarting(false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1001,if (isPendingStop()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1002,LOG.debug("Calling the delayed stop() after start() {}", this);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1003,stop();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1021,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1045,synchronized (this) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1048,LOG.debug("stopAsync() called in the middle of start(). Delaying till start completes..");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1049,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1508,metadata.ackMessageFileMapLocation = checkpointAckMessageFileMap();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2104,Iterator<Entry<String, SequenceSet>> subscriptions = rc.ackPositions.iterator(tx);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2105,while (subscriptions.hasNext()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2106,Entry<String, SequenceSet> subscription = subscriptions.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2107,SequenceSet pendingAcks = subscription.getValue();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2108,if (pendingAcks != null && !pendingAcks.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2109,Long lastPendingAck = pendingAcks.getTail().getLast();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2111,Long current = rc.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2112,if (current == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2113,current = new Long(0);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2118,if (!sequenceId.equals(lastPendingAck)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2119,current = current.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2122,rc.messageReferences.put(sequenceId, current);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2144,if (!rc.messageReferences.isEmpty()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2145,Long nextMessageId = (Long) rc.messageReferences.keySet().toArray()[rc.messageReferences.size() - 1];
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2146,rc.orderIndex.nextMessageId =
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2147,Math.max(rc.orderIndex.nextMessageId, nextMessageId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2170,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2171,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2172,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2174,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2175,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2190,for (Long ackPosition : allOutstanding) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2191,Long count = sd.messageReferences.get(ackPosition);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2210,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2211,if (count == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2212,count = Long.valueOf(0L);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2214,count = count.longValue() + 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2215,sd.messageReferences.put(messageSequence, count);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2230,Long references = sd.messageReferences.get(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2231,if (references != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2232,references = references.longValue() - 1;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2234,if (references.longValue() > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2235,sd.messageReferences.put(sequenceId, references);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2237,sd.messageReferences.remove(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2238,unreferenced.add(sequenceId);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2278,Long count = sd.messageReferences.get(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2281,if (references > 0) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2282,sd.messageReferences.put(messageSequence, Long.valueOf(references));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2283,return;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2285,sd.messageReferences.remove(messageSequence);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,463,metaData.setCleanShutdown(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,414,freeList = new SequenceSet();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,415,for (Iterator<Page> i = tx().iterator(true); i.hasNext(); ) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,416,Page page = i.next();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,417,if (page.getType() == Page.PAGE_FREE_TYPE) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,418,freeList.add(page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1264,List<Operation> tx = inflightTransactions.remove(key);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,256,destinationMap.removeAll(destination);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,271,destinationMap.removeAll(destination);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,52,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,198,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,245,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,286,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,768,ConnectionContext answer = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,472,ConnectionContext context = new ConnectionContext(new NonCachedMessageEvaluationContext());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,84,import org.apache.activemq.filter.MessageEvaluationContext;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1061,MessageEvaluationContext messageEvalContext = new MessageEvaluationContext();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1238,&& messages.hasSpace();
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,19,import java.io.IOException;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,20,import java.util.concurrent.atomic.AtomicBoolean;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,21,import java.util.concurrent.atomic.AtomicLong;
activemq-broker/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,215,double value = flowControlInfo.getSendsBlocked() / flowControlInfo.getTotalSends();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,77,if (getDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,80,if (getOptimizeDurableTopicPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,83,if (getQueuePrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,86,if (getQueueBrowserPrefetch() != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnectionFactory.java,89,if (getTopicPrefetch() != null) {
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,52,String SUBSCRIBE = "SUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/Stomp.java,53,String UNSUBSCRIBE = "UNSUB";
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,112,private final Map<String, LocalTransactionId> transactions = new ConcurrentHashMap<String, LocalTransactionId>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,291,HashMap<String, String> headers = new HashMap<String, String>();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,794,HashMap<String, String> responseHeaders = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,197,getInternalScheduler().schedule(msg.getMessageId().toString(),
activemq-broker/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,198,new ByteSequence(packet.data, packet.offset, packet.length), cronEntry, delay, period, repeat);
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,172,private final CopyOnWriteArrayList<ActiveMQSession> sessions = new CopyOnWriteArrayList<ActiveMQSession>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,173,private final CopyOnWriteArrayList<ActiveMQConnectionConsumer> connectionConsumers = new CopyOnWriteArrayList<ActiveMQConnectionConsumer>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,174,private final CopyOnWriteArrayList<TransportListener> transportListeners = new CopyOnWriteArrayList<TransportListener>();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,836,Map<String, String> options = new HashMap<String, String>(info.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1255,Map<String, String> options = new HashMap<String, String>(consumerInfo.getDestination().getOptions());
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1365,if(exception!=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1369,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1385,if (jmsEx !=null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1412,if (isClosed()||closing.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,1428,if (jmsEx !=null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,42,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,191,nonPersistent.addMessageLast(node);
activemq-client/src/main/java/org/apache/activemq/filter/DestinationMap.java,200,Set set = get(destination);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,809,RemoveSubscriptionInfo info = ((RemoveSubscriptionInfo) data);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,810,SubscriptionInfo subscriptionInfo = new SubscriptionInfo(info.getClientId(), info.getSubscriptionName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,814,if (removed) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,440,localClientId = configuration.getName() + "_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,465,duplexLocalConnectionInfo.setClientId(configuration.getName() + "_" + remoteBrokerName + "_inbound_duplex_"
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,466,+ configuration.getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,542,remoteConnectionInfo.setClientId(configuration.getName() + "_" + configuration.getBrokerName() + "_outbound");
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,75,ds.getDurableRemoteSubs().add(new SubscriptionInfo(info.getClientId(), info.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,92,import org.apache.activemq.transport.tcp.SslTransport;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1176,sub.getDurableRemoteSubs().add(new SubscriptionInfo(sub.getRemoteInfo().getClientId(), consumerInfo.getSubscriptionName()));
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,60,if (info.isNetworkSubscription()) {
activemq-broker/src/main/java/org/apache/activemq/network/ConduitBridge.java,87,return ds.isStaticallyIncluded() || !ds.getRemoteInfo().isNetworkSubscription();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,928,localBroker.oneway(sub.getLocalInfo().createRemoveCommand());
activemq-broker/src/main/java/org/apache/activemq/network/DurableConduitBridge.java,89,info.setConsumerId(new ConsumerId(localSessionInfo.getSessionId(),
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,317,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,318,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,319,int newExtension = Math.max(currentExtension, index + 1);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,320,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,321,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,385,while (true) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,386,int currentExtension = prefetchExtension.get();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,387,int newExtension = Math.max(0, currentExtension - (index + 1));
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,388,if (prefetchExtension.compareAndSet(currentExtension, newExtension)) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,389,break;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,432,synchronized(dispatchLock) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,443,synchronized(dispatchLock) {
activemq-client/src/main/java/org/apache/activemq/command/MessagePull.java,28,public class MessagePull extends BaseCommand {
activemq-client/src/main/java/org/apache/activemq/transport/nio/SelectorSelection.java,46,e.printStackTrace();
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQStreamMessage.java,746,return rc;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2448,private Journal createJournal() throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,149,location.setLatch(batch.latch);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,176,WriteBatch batch = enqueue(write);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/DataFileAppender.java,178,location.setLatch(batch.latch);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,77,private final AtomicBoolean connectorStarting = new AtomicBoolean(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,127,connectorStarting.set(true);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,136,connectorStarting.set(false);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,175,if (!connectorStarting.get()) {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,303,return connectorStarting.get() || (connectorServer != null && connectorServer.isActive());
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,52,if (ignoreAllErrors) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/LeaseDatabaseLocker.java,94,lockable.getBrokerService().handleIOException(IOExceptionSupport.create(e));
activemq-broker/src/main/java/org/apache/activemq/security/JaasAuthenticationBroker.java,87,super.addConnection(context, info);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,587,if (getBrokerService().isStarted()) {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,589,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_NAME, getBrokerName());
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,590,String id = getBrokerId() != null ? getBrokerId().getValue() : "NOT_SET";
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,591,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_ID, id);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,593,String url = getBrokerService().getVmConnectorURI().toString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,595,url = getBrokerService().getDefaultSocketURIString();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,597,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_ORIGIN_BROKER_URL, url);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,600,advisoryMessage.setDataStructure(command);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,601,advisoryMessage.setPersistent(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,602,advisoryMessage.setType(AdvisorySupport.ADIVSORY_MESSAGE_TYPE);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,603,advisoryMessage.setMessageId(new MessageId(advisoryProducerId, messageIdGenerator.getNextSequenceId()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,604,advisoryMessage.setTargetConsumerId(targetConsumerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,605,advisoryMessage.setDestination(topic);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,606,advisoryMessage.setResponseRequired(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,607,advisoryMessage.setProducerId(advisoryProducerId);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,608,boolean originalFlowControl = context.isProducerFlowControl();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,609,final ProducerBrokerExchange producerExchange = new ProducerBrokerExchange();
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,610,producerExchange.setConnectionContext(context);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,611,producerExchange.setMutable(true);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,612,producerExchange.setProducerState(new ProducerState(new ProducerInfo()));
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,613,try {
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,614,context.setProducerFlowControl(false);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,615,next.send(producerExchange, advisoryMessage);
activemq-broker/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,617,context.setProducerFlowControl(originalFlowControl);
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,122,if (!unconsumedMessage.isEmpty()) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,345,ActiveMQConnection connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,346,connection.start();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,487,if (context == null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1288,this.future.setException(e);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1304,public void setException(final Exception e) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1406,this.future.setException(e);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,55,public void purge() throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,675,LOG.error("expired waiting for space..");
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,63,public int removeMatchingMessages(String selector) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,public int removeMatchingMessages(String selector, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,95,public int moveMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,101,public int moveMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,107,public int retryMessages() throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1028,throw new IOException("Could not load journal record. Invalid location: "+location);
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,189,if (!isCacheEnabled() && size==0 && isStarted() && useCache) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,191,setCacheEnabled(true);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,448,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,449,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,470,if (originalTransport instanceof SslTransport) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,471,X509Certificate[] peerCerts = ((SslTransport) originalTransport).getPeerCertificates();
activemq-client/src/main/java/org/apache/activemq/ActiveMQConnection.java,2018,if (!closing.get() && !closed.get()) {
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,49,connection.connect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobDownloadStrategy.java,50,connection.disconnect();
activemq-client/src/main/java/org/apache/activemq/blob/DefaultBlobUploadStrategy.java,69,throw new IOException("PUT was not successful: " + connection.getResponseCode() + " "
activemq-broker/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,246,tl.onCommand(command);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2457,URI uri = getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2460,map.put("async", "false");
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2461,uri = URISupport.createURIWithQuery(uri, URISupport.createQueryString(map));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2482,connector.setLocalUri(uri);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,1321,Transport localTransport = NetworkBridgeFactory.createLocalTransport(broker);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,184,duplexInboundLocalBroker = NetworkBridgeFactory.createLocalTransport(brokerService.getBroker());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,718,MessageAck ack = new MessageAck(message, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,720,remoteBroker.oneway(ack);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,905,localBroker.request(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,907,localBroker.oneway(sub.getLocalInfo());
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,74,public static Transport createLocalTransport(Broker broker) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,75,URI uri = broker.getVmConnectorURI();
activemq-broker/src/main/java/org/apache/activemq/network/NetworkBridgeFactory.java,78,map.put("async", "true");
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,681,addConsumerInfo((ConsumerInfo) command);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,762,synchronized (brokerService.getVmConnectorURI()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,903,if (isDuplex()) {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1199,&& !configuration.isSuppressDuplicateTopicSubscriptions()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,69,protected boolean warnOnProducerFlowControl = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,628,long nextWarn = start;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,636,long now = System.currentTimeMillis();
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,637,if (now >= nextWarn) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,638,getLog().info("{}: {} (blocking for: {}s)", new Object[]{ usage, warning, new Long(((now - start) / 1000))});
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,639,nextWarn = now + blockedProducerWarningInterval;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,639,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,640,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,341,if (warnOnProducerFlowControl) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,342,warnOnProducerFlowControl = false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected boolean usePrefetchExtension = true;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,842,public boolean isUsePrefetchExtension() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,843,return usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,846,public void setUsePrefetchExtension(boolean usePrefetchExtension) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,847,this.usePrefetchExtension = usePrefetchExtension;
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,646,while (pending.hasNext() && !isFull() && count < numberToDispatch) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,152,return systemUsage != null ? (!systemUsage.getMemoryUsage().isFull(memoryUsageHighWaterMark)) : true;
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,177,private final List<TransportConnector> transportConnectors = new CopyOnWriteArrayList<TransportConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,178,private final List<NetworkConnector> networkConnectors = new CopyOnWriteArrayList<NetworkConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,179,private final List<ProxyConnector> proxyConnectors = new CopyOnWriteArrayList<ProxyConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,180,private final List<JmsConnector> jmsConnectors = new CopyOnWriteArrayList<JmsConnector>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,181,private final List<Service> services = new ArrayList<Service>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,218,private final List<Runnable> shutdownHooks = new ArrayList<Runnable>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,598,LOG.error("Failed to start Apache ActiveMQ ({}, {})", new Object[]{ getBrokerName(), brokerId }, e);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1280,Map<String, String> answer = new HashMap<String, String>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1401,return new ArrayList<TransportConnector>(transportConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1436,return new ArrayList<NetworkConnector>(networkConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1440,return new ArrayList<ProxyConnector>(proxyConnectors);
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2230,List<DestinationInterceptor> answer = new ArrayList<DestinationInterceptor>();
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2458,Map<String, String> map = new HashMap<String, String>(URISupport.parseParameters(uri));
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,2581,Set <ActiveMQQueue> consumerDestinations = new HashSet<ActiveMQQueue>();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import java.util.HashSet;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,34,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,35,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,253,MessageAvailableConsumer consumer, long deadline) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,304,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,305,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,306,response.setContentType(type);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,308,if (isXmlContent(message)) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,309,response.setContentType(defaultContentType);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,311,response.setContentType("text/plain");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,398,for (Enumeration names = message.getPropertyNames(); names.hasMoreElements();) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,638,return "KahaDBPersistenceAdapter[" + path + "]";
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,124,private String nameFromDestinationFilter(ActiveMQDestination destination) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,375,File defaultDir = MessageDatabase.DEFAULT_DIRECTORY;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1243,ack.setPoisonCause(new Throwable("Exceeded redelivery policy limit:" + redeliveryPolicy
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1382,posionAck(md, "dispatch to " + getConsumerId() + " exceeds redelivery policy limit:" + redeliveryPolicy);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,147,if (!brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,148,Response response = service(command);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,149,if (response != null && !brokerService.isStopping()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,150,dispatchSync(response);
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,153,throw new BrokerStoppedException("Broker " + brokerService + " is being stopped");
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,384,Collection<TransactionState> transactions = cs.getTransactionStates();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,385,for (TransactionState transaction : transactions) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnection.java,386,rc++;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,65,private static int defaultJmxPort = 1099;
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,138,int id = getNextId();
activemq-broker/src/main/java/org/apache/activemq/transport/TransportLoggerFactory.java,184,return LoggerFactory.getLogger(TransportLogger.class.getName()+".Connection:" + id);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,40,log.debug("SENDING REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,45,log.debug("GOT RESPONSE: "+response);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,50,log.debug("SENDING ASNYC REQUEST: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,55,log.debug("SENDING: "+command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,60,log.debug("RECEIVED: " + command);
activemq-broker/src/main/java/org/apache/activemq/transport/logwriters/DefaultLogWriter.java,65,log.debug("RECEIVED Exception: "+error, error);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,93,synchronized (transactionStore) {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,94,transactionStore.rollback(getTransactionId());
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,96,try {
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,97,fireAfterRollback();
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,99,LOG.warn("POST ROLLBACK FAILED: ", e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,100,XAException xae = new XAException("POST ROLLBACK FAILED");
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,101,xae.errorCode = XAException.XAER_RMERR;
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,102,xae.initCause(e);
activemq-broker/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,103,throw xae;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1052,if (enableRecoveryFile) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1053,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1057,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1058,checksum.update(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1060,throw IOExceptionSupport.create("Cannot create recovery file. Reason: " + t, t);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1062,recoveryFile.writeLong(w.page.getPageId());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1063,recoveryFile.write(w.getDiskBound(), 0, pageSize);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,1071,try {
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,38,private HashMap<Integer, Integer> portMapping = new HashMap<Integer, Integer>();
activemq-broker/src/main/java/org/apache/activemq/broker/PublishedAddressPolicy.java,212,public void setPortMapping(HashMap<Integer, Integer> portMapping) {
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/IntrospectionSupport.java,97,if (boolean.class.isAssignableFrom(to) && value instanceof String) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,160,public Set<String> getSelector(final String destination) {
activemq-broker/src/main/java/org/apache/activemq/plugin/SubQueueSelectorCacheBroker.java,161,return subSelectorCache.get(destination);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,259,return "ServerSessionImpl:" + serverSessionId + "{" + session +"}";
activemq-client/src/main/java/org/apache/activemq/TransactionContext.java,791,private XAException toXAException(JMSException e) {
activemq-client/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,726,private void checkReadOnlyProperties() throws MessageNotWriteableException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,298,Location location = journal.getNextLocation(null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,299,while (location != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,301,location = journal.getNextLocation(location);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,358,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,360,LOG.info("delivering pending commit outcome for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,361,broker.commitTransaction(null, txid, false);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,364,LOG.info("delivering rollback outcome to store for tid: " + txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,365,broker.forgetTransaction(null, txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,367,persistCompletion(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,369,LOG.error("failed to deliver pending outcome for tid: " + txid, ex);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,219,Sequence sequence = new Sequence(location.getOffset(), nextOffset - 1);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/journal/Journal.java,243,dataFile.setLength((int) dataFile.corruptedBlocks.removeLastSequence().getFirst());
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,745,this.transactionContext = null;
activemq-client/src/main/java/org/apache/activemq/command/Message.java,80,protected ByteSequence marshalledProperties;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,269,((JDBCPersistenceAdapter)persistenceAdapter).rollbackLastAck(context, priority, jdbcTopicMessageStore.getDestination(), subName, clientId);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1029,String subName = rs.getString(3);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1030,String subId = rs.getString(4);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,541,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,546,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,569,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,572,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,590,protected int recoverRolledBackAcks(StoredDestination sd, Transaction tx, int maxReturned, MessageRecoveryListener listener) throws Exception {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,605,LOG.info("rolledback ack message {} with seq {} will be picked up in future batch {}", id, sequence, sd.orderIndex.cursor);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,880,recoverRolledBackAcks(sd, tx, Integer.MAX_VALUE, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,884,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,924,int counter = recoverRolledBackAcks(sd, tx, maxReturned, listener);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,928,if (ackedAndPrepared.contains(entry.getValue().messageId)) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1291,StoredDestination sd = getStoredDestination(command.getDestination(), tx);
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,59,public boolean removeMessage(String messageId) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,71,public boolean copyMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,77,public int copyMatchingMessagesTo(String selector, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,83,public int copyMatchingMessagesTo(String selector, String destinationName, int maximumMessages) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,89,public boolean moveMessageTo(String messageId, String destinationName) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1374,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1441,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1533,set.addAll(pagedInMessages.values());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1562,set.addAll(pagedInMessages.values());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,126,private PreviouslyDeliveredMap<MessageId, Boolean> previouslyDeliveredMessages;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,146,private boolean clearDeliveredList;
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,751,inProgressClearRequiredFlag.decrementAndGet();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,758,clearDeliveredList();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1128,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1129,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1156,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1157,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1232,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1263,if (nonBlockingRedelivery) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1264,if (!unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1266,final LinkedList<MessageDispatch> pendingRedeliveries =
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1267,new LinkedList<MessageDispatch>(deliveredMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1269,Collections.reverse(pendingRedeliveries);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1271,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1272,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1280,for(MessageDispatch dispatch : pendingRedeliveries) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1292,unconsumedMessages.stop();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1294,for (MessageDispatch md : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1295,unconsumedMessages.enqueueFirst(md);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1298,deliveredCounter -= deliveredMessages.size();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1299,deliveredMessages.clear();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1301,if (redeliveryDelay > 0 && !unconsumedMessages.isClosed()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1303,session.getScheduler().executeAfterDelay(new Runnable() {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1307,if (started.get()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1308,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1316,start();
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1322,if (messageListener.get() != null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1323,session.redispatch(this, unconsumedMessages);
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1334,for (Entry<MessageId, Boolean> entry: previouslyDeliveredMessages.entrySet()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1335,if (!entry.getValue()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1339,removeFromDeliveredMessages(entry.getKey());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1379,if (this.info.isBrowser() || !session.connection.isDuplicate(this, md.getMessage())) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1406,if (!unconsumedMessages.isRunning()) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1408,session.connection.rollbackDuplicate(this, md.getMessage());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1467,if (previouslyDeliveredMessages == null) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1468,previouslyDeliveredMessages = new PreviouslyDeliveredMap<MessageId, Boolean>(session.getTransactionContext().getTransactionId());
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1470,for (MessageDispatch delivered : deliveredMessages) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1471,previouslyDeliveredMessages.put(delivered.getMessage().getMessageId(), false);
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2028,for (MessageDispatch md : c) {
activemq-client/src/main/java/org/apache/activemq/ActiveMQSession.java,2029,this.connection.rollbackDuplicate(dispatcher, md.getMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1435,int oldMaxSize = getMaxPageSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1436,setMaxPageSize((int) this.destinationStatistics.getMessages().getCount());
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1437,doPageIn(true);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1438,setMaxPageSize(oldMaxSize);
activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnection.java,83,this.cleanupConnectionTemporaryDestinations();
activemq-stomp/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,288,exception.printStackTrace(stream);
activemq-broker/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,313,protected void acknowledge(ConnectionContext context, MessageAck ack, MessageReference node) throws IOException {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,226,String remoteHost = transport.getRemoteAddress();
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,233,String remoteHost = transport.getRemoteAddress();
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,275,updated.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,782,if (!updated.isEmpty()) {
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,783,return updated;
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,785,ArrayList<URI> l = new ArrayList<URI>(uris);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,788,removed = l.remove(failedConnectTransportURI);
activemq-client/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,931,List<URI> connectList = getConnectList();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,return new XAResource[]{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,new TransactionContext() {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,244,public boolean isSameRM(XAResource xaresource) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,245,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,247,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,248,boolean result = super.isSameRM(xaresource);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,249,LOG.trace("{}.recover({})={}", getConnection(), xaresource, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,253,LOG.trace("isSameRM({}) failed", xaresource, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,254,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,255,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,257,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,262,protected String getResourceManagerId() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,263,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,264,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,265,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,266,return super.getResourceManagerId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,268,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,273,public void commit(Xid xid, boolean onePhase) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,274,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,275,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,276,setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,277,super.commit(xid, onePhase);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,278,LOG.trace("{}.commit({},{})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,281,LOG.trace("{}.commit({},{}) failed", getConnection(), xid, onePhase, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,282,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,284,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,289,public void rollback(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,290,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,291,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,292,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,293,super.rollback(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,294,LOG.trace("{}.rollback({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,297,LOG.trace("{}.rollback({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,298,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,300,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,305,public Xid[] recover(int flags) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,306,Xid[] result = new Xid[]{};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,307,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,308,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,309,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,310,result = super.recover(flags);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,311,LOG.trace("{}.recover({})={}", getConnection(), flags, result);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,314,LOG.trace("{}.recover({}) failed", getConnection(), flags, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,315,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,317,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,319,return result;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,323,public void forget(Xid xid) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,324,ActiveMQConnection original = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,325,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,326,original = setConnection(newConnection());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,327,super.forget(xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,328,LOG.trace("{}.forget({})", getConnection(), xid);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,331,LOG.trace("{}.forget({}) failed", getConnection(), xid, e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,332,throwXAException(e);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,334,closeConnection(original);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,338,private void throwXAException(JMSException e) throws XAException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,339,XAException xaException = new XAException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,340,xaException.errorCode = XAException.XAER_RMFAIL;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,341,throw xaException;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,344,private ActiveMQConnection newConnection() throws JMSException {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,347,return connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,350,private void closeConnection(ActiveMQConnection original) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,351,ActiveMQConnection connection = getConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,352,if (connection != null) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,353,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,354,connection.close();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,716,boolean willSent = false;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,718,if (connect != null) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,719,if (connected.get()) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,720,if (connect.willTopic() != null && connect.willMessage() != null && !willSent) {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,721,willSent = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,722,try {
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,723,PUBLISH publish = new PUBLISH();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,724,publish.topicName(connect.willTopic());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,725,publish.qos(connect.willQos());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,726,publish.messageId(packetIdGenerator.getNextSequenceId(getClientId()));
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,727,publish.payload(connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,728,ActiveMQMessage message = convertMessage(publish);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,729,message.setProducerId(producerId);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,730,message.onSend();
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,732,sendToActiveMQ(message, null);
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,734,LOG.warn("Failed to publish Will Message " + connect.willMessage());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,738,sendToActiveMQ(connectionInfo.createRemoveCommand(), null);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryMessageStore.java,153,lastBatchId = messageId;
activemq-broker/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,67,public synchronized void create(Broker broker, ConnectionContext context, ActiveMQDestination destination) throws Exception {
activemq-broker/src/main/java/org/apache/activemq/store/PersistenceAdapter.java,158,void checkpoint(boolean sync) throws IOException;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,75,public void checkpoint(boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,76,this.letter.checkpoint(sync);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,328,LOG.info("periodic checkpoint/cleanup disabled, will ocurr on clean shutdown/restart");
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,430,checkpointUpdate(true);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,995,startCheckpoint();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,144,public void checkpoint(final boolean sync) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,146,persistenceAdapter.checkpoint(sync);
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,19,import java.util.ArrayList;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,20,import java.util.HashMap;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,22,import java.util.List;
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,76,if (getMaxSlowDuration() > 0) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,79,for (SlowConsumerEntry entry : slowConsumers.values()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/policy/AbortSlowAckConsumerStrategy.java,80,entry.mark();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,55,import org.apache.activemq.command.MessageAck;
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,796,public void duplicateFromStore(Message message, Subscription durableSub) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,798,getLog().warn("duplicate message from store {}, redirecting for dlq processing", message.getMessageId());
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,799,Throwable cause = new Throwable("duplicate from store for " + destination);
activemq-broker/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,805,acknowledge(connectionContext, durableSub, messageAck, message);
activemq-broker/src/main/java/org/apache/activemq/broker/util/RedeliveryPlugin.java,131,if (messageReference.isExpired()) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1646,if (tempDataStore == null) {
activemq-broker/src/main/java/org/apache/activemq/broker/BrokerService.java,1843,if (jobSchedulerStore == null) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,120,if( sslContext == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,121,if( provider == null ) {
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,122,sslContext = SSLContext.getInstance(protocol);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,124,sslContext = SSLContext.getInstance(protocol, provider);
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,126,sslContext.init(getKeyManagersAsArray(), getTrustManagersAsArray(), getSecureRandom());
activemq-client/src/main/java/org/apache/activemq/broker/SslContext.java,130,public void setSSLContext(SSLContext sslContext) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,198,activeSessions.remove(ss);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,230,if (!l.isEmpty()) {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,145,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,109,purgeInactiveDestinations();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,729,private final Runnable expireMessagesTask = new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,49,private boolean started=false;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,38,private boolean started;
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,48,private boolean cacheEnabled=true;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,86,persistenceAdapter.commitTransaction(ctx);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,67,close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,133,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,136,if (connection != null && !connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,147,try {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,148,if (connection != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,149,connection.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,153,LOG.trace("Closing connection failed due: " + e.getMessage() + ". This exception is ignored.", e);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,155,connection = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,175,if (!connection.getAutoCommit()) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,207,private void doRollback() throws SQLException {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,208,if (addMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,209,addMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,210,addMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,212,if (removedMessageStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,213,removedMessageStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,214,removedMessageStatement = null;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,216,if (updateLastAckStatement != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,217,updateLastAckStatement.close();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,218,updateLastAckStatement = null;
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,156,private final Set<TransactionStore> stores = new HashSet<TransactionStore>();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,160,stores.add(store);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,163,public Set<TransactionStore> getStores() {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,205,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,206,store.commit(txid, true, null, null);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,253,for (TransactionStore store : tx.getStores()) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,254,store.rollback(txid);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBTransactionStore.java,344,getTx(xid).trackStore(adapter.createTransactionStore());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,30,import org.apache.activemq.ActiveMQMessageAudit;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,86,final ConnectionContext context = new ConnectionContext();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,132,Destination destination =  addDestination(context, amqDestination, false);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,133,registerSync(destination, transaction, ack);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,136,private void registerSync(Destination destination, Transaction transaction, BaseCommand command) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,137,Synchronization sync = new PreparedDestinationCompletion(destination, command.isMessage());
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,148,final Destination destination;
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,151,public PreparedDestinationCompletion(final Destination destination, boolean messageSend) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,177,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,185,destination.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,186,destination.getDestinationStatistics().getEnqueues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,187,destination.getDestinationStatistics().getMessages().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,190,destination.getDestinationStatistics().getDequeues().add(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/TransactionBroker.java,191,destination.getDestinationStatistics().getMessages().subtract(opCount);
activemq-broker/src/main/java/org/apache/activemq/broker/region/Destination.java,239,public void clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,382,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,383,next.clearPendingMessages();
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,434,dispatched.remove(node);
activemq-broker/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,435,nodeDest.getDestinationStatistics().getInflight().decrement();
activemq-broker/src/main/java/org/apache/activemq/broker/region/Queue.java,1318,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/Topic.java,794,public void clearPendingMessages() {
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,74,resetSize();
activemq-broker/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,226,setCacheEnabled(false);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,33,public class ProxyTopicMessageStore implements TopicMessageStore {
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,35,final TopicMessageStore delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,38,this.delegate = delegate;
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,87,return delegate.lookupSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,93,delegate.acknowledge(context, clientId, subscriptionName, messageId, ack);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,98,delegate.addSubscription(subscriptionInfo, retroactive);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,103,delegate.deleteSubscription(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,109,delegate.recoverSubscription(clientId, subscriptionName, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,115,delegate.recoverNextMessages(clientId, subscriptionName, maxReturned, listener);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,120,delegate.resetBatching(clientId, subscriptionName);
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,130,return delegate.getAllSubscriptions();
activemq-broker/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,140,return delegate.getMessageCount(clientId, subscriberName);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,113,persistenceAdapter.commitTransaction(ctx);
activemq-broker/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,263,tx = preparedTransactions.remove(txid);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,74,setStateFinished();
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,90,LOG.warn("Store COMMIT FAILED: ", t);
activemq-broker/src/main/java/org/apache/activemq/transaction/XATransaction.java,91,rollback();
activemq-broker/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,109,queue.clearPendingMessages();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,85,private MemoryTransactionStore transactionStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,193,MessageStore rc = new JDBCMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,194,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,195,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,202,TopicMessageStore rc = new JDBCTopicMessageStore(this, getAdapter(), wireFormat, destination, audit);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,203,if (transactionStore != null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,204,rc = transactionStore.proxy(rc);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,249,if (transactionStore == null) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,250,transactionStore = new JdbcMemoryTransactionStore(this);
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,149,return perPriority[javax.jms.Message.DEFAULT_PRIORITY];
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,308,recovered.perPriority[isPrioritizedMessages() ? priority : javax.jms.Message.DEFAULT_PRIORITY].recovered = sequenceId;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,21,import java.util.HashMap;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,32,import org.apache.activemq.store.ProxyTopicMessageStore;
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,51,private HashMap<ActiveMQDestination, MessageStore> topicStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,52,private HashMap<ActiveMQDestination, MessageStore> queueStores = new HashMap<ActiveMQDestination, MessageStore>();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,302,protected void onProxyTopicStore(ProxyTopicMessageStore proxyTopicMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,303,topicStores.put(proxyTopicMessageStore.getDestination(), proxyTopicMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,307,protected void onProxyQueueStore(ProxyMessageStore proxyQueueMessageStore) {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,308,queueStores.put(proxyQueueMessageStore.getDestination(), proxyQueueMessageStore.getDelegate());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,316,JDBCTopicMessageStore jdbcTopicMessageStore = (JDBCTopicMessageStore) topicStores.get(lastAckCommand.getMessageAck().getDestination());
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,323,((JDBCPersistenceAdapter)persistenceAdapter).getBrokerService().getRegionBroker().getDestinationMap().get(removeMessageCommand.getMessageAck().getDestination()).getDestinationStatistics().getMessages().increment();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,327,ActiveMQDestination destination = addMessageCommand.getMessage().getDestination();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,328,addMessageCommand.setMessageStore(destination.isQueue() ? queueStores.get(destination) : topicStores.get(destination));
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2335,public void trackRecoveredAcks(ArrayList<MessageAck> acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2336,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2337,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2338,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2339,ackedAndPrepared.add(ack.getLastMessageId().toProducerKey());
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2342,this.indexLock.writeLock().unlock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2346,public void forgetRecoveredAcks(ArrayList<MessageAck> acks, boolean rollback) throws IOException {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2347,if (acks != null) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2348,this.indexLock.writeLock().lock();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2349,try {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2350,for (MessageAck ack : acks) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2351,final String id = ack.getLastMessageId().toProducerKey();
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2352,ackedAndPrepared.remove(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2353,if (rollback) {
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2354,rolledBackAcks.add(id);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2358,this.indexLock.writeLock().unlock();
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,202,Message msg = (Message) ((JDBCPersistenceAdapter)persistenceAdapter).getWireFormat().unmarshal(new ByteSequence(message));
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,206,tx.add(new RemoveMessageCommand() {
activemq-jdbc-store/src/main/java/org/apache/activemq/store/jdbc/JdbcMemoryTransactionStore.java,219,return null;
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,459,while (result && tokenizer.hasMoreTokens()) {
activemq-broker/src/main/java/org/apache/activemq/broker/TransportConnector.java,470,boolean result = true;
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,659,topicName = mqttTopicMap.get(message.getJMSDestination());
activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,662,mqttTopicMap.put(message.getJMSDestination(), topicName);
activemq-kahadb-store/src/main/java/org/apache/activemq/store/kahadb/disk/page/PageFile.java,176,diskBoundLocation = -1;
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,792,serialExecutor.execute(new Runnable() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,794,public void run() {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,795,try {
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,796,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,798,LOG.warn("failed to deliver remove command for destination: {}", destInfo.getDestination(), e);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,803,localBroker.oneway(destInfo);
activemq-broker/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,901,protected void addSubscription(DemandSubscription sub) throws IOException {
