File,Line_number,SRC
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,104,if (renameEmptyFiles || source.length() > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,106,if (parent != null && !parent.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,126,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,140,LOGGER.error("Unable to delete empty file " + source.getAbsolutePath());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,548,final FileRenameAction renameAction = new FileRenameAction(new File(currentFileName), new File(renameTo), false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java,281,return toSerializable(event, getStringBuilder()).toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/PatternLayout.java,325,return toSerializable(event, getStringBuilder()).toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/DefaultFlowMessageFactory.java,175,return new SimpleEntryMessage(entryText, message);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,621,return flowMessageFactory.newEntryMessage(messageFactory.newMessage(format));
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,624,return flowMessageFactory.newEntryMessage(messageFactory.newMessage(format, params));
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,636,return flowMessageFactory.newEntryMessage(messageFactory.newMessage(sb.toString()));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,37,private RollingFileManager manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,45,this.manager = manager;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,100,public static OnStartupTriggeringPolicy createPolicy() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,101,return new OnStartupTriggeringPolicy();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,35,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,36,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,37,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,38,import java.io.PrintWriter;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,39,import java.io.StringWriter;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,40,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,41,import java.util.Collections;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,42,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,43,import java.util.zip.DeflaterOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,44,import java.util.zip.GZIPOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,234,((StringBuilderFormattable)message).formatTo(messageBuffer);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/GelfLayout.java,235,JsonUtils.quoteAsString(messageBuffer, builder);
log4j-api/src/main/java/org/apache/logging/log4j/util/Unbox.java,174,return getState().getStringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,188,final boolean IS_WEB_APP = PropertiesUtil.getProperties().getBooleanProperty(
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,190,final boolean ENABLE_THREADLOCALS = !IS_WEB_APP && PropertiesUtil.getProperties().getBooleanProperty(
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,207,private static boolean isClassAvailable(final String className) {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,208,try {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,209,return LoaderUtil.loadClass(className) != null;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,211,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Constants.java,79,public static final boolean IS_WEB_APP = PropertiesUtil.getProperties().getBooleanProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Constants.java,90,public static final boolean ENABLE_THREADLOCALS = !IS_WEB_APP && PropertiesUtil.getProperties().getBooleanProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,96,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,34,private static long JVM_START_TIME = initStartTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,36,private boolean evaluated = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,46,if (JVM_START_TIME == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,47,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,55,private static long initStartTime() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,62,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,63,final Class<?> factoryClass = Loader.loadSystemClass("java.lang.management.ManagementFactory");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,64,final Method getRuntimeMXBean = factoryClass.getMethod("getRuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,65,final Object runtimeMXBean = getRuntimeMXBean.invoke(null);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,67,final Class<?> runtimeMXBeanClass = Loader.loadSystemClass("java.lang.management.RuntimeMXBean");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,68,final Method getStartTime = runtimeMXBeanClass.getMethod("getStartTime");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,69,final Long result = (Long) getStartTime.invoke(runtimeMXBean);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,71,return result.longValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,73,StatusLogger.getLogger().error("Unable to call ManagementFactory.getRuntimeMXBean().getStartTime(), " //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,74,+ "using system time for OnStartupTriggeringPolicy", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,76,return System.currentTimeMillis();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,87,if (evaluated) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,88,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,90,evaluated = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/OnStartupTriggeringPolicy.java,91,return manager.getFileTime() < JVM_START_TIME;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,103,if (usedParams < argCount && this.throwable == null && params[argCount - 1] instanceof Throwable) {
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,20,import java.util.Objects;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,65,params = Objects.requireNonNull(emptyReplacement);
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,67,result = varargs;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,68,varargs = Objects.requireNonNull(emptyReplacement);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,73,if (this.filter == filter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilterable.java,76,CompositeFilter composite = (CompositeFilter) filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,58,final Filter[] copy = Arrays.copyOf(this.filters, this.filters.length + 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,59,copy[this.filters.length] = filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,60,return new CompositeFilter(copy);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,71,final List<Filter> filterList = Arrays.asList(this.filters);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/CompositeFilter.java,72,filterList.remove(filter);
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,27,public abstract class AbstractMessageFactory implements MessageFactory, Serializable {
log4j-api/src/main/java/org/apache/logging/log4j/message/AbstractMessageFactory.java,56,public abstract Message newMessage(String message, Object... params);
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessageFactory.java,32,private static final long serialVersionUID = 1L;
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessageFactory.java,41,public static final ParameterizedMessageFactory INSTANCE = new ParameterizedMessageFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,123,final Map<String, Properties> filters = PropertiesUtil.partitionOnCommonPrefixes(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,124,PropertiesUtil.extractSubset(rootProperties, "filter"));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,125,for (final Map.Entry<String, Properties> entry : filters.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,126,builder.add(createFilter(entry.getKey().trim(), entry.getValue()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,129,final Map<String, Properties> appenders = PropertiesUtil.partitionOnCommonPrefixes(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,130,PropertiesUtil.extractSubset(rootProperties, "appender"));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,131,for (final Map.Entry<String, Properties> entry : appenders.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,132,builder.add(createAppender(entry.getKey().trim(), entry.getValue()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,135,final Map<String, Properties> loggers = PropertiesUtil.partitionOnCommonPrefixes(
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,136,PropertiesUtil.extractSubset(rootProperties, "logger"));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,137,for (final Map.Entry<String, Properties> entry : loggers.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,138,final String name = entry.getKey().trim();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,139,if (!name.equals(LoggerConfig.ROOT)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,140,builder.add(createLogger(name, entry.getValue()));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,157,handleAppenderError(ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,159,handleAppenderError(new AppenderLoggingException(ex));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,163,private void handleAppenderError(final RuntimeException ex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,164,appender.getHandler().error(createErrorMsg("An exception occurred processing Appender "), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginRegistry.java,189,LOGGER.info("Plugin [{}] could not be loaded due to verification error.", className, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,360,final StringBuilder sb = destination.append(original);//new StringBuilder(original);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,363,pos = fragments[i].abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,369,final PatternAbbreviatorFragment terminalFragment = fragments[fragments.length - 1];
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,372,pos = terminalFragment.abbreviate(sb, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/NameAbbreviator.java,362,for (int i = 0; i < fragments.length - 1 && pos < original.length(); i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,254,return level == null ? parent.getLevel() : level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,25,implements ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,28,public void handleEventException(final Throwable throwable, final long sequence,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,29,final AsyncLoggerConfigDisruptor.Log4jEventWrapper event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,31,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,32,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,33,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,35,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,36,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,38,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,39,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,40,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,44,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,45,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,46,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,50,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,51,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDefaultExceptionHandler.java,52,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,19,import com.lmax.disruptor.ExceptionHandler;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,24,public class AsyncLoggerDefaultExceptionHandler implements ExceptionHandler<RingBufferLogEvent> {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,27,public void handleEventException(final Throwable throwable, final long sequence, final RingBufferLogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,29,sb.append("AsyncLogger error handling event seq=").append(sequence).append(", value='");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,30,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,31,sb.append(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,33,sb.append("[ERROR calling ").append(event.getClass()).append(".toString(): ");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,34,sb.append(ignored).append("]");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,36,sb.append("':");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,37,System.err.println(sb);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,38,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,42,public void handleOnStartException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,43,System.err.println("AsyncLogger error starting:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,44,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,48,public void handleOnShutdownException(final Throwable throwable) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,49,System.err.println("AsyncLogger error shutting down:");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerDefaultExceptionHandler.java,50,throwable.printStackTrace();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,90,populateLazilyInitializedFields(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,92,if (!delegate.tryEnqueue(event, this)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,103,void callAppendersInCurrentThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,104,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,107,void callAppendersInBackgroundThread(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,112,void asyncCallAppenders(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,113,super.callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,111,event.loggerConfig.asyncCallAppenders(event.event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,46,asyncLoggerConfig.callAppendersInBackgroundThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/EventRoute.java,65,asyncLoggerConfig.callAppendersInCurrentThread(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,359,processLogEvent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,373,private void processLogEvent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,375,callAppenders(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,376,logParent(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,379,private void logParent(final LogEvent event) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,381,parent.log(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,460,includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,465,protected static boolean includeLocation(final String includeLocationConfigValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,467,final boolean sync = !AsyncLoggerContextSelector.isSelected();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,468,return sync;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,495,properties, config, includeLocation(includeLocation));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,209,Level level;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,213,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfig.java,215,levelName);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,474,message = new SimpleMessage(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,457,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,297,return message != null ? message : new SimpleMessage(String.valueOf(messageText));
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,286,return new ParameterizedMessage(messageText.toString(), params);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,195,final MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,196,unregisterMBeans(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,204,public static void unregisterMBeans(final MBeanServer mbs) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,205,unregisterStatusLogger("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,206,unregisterContextSelector("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,207,unregisterContexts(mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,208,unregisterLoggerConfigs("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,209,unregisterAsyncLoggerRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,210,unregisterAsyncLoggerConfigRingBufferAdmins("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,211,unregisterAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,212,unregisterAsyncAppenders("*", mbs);
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,329,if (found.isEmpty()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,334,for (final ObjectName objectName : found) {
log4j-core/src/main/java/org/apache/logging/log4j/core/jmx/Server.java,335,mbs.unregisterMBean(objectName);
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableObjectMessage.java,67,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableSimpleMessage.java,46,return getFormattedMessage();
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,22,import org.apache.logging.log4j.util.StringBuilderFormattable;
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,81,return getFormattedMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,221,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,232,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/EnvironmentLookup.java,36,return System.getenv(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,74,final StringBuilder sb = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,76,final int limit = options.minLines(array.length) - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,77,for (int i = 0; i <= limit; ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,78,sb.append(array[i]);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,79,if (i < limit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,80,sb.append(options.getSeparator());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,83,toAppendTo.append(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/ExtendedThrowablePatternConverter.java,86,toAppendTo.append(extStackTrace);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,33,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,31,addAttribute("onMatch", onMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,224,public static class Builder implements org.apache.logging.log4j.core.util.Builder<BurstFilter> {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,236,private Result onMatch = Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,239,private Result onMismatch = Result.DENY;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,269,public Builder setOnMatch(final Result onMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,270,this.onMatch = onMatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,271,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,277,public Builder setOnMismatch(final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,278,this.onMismatch = onMismatch;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,279,return this;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/BurstFilter.java,290,return new BurstFilter(this.level, this.rate, this.maxBurst, this.onMatch, this.onMismatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,242,FilterComponentBuilder newFilter(String pluginName, Filter.Result onMatch, Filter.Result onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/api/ConfigurationBuilder.java,251,FilterComponentBuilder newFilter(String pluginName, String onMatch, String onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,31,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultCompositeFilterComponentBuilder.java,34,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,277,final Filter.Result onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,278,return new DefaultFilterComponentBuilder(this, type, onMatch.name(), onMisMatch.name());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,282,public FilterComponentBuilder newFilter(final String type, final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultConfigurationBuilder.java,283,return new DefaultFilterComponentBuilder(this, type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,29,final String onMatch, final String onMisMatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultFilterComponentBuilder.java,32,addAttribute("onMisMatch", onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,194,final FilterComponentBuilder filterBuilder = builder.newFilter(type, onMatch, onMisMatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,192,final String onMatch = (String) properties.remove("onMatch");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,193,final String onMisMatch = (String) properties.remove("onMisMatch");
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,81,public void start(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,84,final BundleWiring self = context.getBundle().adapt(BundleWiring.class);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,89,context.addBundleListener(this);
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,90,final Bundle[] bundles = context.getBundles();
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,105,public void stop(final BundleContext context) throws Exception {
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,106,context.removeBundleListener(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,39,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,52,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,66,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultLoggerComponentBuilder.java,80,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,38,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,50,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,63,addAttribute("level", level);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/builder/impl/DefaultRootLoggerComponentBuilder.java,76,addAttribute("level", level);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,331,private String asXml() {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,332,final StringBuilder sb = new StringBuilder();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,333,final StructuredDataId sdId = getId();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,334,if (sdId == null || sdId.getName() == null || type == null) {
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,335,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,337,sb.append("<StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,338,sb.append("<type>").append(type).append("</type>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,339,sb.append("<id>").append(sdId).append("</id>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,340,super.asXml(sb);
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,341,sb.append("</StructuredData>\n");
log4j-api/src/main/java/org/apache/logging/log4j/message/StructuredDataMessage.java,342,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,243,return asString();
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,252,return asString();
log4j-core/src/main/java/org/apache/logging/log4j/core/jackson/LevelMixIn.java,38,public static Level getLevel(@JsonProperty("name") final String name) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,49,PropertiesUtil.getProperties().getBooleanProperty(ShutdownCallbackRegistry.SHUTDOWN_HOOK_ENABLED, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,123,if (SHUTDOWN_HOOK_ENABLED && this.shutdownCallbackRegistry instanceof LifeCycle) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,317,return SHUTDOWN_HOOK_ENABLED ? shutdownCallbackRegistry.addShutdownCallback(callback) : null;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,116,if (Loader.isClassAvailable("javax.servlet.ServletContext")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,259,LOGGER.warn("Unable to instantiate {}", JANSI_CLASS);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,269,final int begin = i++;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,270,int end;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,271,int depth = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,272,do {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,273,end = pattern.indexOf('}', i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,274,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,275,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,277,final int next = pattern.indexOf("{", i);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,278,if (next != -1 && next < end) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,279,i = end + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,280,++depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,282,--depth;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,286,if (end == -1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,287,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,290,final String r = pattern.substring(begin + 1, end);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,291,options.add(r);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,292,i = end + 1;
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,41,if (message != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,42,writer.println(message);
log4j-api/src/main/java/org/apache/logging/log4j/util/LowLevelLogUtil.java,37,exception.printStackTrace(writer);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,155,final EventRoute route = asyncQueueFullPolicy.getRoute(thread.getId(), memento.getLevel());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,156,route.logMessage(this, memento);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,38,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,251,disruptor.getRingBuffer().publishEvent(this, this, calcLocationIfRequested(fqcn), fqcn, level, marker, message,
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,252,thrown);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,138,this.mdcId = mdcId;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,154,final Level level = Level.toLevel(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,156,LOGGER.error("Unknown level name: " + key + ". Use one of " +
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/HighlightConverter.java,157,Arrays.toString(DEFAULT_STYLES.keySet().toArray()));
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,72,if (options.length < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,77,LOGGER.error("No pattern supplied on style");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/StyleConverter.java,81,LOGGER.error("No style attributes provided");
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,19,import java.io.ByteArrayOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,26,import java.net.UnknownHostException;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,31,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,33,import org.apache.logging.log4j.core.appender.ManagerFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,101,return (SslSocketManager) getManager("TLS:" + host + ':' + port, new SslFactoryData(sslConfig, host, port,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,127,private static class SslSocketManagerFactory implements ManagerFactory<SslSocketManager, SslFactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,129,private static class TlsSocketManagerFactoryException extends Exception {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,131,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,135,public SslSocketManager createManager(final String name, final SslFactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,136,InetAddress inetAddress = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,137,OutputStream os = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,138,Socket socket = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,140,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,141,inetAddress = resolveAddress(data.host);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,142,socket = createSocket(data);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,143,os = socket.getOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,147,LOGGER.error("SslSocketManager ({})", name, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,148,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,151,LOGGER.catching(Level.DEBUG, e);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,152,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,158,private InetAddress resolveAddress(final String hostName) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,159,InetAddress address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,161,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,162,address = InetAddress.getByName(hostName);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,164,LOGGER.error("Could not find address of {}", hostName, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,165,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,168,return address;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,171,private void checkDelay(final int delay, final OutputStream os) throws TlsSocketManagerFactoryException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,172,if (delay == 0 && os == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,173,throw new TlsSocketManagerFactoryException();
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,177,private Socket createSocket(final SslFactoryData data) throws IOException {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,178,SSLSocketFactory socketFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,179,SSLSocket socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,183,return socket;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,67,private static class SslFactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,69,private final String host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,70,private final int port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,71,private final int connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,72,private final int delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,73,private final boolean immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,74,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,77,final int connectTimeoutMillis, final int delayMillis, final boolean immediateFail,
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,79,this.host = host;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,80,this.port = port;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,81,this.connectTimeoutMillis = connectTimeoutMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,82,this.delayMillis = delayMillis;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,83,this.immediateFail = immediateFail;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,84,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,144,checkDelay(data.delayMillis, os);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,50,super.setLevel(LevelTranslator.toJavaLevel(logger.getLevel()));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,35,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/CommonsCompressAction.java,131,return CommonsCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/FileRenameAction.java,166,return FileRenameAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/GzCompressAction.java,124,return GzCompressAction.class.getSimpleName() + '[' + source + " to " + destination //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/action/ZipCompressAction.java,32,private static final int BUF_SIZE = 8102;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,265,if (currentReadConfiguration instanceof AbstractConfiguration) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,266,configurations.add((AbstractConfiguration) currentReadConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,268,LOGGER.error(
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,270,configLocation);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,274,LOGGER.debug("Starting LoggerContext[name={}] from configurations at {}", ctx.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,275,configLocations);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,276,ctx.start(compositeConfiguration);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AsyncAppender.java,266,private volatile boolean shutdown = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FailoverAppender.java,61,private volatile long nextCheckNanos = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/status/StatusConfiguration.java,50,private volatile boolean initialized = false;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/ClocksBenchmark.java,155,private volatile short count = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/LoggerConfigBenchmark.java,55,private volatile Filter filter = null;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,60,volatile long midnightToday = 0;
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/TimeFormatBenchmark.java,61,volatile long midnightTomorrow = 0;
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,112,logger.log(LevelTranslator.toLevel(level), msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,117,logger.log(LevelTranslator.toLevel(level), msg, param1);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,122,logger.log(LevelTranslator.toLevel(level), msg, params);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,127,logger.log(LevelTranslator.toLevel(level), msg, thrown);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,209,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.ERROR, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,214,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.WARN, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,219,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.INFO, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,224,logger.logIfEnabled(FQCN, LevelTranslator.CONFIG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,229,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.DEBUG, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,234,logger.logIfEnabled(FQCN, org.apache.logging.log4j.Level.TRACE, null, msg);
log4j-jul/src/main/java/org/apache/logging/log4j/jul/ApiLogger.java,239,logger.logIfEnabled(FQCN, LevelTranslator.FINEST, null, msg);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,38,private ScheduledExecutorService executorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,54,return addr.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,58,while (interfaces.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,59,final NetworkInterface nic = interfaces.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,60,final Enumeration<InetAddress> addresses = nic.getInetAddresses();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,61,while (addresses.hasMoreElements()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,62,final InetAddress address = addresses.nextElement();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,63,if (!address.isLoopbackAddress()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,64,final String hostname = address.getHostName();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,65,if (hostname != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/NetUtils.java,66,return hostname;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,66,file = new File(path);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,67,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,68,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,21,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,22,import java.net.MalformedURLException;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,25,import java.net.URLDecoder;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,26,import java.nio.charset.StandardCharsets;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,59,if (uri.getScheme() == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,60,File file = new File(uri.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,61,if (file.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,62,return file;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,70,uri = new File(path).toURI();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,73,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,76,final String charsetName = StandardCharsets.UTF_8.name();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,77,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,78,String fileName = uri.toURL().getFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,79,if (new File(fileName).exists()) { // LOG4J2-466
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,80,return new File(fileName); // allow files with '+' char in name
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,82,fileName = URLDecoder.decode(fileName, charsetName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,83,return new File(fileName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,85,LOGGER.warn("Invalid URL {}", uri, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/FileUtils.java,87,LOGGER.warn("Invalid encoding: {}", charsetName, uee);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,19,import java.text.ParseException;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,20,import java.text.SimpleDateFormat;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,21,import java.util.Calendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,22,import java.util.TimeZone;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,45,private static final long MINUTE_MS = 60000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,50,private static final long SECOND_MS = 1000;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,55,private final long start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,59,private final long end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,67,final Result onMismatch) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,69,this.start = start;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,70,this.end = end;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,114,final long s = parseTimestamp(start, 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,115,final long e = parseTimestamp(end, Long.MAX_VALUE);
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,122,private static long parseTimestamp(final String timestamp, final long defaultValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,126,final SimpleDateFormat stf = new SimpleDateFormat("HH:mm:ss");
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,127,stf.setTimeZone(TimeZone.getTimeZone("UTC"));
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/TimeFilter.java,129,return stf.parse(timestamp).getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,146,final AtomicReference<WeakReference<LoggerContext>> r = new AtomicReference<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,147,r.set(new WeakReference<>(ctx));
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,148,CONTEXT_MAP.putIfAbsent(name, r);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,40,private static final char PREFIX_SEPARATOR = ':';
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,161,public static final StrMatcher DEFAULT_VALUE_DELIMITER = StrMatcher.stringMatcher(":-");
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,309,this(variableResolver, prefixMatcher, suffixMatcher, escape, DEFAULT_VALUE_DELIMITER);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,322,public StrSubstitutor(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,323,final StrLookup variableResolver, final StrMatcher prefixMatcher, final StrMatcher suffixMatcher, final char escape, final StrMatcher valueDelimiterMatcher) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,943,if ((valueDelimiterMatchLen = valueDelimiterMatcher.isMatch(varNameExprChars, i)) != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,944,varName = varNameExpr.substring(0, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,946,break;
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,269,sb.append('{');
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,272,sb.append(", ");
log4j-api/src/main/java/org/apache/logging/log4j/message/MapMessage.java,278,sb.append('}');
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,120,return getThreadContextClassLoader().loadClass(className);
log4j-api/src/main/java/org/apache/logging/log4j/util/LoaderUtil.java,122,return Class.forName(className);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,48,private transient EventDataConverter converter;
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,54,this.converter = createConverter();
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,366,if (eventLogger && marker != null && marker.contains(EVENT_MARKER) && converter != null) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,367,msg = converter.convertEvent(message, params, throwable);
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java,403,converter = createConverter();
log4j-jul/src/main/java/org/apache/logging/log4j/jul/LogManager.java,89,return loggerAdapter.getLogger(name);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,45,event.execute(endOfBatch);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEventHandler.java,46,event.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,55,private static final long LEAST;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,66,static {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,117,LEAST = buf.getLong() | rand << SHIFT_6;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,122,private UuidUtil() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/UuidUtil.java,81,System.arraycopy(mac, index, node, index + 2, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,120,mergeStrategy.mergConfigurations(rootNode, sourceRoot, getPluginManager());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/MergeStrategy.java,40,void mergConfigurations(Node target, Node source, PluginManager pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,17,package org.apache.logging.log4j.core.appender;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,19,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,20,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,22,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,23,import org.apache.logging.log4j.core.Layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,27,import org.apache.logging.log4j.core.layout.PatternLayout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,28,import org.apache.logging.log4j.core.util.CloseShieldOutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,37,public final class OutputStreamAppender extends AbstractOutputStreamAppender<OutputStreamManager> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,46,private boolean follow = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,50,private Layout<? extends Serializable> layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,54,private OutputStream target;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,57,public OutputStreamAppender build() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,67,this.follow = shouldFollow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,87,this.target = aTarget;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,94,private static class FactoryData {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,95,private final Layout<? extends Serializable> layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,96,private final String name;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,97,private final OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,109,public FactoryData(final OutputStream os, final String type, final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,110,this.os = os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,111,this.name = type;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,112,this.layout = layout;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,119,private static class OutputStreamManagerFactory implements ManagerFactory<OutputStreamManager, FactoryData> {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,131,public OutputStreamManager createManager(final String name, final FactoryData data) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,132,return new OutputStreamManager(data.os, data.name, data.layout, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,136,private static OutputStreamManagerFactory factory = new OutputStreamManagerFactory();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,159,public static OutputStreamAppender createAppender(Layout<? extends Serializable> layout, final Filter filter,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,160,final OutputStream target, final String name, final boolean follow, final boolean ignore) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,161,if (name == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,162,LOGGER.error("No name provided for OutputStreamAppender");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,163,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,165,if (layout == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,166,layout = PatternLayout.createDefaultLayout();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,171,private static OutputStreamManager getManager(final OutputStream target, final boolean follow,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,172,final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,173,final OutputStream os = new CloseShieldOutputStream(target);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,174,final String managerName = target.getClass().getName() + "@" + Integer.toHexString(target.hashCode()) + '.'
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,175,+ follow;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,176,return OutputStreamManager.getManager(managerName, new FactoryData(os, managerName, layout), factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,180,public static Builder newBuilder() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,181,return new Builder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,184,private OutputStreamAppender(final String name, final Layout<? extends Serializable> layout, final Filter filter,
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,20,import java.util.WeakHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,24,import org.apache.logging.log4j.LogManager;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,25,import org.apache.logging.log4j.util.LoaderUtil;
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,33,public abstract class AbstractLoggerAdapter<L> implements LoggerAdapter<L> {
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLoggerAdapter.java,38,protected final Map<LoggerContext, ConcurrentMap<String, L>> registry = new WeakHashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,46,public class ClassLoaderContextSelector implements ContextSelector {
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,149,ctx = CONTEXT_MAP.get(name).get().get();
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,150,return ctx;
log4j-core/src/main/java/org/apache/logging/log4j/core/selector/ClassLoaderContextSelector.java,166,ref.compareAndSet(weakRef, new WeakReference<>(ctx));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,29,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,55,private final org.apache.logging.log4j.core.Logger logger;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,74,private Category(final org.apache.logging.log4j.core.Logger logger) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,120,org.apache.logging.log4j.core.Logger getLogger() {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,125,final org.apache.logging.log4j.core.Logger parent = logger.getParent();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,126,if (parent == null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,129,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,185,case OFF:
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,186,return Level.OFF;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,202,logger.setLevel(org.apache.logging.log4j.Level.toLevel(level.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,210,logger.setLevel(org.apache.logging.log4j.Level.toLevel(priority.levelStr));
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,357,logger.logMessage(fqcn, lvl, null, msg, t);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,365,return logger.isAdditive();
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,369,logger.setAdditive(additivity);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,381,final ConcurrentMap<String, Logger> loggers = getLoggersMap(logger.getContext());
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,382,while ((name = NameUtil.getSubName(name)) != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,383,final Logger subLogger = loggers.get(name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,384,if (subLogger != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,385,final ResourceBundle rb = subLogger.bundle;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,386,if (rb != null) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,387,return rb;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,451,if (logger.isEnabled(level, null, message, throwable)) {
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,452,logger.logMessage(FQCN, level, null, new ObjectMessage(message), throwable);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,460,return new Logger((LoggerContext) context, name);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,476,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,485,return logger.isEnabled(level, null, null);
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,26,import org.apache.logging.log4j.core.LoggerContext;
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,99,final LoggerContext ctx = PrivateManager.getContext();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,100,ctx.reconfigure();
log4j-1.2-api/src/main/java/org/apache/log4j/LogManager.java,215,return (LoggerContext) getContext(FQCN, false);
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,21,import org.apache.logging.log4j.core.LoggerContext;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLogger.java,170,loggerDisruptor.enqueueLogMessageInfo(translator);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,331,disruptor.getRingBuffer().publishEvent(translator, logEvent, asyncLoggerConfig);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,74,if (entry.getValue() < createTime) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,75,LOGGER.debug("Removing appender " + entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,71,|| DefaultAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,76,|| DiscardingAsyncQueueFullPolicy.class.getName().equals(router)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/PatternParser.java,510,&& method.getName().equals("newInstance")) {
log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLoggerFactory.java,37,return new Log4jLogger(context.getLogger(key), name);
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,476,private Configuration setConfiguration(final Configuration config) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,532,final StringBuilder buf = new StringBuilder(255);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,533,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, fileIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/PatternProcessor.java,185,prevFileTime = nextFileTime;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,38,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,44,super(new LoggerInputStream(in, charset, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,54,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,59,return super.read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,64,return super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedInputStream.java,69,return LoggerBufferedInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,38,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,43,super(new LoggerReader(reader, logger, fqcn == null ? FQCN : fqcn, level, marker), size);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,48,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,53,return super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,58,return super.read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,63,return super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,68,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,69,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,70,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,71,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,72,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,74,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerBufferedReader.java,79,return super.readLine();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,40,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,41,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,46,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,47,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,52,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,53,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,58,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,63,return LoggerFilterOutputStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,68,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,69,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,74,this.out.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,75,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,80,this.out.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterOutputStream.java,81,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,49,this.out.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,55,this.out.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,60,return LoggerFilterWriter.class.getSimpleName() + "{writer=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,65,this.out.write(cbuf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,66,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,71,this.out.write(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,72,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,77,this.out.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,78,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,83,this.out.write(str);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,84,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,89,this.out.write(str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerFilterWriter.java,90,this.logger.put(this.fqcn, str, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,38,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,43,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,49,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,50,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,55,final int b = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,56,this.logger.put(this.fqcn, b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,57,return b;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,62,return read(b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,67,final int bytesRead = super.read(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,68,this.logger.put(this.fqcn, b, off, bytesRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,69,return bytesRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerInputStream.java,74,return LoggerInputStream.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,39,private final ByteStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,40,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,44,this.logger = new ByteStreamLogger(logger, level, marker, charset);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,45,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,60,this.logger.put(this.fqcn, b, 0, b.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,65,this.logger.put(this.fqcn, b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerOutputStream.java,70,this.logger.put(this.fqcn, (byte) (b & 0xFF));
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,45,super(new LoggerOutputStream(logger, level, marker, ensureNonNull(charset), fqcn == null ? FQCN : fqcn),
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,46,autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,52,super(new LoggerFilterOutputStream(out, ensureNonNull(charset), logger, fqcn == null ? FQCN : fqcn, level,
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,53,marker), autoFlush, ensureNonNull(charset).name());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,62,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,68,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,74,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,80,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,85,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,90,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,95,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,101,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,107,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,112,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,117,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,122,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,127,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,132,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,137,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,142,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,147,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,152,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,158,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,164,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,169,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,174,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,179,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,184,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,189,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,194,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,199,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,204,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,209,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,214,return LoggerPrintStream.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,219,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,224,super.write(b, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintStream.java,229,super.write(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,51,super(new LoggerWriter(logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,56,super(new LoggerFilterWriter(writer, logger, fqcn == null ? FQCN : fqcn, level, marker), autoFlush);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,61,super.append(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,67,super.append(csq);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,73,super.append(csq, start, end);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,79,return super.checkError();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,84,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,89,super.flush();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,94,super.format(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,100,super.format(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,106,super.print(b);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,111,super.print(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,116,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,121,super.print(d);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,126,super.print(f);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,131,super.print(i);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,136,super.print(l);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,141,super.print(obj);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,146,super.print(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,151,super.printf(l, format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,157,super.printf(format, args);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,163,super.println();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,168,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,173,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,178,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,183,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,188,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,193,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,198,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,203,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,208,super.println(x);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,213,return LoggerPrintWriter.class.getSimpleName() + "{stream=" + this.out + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,218,super.write(buf);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,223,super.write(buf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,228,super.write(c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,233,super.write(s);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerPrintWriter.java,238,super.write(s, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,37,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,38,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,43,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,44,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,49,super.close();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,50,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,55,final int c = super.read();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,56,this.logger.put(this.fqcn, c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,57,return c;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,62,return read(cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,67,final int charsRead = super.read(cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,68,this.logger.put(this.fqcn, cbuf, off, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,69,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,74,final int len = target.remaining();
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,75,final char[] cbuf = new char[len];
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,76,final int charsRead = read(cbuf, 0, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,77,if (charsRead > 0) {
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,78,target.put(cbuf, 0, charsRead);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,80,return charsRead;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerReader.java,85,return LoggerReader.class.getSimpleName() + "{stream=" + this.in + '}';
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,36,private final CharStreamLogger logger;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,37,private final String fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,40,this.logger = new CharStreamLogger(logger, level, marker);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,41,this.fqcn = fqcn == null ? FQCN : fqcn;
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,46,this.logger.close(this.fqcn);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,56,return this.getClass().getSimpleName() + "[fqcn=" + this.fqcn + ", logger=" + this.logger + "]";
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,61,this.logger.put(this.fqcn, cbuf, 0, cbuf.length);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,66,this.logger.put(this.fqcn, cbuf, off, len);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,71,this.logger.put(this.fqcn, (char) c);
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,76,this.logger.put(this.fqcn, str, 0, str.length());
log4j-iostreams/src/main/java/org/apache/logging/log4j/io/LoggerWriter.java,81,this.logger.put(this.fqcn, str, off, len);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,46,private MapPatternConverter(final String[] options) {
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,58,return new MapPatternConverter(options);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,77,toAppendTo.append("{}");
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/MapPatternConverter.java,78,return;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,71,if (manager.getFileSize() == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,72,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,85,private final char[] cachedBuffer = new char[64]; // max length of formatted date-time in any format < 64
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/TimeBasedTriggeringPolicy.java,59,aManager.getPatternProcessor().getNextTime(aManager.getFileTime(), interval, modulate);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,19,import java.io.IOException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,20,import java.io.OutputStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,21,import java.io.PrintStream;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,22,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,23,import java.io.UnsupportedEncodingException;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,24,import java.lang.reflect.Constructor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,25,import java.nio.charset.Charset;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,26,import java.util.concurrent.atomic.AtomicInteger;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,22,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncQueueFullPolicyFactory.java,84,final Class<? extends AsyncQueueFullPolicy> cls = LoaderUtil.loadClass(router).asSubclass(AsyncQueueFullPolicy.class);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,26,import com.lmax.disruptor.*;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,31,import org.apache.logging.log4j.util.LoaderUtil;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,104,(Class<? extends ExceptionHandler<RingBufferLogEvent>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DisruptorUtil.java,120,(Class<? extends ExceptionHandler<AsyncLoggerConfigDisruptor.Log4jEventWrapper>>) LoaderUtil.loadClass(cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,71,mergeStrategy = LoaderUtil.newInstanceOf(mergeStrategyClassName);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,97,final ContextSelector selector = LoaderUtil.newCheckedInstanceOfProperty(Constants.LOG4J_CONTEXT_SELECTOR,
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jContextFactory.java,110,final ShutdownCallbackRegistry registry = LoaderUtil.newCheckedInstanceOfProperty(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,273,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,274,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,275,InstantiationException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,276,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,277,InvocationTargetException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,278,return LoaderUtil.newInstanceOf(className);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,296,throws ClassNotFoundException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,297,NoSuchMethodException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,298,IllegalAccessException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,299,InvocationTargetException,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,300,InstantiationException {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/Loader.java,301,return LoaderUtil.newCheckedInstanceOf(className, clazz);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,613,return (T) appenders.get(appenderName);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,633,appenders.putIfAbsent(appender.getName(), appender);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,749,final Appender app = appenders.remove(appenderName);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,125,public void baseline() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,126,consume(bytes);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,132,public void usAsciiGetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,133,consume(usAsciiGetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,147,public void iso8859_1GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,148,consume(iso8859_1GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,162,public void utf8GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,163,consume(utf8GetBytesLayout.toByteArray(logEvent));
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,177,public void utf16GetBytes() {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/AbstractStringLayoutStringEncodingBenchmark.java,178,consume(utf16GetBytesLayout.toByteArray(logEvent));
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,50,return MDC.getCopyOfContextMap().containsKey(key);
log4j-to-slf4j/src/main/java/org/apache/logging/slf4j/MDCContextMap.java,67,return MDC.getCopyOfContextMap().isEmpty();
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,103,final String font, final String fontSize, final String headerSize) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,133,sbuf.append(event.getTimeMillis() - jvmStartTime);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,326,return new HtmlLayout(locationInfo, title, contentType, charset, font, fontSize, headerSize);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,403,fontSize.larger().getFontSize());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,325,LOGGER.trace("{} notifying ReliabilityStrategies that appenders will be stopped.", cls);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,326,for (final LoggerConfig loggerConfig : loggerConfigs.values()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,327,loggerConfig.getReliabilityStrategy().beforeStopAppenders();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,329,root.getReliabilityStrategy().beforeStopAppenders();
log4j-api/src/main/java/org/apache/logging/log4j/message/FormattedMessage.java,259,stringArgs[i] = obj.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,489,scriptManager.addScript(script);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,406,trimMessageText();
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,416,private void trimMessageText() {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,417,if (messageText != null && messageText.length() > Constants.MAX_REUSABLE_MESSAGE_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,418,messageText.setLength(Constants.MAX_REUSABLE_MESSAGE_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,419,messageText.trimToSize();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,121,trimMessageText();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,138,private void trimMessageText() {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,139,if (messageText != null && messageText.length() > Constants.MAX_REUSABLE_MESSAGE_SIZE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,140,messageText.setLength(Constants.MAX_REUSABLE_MESSAGE_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/MutableLogEvent.java,141,messageText.trimToSize();
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,263,return sb.toString();
log4j-api/src/main/java/org/apache/logging/log4j/util/ProviderUtil.java,57,private static final String[] COMPATIBLE_API_VERSIONS = {"2.0.0", "2.1.0", "2.2.0", "2.3.0", "2.4.0", "2.5.0", "2.6.0"};
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/HtmlLayout.java,156,if (escapedLogger.isEmpty()) {
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,106,patternLayoutEncoder.init(baos);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,117,patternLayoutEncoder.doEncode(LOGBACKEVENT);
log4j-perf/src/main/java/org/apache/logging/log4j/perf/jmh/PatternLayoutComparisonBenchmark.java,119,return baos.toByteArray();
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,188,private boolean enableSubstitutionInVariables;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,24,import java.util.Objects;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,30,import org.apache.logging.log4j.core.appender.rolling.action.CommonsCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,31,import org.apache.logging.log4j.core.appender.rolling.action.CompositeAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,33,import org.apache.logging.log4j.core.appender.rolling.action.GzCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,34,import org.apache.logging.log4j.core.appender.rolling.action.ZipCompressAction;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,207,final boolean useMax = fileIndex == null ? true : fileIndex.equalsIgnoreCase("max");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,208,int minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,209,if (min != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,210,minIndex = Integer.parseInt(min);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,211,if (minIndex < 1) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,212,LOGGER.error("Minimum window size too small. Limited to " + MIN_WINDOW_SIZE);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,213,minIndex = MIN_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,216,int maxIndex = DEFAULT_WINDOW_SIZE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,217,if (max != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,218,maxIndex = Integer.parseInt(max);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,219,if (maxIndex < minIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,220,maxIndex = minIndex < DEFAULT_WINDOW_SIZE ? DEFAULT_WINDOW_SIZE : minIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,221,LOGGER.error("Maximum window size must be greater than the minimum windows size. Set to " + maxIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,239,private final StrSubstitutor strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,259,this.strSubstitutor = strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,280,public StrSubstitutor getStrSubstitutor() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,281,return strSubstitutor;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,319,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,320,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,323,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, highIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,324,String highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,325,final int suffixLength = suffixLength(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,326,int curMaxIndex = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,328,for (int i = highIndex; i >= lowIndex; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,329,File toRename = new File(highFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,330,if (i == highIndex && toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,331,curMaxIndex = highIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,333,curMaxIndex = i + 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,337,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,339,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,340,final File toRenameBase = new File(highFilename.substring(0, highFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,342,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,343,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,344,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,345,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,346,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,349,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,350,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,354,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,359,if (i == lowIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,360,LOGGER.debug("DefaultRolloverStrategy.purgeAscending deleting {} at low index {}: all slots full.",
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,361,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,362,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,363,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,366,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,374,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i - 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,376,final String lowFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,377,String renameTo = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,379,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,380,renameTo = lowFilename.substring(0, lowFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,383,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,384,highFilename = lowFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,386,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,388,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i - 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,390,highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,393,if (curMaxIndex == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,394,curMaxIndex = lowIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,400,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,401,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,402,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,403,LOGGER.debug("DefaultRolloverStrategy.purgeAscending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,404,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,405,if (!action.execute()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,409,LOGGER.warn("Exception during purge in RollingFileAppender", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,410,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,413,return curMaxIndex;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,426,final List<FileRenameAction> renames = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,427,final StringBuilder buf = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,430,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, lowIndex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,432,String lowFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,433,final int suffixLength = suffixLength(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,435,for (int i = lowIndex; i <= highIndex; i++) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,436,File toRename = new File(lowFilename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,437,boolean isBase = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,439,if (suffixLength > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,440,final File toRenameBase = new File(lowFilename.substring(0, lowFilename.length() - suffixLength));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,442,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,443,if (toRenameBase.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,444,LOGGER.debug("DefaultRolloverStrategy.purgeDescending deleting {} base of {}.", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,445,toRenameBase, toRename);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,446,toRenameBase.delete();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,449,toRename = toRenameBase;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,450,isBase = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,454,if (toRename.exists()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,459,if (i == highIndex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,460,LOGGER.debug(
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,462,toRename, i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,463,if (!toRename.delete()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,464,return -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,467,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,473,buf.setLength(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,475,manager.getPatternProcessor().formatFileName(strSubstitutor, buf, i + 1);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,477,final String highFilename = strSubstitutor.replace(buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,478,String renameTo = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,480,if (isBase) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,481,renameTo = highFilename.substring(0, highFilename.length() - suffixLength);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,484,renames.add(new FileRenameAction(toRename, new File(renameTo), true));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,485,lowFilename = highFilename;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,494,for (int i = renames.size() - 1; i >= 0; i--) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,495,final Action action = renames.get(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,497,LOGGER.debug("DefaultRolloverStrategy.purgeDescending executing {} of {}: {}", //
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,498,i, renames.size(), action);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,520,if (maxIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,521,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,523,final long startNanos = System.nanoTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,524,final int fileIndex = purge(minIndex, maxIndex, manager);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,525,if (fileIndex < 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,526,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,528,if (LOGGER.isTraceEnabled()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,529,final double durationMillis = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startNanos);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,530,LOGGER.trace("DefaultRolloverStrategy.purge() took {} milliseconds", durationMillis);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/DefaultRolloverStrategy.java,565,return "DefaultRolloverStrategy(min=" + minIndex + ", max=" + maxIndex + ')';
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,354,watchManager.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AbstractConfiguration.java,356,configurationScheduler.stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,130,entry.setKey(plugin.name().toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/processor/PluginProcessor.java,161,entry.setKey(alias.toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,151,final String prefix = var.substring(0, prefixPos);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,929,final int endPos = pos;
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/StrSubstitutor.java,945,varDefaultValue = varNameExpr.substring(i + valueDelimiterMatchLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,46,if (scheduledItems > 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,59,if (executorService != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,61,executorService.shutdown();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,71,++scheduledItems;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,95,return executorService.schedule(callable, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,107,return executorService.schedule(command, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,138,return executorService.scheduleAtFixedRate(command, initialDelay, period, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,152,return executorService.scheduleWithFixedDelay(command, initialDelay, delay, unit);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,17,package org.apache.logging.log4j.core.config.composite;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,19,import java.util.HashMap;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,20,import java.util.List;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,21,import java.util.Map;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,23,import org.apache.logging.log4j.Level;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,24,import org.apache.logging.log4j.core.Filter;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,25,import org.apache.logging.log4j.core.config.AbstractConfiguration;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,26,import org.apache.logging.log4j.core.config.Node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,27,import org.apache.logging.log4j.core.config.plugins.util.PluginManager;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,28,import org.apache.logging.log4j.core.config.plugins.util.PluginType;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,29,import org.apache.logging.log4j.core.filter.CompositeFilter;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,54,public class DefaultMergeStrategy implements MergeStrategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,56,private static final String APPENDERS = "appenders";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,57,private static final String PROPERTIES = "properties";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,58,private static final String LOGGERS = "loggers";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,59,private static final String SCRIPTS = "scripts";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,60,private static final String FILTERS = "filters";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,61,private static final String STATUS = "status";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,62,private static final String NAME = "name";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,63,private static final String REF = "ref";
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,73,boolean isFound = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,75,if (targetAttribute.getKey().equalsIgnoreCase(attribute.getKey())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,76,if (attribute.getKey().equalsIgnoreCase(STATUS)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,79,if (targetLevel != null && sourceLevel != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,80,if (sourceLevel.isLessSpecificThan(targetLevel)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,81,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,84,if (sourceLevel != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,85,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,88,if (attribute.getKey().equalsIgnoreCase("monitorInterval")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,91,if (targetInterval == 0 || sourceInterval < targetInterval) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,92,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,95,targetAttribute.setValue(attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,98,isFound = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,101,if (!isFound) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,102,rootNode.getAttributes().put(attribute.getKey(), attribute.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,118,boolean isMerged = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,120,if (isFilter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,121,if (isFilterNode(targetChildNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,122,updateFilterNode(target, targetChildNode, sourceChildNode, pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,123,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,124,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,130,if (!targetChildNode.getName().equalsIgnoreCase(sourceChildNode.getName())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,131,continue;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,134,switch (targetChildNode.getName().toLowerCase()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,135,case PROPERTIES:
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,136,case SCRIPTS:
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,137,case APPENDERS: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,140,if (targetNode.getAttributes().get(NAME).equals(node.getAttributes().get(NAME))) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,141,targetChildNode.getChildren().remove(targetNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,142,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,145,targetChildNode.getChildren().add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,147,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,148,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,150,case LOGGERS: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,153,targetLoggers.put(node.getName(), node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,158,if (targetNode != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,160,if (isFilterNode(sourceLoggerChild)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,161,boolean foundFilter = false;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,163,if (isFilterNode(targetChild)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,164,updateFilterNode(loggerNode, targetChild, sourceLoggerChild,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,165,pluginManager);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,166,foundFilter = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,167,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,170,if (!foundFilter) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,172,sourceLoggerChild.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,173,targetNode.getChildren().add(childNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,177,sourceLoggerChild.getType());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,178,childNode.getAttributes().putAll(sourceLoggerChild.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,179,if (childNode.getName().equalsIgnoreCase("AppenderRef")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,181,if (isSameReference(targetChild, childNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,182,targetNode.getChildren().remove(targetChild);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,183,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,188,if (isSameName(targetChild, childNode)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,189,targetNode.getChildren().remove(targetChild);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,190,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,195,targetNode.getChildren().add(childNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,199,loggerNode.getAttributes().putAll(node.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,200,loggerNode.getChildren().addAll(node.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,201,targetChildNode.getChildren().add(loggerNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,204,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,205,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,207,default: {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,208,targetChildNode.getChildren().addAll(sourceChildNode.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,209,isMerged = true;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,210,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,215,if (!isMerged) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,216,if (sourceChildNode.getName().equalsIgnoreCase("Properties")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,217,target.getChildren().add(0, sourceChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,219,target.getChildren().add(sourceChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,228,if (name == null && nodeName == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,229,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,231,if (nodeName != null && nodeName.equals(name)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,232,return node;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,235,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,240,if (CompositeFilter.class.isAssignableFrom(targetChildNode.getType().getPluginClass())) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,242,node.getChildren().addAll(sourceChildNode.getChildren());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,243,node.getAttributes().putAll(sourceChildNode.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,244,targetChildNode.getChildren().add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,249,node.getAttributes().putAll(sourceChildNode.getAttributes());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,251,children.add(targetChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,252,children.add(node);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,254,nodes.remove(targetChildNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,255,nodes.add(filtersNode);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,260,return Filter.class.isAssignableFrom(node.getType().getPluginClass());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/ConfigurationScheduler.java,70,if (!isStarted()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/net/SslSocketManager.java,182,socket = (SSLSocket) socketFactory.createSocket(data.host, data.port);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,48,this.cronExpression = schedule;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/CronTriggeringPolicy.java,49,this.configuration = configuration;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,74,LOGGER.error(SHUTDOWN_HOOK_MARKER, "Caught exception executing shutdown hook {}", hook, t);
log4j-api/src/main/java/org/apache/logging/log4j/message/LocalizedMessageFactory.java,72,return new LocalizedMessage(baseName,  key, params);
log4j-api/src/main/java/org/apache/logging/log4j/message/SimpleMessage.java,72,buffer.append(charSequence);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,261,logIfEnabled(FQCN, Level.DEBUG, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,296,logIfEnabled(FQCN, Level.DEBUG, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,663,logIfEnabled(FQCN, Level.ERROR, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,708,logIfEnabled(FQCN, Level.ERROR, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,970,logIfEnabled(FQCN, Level.FATAL, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1015,logIfEnabled(FQCN, Level.FATAL, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1236,logIfEnabled(FQCN, Level.INFO, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1281,logIfEnabled(FQCN, Level.INFO, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1564,logIfEnabled(FQCN, level, marker, msg, (Throwable) null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1613,logIfEnabled(FQCN, level, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2134,logIfEnabled(FQCN, Level.TRACE, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2179,logIfEnabled(FQCN, Level.TRACE, null, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2455,logIfEnabled(FQCN, Level.WARN, marker, msg, null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2500,logIfEnabled(FQCN, Level.WARN, null, msg, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/pattern/DatePatternConverter.java,77,return fastDateFormat.toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,66,StringBuilder format(long millis, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,76,StringBuilder format(Date date, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/DatePrinter.java,88,StringBuilder format(Calendar calendar, StringBuilder buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,19,import java.io.Serializable;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,32,public class FastDateFormat extends Format implements DatePrinter, DateParser, Serializable {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,56,private static final long serialVersionUID = 2L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,58,private static final FormatCache<FastDateFormat> CACHE = new FormatCache<FastDateFormat>() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,80,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,81,this(pattern, timeZone, locale, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,98,protected FastDateFormat(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,99,final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,100,printer = new FastDatePrinter(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,101,parser = new FastDateParser(pattern, timeZone, locale, centuryStart);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,113,return CACHE.getInstance();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,126,return CACHE.getInstance(pattern, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,140,return CACHE.getInstance(pattern, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,154,return CACHE.getInstance(pattern, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,169,return CACHE.getInstance(pattern, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,184,return CACHE.getDateInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,199,return CACHE.getDateInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,214,return CACHE.getDateInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,229,return CACHE.getDateInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,244,return CACHE.getTimeInstance(style, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,259,return CACHE.getTimeInstance(style, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,274,return CACHE.getTimeInstance(style, timeZone, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,289,return CACHE.getTimeInstance(style, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,305,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, null);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,321,return CACHE.getDateTimeInstance(dateStyle, timeStyle, null, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,336,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,337,final TimeZone timeZone) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,353,public static FastDateFormat getDateTimeInstance(final int dateStyle, final int timeStyle,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,354,final TimeZone timeZone, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,355,return CACHE.getDateTimeInstance(dateStyle, timeStyle, timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,372,return printer.format(obj, toAppendTo, pos);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,426,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,440,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,454,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,548,public String toPattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,549,return printer.getPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,564,if (!(obj instanceof FastDateFormat)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,593,return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + ","
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,594,+ printer.getTimeZone().getID() + "]";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,606,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateFormat.java,607,return printer.applyRules(calendar, buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,28,import java.util.GregorianCalendar;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,73,private static final long serialVersionUID = 1L;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,128,for (int i = mRules.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,237,rule = selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,238,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,239,case 'X': // ISO 8601
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,241,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,377,throw new IllegalArgumentException("Unknown class: " + (obj == null ? "<null>" : obj.getClass().getName()));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,388,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,408,private GregorianCalendar newCalendar() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,410,return new GregorianCalendar(mTimeZone, mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,420,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,441,public StringBuilder format(final long millis, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,442,return format(new Date(millis), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,451,public StringBuilder format(final Date date, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,452,final Calendar c = newCalendar(); // hard code GregorianCalendar
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,463,public StringBuilder format(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,465,return format(calendar.getTime(), buf);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,477,protected StringBuilder applyRules(final Calendar calendar, final StringBuilder buf) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,478,for (final Rule rule : mRules) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,479,rule.appendTo(buf, calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,547,return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,594,private static void appendDigits(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,595,buffer.append((char) (value / 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,596,buffer.append((char) (value % 10 + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,620,void appendTo(StringBuilder buffer, Calendar calendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,635,void appendTo(StringBuilder buffer, int value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,667,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,701,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,732,for (int i = mValues.length; --i >= 0;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,745,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,779,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,787,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,789,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,793,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,826,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,834,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,836,buffer.append((char) (value + '0'));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,879,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,887,public final void appendTo(final StringBuilder buffer, int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,889,for (int digit = 0; digit < mSize; ++digit) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,890,buffer.append('0');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,893,int index = buffer.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,894,for (; value > 0; value /= 10) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,895,buffer.setCharAt(--index, (char) ('0' + value % 10));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,929,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,937,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,941,buffer.append(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,973,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,981,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1013,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1021,public final void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1055,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1067,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1101,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1113,public void appendTo(final StringBuilder buffer, final int value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1120,private static final ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache = new ConcurrentHashMap<>(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1121,7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1142,value = prior;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1189,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1231,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1262,static final Iso8601_Rule ISO8601_HOURS = new Iso8601_Rule(3);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1276,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1284,throw new IllegalArgumentException("invalid number of X");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1311,public void appendTo(final StringBuilder buffer, final Calendar calendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1328,if (length < 5) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1332,if (length == 6) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1360,TimeZoneDisplayKey(final TimeZone timeZone, final boolean daylight, final int style, final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1375,return (mStyle * 31 + mLocale.hashCode()) * 31 + mTimeZone.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1387,final TimeZoneDisplayKey other = (TimeZoneDisplayKey) obj;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDatePrinter.java,1388,return mTimeZone.equals(other.mTimeZone) && mStyle == other.mStyle && mLocale.equals(other.mLocale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,40,static final int NONE = -1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,42,private static final ConcurrentMap<MultipartKey, String> DATETIME_INSTANCE_CACHE =
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,43,new ConcurrentHashMap<>(7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,45,private final ConcurrentMap<MultipartKey, F> cInstanceCache = new ConcurrentHashMap<>(7);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,81,if (format == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,83,final F previousValue = cInstanceCache.putIfAbsent(key, format);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,87,format = previousValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,119,private F getDateTimeInstance(final Integer dateStyle, final Integer timeStyle, final TimeZone timeZone,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,120,Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,192,String pattern = DATETIME_INSTANCE_CACHE.get(key);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,197,formatter = DateFormat.getTimeInstance(timeStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,199,formatter = DateFormat.getDateInstance(dateStyle.intValue(), locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,203,pattern = ((SimpleDateFormat) formatter).toPattern();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,204,final String previous = DATETIME_INSTANCE_CACHE.putIfAbsent(key, pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,209,pattern = previous;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,253,if (hashCode == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,254,int rc = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,255,for (final Object key : keys) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,256,if (key != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,257,rc = rc * 7 + key.hashCode();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,260,hashCode = rc;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,46,static final Locale JAPANESE_IMPERIAL = new Locale("ja", "JP", "JP");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,55,private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,57,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,58,return iValue - 1;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,62,private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,67,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,68,int iValue = Integer.parseInt(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,69,if (iValue < 100) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,70,iValue = parser.adjustYear(iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,72,cal.set(Calendar.YEAR, iValue);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,76,private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,77,private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,78,private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,79,private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,80,private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,81,private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,82,private static final Strategy DAY_OF_WEEK_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,83,private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,84,private static final Strategy HOUR24_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,86,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,87,return iValue == 24 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,90,private static final Strategy HOUR12_STRATEGY = new NumberStrategy(Calendar.HOUR) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,92,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,93,return iValue == 12 ? 0 : iValue;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,96,private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,97,private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,98,private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,99,private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,100,private static final Strategy ISO_8601_STRATEGY = new ISO8601TimeZoneStrategy("(Z|(?:[+-]\\d{2}(?::?\\d{2})?))");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,108,private final boolean lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,111,private transient Pattern parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,112,private transient Strategy[] strategies;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,115,private transient String currentFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,116,private transient Strategy nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,131,this(pattern, timeZone, locale, null, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,146,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale, final Date centuryStart) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,147,this(pattern, timeZone, locale, centuryStart, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,164,protected FastDateParser(final String pattern, final TimeZone timeZone, final Locale locale,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,165,final Date centuryStart, final boolean lenient) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,169,this.lenient = lenient;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,174,if (centuryStart != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,176,centuryStartYear = definingCalendar.get(Calendar.YEAR);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,178,centuryStartYear = 0;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,182,centuryStartYear = definingCalendar.get(Calendar.YEAR) - 80;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,184,century = centuryStartYear / 100 * 100;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,185,startYear = centuryStartYear - century;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,198,final StringBuilder regex = new StringBuilder();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,199,final List<Strategy> collector = new ArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,201,final Matcher patternMatcher = formatPattern.matcher(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,202,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,203,throw new IllegalArgumentException("Illegal pattern character '"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,204,+ pattern.charAt(patternMatcher.regionStart()) + "'");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,207,currentFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,208,Strategy currentStrategy = getStrategy(currentFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,209,for (;;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,210,patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,211,if (!patternMatcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,212,nextStrategy = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,213,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,215,final String nextFormatField = patternMatcher.group();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,216,nextStrategy = getStrategy(nextFormatField, definingCalendar);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,217,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,218,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,220,currentFormatField = nextFormatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,221,currentStrategy = nextStrategy;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,223,if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,224,throw new IllegalArgumentException("Failed to parse \"" + pattern + "\" ; gave up at index "
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,225,+ patternMatcher.regionStart());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,227,if (currentStrategy.addRegex(this, regex)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,228,collector.add(currentStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,230,currentFormatField = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,231,strategies = collector.toArray(new Strategy[collector.size()]);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,232,parsePattern = Pattern.compile(regex.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,272,Pattern getParsePattern() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,273,return parsePattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,292,return pattern.equals(other.pattern) && timeZone.equals(other.timeZone) && locale.equals(other.locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,352,final Date date = parse(source, new ParsePosition(0));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,356,throw new ParseException("(The " + locale + " locale does not support dates before 1868 AD)\n"
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,357,+ "Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,359,throw new ParseException("Unparseable date: \"" + source + "\" does not match " + parsePattern.pattern(), 0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,387,final int offset = pos.getIndex();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,388,final Matcher matcher = parsePattern.matcher(source.substring(offset));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,389,if (!matcher.lookingAt()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,390,return null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,393,final Calendar cal = Calendar.getInstance(timeZone, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,395,cal.setLenient(lenient);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,397,for (int i = 0; i < strategies.length;) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,398,final Strategy strategy = strategies[i++];
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,399,strategy.setCalendar(this, cal, matcher.group(i));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,401,pos.setIndex(offset + matcher.end());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,402,return cal.getTime();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,440,private static StringBuilder escapeRegex(final StringBuilder regex, final String value, final boolean unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,441,regex.append("\\Q");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,442,for (int i = 0; i < value.length(); ++i) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,443,char c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,444,switch (c) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,445,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,446,if (unquote) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,447,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,448,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,450,c = value.charAt(i);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,452,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,453,case '\\':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,454,if (++i == value.length()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,455,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,464,regex.append(c); // we always want the original \
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,465,c = value.charAt(i); // Is it followed by E ?
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,466,if (c == 'E') { // \E detected
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,467,regex.append("E\\\\E\\"); // see comment above
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,468,c = 'Q'; // appended below
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,470,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,471,default:
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,472,break;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,474,regex.append(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,476,regex.append("\\E");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,477,return regex;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,488,private static Map<String, Integer> getDisplayNames(final int field, final Calendar definingCalendar,
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,489,final Locale locale) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,490,return definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,509,boolean isNextNumber() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,510,return nextStrategy != null && nextStrategy.isNumber();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,518,int getFieldWidth() {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,519,return currentFormatField.length();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,545,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,557,abstract boolean addRegex(FastDateParser parser, StringBuilder regex);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,564,private static final Pattern formatPattern = Pattern
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,565,.compile("D+|E+|F+|G+|H+|K+|M+|S+|W+|X+|Z+|a+|d+|h+|k+|m+|s+|u+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,574,private Strategy getStrategy(final String formatField, final Calendar definingCalendar) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,575,switch (formatField.charAt(0)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,576,case '\'':
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,577,if (formatField.length() > 2) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,578,return new CopyQuotedStrategy(formatField.substring(1, formatField.length() - 1));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,582,return new CopyQuotedStrategy(formatField);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,597,: NUMBER_MONTH_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,606,case 'h': // Hour in am/pm (1-12), i.e. midday/midnight is 12, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,608,case 'k': // Hour in day (1-24), i.e. midnight is 24, not 0
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,619,return formatField.length() > 2 ? LITERAL_YEAR_STRATEGY : ABBREVIATED_YEAR_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,621,return ISO8601TimeZoneStrategy.getStrategy(formatField.length());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,623,if (formatField.equals("ZZ")) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,624,return ISO_8601_STRATEGY;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,662,strategy = field == Calendar.ZONE_OFFSET ? new TimeZoneStrategy(locale) : new CaseInsensitiveTextStrategy(
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,663,field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,676,private final String formatField;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,692,char c = formatField.charAt(0);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,693,if (c == '\'') {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,694,c = formatField.charAt(1);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,696,return Character.isDigit(c);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,703,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,704,escapeRegex(regex, formatField, true);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,705,return false;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,712,private static class CaseInsensitiveTextStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,714,private final Locale locale;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,727,final Map<String, Integer> keyValues = getDisplayNames(field, definingCalendar, locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,728,this.lKeyValues = new HashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,730,for (final Map.Entry<String, Integer> entry : keyValues.entrySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,731,lKeyValues.put(entry.getKey().toLowerCase(locale), entry.getValue());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,739,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,741,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,742,simpleQuote(regex, textKeyValue).append('|');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,744,regex.setCharAt(regex.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,745,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,754,if (iVal == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,755,final StringBuilder sb = new StringBuilder(value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,756,sb.append(" not in (");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,757,for (final String textKeyValue : lKeyValues.keySet()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,758,sb.append(textKeyValue).append(' ');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,760,sb.setCharAt(sb.length() - 1, ')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,761,throw new IllegalArgumentException(sb.toString());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,779,this.field = field;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,794,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,796,if (parser.isNextNumber()) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,797,regex.append("(\\p{Nd}{").append(parser.getFieldWidth()).append("}+)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,799,regex.append("(\\p{Nd}++)");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,801,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,808,void setCalendar(final FastDateParser parser, final Calendar cal, final String value) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,809,cal.set(field, modify(Integer.parseInt(value)));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,818,int modify(final int iValue) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,826,static class TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,828,private static final String GMT_OPTION = "GMT[+-]\\d{1,2}:\\d{2}";
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,831,private final Map<String, TimeZone> tzNames = new HashMap<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,832,private final String validTimeZoneChars;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,848,sb.append('(' + RFC_822_TIME_ZONE + "|(?iu)" + GMT_OPTION);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,859,if (!tzNames.containsKey(zoneName)) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,860,tzNames.put(zoneName, tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,861,simpleQuote(sb.append('|'), zoneName);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,866,sb.append(')');
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,867,validTimeZoneChars = sb.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,874,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,875,regex.append(validTimeZoneChars);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,876,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,884,TimeZone tz;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,886,tz = TimeZone.getTimeZone("GMT" + value);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,888,tz = TimeZone.getTimeZone(value.toUpperCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,890,tz = tzNames.get(value.toLowerCase(locale));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,891,if (tz == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,892,throw new IllegalArgumentException(value + " is not a supported timezone name");
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,895,cal.setTimeZone(tz);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,899,private static class ISO8601TimeZoneStrategy extends Strategy {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,901,private final String pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,909,this.pattern = pattern;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,916,boolean addRegex(final FastDateParser parser, final StringBuilder regex) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,917,regex.append(pattern);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,918,return true;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,945,switch (tokenLen) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,814,private final Message message;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,859,final Message msg = event.getMessage();
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,860,this.message = msg instanceof ReusableMessage
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,862,: msg;
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,886,final Log4jLogEvent result = new Log4jLogEvent(loggerName, marker, loggerFQCN, level, message, thrown,
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,17,package org.apache.logging.log4j.util;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,19,import java.io.IOException;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,20,import java.io.InputStream;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,21,import java.net.URL;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,22,import java.util.ArrayList;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,23,import java.util.List;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,24,import java.util.Map;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,25,import java.util.Properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,26,import java.util.concurrent.ConcurrentHashMap;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,35,public final class PropertiesUtil {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,37,private static final PropertiesUtil LOG4J_PROPERTIES = new PropertiesUtil("log4j2.component.properties");
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,39,private final Properties props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,46,public PropertiesUtil(final Properties props) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,47,this.props = props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,56,public PropertiesUtil(final String propertiesFileName) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,57,final Properties properties = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,58,for (final URL url : LoaderUtil.findResources(propertiesFileName)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,59,try (final InputStream in = url.openStream()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,60,properties.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,62,LowLevelLogUtil.logException("Unable to read " + url.toString(), ioe);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,65,this.props = properties;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,75,static Properties loadClose(final InputStream in, final Object source) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,76,final Properties props = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,77,if (null != in) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,78,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,79,props.load(in);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,81,LowLevelLogUtil.logException("Unable to read " + source, e);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,83,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,84,in.close();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,86,LowLevelLogUtil.logException("Unable to close " + source, e);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,90,return props;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,98,public static PropertiesUtil getProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,99,return LOG4J_PROPERTIES;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,110,public boolean getBooleanProperty(final String name) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,111,return getBooleanProperty(name, false);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,121,public boolean getBooleanProperty(final String name, final boolean defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,122,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,123,return (prop == null) ? defaultValue : "true".equalsIgnoreCase(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,133,public double getDoubleProperty(final String name, final double defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,134,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,135,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,136,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,137,return Double.parseDouble(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,139,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,142,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,153,public int getIntegerProperty(final String name, final int defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,154,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,155,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,156,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,157,return Integer.parseInt(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,159,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,162,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,172,public long getLongProperty(final String name, final long defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,173,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,174,if (prop != null) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,175,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,176,return Long.parseLong(prop);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,178,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,181,return defaultValue;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,190,public String getStringProperty(final String name) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,191,String prop = null;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,192,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,193,prop = System.getProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,197,return prop == null ? props.getProperty(name) : prop;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,207,public String getStringProperty(final String name, final String defaultValue) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,208,final String prop = getStringProperty(name);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,209,return (prop == null) ? defaultValue : prop;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,217,public static Properties getSystemProperties() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,218,try {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,219,return new Properties(System.getProperties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,221,LowLevelLogUtil.logException("Unable to access system properties.", ex);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,223,return new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,235,public static Properties extractSubset(final Properties properties, final String prefix) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,236,final Properties subset = new Properties();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,238,if (prefix == null || prefix.length() == 0) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,239,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,242,final String prefixToMatch = prefix.charAt(prefix.length() - 1) != '.' ? prefix + '.' : prefix;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,244,final List<String> keys = new ArrayList<>();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,246,for (final String key : properties.stringPropertyNames()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,247,if (key.startsWith(prefixToMatch)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,248,subset.setProperty(key.substring(prefixToMatch.length()), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,249,keys.add(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,252,for (final String key : keys) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,253,properties.remove(key);
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,256,return subset;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,267,public static Map<String, Properties> partitionOnCommonPrefixes(final Properties properties) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,268,final Map<String, Properties> parts = new ConcurrentHashMap<>();
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,269,for (final String key : properties.stringPropertyNames()) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,270,final String prefix = key.substring(0, key.indexOf('.'));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,271,if (!parts.containsKey(prefix)) {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,272,parts.put(prefix, new Properties());
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,274,parts.get(prefix).setProperty(key.substring(key.indexOf('.') + 1), properties.getProperty(key));
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,276,return parts;
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,283,public boolean isOsWindows() {
log4j-api/src/main/java/org/apache/logging/log4j/util/PropertiesUtil.java,284,return getStringProperty("os.name").startsWith("Windows");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,66,SYSTEM_OUT,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java,68,SYSTEM_ERR
log4j-jul/src/main/java/org/apache/logging/log4j/jul/CoreLoggerAdapter.java,37,return new CoreLogger((org.apache.logging.log4j.core.Logger) context.getLogger(name, MESSAGE_FACTORY));
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,505,LOGGER.error("Could not reconfigure JMX", t);
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/Log4jLogEvent.java,710,sb.append(" Message=").append(message.getFormattedMessage());
log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java,297,LOGGER.error("Unable to unregister MBeans", ex);
log4j-web/src/main/java/org/apache/logging/log4j/web/appender/ServletAppender.java,51,servletContext.log(((AbstractStringLayout) getLayout()).toSerializable(event));
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FormatCache.java,245,return Arrays.equals(keys, ((MultipartKey) obj).keys);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/MarkerPatternSelector.java,101,LOGGER.warn("No marker patterns were provided");
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterFormatter.java,203,if (messagePattern == null || arguments == null || argCount == 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/AbstractLifeCycle.java,27,public class AbstractLifeCycle implements LifeCycle {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,30,import org.apache.logging.log4j.core.LifeCycle;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,39,public class DefaultShutdownCallbackRegistry implements ShutdownCallbackRegistry, LifeCycle, Runnable {
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,150,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,166,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,183,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,201,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,221,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,242,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,264,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,288,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,313,return Result.NEUTRAL;
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/AbstractFilter.java,339,return Result.NEUTRAL;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableMessageFactory.java,58,return result;
log4j-api/src/main/java/org/apache/logging/log4j/message/ReusableParameterizedMessage.java,35,private static ThreadLocal<StringBuilder> buffer = new ThreadLocal<>();
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,169,logMessage(fqcn, level, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,176,logMessage(FQCN, Level.ERROR, CATCHING_MARKER, catchingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,519,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg = entryMsg(format, paramSuppliers), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,535,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg = entryMsg(format, paramSuppliers), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,550,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg = entryMsg(format, params), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,565,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, message = flowMessageFactory.newEntryMessage(
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,583,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, flowMessage = flowMessageFactory.newEntryMessage(message),
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,608,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, (Supplier<?>[]) null), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,610,logMessage(fqcn, Level.TRACE, ENTRY_MARKER, entryMsg(null, params), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1827,logMessage(fqcn, level, marker, msg, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1980,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1985,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1991,logMessage(fqcn, level, marker, message, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,1997,logMessage(fqcn, level, marker, message, t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2002,logMessage(fqcn, level, marker, messageFactory.newMessage(message), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2007,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2013,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2019,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2025,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2031,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2037,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2043,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2049,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2056,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2063,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2070,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2077,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2083,logMessage(fqcn, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2090,logMessage(FQCN, level, marker, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2098,logMessage(FQCN, level, null, msg, msg.getThrowable());
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2123,logMessage(fqcn, level, THROWING_MARKER, throwingMsg(t), t);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2431,logMessage(FQCN, Level.TRACE, EXIT_MARKER, flowMessageFactory.newExitMessage(message), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2439,logMessage(FQCN, Level.TRACE, EXIT_MARKER, flowMessageFactory.newExitMessage(result, message), null);
log4j-api/src/main/java/org/apache/logging/log4j/spi/AbstractLogger.java,2448,logMessage(FQCN, Level.TRACE, EXIT_MARKER, flowMessageFactory.newExitMessage(result, message), null);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/LoggerConfig.java,349,log(logEventFactory.createEvent(loggerName, marker, fqcn, level, data, props, t));
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java,58,if (result == null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java,65,mutableLogEventThreadLocal.set(result);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,68,LOGGER.error("Unable to create Lookup for {}", entry.getKey(), ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,110,LOGGER.warn(
log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java,121,LOGGER.info("Log4j appears to be running in a Servlet environment, but there's no log4j-web module " +
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,55,return value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/Property.java,77,return name + '=' + value;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,36,final StringBuilder log) {
log4j-core/src/main/java/org/apache/logging/log4j/core/impl/ReusableLogEventFactory.java,76,result.setContextStack(ThreadContext.getDepth() == 0 ? null : ThreadContext.cloneStack());// mutable copy
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicy.java,32,if (Thread.currentThread().getId() == backgroundThreadId) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicy.java,33,return EventRoute.SYNCHRONOUS;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/DefaultAsyncQueueFullPolicy.java,35,return EventRoute.ENQUEUE;
log4j-api/src/main/java/org/apache/logging/log4j/message/ParameterizedMessage.java,138,this.indices = new int[messagePattern == null ? 0 : messagePattern.length() >> 1]; // divide by 2
log4j-core/src/main/java/org/apache/logging/log4j/core/net/TcpSocketManager.java,297,os = new ByteArrayOutputStream();
log4j-core/src/main/java/org/apache/logging/log4j/core/filter/LevelRangeFilter.java,64,final Level actualMaxLevel = minLevel == null ? Level.ERROR : maxLevel;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java,41,if (delimiter != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java,44,if (escape != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractCsvLayout.java,47,if (quote != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,25,import org.apache.logging.log4j.Logger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,35,import org.apache.logging.log4j.status.StatusLogger;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,44,private static final Logger LOGGER = StatusLogger.getLogger();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,76,appendersUsage.remove(entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,77,routingAppender.deleteAppender(entry.getKey());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,103,long createTime = Long.MAX_VALUE;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,105,if (entry.getValue() < createTime) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,106,createTime = entry.getValue();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,109,if (createTime < Long.MAX_VALUE) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,129,LOGGER.error("A timeToLive  value is required");
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,139,LOGGER.error("Invalid time unit {}", timeUnit);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,144,final long ttl = units.toMillis(Long.parseLong(timeToLive));
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/IdlePurgePolicy.java,147,return new IdlePurgePolicy(ttl, configuration.getScheduler());
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,185,LOGGER.debug("Stopping route with key" + key);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/routing/RoutingAppender.java,187,control.getAppender().stop();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/ResolverUtil.java,235,final List<String> neverDecode = Arrays.asList(VFSZIP, BUNDLE_RESOURCE);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,150,InputStream is = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,151,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,152,is = Loader.getResourceAsStream(schemaResource, XmlConfiguration.class.getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,154,LOGGER.error("Unable to access schema {}", this.schemaResource, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,156,if (is != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,157,final Source src = new StreamSource(is, LOG4J_XSD);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,158,final SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,159,Schema schema = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,160,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,161,schema = factory.newSchema(src);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,163,LOGGER.error("Error parsing Log4j schema", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,165,if (schema != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,166,final Validator validator = schema.newValidator();
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,168,validator.validate(new StreamSource(new ByteArrayInputStream(buffer)));
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,170,LOGGER.error("Error reading configuration for validation", ioe);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/xml/XmlConfiguration.java,172,LOGGER.error("Error validating configuration", ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/AppenderControl.java,93,return getFilter() != null && Filter.Result.DENY == getFilter().filter(event);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/RingBufferLogEvent.java,213,return messageText.toString();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,96,final boolean immediateFlush) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,99,bufferedIO, policy, strategy, advertiseURI, layout, bufferSize, immediateFlush), factory);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,333,final Layout<? extends Serializable> layout, final int bufferSize, final boolean immediateFlush) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,409,file.createNewFile();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,416,OutputStream os;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,418,os = new FileOutputStream(name, data.append);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,422,final long time = file.lastModified(); // LOG4J2-531 create file first so time has valid value
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,423,return new RollingFileManager(name, data.pattern, os, data.append, size, time, data.policy,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,424,data.strategy, data.advertiseURI, data.layout, writeHeader, buffer);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java,426,LOGGER.error("FileManager (" + name + ") " + ex, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,42,private static final int DEFAULT_BUFFER_SIZE = 8192;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,147,final FileManager manager = FileManager.getFileManager(fileName, isAppend, isLocking, isBuffered, advertiseUri,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileAppender.java,148,layout, bufferSize, isFlush);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,78,final boolean bufferedIo, final String advertiseUri, final Layout<? extends Serializable> layout,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,79,final int bufferSize, final boolean immediateFlush) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,84,return (FileManager) getManager(fileName, new FactoryData(append, locking, bufferedIo, bufferSize,
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,85,immediateFlush, advertiseUri, layout), FACTORY);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,89,protected synchronized void write(final byte[] bytes, final int offset, final int length, final boolean immediateFlush)  {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,92,final FileChannel channel = ((FileOutputStream) getOutputStream()).getChannel();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/FileManager.java,183,final boolean immediateFlush, final String advertiseURI, final Layout<? extends Serializable> layout) {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,60,this.os.write(header, 0, header.length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,113,protected OutputStream getOutputStream() {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,202,os.write(bytes, offset, length);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,204,final String msg = "Error writing to stream " + getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,205,throw new AppenderLoggingException(msg, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,214,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,215,os.flush();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,217,final String msg = "Error flushing stream " + getName();
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,218,throw new AppenderLoggingException(msg, ex);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java,249,if (stream == System.out || stream == System.err) {
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,264,return node1.getAttributes().get(NAME).toLowerCase().equals(node2.getAttributes().get(NAME).toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/DefaultMergeStrategy.java,268,return node1.getAttributes().get(REF).toLowerCase().equals(node2.getAttributes().get(REF).toLowerCase());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,189,return serializeToBytes(footerSerializer, super.getFooter());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,203,return serializeToBytes(headerSerializer, super.getHeader());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,211,final String serializable = serializeToString(serializer);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,218,protected String serializeToString(final Serializer serializer) {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,224,final LogEvent logEvent = rootLogger.getLogEventFactory().createEvent(rootLogger.getName(), null, Strings.EMPTY,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,831,final String str = serializeToString(getHeaderSerializer());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JsonLayout.java,851,final String str = serializeToString(getFooterSerializer());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java,731,final String str = serializeToString(getHeaderSerializer());
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/YamlLayout.java,751,final String str = serializeToString(getFooterSerializer());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/datetime/FastDateParser.java,858,final String zoneName = zoneNames[i].toLowerCase(locale);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,38,final String rawValue = node.getValue() != null ? node.getValue() :
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/visitors/PluginValueVisitor.java,39,removeAttributeValue(node.getAttributes(), "value");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,26,import org.apache.logging.log4j.core.impl.MutableLogEvent;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,77,return event instanceof MutableLogEvent
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractJacksonLayout.java,79,: event;
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,65,loadProvider(bundle.adapt(BundleWiring.class));
log4j-api/src/main/java/org/apache/logging/log4j/util/Activator.java,87,loadProvider(wire.getProviderWiring());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,61,if (bundle.getState() == Bundle.ACTIVE && bundle.getBundleId() != 0) {
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,63,scanBundleForPlugins(bundle);
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,69,LOGGER.trace("Scanning bundle [{}] for plugins.", bundle.getSymbolicName());
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,70,PluginRegistry.getInstance().loadFromBundle(bundle.getBundleId(),
log4j-core/src/main/java/org/apache/logging/log4j/core/osgi/Activator.java,71,bundle.adapt(BundleWiring.class).getClassLoader());
log4j-core/src/main/java/org/apache/logging/log4j/core/config/composite/CompositeConfiguration.java,152,if (sourceURI != null) {
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,19,import java.util.concurrent.ExecutorService;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,20,import java.util.concurrent.Executors;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,186,private ExecutorService executor;
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,217,executor = Executors.newSingleThreadExecutor(THREAD_FACTORY);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,218,backgroundThreadId = DisruptorUtil.getExecutorThreadId(executor);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,223,disruptor = new Disruptor<>(factory, ringBufferSize, executor, ProducerType.MULTI, waitStrategy);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,226,disruptor.handleExceptionsWith(errorHandler);
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,261,temp.shutdown(); // busy-spins until all events currently in the disruptor have been processed
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,263,LOGGER.trace("AsyncLoggerConfigDisruptor: shutting down disruptor executor for this configuration.");
log4j-core/src/main/java/org/apache/logging/log4j/core/async/AsyncLoggerConfigDisruptor.java,265,executor = null; // release reference to allow GC
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,125,LOGGER.error("Unable to inject fields into builder class for plugin type {}, element {}.", this.clazz,
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,126,node.getName(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,134,LOGGER.error("Unable to invoke factory method in class {} for element {}.", this.clazz, this.node.getName(),
log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/util/PluginBuilder.java,135,e);
log4j-api/src/main/java/org/apache/logging/log4j/LogManager.java,97,.getUrl().toString(), e);
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,204,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,217,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/config/properties/PropertiesConfigurationBuilder.java,250,final String level = (String) properties.remove("level");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,385,final StructuredDataElement formattedContextMap = new StructuredDataElement(contextMap, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,401,final StructuredDataElement formattedData = new StructuredDataElement(map, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,412,formatStructuredElement(entry.getKey(), mdcPrefix, entry.getValue(), buffer, listChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,496,private void formatStructuredElement(final String id, final String prefix, final StructuredDataElement data,
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,505,appendMap(prefix, data.getFields(), sb, noopChecker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,507,appendMap(prefix, data.getFields(), sb, checker);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,686,return new StructuredDataElement(map, discardIfEmpty);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/Rfc5424Layout.java,695,public StructuredDataElement(final Map<String, String> fields, final boolean discardIfEmpty) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,45,private final Collection<Cancellable> hooks = new CopyOnWriteArrayList<>();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,70,for (final Runnable hook : hooks) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,71,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,72,hook.run();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,83,private final Reference<Runnable> hook;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,84,private Collection<Cancellable> registered;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,86,RegisteredCancellable(final Runnable callback, final Collection<Cancellable> registered) {
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,88,hook = new SoftReference<>(callback);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,93,hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,94,registered.remove(this);
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,95,registered = null;
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,100,final Runnable runnableHook = this.hook.get();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,103,this.hook.clear();
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,109,return String.valueOf(hook.get());
log4j-core/src/main/java/org/apache/logging/log4j/core/util/DefaultShutdownCallbackRegistry.java,117,hooks.add(receipt);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/JacksonFactory.java,199,final Set<String> except = new HashSet<>(2);
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,24,import org.apache.logging.log4j.core.config.plugins.Plugin;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,25,import org.apache.logging.log4j.core.config.plugins.PluginBuilderFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,26,import org.apache.logging.log4j.core.config.plugins.PluginFactory;
log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamAppender.java,44,private Filter filter;
log4j-1.2-api/src/main/java/org/apache/log4j/Category.java,30,import org.apache.logging.log4j.core.util.NameUtil;
log4j-1.2-api/src/main/java/org/apache/log4j/Logger.java,59,return (LoggerContext) getContext(FQCN, false);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,81,final String version = System.getProperty("java.version");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,82,final String[] parts = version.split("\\.");
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,83,try {
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,84,final int major = Integer.parseInt(parts[1]);
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,85,return major < 8;
log4j-core/src/main/java/org/apache/logging/log4j/core/layout/AbstractStringLayout.java,87,return true;
