File,Line_number,SRC
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,642,Model result = modelInterpolator.interpolateModel( model, model.getProjectDirectory(), request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,643,result.setPomFile( model.getPomFile() );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,644,return result;
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,35,import org.apache.maven.model.PluginExecution;
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,162,protected void mergePluginExecution( PluginExecution target, PluginExecution source, boolean sourceDominant,
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,165,super.mergePluginExecution( target, source, sourceDominant, context );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,167,target.setPriority( Math.min( target.getPriority(), source.getPriority() ) );
maven-core/src/main/java/org/apache/maven/RepositoryUtils.java,319,Dependency result = new Dependency( artifact, dependency.getScope(), dependency.isOptional(), exclusions );
maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java,199,String version = plugin.getVersion();
maven-compat/src/main/java/org/apache/maven/repository/legacy/LegacyRepositorySystem.java,202,version = "RELEASE";
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,1476,throws DuplicateArtifactAttachmentException
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,1496,getAttachedArtifacts().add( artifact );
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,1505,return attachedArtifacts;
maven-core/src/main/java/org/apache/maven/project/MavenProjectHelper.java,38,void attachArtifact( MavenProject project, File artifactFile, String artifactClassifier );
maven-core/src/main/java/org/apache/maven/project/MavenProjectHelper.java,46,void attachArtifact( MavenProject project, String artifactType, File artifactFile );
maven-core/src/main/java/org/apache/maven/project/MavenProjectHelper.java,55,void attachArtifact( MavenProject project, String artifactType, String artifactClassifier, File artifactFile );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,22,import java.io.ByteArrayInputStream;
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,23,import java.io.ByteArrayOutputStream;
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,28,import java.nio.ByteBuffer;
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,244,lock = channel.lock( 0, channel.size(), false );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,249,ByteBuffer buffer = ByteBuffer.allocate( (int) channel.size() );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,251,channel.read( buffer );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,252,buffer.flip();
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,254,ByteArrayInputStream stream = new ByteArrayInputStream( buffer.array() );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,255,props.load( stream );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,269,ByteArrayOutputStream stream = new ByteArrayOutputStream();
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,272,props.store( stream, "Last modified on: " + new Date() );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,274,byte[] data = stream.toByteArray();
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,275,ByteBuffer buffer = ByteBuffer.allocate( data.length );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,276,buffer.put( data );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,277,buffer.flip();
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,279,channel.position( 0 );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,280,channel.write( buffer );
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,363,FileChannel channel = null;
maven-compat/src/main/java/org/apache/maven/repository/legacy/DefaultUpdateCheckManager.java,402,channel.close();
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,40,return models.get( new CacheKey( groupId, artifactId, version, tag ) );
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,45,models.put( new CacheKey( groupId, artifactId, version, tag ), data );
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,48,private static final class CacheKey
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,89,CacheKey that = (CacheKey) obj;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,426,Model model;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,432,modelSource = new FileModelSource( pomFile );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,434,else
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,444,InputSource source = request.isLocationTracking() ? new InputSource() : null;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,448,options.put( ModelProcessor.INPUT_SOURCE, source );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,651,ModelData parentData;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,657,String groupId = parent.getGroupId();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,658,String artifactId = parent.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,659,String version = parent.getVersion();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,661,parentData = getCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,665,parentData = readParentLocally( childModel, childSource, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,669,parentData = readParentExternally( childModel, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,672,putCache( request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,674,else
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,683,File pomFile = parentData.getModel().getPomFile();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,686,ModelSource expectedParentSource = getParentPomFile( childModel, childSource );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,691,parentData = readParentExternally( childModel, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1036,private <T> void putCache( ModelCache modelCache, String groupId, String artifactId, String version,
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,1045,private <T> T getCache( ModelCache modelCache, String groupId, String artifactId, String version,
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1437,List<String> src = source.getReports();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1440,List<String> tgt = target.getReports();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1442,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1443,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1444,target.setReports( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1728,List<String> src = source.getOtherArchives();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1731,List<String> tgt = target.getOtherArchives();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1733,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1734,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1735,target.setOtherArchives( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1860,List<String> src = source.getRoles();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1863,List<String> tgt = target.getRoles();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1865,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1866,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,1867,target.setRoles( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2377,List<String> src = source.getFilters();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2380,List<String> tgt = target.getFilters();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2382,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2383,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2384,target.setFilters( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2713,List<String> src = source.getGoals();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2716,List<String> tgt = target.getGoals();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2718,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2719,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2720,target.setGoals( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2804,List<String> src = source.getIncludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2807,List<String> tgt = target.getIncludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2809,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2810,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2811,target.setIncludes( merged );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2818,List<String> src = source.getExcludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2821,List<String> tgt = target.getExcludes();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2823,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2824,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,2825,target.setExcludes( merged );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,115,Object key = getPluginKey( element );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,123,Object key = getPluginKey( element );
maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java,143,Object key = getPluginKey( managedPlugin );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,151,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,161,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,225,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/inheritance/DefaultInheritanceAssembler.java,240,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java,67,Object key = getDependencyKey( dependency );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultDependencyManagementInjector.java,73,Object key = getDependencyKey( managedDependency );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,86,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,92,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,116,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/management/DefaultPluginManagementInjector.java,122,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,300,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,306,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,340,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,346,Object key = getRepositoryKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,552,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,559,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,615,Object key = getReportSetKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,631,return dependency.getManagementKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,637,return plugin.getKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,643,return pluginExecution.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,649,return reportPlugin.getKey();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,655,return reportSet.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,661,return repositoryBase.getId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,667,return extension.getGroupId() + ':' + extension.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,673,return exclusion.getGroupId() + ':' + exclusion.getArtifactId();
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,100,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,108,Object key = getPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,155,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,161,Object key = getPluginExecutionKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,190,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,196,Object key = getReportPluginKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,224,Object key = getReportSetKey( element );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileInjector.java,230,Object key = getReportSetKey( element );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,542,List<String> src = source.getModules();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,545,List<String> tgt = target.getModules();
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,547,merged.addAll( tgt );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,548,merged.addAll( src );
maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java,549,target.setModules( merged );
maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultUrlNormalizer.java,55,break;
maven-model-builder/src/main/java/org/apache/maven/model/path/DefaultUrlNormalizer.java,57,result = result.substring( 0, parent ) + result.substring( idx + 3 );
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,50,import org.apache.maven.artifact.resolver.filter.ExcludesArtifactFilter;
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,58,import org.apache.maven.model.Exclusion;
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,402,exclusions.add( e.getGroupId() + ':' + e.getArtifactId() );
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,405,effectiveFilter = new ExcludesArtifactFilter( exclusions );
maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java,208,if ( cause2 instanceof NoClassDefFoundError
maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java,211,reference = "AetherClassNotFound";
maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java,46,ArtifactHandler handler = unmanagedHandlers.get( type );
maven-core/src/main/java/org/apache/maven/artifact/handler/manager/DefaultArtifactHandlerManager.java,64,unmanagedHandlers.putAll( handlers );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,129,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,133,buildNumber = Integer.valueOf( part2 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,135,else
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,148,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,150,majorVersion = Integer.valueOf( part1 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,164,try
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,169,minorVersion = getNextIntegerToken( tok );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,173,incrementalVersion = getNextIntegerToken( tok );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,440,canonical = items.toString();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,460,return ( o instanceof ComparableVersion ) && canonical.equals( ( (ComparableVersion) o ).canonical );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,465,return canonical.hashCode();
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,65,private static final Pattern ID_REGEX = Pattern.compile( "[A-Za-z0-9_\\-.]+" );
maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java,627,boolean match = ID_REGEX.matcher( id ).matches();
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,1947,setFile( project.getFile() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,49,import org.apache.maven.repository.RepositorySystem;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,93,private RepositorySystem repositorySystem;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,112,internalRepositories.add( repositorySystem.buildArtifactRepository( repository ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,563,MavenProject project = interimResult.listener.getProject();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,589,private void initProject( MavenProject project, Map<String, MavenProject> projects, ModelBuildingResult result,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,355,new HashMap<File, Boolean>() ) && noErrors;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,568,build( results, modules, projectIndex, interimResult.modules, request, profilesXmls ) && noErrors;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java,576,results.add( new DefaultProjectBuildingResult( project, result.getProblems(), null ) );
maven-model-builder/src/main/java/org/apache/maven/model/merge/MavenModelMerger.java,451,tgt = new Site();
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,22,import java.util.HashMap;
maven-core/src/main/java/org/apache/maven/project/ReactorModelCache.java,23,import java.util.Map;
maven-artifact/src/main/java/org/apache/maven/artifact/Artifact.java,49,Pattern VERSION_FILE_PATTERN = Pattern.compile( "^(.*)-([0-9]{8}.[0-9]{6})-([0-9]+)$" );
maven-compat/src/main/java/org/apache/maven/project/interpolation/AbstractStringBasedModelInterpolator.java,250,return projectDir.getAbsoluteFile().toURI().toString();
maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java,165,return projectDir.getAbsoluteFile().toURI().toString();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,688,if ( expectedParentSource instanceof ModelSource2
maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleDependencyResolver.java,130,project.setResolvedArtifacts( artifacts );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,28,import org.eclipse.aether.RepositorySystemSession;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,29,import org.eclipse.aether.repository.RemoteRepository;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,30,import org.eclipse.aether.repository.RepositoryPolicy;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,31,import org.eclipse.aether.repository.WorkspaceReader;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,32,import org.eclipse.aether.repository.WorkspaceRepository;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,52,int result = 17;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,55,result = 31 * result + repositoryHashCode( repository );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,57,return result;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,62,int result = 17;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,63,result = 31 * result + hash( repository.getUrl() );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,64,return result;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,71,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,76,&& policyEquals( r1.getPolicy( true ), r2.getPolicy( true ) );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,83,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,86,return p1.isEnabled() == p2.isEnabled() && eq( p1.getChecksumPolicy(), p2.getChecksumPolicy() );
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,93,return false;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,100,return false;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,104,return true;
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,207,WorkspaceReader reader = session.getWorkspaceReader();
maven-core/src/main/java/org/apache/maven/plugin/CacheUtils.java,208,return ( reader != null ) ? reader.getRepository() : null;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,67,workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,85,hash = hash * 31 + hash( workspace );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,86,hash = hash * 31 + hash( localRepo );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,87,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,88,hash = hash * 31 + hash( extensionFilter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,106,return obj != null ? obj.hashCode() : 0;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,126,&& eq( filter, that.filter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,131,return s1 != null ? s1.equals( s2 ) : s2 == null;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,149,workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,170,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginDescriptorCache.java,198,&& CacheUtils.repositoriesEquals( this.repositories, that.repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,74,this.workspace = CacheUtils.getWorkspace( session );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,95,hash = hash * 31 + hash( workspace );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,96,hash = hash * 31 + hash( localRepo );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,97,hash = hash * 31 + CacheUtils.repositoriesHashCode( repositories );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,98,hash = hash * 31 + hash( parentRealm );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,100,hash = hash * 31 + hash( dependencyFilter );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,118,return obj != null ? obj.hashCode() : 0;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,139,&& eq( foreignImports, that.foreignImports );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginRealmCache.java,144,return s1 != null ? s1.equals( s2 ) : s2 == null;
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,418,Thread.currentThread().setContextClassLoader( container.getContainerRealm() );
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,31,import org.codehaus.plexus.util.IOUtil;
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,66,try
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,68,MetadataXpp3Reader r = new MetadataXpp3Reader();
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,69,return r.read( input, isStrict( options ) );
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,75,finally
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,77,IOUtil.close( input );
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,89,try
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,91,MetadataXpp3Reader r = new MetadataXpp3Reader();
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,92,return r.read( input, isStrict( options ) );
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,98,finally
maven-core/src/main/java/org/apache/maven/artifact/repository/metadata/io/DefaultMetadataReader.java,100,IOUtil.close( input );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,34,import org.codehaus.plexus.util.IOUtil;
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,71,try
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,73,return read( input, isStrict( options ), getSource( options ) );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,75,finally
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,77,IOUtil.close( input );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,89,try
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,91,return read( ReaderFactory.newXmlReader( input ), isStrict( options ), getSource( options ) );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,93,finally
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelReader.java,95,IOUtil.close( input );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,32,import org.codehaus.plexus.util.IOUtil;
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,76,try
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,78,MavenXpp3Writer w = new MavenXpp3Writer();
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,79,w.write( output, model );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,81,finally
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,83,IOUtil.close( output );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,100,try
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,102,String encoding = model.getModelEncoding();
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,105,encoding = "UTF-8";
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,107,write( new OutputStreamWriter( output, encoding ), options, model );
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,109,finally
maven-model-builder/src/main/java/org/apache/maven/model/io/DefaultModelWriter.java,111,IOUtil.close( output );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,31,import org.codehaus.plexus.util.IOUtil;
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,66,try
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,68,SettingsXpp3Reader r = new SettingsXpp3Reader();
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,69,return r.read( input, isStrict( options ) );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,75,finally
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,77,IOUtil.close( input );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,89,try
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,91,SettingsXpp3Reader r = new SettingsXpp3Reader();
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,92,return r.read( input, isStrict( options ) );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,98,finally
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsReader.java,100,IOUtil.close( input );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,32,import org.codehaus.plexus.util.IOUtil;
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,76,try
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,78,SettingsXpp3Writer w = new SettingsXpp3Writer();
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,79,w.write( output, settings );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,81,finally
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,83,IOUtil.close( output );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,100,try
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,102,String encoding = settings.getModelEncoding();
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,105,encoding = "UTF-8";
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,107,write( new OutputStreamWriter( output, encoding ), options, settings );
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,109,finally
maven-settings-builder/src/main/java/org/apache/maven/settings/io/DefaultSettingsWriter.java,111,IOUtil.close( output );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,31,import org.apache.maven.model.InputLocation;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,32,import org.apache.maven.model.InputSource;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,41,import org.eclipse.aether.artifact.ArtifactProperties;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,229,private Map<String, Dependency> managed;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,248,String premanagedScope = DependencyManagerUtils.getPremanagedScope( node );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,251,buffer.append( " (scope managed from " ).append( premanagedScope );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,252,appendManagementSource( buffer, art, "scope" );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,256,String premanagedVersion = DependencyManagerUtils.getPremanagedVersion( node );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,259,buffer.append( " (version managed from " ).append( premanagedVersion );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,260,appendManagementSource( buffer, art, "version" );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,283,private void appendManagementSource( StringBuilder buffer, org.eclipse.aether.artifact.Artifact artifact,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,293,managed.put( dep.getManagementKey(), dep );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,298,String key =
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,299,ArtifactIdUtils.toVersionlessId( artifact.getGroupId(), artifact.getArtifactId(),
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,300,artifact.getProperty( ArtifactProperties.TYPE, "jar" ),
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,301,artifact.getClassifier() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,303,Dependency dependency = managed.get( key );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,306,InputLocation location = dependency.getLocation( field );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,309,InputSource source = location.getSource();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectDependenciesResolver.java,312,buffer.append( " by " ).append( source.getModelId() );
maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java,130,session.setSystemProperties( sysProps );
maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java,131,session.setConfigProperties( sysProps );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java,470,this.systemProperties = new Properties();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java,471,this.systemProperties.putAll( properties );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java,165,this.systemProperties = new Properties();
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java,263,this.systemProperties.putAll( systemProperties );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,48,private static final Collection<String> COMPILE_PHASE_TYPES = Arrays.asList( "jar", "ejb-client" );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,106,String type = artifact.getProperty( "type", "" );
maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java,237,initList( exceptions );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,24,import java.util.ArrayList;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,25,import java.util.List;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,151,String[] cleanArgs = cleanArgs( args );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,162,StringBuilder currentArg = null;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,166,boolean addedToBuffer = false;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,174,cleaned.add( currentArg.toString() );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,178,currentArg = new StringBuilder( arg.substring( 1 ) );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,179,addedToBuffer = true;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,185,String cleanArgPart = arg.substring( 0, arg.length() - 1 );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,193,currentArg.setLength( currentArg.length() - 1 );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,196,else
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,199,currentArg.append( ' ' ).append( cleanArgPart );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,202,cleaned.add( currentArg.toString() );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,204,else
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,206,cleaned.add( cleanArgPart );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,209,currentArg = null;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,211,continue;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,222,currentArg.append( ' ' ).append( arg );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,224,else
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,226,cleaned.add( arg );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,233,cleaned.add( currentArg.toString() );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,236,int cleanedSz = cleaned.size();
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,242,cleanArgs = args;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,244,else
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,246,cleanArgs = cleaned.toArray( new String[cleanedSz] );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,249,return cleanArgs;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,133,options.addOption( OptionBuilder.withLongOpt( "log-file" ).hasArg().withDescription( "Log file to where all build output will go." ).create( LOG_FILE ) );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,22,import java.io.File;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,23,import java.io.IOException;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,24,import java.util.ArrayList;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,25,import java.util.Collection;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,26,import java.util.Iterator;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,27,import java.util.LinkedHashSet;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,28,import java.util.List;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,29,import java.util.Map;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,31,import java.util.Properties;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,440,problems.setSource( modelSource.getLocation() );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,522,model.setPomFile( pomFile );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,524,problems.setSource( model );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,525,modelValidator.validateRawModel( model, request, problems );
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,543,context.setProjectDirectory( ( request.getPomFile() != null ) ? request.getPomFile().getParentFile() : null );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,48,throws MavenExecutionRequestPopulationException
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,52,return request;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,55,request.setOffline( settings.isOffline() );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,57,request.setInteractiveMode( settings.isInteractiveMode() );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,59,request.setPluginGroups( settings.getPluginGroups() );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,61,request.setLocalRepositoryPath( settings.getLocalRepository() );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,65,server = server.clone();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,67,request.addServer( server );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,86,continue;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,89,proxy = proxy.clone();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,91,request.addProxy( proxy );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,104,mirror = mirror.clone();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,106,request.addMirror( mirror );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,109,request.setActiveProfiles( settings.getActiveProfiles() );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,113,request.addProfile( SettingsUtils.convertFromSettingsProfile( rawProfile ) );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,116,return request;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,177,throws MavenExecutionRequestPopulationException
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,306,Map<String, ClassLoader> foreignImports = calcImports( project, parent, imports );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,308,PluginRealmCache.Key cacheKey =
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,309,pluginRealmCache.createKey( plugin, parent, foreignImports, filter, project.getRemotePluginRepositories(),
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,310,session.getRepositorySession() );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,312,PluginRealmCache.CacheRecord cacheRecord = pluginRealmCache.get( cacheKey );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,316,pluginDescriptor.setClassRealm( cacheRecord.realm );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,317,pluginDescriptor.setArtifacts( new ArrayList<Artifact>( cacheRecord.artifacts ) );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,320,componentDescriptor.setRealm( cacheRecord.realm );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,325,createPluginRealm( pluginDescriptor, session, parent, foreignImports, filter );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,327,cacheRecord =
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,328,pluginRealmCache.put( cacheKey, pluginDescriptor.getClassRealm(), pluginDescriptor.getArtifacts() );
maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java,247,artifactIds.add( getId( artifact ) );
maven-core/src/main/java/org/apache/maven/classrealm/DefaultClassRealmManager.java,250,constituents.add( new ArtifactClassRealmConstituent( artifact ) );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,26,import org.apache.maven.ArtifactFilterManager;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,57,import org.eclipse.aether.util.filter.ExclusionsDependencyFilter;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,82,private ArtifactFilterManager artifactFilterManager;
maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleModuleBuilder.java,95,builderCommon.handleBuildError( reactorContext, rootSession, session, currentProject, e, buildStartTime );
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,35,import org.codehaus.plexus.component.annotations.Component;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,36,import org.codehaus.plexus.component.annotations.Requirement;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequestPopulator.java,45,private RepositorySystem repositorySystem;
maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManagerPrivate.java,53,List<ToolchainModel> lst = pers.getToolchains();
maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManagerPrivate.java,74,ToolchainPrivate tool = toolchainFactory.createDefaultToolchain();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java,100,return ( buildSummaries != null ) ? buildSummaries.get( project ) : null;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java,41,private List<Throwable> exceptions = new CopyOnWriteArrayList<Throwable>();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java,23,import java.util.IdentityHashMap;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java,107,buildSummaries = new IdentityHashMap<MavenProject, BuildSummary>();
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java,146,private boolean useSimpleLocalRepositoryManager = false;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java,1083,return this.useSimpleLocalRepositoryManager;
maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java,1088,this.useSimpleLocalRepositoryManager = useSimpleLocalRepositoryManager;
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,32,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,124,CacheRecord record = new CacheRecord( extensionRealm, extensionDescriptor );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,32,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java,27,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java,27,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,354,DependencyFilter dependencyFilter = project.getExtensionDependencyFilter();
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,355,dependencyFilter = AndDependencyFilter.newInstance( dependencyFilter, filter );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,357,DependencyNode root =
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,358,pluginDependenciesResolver.resolve( plugin, RepositoryUtils.toArtifact( pluginArtifact ), dependencyFilter,
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,359,project.getRemotePluginRepositories(), session.getRepositorySession() );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,361,PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,362,root.accept( nlg );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,364,List<Artifact> exposedPluginArtifacts = new ArrayList<Artifact>( nlg.getNodes().size() );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,365,RepositoryUtils.toArtifacts( exposedPluginArtifacts, Collections.singleton( root ),
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,369,Artifact artifact = it.next();
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,372,it.remove();
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,376,List<org.eclipse.aether.artifact.Artifact> pluginArtifacts = nlg.getArtifacts( true );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,378,ClassRealm pluginRealm =
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,379,classRealmManager.createPluginRealm( plugin, parent, null, foreignImports, pluginArtifacts );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,382,pluginDescriptor.setArtifacts( exposedPluginArtifacts );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,388,componentDescriptor.setRealm( pluginRealm );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,389,container.addComponentDescriptor( componentDescriptor );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,22,import java.io.IOException;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,42,import org.apache.maven.plugin.PluginArtifactsCache;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,44,import org.apache.maven.plugin.internal.PluginDependenciesResolver;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,45,import org.apache.maven.plugin.version.DefaultPluginVersionRequest;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,46,import org.apache.maven.plugin.version.PluginVersionRequest;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,48,import org.apache.maven.plugin.version.PluginVersionResolver;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,55,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,57,import org.eclipse.aether.graph.DependencyNode;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,58,import org.eclipse.aether.repository.RemoteRepository;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,60,import org.eclipse.aether.util.graph.visitor.PreorderNodeListGenerator;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,84,private PluginArtifactsCache pluginArtifactsCache;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,87,private ExtensionRealmCache extensionRealmCache;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,96,private PluginVersionResolver pluginVersionResolver;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,99,private PluginDependenciesResolver pluginDependenciesResolver;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,101,private ExtensionDescriptorBuilder extensionDescriptorBuilder = new ExtensionDescriptorBuilder();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,165,throws PluginResolutionException, PluginVersionResolutionException
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,215,PluginVersionRequest versionRequest =
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,216,new DefaultPluginVersionRequest( plugin, request.getRepositorySession(),
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,217,project.getRemotePluginRepositories() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,218,plugin.setVersion( pluginVersionResolver.resolve( versionRequest ).getVersion() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,221,List<Artifact> artifacts;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,223,PluginArtifactsCache.Key cacheKey =
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,224,pluginArtifactsCache.createKey( plugin, null, project.getRemotePluginRepositories(),
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,225,request.getRepositorySession() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,227,PluginArtifactsCache.CacheRecord recordArtifacts = pluginArtifactsCache.get( cacheKey );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,231,artifacts = recordArtifacts.artifacts;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,233,else
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,235,try
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,237,artifacts = resolveExtensionArtifacts( plugin, project.getRemotePluginRepositories(), request );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,239,recordArtifacts = pluginArtifactsCache.put( cacheKey, artifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,243,pluginArtifactsCache.put( cacheKey, e );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,247,throw e;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,253,ClassRealm extensionRealm;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,254,ExtensionDescriptor extensionDescriptor = null;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,260,extensionRealm = recordRealm.realm;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,261,extensionDescriptor = recordRealm.desciptor;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,263,else
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,265,extensionRealm = classRealmManager.createExtensionRealm( plugin, artifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,267,try
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,273,throw new IllegalStateException( "Failed to discover components in extension realm "
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,274,+ extensionRealm.getId(), e );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,277,Artifact extensionArtifact = artifacts.get( 0 );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,278,try
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,280,extensionDescriptor = extensionDescriptorBuilder.build( extensionArtifact.getFile() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,284,String message = "Invalid extension descriptor for " + plugin.getId() + ": " + e.getMessage();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,287,logger.error( message, e );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,289,else
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,291,logger.error( message );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,328,projectRealm = classRealmManager.createProjectRealm( model, publicArtifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,373,private List<Artifact> resolveExtensionArtifacts( Plugin extensionPlugin, List<RemoteRepository> repositories,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,375,throws PluginResolutionException
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,377,DependencyNode root =
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,378,pluginDependenciesResolver.resolve( extensionPlugin, null, null, repositories,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,379,request.getRepositorySession() );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,381,PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,382,root.accept( nlg );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,383,return nlg.getArtifacts( false );
maven-core/src/main/java/org/apache/maven/project/ExtensionDescriptorBuilder.java,43,class ExtensionDescriptorBuilder
maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java,69,throws PluginResolutionException, PluginVersionResolutionException;
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,271,Item item = iterator.previous();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,274,iterator.remove(); // remove null trailing items: 0, "", empty list
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,276,else
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,395,list.normalize(); // 1.0-* = 1-*
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,401,list.add( list = new ListItem() );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,403,stack.push( list );
maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManagerPrivate.java,58,ToolchainFactory fact = factories.get( toolchainModel.getType() );
maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManagerPrivate.java,63,else
maven-core/src/main/java/org/apache/maven/toolchain/DefaultToolchainManagerPrivate.java,66,+ ". Possibly caused by misconfigured project." );
maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jConfigurationFactory.java,46,String key = loggerFactory.getClass().getCanonicalName();
maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jConfigurationFactory.java,54,String impl = conf.getProperty( key );
maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jConfigurationFactory.java,79,return new BaseSlf4jConfiguration();
maven-core/src/main/java/org/apache/maven/DefaultProjectDependencyGraph.java,69,Collection<String> projectIds = new HashSet<String>();
maven-core/src/main/java/org/apache/maven/DefaultProjectDependencyGraph.java,73,return getProjects( projectIds );
maven-core/src/main/java/org/apache/maven/DefaultProjectDependencyGraph.java,97,Collection<String> projectIds = new HashSet<String>();
maven-core/src/main/java/org/apache/maven/DefaultProjectDependencyGraph.java,101,return getProjects( projectIds );
maven-core/src/main/java/org/apache/maven/DefaultProjectDependencyGraph.java,127,return projects;
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,24,import java.util.HashMap;
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,39,implements ExtensionRealmCache
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,42,private static class CacheKey
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,102,private final Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,106,return cache.get( new CacheKey( extensionArtifacts ) );
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,109,public CacheRecord put( List<? extends Artifact> extensionArtifacts, ClassRealm extensionRealm,
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,117,CacheKey key = new CacheKey( extensionArtifacts );
maven-core/src/main/java/org/apache/maven/plugin/DefaultExtensionRealmCache.java,121,throw new IllegalStateException( "Duplicate extension realm for extension " + extensionArtifacts );
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,24,import java.util.HashMap;
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,47,private static class CacheKey
maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginArtifactsCache.java,136,protected final Map<Key, CacheRecord> cache = new HashMap<Key, CacheRecord>();
maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java,55,CacheRecord get( List<? extends Artifact> extensionArtifacts );
maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java,57,CacheRecord put( List<? extends Artifact> extensionArtifacts, ClassRealm extensionRealm,
maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java,58,ExtensionDescriptor extensionDescriptor );
maven-core/src/main/java/org/apache/maven/plugin/ExtensionRealmCache.java,70,void register( MavenProject project, CacheRecord record );
maven-core/src/main/java/org/apache/maven/plugin/PluginArtifactsCache.java,89,void register( MavenProject project, CacheRecord record );
maven-core/src/main/java/org/apache/maven/plugin/PluginRealmCache.java,83,void register( MavenProject project, CacheRecord record );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultMavenPluginManager.java,331,pluginRealmCache.register( project, cacheRecord );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,245,pluginArtifactsCache.register( project, recordArtifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,251,pluginArtifactsCache.register( project, recordArtifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,256,ExtensionRealmCache.CacheRecord recordRealm = extensionRealmCache.get( artifacts );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,295,recordRealm = extensionRealmCache.put( artifacts, extensionRealm, extensionDescriptor );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,298,extensionRealmCache.register( project, recordRealm );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,324,ProjectRealmCache.CacheRecord record = projectRealmCache.get( extensionRealms );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,365,record = projectRealmCache.put( extensionRealms, projectRealm, extensionArtifactFilter );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,368,projectRealmCache.register( project, record );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,23,import java.util.HashMap;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,36,implements ProjectRealmCache
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,39,private static class CacheKey
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,79,private final Map<CacheKey, CacheRecord> cache = new HashMap<CacheKey, CacheRecord>();
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,83,return cache.get( new CacheKey( extensionRealms ) );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,86,public CacheRecord put( List<? extends ClassRealm> extensionRealms, ClassRealm projectRealm,
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,94,CacheKey key = new CacheKey( extensionRealms );
maven-core/src/main/java/org/apache/maven/project/DefaultProjectRealmCache.java,98,throw new IllegalStateException( "Duplicate project realm for extensions " + extensionRealms );
maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java,53,CacheRecord get( List<? extends ClassRealm> extensionRealms );
maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java,55,CacheRecord put( List<? extends ClassRealm> extensionRealms, ClassRealm projectRealm,
maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java,56,DependencyFilter extensionArtifactFilter );
maven-core/src/main/java/org/apache/maven/project/ProjectRealmCache.java,68,void register( MavenProject project, CacheRecord record );
maven-core/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java,757,props.putAll( System.getProperties() );
maven-core/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java,74,request.setSystemProperties( System.getProperties() );
maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java,1086,systemProperties.putAll( System.getProperties() );
maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java,109,this.systemProperties.putAll( systemProperties );
maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java,129,Properties sysProps = System.getProperties();
maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultModelResolver.java,89,this.repositories = original.repositories;
maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java,100,this.pomRepositories = original.pomRepositories;
maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java,102,this.repositories = original.repositories;
maven-core/src/main/java/org/apache/maven/project/ProjectModelResolver.java,113,return;
maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java,563,modelResolver.addRepository( repository );
maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycles.java,122,result.add( lifecycles.get( name ) );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,205,String s = tok.nextToken();
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,208,throw new NumberFormatException( "Number part has a leading 0: '" + s + "'" );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/DefaultArtifactVersion.java,210,return Integer.valueOf( s );
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java,113,return true;
maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java,125,return false;
maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java,166,buffer.append( '.' );
maven-embedder/src/main/java/org/apache/maven/cli/event/ExecutionEventLogger.java,168,buffer.append( ' ' );
maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecycleStarter.java,170,eventCatapult.fire( ExecutionEvent.Type.SessionEnded, session, null );
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,117,options.addOption( OptionBuilder.withLongOpt( "update-snapshots" ).withDescription( "Forces a check for updated releases and snapshots on remote repositories" ).create( UPDATE_SNAPSHOTS ) );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,63,import org.apache.maven.repository.DelegatingLocalArtifactRepository;
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,166,addExceptionToResult( new DefaultMavenExecutionResult(),
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,167,new InternalErrorException( "Internal error: " + e, e ) );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,199,DelegatingLocalArtifactRepository delegatingLocalArtifactRepository =
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,200,new DelegatingLocalArtifactRepository( request.getLocalRepository() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,202,request.setLocalRepository( delegatingLocalArtifactRepository );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,223,request.getProjectBuildingRequest().setRepositorySession( session.getRepositorySession() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,230,projects = getProjectsForMavenReactor( request );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,237,session.setProjects( projects );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,239,result.setTopologicallySortedProjects( session.getProjects() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,241,result.setProject( session.getTopLevelProject() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,245,Map<String, MavenProject> projectMap;
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,246,projectMap = getProjectMap( session.getProjects() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,253,ReactorReader reactorRepository = new ReactorReader( projectMap );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,255,repoSession.setWorkspaceReader( ChainedWorkspaceReader.newInstance( reactorRepository,
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,256,repoSession.getWorkspaceReader() ) );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,284,try
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,286,ProjectSorter projectSorter = new ProjectSorter( session.getProjects() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,288,ProjectDependencyGraph projectDependencyGraph = createDependencyGraph( projectSorter, request );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,290,session.setProjects( projectDependencyGraph.getSortedProjects() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,292,session.setProjectDependencyGraph( projectDependencyGraph );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,296,String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,298,ProjectCycleException error = new ProjectCycleException( message, e );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,300,return addExceptionToResult( result, error );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,304,return addExceptionToResult( result, e );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,308,return addExceptionToResult( result, e );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,315,return result;
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,470,+ " (Java " + System.getProperty( "java.version" ) + "; "
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,571,List<MavenProject> projects =  new ArrayList<MavenProject>();
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,586,List<File> files = Arrays.asList( request.getPom().getAbsoluteFile() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,634,throws ProjectBuildingException
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,636,ProjectBuildingRequest projectBuildingRequest = request.getProjectBuildingRequest();
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,638,List<ProjectBuildingResult> results = projectBuilder.build( files, request.isRecursive(), projectBuildingRequest );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,640,boolean problems = false;
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,644,projects.add( result.getProject() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,648,logger.warn( "" );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,649,logger.warn( "Some problems were encountered while building the effective model for "
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,650,+ result.getProject().getId() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,654,String location = ModelProblemUtils.formatLocation( problem, result.getProjectId() );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,655,logger.warn( problem.getMessage() + ( StringUtils.isNotEmpty( location ) ? " @ " + location : "" ) );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,658,problems = true;
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,664,logger.warn( "" );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,665,logger.warn( "It is highly recommended to fix these problems"
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,666,+ " because they threaten the stability of your build." );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,667,logger.warn( "" );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,668,logger.warn( "For this reason, future Maven versions might no"
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,669,+ " longer support building such malformed projects." );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,670,logger.warn( "" );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,699,throws MavenExecutionException
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,701,ProjectDependencyGraph graph = new DefaultProjectDependencyGraph( sorter );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,703,List<MavenProject> activeProjects = sorter.getSortedProjects();
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,705,activeProjects = trimSelectedProjects( activeProjects, graph, request );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,706,activeProjects = trimResumedProjects( activeProjects, request );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,710,graph = new FilteredProjectDependencyGraph( graph, activeProjects );
maven-core/src/main/java/org/apache/maven/DefaultMaven.java,713,return graph;
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,366,throw new IllegalStateException( "Failed to build parent project for " + getId(), e );
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,381,throw new IllegalStateException( "Failed to build parent project for " + getId(), e );
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,385,return parent;
maven-core/src/main/java/org/apache/maven/plugin/MojoExecution.java,60,private Source source;
maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java,83,artifacts.add( "org.sonatype.aether:aether-api" );
maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java,84,artifacts.add( "org.sonatype.aether:aether-spi" );
maven-core/src/main/java/org/apache/maven/DefaultArtifactFilterManager.java,85,artifacts.add( "org.sonatype.aether:aether-impl" );
maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java,306,Artifact pomArtifact = ArtifactDescriptorUtils.toPomArtifact( artifact );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,22,import org.apache.maven.artifact.ArtifactUtils;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,23,import org.apache.maven.project.MavenProject;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,24,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,25,import org.eclipse.aether.repository.WorkspaceReader;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,26,import org.eclipse.aether.repository.WorkspaceRepository;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,46,private static final Collection<String> JAR_LIKE_TYPES = Arrays.asList( "jar", "test-jar", "ejb-client" );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,76,repository = new WorkspaceRepository( "reactor", new HashSet<String>( projectsByGAV.keySet() ) );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,86,org.apache.maven.artifact.Artifact projectArtifact = findMatchingArtifact( project, artifact );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,141,String requestedRepositoryConflictId = getConflictId( requestedArtifact );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,143,org.apache.maven.artifact.Artifact mainArtifact = project.getArtifact();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,149,Collection<org.apache.maven.artifact.Artifact> attachedArtifacts = project.getAttachedArtifacts();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,159,return attachedArtifact;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,177,return false;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,181,return false;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,183,String requestedExtension = requestedArtifact.getExtension();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,184,String attachedExtension = null;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,187,attachedExtension = attachedArtifact.getArtifactHandler().getExtension();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,189,String requestedType = requestedArtifact.getProperty ( "type", "" );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,190,String attachedType = attachedArtifact.getType();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,191,boolean typeOk = false;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,196,typeOk = true;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,200,typeOk = true;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,204,typeOk = true;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,209,return false;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,211,return requestedArtifact.getClassifier().equals ( attachedArtifact.getClassifier() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,224,StringBuilder buffer = new StringBuilder( 128 );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,225,buffer.append( artifact.getGroupId() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,226,buffer.append( ':' ).append( artifact.getArtifactId() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,229,buffer.append( ':' ).append( artifact.getArtifactHandler().getExtension() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,231,else
maven-core/src/main/java/org/apache/maven/ReactorReader.java,233,buffer.append( ':' ).append( artifact.getType() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,237,buffer.append( ':' ).append( artifact.getClassifier() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,239,return buffer.toString();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,244,StringBuilder buffer = new StringBuilder( 128 );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,245,buffer.append( artifact.getGroupId() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,246,buffer.append( ':' ).append( artifact.getArtifactId() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,247,buffer.append( ':' ).append( artifact.getExtension() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,250,buffer.append( ':' ).append( artifact.getClassifier() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,252,return buffer.toString();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,269,String projectKey = ArtifactUtils.key( artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,271,MavenProject project = projectsByGAV.get( projectKey );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,275,File file = find( project, artifact );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,278,file = find( project.getExecutionProject(), artifact );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,280,return file;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,283,return null;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,288,String key = ArtifactUtils.versionlessKey( artifact.getGroupId(), artifact.getArtifactId() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,290,List<MavenProject> projects = projectsByGA.get( key );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,293,return Collections.emptyList();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,296,List<String> versions = new ArrayList<String>();
maven-core/src/main/java/org/apache/maven/ReactorReader.java,302,versions.add( project.getVersion() );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,306,return Collections.unmodifiableList( versions );
maven-core/src/main/java/org/apache/maven/ReactorReader.java,311,return repository;
maven-embedder/src/main/java/org/apache/maven/cli/CLIManager.java,138,options.addOption( OptionBuilder.withLongOpt( "legacy-local-repository" ).withDescription( "Use Maven 2 Legacy Local Repository behaviour, ie no use of _maven.repositories. Can also be activated by using -Dmaven.legacyLocalRepo=true" ).create( LEGACY_LOCAL_REPOSITORY ) );
maven-core/src/main/java/org/apache/maven/project/DependencyResolutionException.java,29,private DependencyResolutionResult result;
maven-core/src/main/java/org/apache/maven/project/MavenProject.java,129,private List<Artifact> attachedArtifacts;
maven-core/src/main/java/org/apache/maven/ReactorReader.java,109,return new File( project.getBuild().getOutputDirectory() );
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,42,import org.eclipse.aether.collection.DependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,60,import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultPluginDependenciesResolver.java,170,pluginSession.setDependencyGraphTransformer( transformer );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,1,package org.apache.maven.plugin.internal;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,22,import org.eclipse.aether.RepositoryException;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,23,import org.eclipse.aether.artifact.Artifact;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,24,import org.eclipse.aether.artifact.DefaultArtifact;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,25,import org.eclipse.aether.collection.DependencyGraphTransformationContext;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,26,import org.eclipse.aether.collection.DependencyGraphTransformer;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,27,import org.eclipse.aether.graph.DefaultDependencyNode;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,28,import org.eclipse.aether.graph.Dependency;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,29,import org.eclipse.aether.graph.DependencyNode;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,30,import org.eclipse.aether.util.artifact.JavaScopes;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,38,class PlexusUtilsInjector
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,39,implements DependencyGraphTransformer
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,42,private static final String GID = "org.codehaus.plexus";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,44,private static final String AID = "plexus-utils";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,46,private static final String VER = "1.1";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,48,private static final String EXT = "jar";
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,51,throws RepositoryException
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,55,Artifact pu = new DefaultArtifact( GID, AID, null, EXT, VER );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,56,DefaultDependencyNode child = new DefaultDependencyNode( new Dependency( pu, JavaScopes.RUNTIME ) );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,57,child.setRepositories( node.getRepositories() );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,58,child.setRequestContext( node.getRequestContext() );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,59,node.getChildren().add( child );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,62,return node;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,67,Artifact artifact = node.getDependency().getArtifact();
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,72,return node;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,77,DependencyNode result = findPlexusUtils( child );
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,80,return result;
maven-core/src/main/java/org/apache/maven/plugin/internal/PlexusUtilsInjector.java,84,return null;
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,307,if ( !plugin.isExtensions() && artifacts.size() == 2 && artifacts.get( 0 ).getFile() != null
maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java,315,publicArtifacts.add( artifacts.get( 0 ) );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,291,Item first = get( 0 );
maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java,292,return first.compareTo( null );
