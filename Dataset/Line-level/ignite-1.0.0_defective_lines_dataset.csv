File,Line_number,SRC
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,64,threadSync = F.addIfAbsent(threadMap, threadId, new ThreadFinishSync(threadId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,66,threadSync.onSend(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTxFinishSync.java,166,TxFinishSync sync = nodeMap.get(nodeId);
modules/core/src/main/java/org/apache/ignite/events/EventType.java,1015,EVT_CACHE_REBALANCE_PART_DATA_LOST
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java,36,private CacheConfiguration cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAttributes.java,48,ccfg = cfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,338,if (cc.isWriteBehindEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,806,for (CachedDeploymentInfo<K, V> t : deps.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,807,UUID sndId = t.senderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,808,IgniteUuid ldrId = t.loaderId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,809,String userVer = t.userVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,810,DeploymentMode mode = t.mode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,811,Map<UUID, IgniteUuid> participants = t.participants();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,813,GridDeployment d = cctx.gridDeploy().getGlobalDeployment(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,814,mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,815,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,816,name,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,817,userVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,818,sndId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,819,ldrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,820,participants,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,821,F.<ClusterNode>alwaysTrue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,823,if (d != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,824,Class cls = d.deployedClass(name);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,855,writeSslSystem(ses, sockCh);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1005,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,230,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,231,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,242,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,243,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,254,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,255,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,266,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,267,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,278,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,279,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,290,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,291,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,302,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,303,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,314,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,315,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,124,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,125,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,136,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,137,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,148,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,149,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,160,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,161,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,173,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,174,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,185,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,186,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,197,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,198,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,245,throw new IgniteCheckedException("Query execution failed: " + qry, error());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,49,private TcpDiscoveryNode locNode;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoverySpiState.java,52,LOOPBACK_PROBLEM
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,55,public TcpDiscoveryNodeFailedMessage(UUID creatorNodeId, UUID failedNodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,59,assert order > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,62,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeFailedMessage.java,77,public long order() {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxHeuristicCheckedException.java,29,public class IgniteTxHeuristicCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxOptimisticCheckedException.java,25,public class IgniteTxOptimisticCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxRollbackCheckedException.java,25,public class IgniteTxRollbackCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/transactions/IgniteTxTimeoutCheckedException.java,25,public class IgniteTxTimeoutCheckedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeployable.java,20,import org.apache.ignite.internal.managers.deployment.*;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,243,log.debug("Sending local node ID to newly accepted session: " + ses);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,122,return nodes(VISIBLE_NODES, F.remoteNodes(locNode.id()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2097,if (tx == null || tx.implicit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,753,nearTx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,784,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,788,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,792,log.debug("Received finish request for non-existing transaction (added to completed set) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,795,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,136,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,138,ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,139,else if (msg instanceof GridClientHandshakeRequest) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,140,GridClientHandshakeRequest hs = (GridClientHandshakeRequest)msg;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,142,short ver = hs.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,144,if (!SUPP_VERS.contains(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,145,U.error(log, "Client protocol version is not supported [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,149,ses.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,151,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,152,byte marshId = hs.marshallerId();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,155,U.awaitQuiet(marshMapLatch);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,157,GridClientMarshaller marsh = marshMap.get(marshId);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,159,if (marsh == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,160,U.error(log, "Client marshaller ID is invalid. Note that .NET and C++ clients " +
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,165,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,166,ses.addMeta(MARSHALLER.ordinal(), marsh);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,168,ses.send(GridClientHandshakeResponse.OK);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,172,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,173,final GridRestRequest req = createRestRequest(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,176,hnd.handleAsync(req).listen(new CI1<IgniteInternalFuture<GridRestResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,178,GridClientResponse res = new GridClientResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,180,res.requestId(msg.requestId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,181,res.clientId(msg.clientId());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,183,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,184,GridRestResponse restRes = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,186,res.sessionToken(restRes.sessionTokenBytes());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,187,res.successStatus(restRes.getSuccessStatus());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,188,res.errorMessage(restRes.getError());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,190,Object o = restRes.getResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,194,o = ((GridCacheRestMetrics)o).map();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,196,res.result(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,198,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,199,U.error(log, "Failed to process client request: " + msg, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,201,res.successStatus(GridClientResponse.STATUS_FAILED);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,202,res.errorMessage("Failed to process client request: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,205,GridNioFuture<?> sf = ses.send(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,218,else
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,219,U.error(log, "Failed to process client request (unknown packet type) [ses=" + ses +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,199,private IgniteUuid dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,311,void dynamicDeploymentId(IgniteUuid dynamicDeploymentId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,312,this.dynamicDeploymentId = dynamicDeploymentId;
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,423,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,429,throws CertificateException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,749,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,865,boolean offheap,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1156,CachePeekMode[] peekModes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1163,return delegate.localPeek(key, peekModes, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,663,return GridNearCacheAdapter.super.localPeek(e.getKey(), NEAR_PEEK_MODE, null) == null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2Table.java,53,private final ReadWriteLock lock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1977,if (storeErr != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1979,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,346,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,348,writer.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,426,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,428,reader.incrementState();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,119,lock.writeLock();
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,297,private CacheInterceptor<?, ?> interceptor;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,1386,return (CacheInterceptor<K, V>)interceptor;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,763,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,282,removeLock(tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,497,if (tx.markFinalizing(IgniteInternalTx.FinalizationStatus.USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,515,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,524,UUID subjId = getThreadContext(TC_SUBJ_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,702,commitIfLocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,636,U.error(log, "Failed completing transaction [commit=" + commit + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,641,return new GridFinishedFuture<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,701,else if (e instanceof IgniteTxHeuristicCheckedException) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,702,U.warn(log, "Failed to commit transaction (all transaction entries were invalidated): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,703,CU.txString(dhtTx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,820,U.error(log, "Failed completing transaction [commit=" + req.commit() + ", tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,860,U.error(log, "Failed committing transaction [tx=" + tx + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,863,tx.invalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,864,tx.systemInvalidate(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,696,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,697,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,698,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,699,GridCacheEntryEx cached = txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,703,if (!evictNearEntry(txEntry, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,704,if (cacheCtx.isNear() && cacheCtx.dr().receiveEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,705,cached.markObsolete(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,707,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,711,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,715,boolean metrics = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,720,metrics = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,722,boolean evt = !isNearLocallyMapped(txEntry, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,727,IgniteBiTuple<GridCacheOperation, CacheObject> res = applyTransformClosures(txEntry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,733,if (cacheCtx.isNear()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,736,if ((txEntry.op() == CREATE || txEntry.op() == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,737,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,738,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,740,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,741,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,742,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,744,txEntry.ttl(CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,749,GridCacheOperation op = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,750,CacheObject val = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,753,GridCacheVersion explicitVer = txEntry.conflictVersion() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,754,txEntry.conflictVersion() : writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,756,if ((op == CREATE || op == UPDATE) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,757,txEntry.conflictExpireTime() == CU.EXPIRE_TIME_CALCULATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,758,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,760,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,761,Duration duration = cached.hasValue() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,762,expiry.getExpiryForUpdate() : expiry.getExpiryForCreation();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,764,long ttl = CU.toTtl(duration);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,766,txEntry.ttl(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,769,op = DELETE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,773,boolean conflictNeedResolve = cacheCtx.conflictNeedResolve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,775,GridCacheVersionConflictContext<?, ?> conflictCtx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,777,if (conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,778,IgniteBiTuple<GridCacheOperation, GridCacheVersionConflictContext> conflictRes =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,779,conflictResolve(op, txEntry, val, explicitVer, cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,781,assert conflictRes != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,783,conflictCtx = conflictRes.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,786,op = NOOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,787,else if (conflictCtx.isUseNew()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,788,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,789,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,791,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,792,assert conflictCtx.isMerge();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,794,op = conflictRes.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,795,val = txEntry.context().toCacheObject(conflictCtx.mergeValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,796,explicitVer = writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,798,txEntry.ttl(conflictCtx.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,799,txEntry.conflictExpireTime(conflictCtx.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,802,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,804,explicitVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,806,if (sndTransformedVals || conflictNeedResolve) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,807,assert sndTransformedVals && cacheCtx.isReplicated() || conflictNeedResolve;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,809,txEntry.value(val, true, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,810,txEntry.op(op);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,811,txEntry.entryProcessors(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,812,txEntry.conflictVersion(explicitVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,815,if (op == CREATE || op == UPDATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,816,GridCacheUpdateTxResult updRes = cached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,817,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,818,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,819,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,820,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,821,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,822,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,823,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,824,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,825,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,826,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,827,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,828,cached.detached() ? DR_NONE : drType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,829,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,830,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,831,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,853,else if (op == DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,854,GridCacheUpdateTxResult updRes = cached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,855,this,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,856,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,857,txEntry.nodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,858,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,860,evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,861,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,862,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,863,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,865,cached.isNear() ? null : explicitVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,866,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,885,else if (op == RELOAD) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,886,cached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,891,else if (op == READ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,892,ExpiryPolicy expiry = cacheCtx.expiryForTxEntry(txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,894,if (expiry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,895,Duration duration = expiry.getExpiryForAccess();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,898,cached.updateTtl(null, CU.toTtl(duration));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,902,log.debug("Ignoring READ entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,904,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,909,if (conflictCtx == null || !conflictCtx.isUseOld()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,911,cached.updateTtl(null, txEntry.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,915,log.debug("Ignoring NOOP entry when committing: " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,924,checkCommitLocks(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,927,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,930,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,932,log.debug("Got removed entry during transaction commit (will retry): " + txEntry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,938,catch (Throwable ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,941,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,966,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,970,catch (Throwable ex1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,971,U.error(log, "Failed to uncommit transaction: " + this, ex1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,738,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,741,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,955,return new GridFinishedFuture<IgniteInternalTx>(this);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1016,A.notNull(cfg.getMBeanServer(), "cfg.getMBeanServer()");
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,51,private final int parts;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,57,this(DFLT_PART_CNT);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,77,List<List<ClusterNode>> assignment = createCopy(ctx);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,79,int tiers = Math.min(ctx.backups() + 1, topSnapshot.size());
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,84,FullAssignmentMap fullMap = new FullAssignmentMap(tiers, assignment, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,92,if (pending == null) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,93,pending = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,95,pendingParts.put(tier, pending);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,105,assignPending(tier, pendingParts, fullMap, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,108,balance(tier, pendingParts, fullMap, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,142,private void assignPending(int tier, Map<Integer, Queue<Integer>> pendingMap, FullAssignmentMap fullMap,
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,143,List<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,156,assignPendingToUnderloaded(tier, pendingMap, fullMap, underloadedNodes, topSnapshot, false);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,160,assignPendingToUnderloaded(tier, pendingMap, fullMap, underloadedNodes, topSnapshot, true);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,164,assignPendingToNodes(tier, pendingMap, fullMap, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,166,assert pending.isEmpty();
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,168,pendingMap.remove(tier);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,187,boolean force) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,200,if (fullMap.assign(part, tier, node, force, pendingMap)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,227,FullAssignmentMap fullMap, List<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,242,if (fullMap.assign(part, tier, node, false, pendingMap)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,258,if (fullMap.assign(part, tier, node, true, pendingMap)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,284,private void balance(int tier, Map<Integer, Queue<Integer>> pendingParts, FullAssignmentMap fullMap,
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,285,Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,301,if (fullMap.assign(part, tier, underloaded.node(), false, pendingParts)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,323,if (fullMap.assign(part, tier, underloaded.node(), true, pendingParts)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,383,private List<List<ClusterNode>> createCopy(AffinityFunctionContext ctx) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,399,else {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,400,if (leftNodeId == null) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,401,partNodesCp = new ArrayList<>(partNodes.size() + 1); // Node joined.
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,403,partNodesCp.addAll(partNodes);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,405,else {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,406,partNodesCp = new ArrayList<>(partNodes.size());
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,408,for (ClusterNode affNode : partNodes) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,410,partNodesCp.add(affNode);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,415,cp.add(partNodesCp);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,418,return cp;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,507,private static Map<UUID, PartitionSet> assignments(int tier, List<List<ClusterNode>> assignment,
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,508,Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,509,Map<UUID, PartitionSet> tmp = new LinkedHashMap<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,511,for (int part = 0; part < assignment.size(); part++) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,512,List<ClusterNode> nodes = assignment.get(part);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,514,assert nodes instanceof RandomAccess;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,517,continue;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,519,int start = tier < 0 ? 0 : tier;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,520,int end = tier < 0 ? nodes.size() : tier + 1;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,522,for (int i = start; i < end; i++) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,523,ClusterNode n = nodes.get(i);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,525,PartitionSet set = tmp.get(n.id());
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,527,if (set == null) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,528,set = new PartitionSet(n);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,530,tmp.put(n.id(), set);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,533,set.add(part);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,537,if (tmp.size() < topSnapshot.size()) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,538,for (ClusterNode node : topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,540,tmp.put(node.id(), new PartitionSet(node));
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,544,return tmp;
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,552,private static class FullAssignmentMap {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,567,private FullAssignmentMap(int tiers, List<List<ClusterNode>> assignments, Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,570,tierMaps = new Map[tiers];
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,573,tierMaps[tier] = assignments(tier, assignments, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,575,fullMap = assignments(-1, assignments, topSnapshot);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,591,boolean assign(int part, int tier, ClusterNode node, boolean force, Map<Integer, Queue<Integer>> pendingParts) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,594,if (!fullMap.get(nodeId).contains(part)) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,644,if (pending == null) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,645,pending = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,647,pendingParts.put(t, pending);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,656,throw new IllegalStateException("Unable to assign partition to node while force is true.");
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,63,private static final Comparator<IgniteBiTuple<Long, ClusterNode>> COMPARATOR =
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,64,new HashComparator();
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,75,throw new IgniteException("Failed to obtain message digest (digest was available in constructor)",
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,76,e);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,156,A.ensure(parts != 0, "parts != 0");
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,321,int primaryAndBackups;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,323,List<ClusterNode> res;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,325,if (backups == Integer.MAX_VALUE) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,326,primaryAndBackups = Integer.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,328,res = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,330,else {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,331,primaryAndBackups = backups + 1;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,333,res = new ArrayList<>(primaryAndBackups);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,342,for (int i = 1; i < lst.size(); i++) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,348,Collection<ClusterNode> allNeighbors = allNeighbors(neighborhoodCache, res);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,353,else {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,355,res.add(next.get2());
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,359,break;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,365,for (int i = 1; i < lst.size(); i++) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,374,break;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,403,neighbors(affCtx.currentTopologySnapshot()) : null;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,442,private Map<UUID, Collection<ClusterNode>> neighbors(Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,443,Map<String, Collection<ClusterNode>> macMap = new HashMap<>(topSnapshot.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,446,for (ClusterNode node : topSnapshot) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,447,String macs = node.attribute(IgniteNodeAttributes.ATTR_MACS);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,449,Collection<ClusterNode> nodes = macMap.get(macs);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,451,if (nodes == null) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,452,nodes = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,454,macMap.put(macs, nodes);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,457,nodes.add(node);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,460,Map<UUID, Collection<ClusterNode>> neighbors = new HashMap<>(topSnapshot.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,462,for (Collection<ClusterNode> group : macMap.values()) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,464,neighbors.put(node.id(), group);
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,467,return neighbors;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,475,private Collection<ClusterNode> allNeighbors(Map<UUID, Collection<ClusterNode>> neighborhoodCache,
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,476,Iterable<ClusterNode> nodes) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,477,Collection<ClusterNode> res = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,479,for (ClusterNode node : nodes) {
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,481,res.addAll(neighborhoodCache.get(node.id()));
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,484,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,286,throw new IgniteCheckedException("REPLICATED cache can not be started with FairAffinityFunction" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,289,if (cc.getAffinity() instanceof RendezvousAffinityFunction) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,290,RendezvousAffinityFunction aff = (RendezvousAffinityFunction)cc.getAffinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,293,throw new IgniteCheckedException("For REPLICATED cache flag 'excludeNeighbors' in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,54,private final ThreadLocal<Queue<GridCacheMvccCandidate>> pending =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,55,new ThreadLocal<Queue<GridCacheMvccCandidate>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,687,Queue<GridCacheMvccCandidate> queue = pending.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,689,boolean add = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,693,for (Iterator<GridCacheMvccCandidate> it = queue.iterator(); it.hasNext(); ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,694,GridCacheMvccCandidate c = it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,697,add = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,699,if (c.used()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,700,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,702,unlink(c);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,704,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,707,prev = c;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,710,if (add) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,711,queue.add(cand);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,713,if (prev != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,714,prev.next(cand);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,716,cand.previous(prev);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,720,log.debug("Linked new candidate: " + cand);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,723,return add;
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,158,private IllegalStateException illegalState() {
modules/core/src/main/java/org/apache/ignite/internal/GridKernalGatewayImpl.java,159,return new IllegalStateException("Grid is in invalid state to perform this operation. " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,35,public abstract class GridH2IndexBase extends BaseIndex {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,170,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,172,String clsName = meta.className();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,176,spi.register(ldr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,178,rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,180,if (rsrc != null && rsrc.getResourceClass().equals(cls)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,182,log.debug("Retrieved auto-loaded resource from spi: " + rsrc);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,184,dep = deploy(ctx.config().getDeploymentMode(), ldr, cls, meta.alias(), meta.record());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,186,assert dep != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,188,else {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,189,U.warn(log, "Failed to find resource from deployment SPI even after registering: " + meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,194,catch (ClassNotFoundException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,196,log.debug("Failed to load class for local auto-deployment [ldr=" + ldr + ", meta=" + meta + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,198,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,200,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,201,U.error(log, "Failed to deploy local class with meta: " + meta, e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,203,return null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,331,spi.register(clsLdr, cls);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,333,GridDeployment dep = deployment(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,335,if (dep == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,336,DeploymentResource rsrc = spi.findResource(cls.getName());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,339,dep = deploy(ctx.config().getDeploymentMode(), rsrc.getClassLoader(),
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,340,rsrc.getResourceClass(), rsrc.getName(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,66,public static final GridCacheAtomicVersionComparator ATOMIC_VER_COMPARATOR = new GridCacheAtomicVersionComparator();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1479,Runtime.getRuntime().addShutdownHook(shutdownHook = new Thread() {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,491,private class TopologyUpdaterThread extends Thread {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,496,super(id + "-topology-update");
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,502,while (!isInterrupted()) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,503,Thread.sleep(cfg.getTopologyRefreshFrequency());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,505,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,506,tryInitTopology();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,508,catch (GridClientException e) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,509,top.fail(e);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,512,log.fine("Failed to update topology: " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,516,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,518,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1505,ExecutorService executor = Executors.newFixedThreadPool(Math.min(10, addrs.size()));
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,184,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,185,Map<String, Object> retval = spi.getNodeAttributes();
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,187,if (retval != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,188,for (Map.Entry<String, Object> e : retval.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,190,throw new IgniteCheckedException("SPI attribute collision for attribute [spi=" + spi +
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,197,ctx.addNodeAttribute(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,201,catch (IgniteSpiException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/GridManagerAdapter.java,202,throw new IgniteCheckedException("Failed to get SPI attributes.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,192,private static final int TRACKER_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,226,private final GridNioServerListener<Message> srvLsnr =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,227,new GridNioServerListenerAdapter<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,234,log.debug("Closing communication SPI session on write timeout [remoteAddr=" + ses.remoteAddress() +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,237,ses.close();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,241,if (ses.accepted()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,279,CommunicationListener<Message> lsnr0 = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,282,lsnr0.onDisconnected(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,404,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,411,RecoveryLastReceivedMessage msg0 = (RecoveryLastReceivedMessage)msg;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,417,recovery.ackReceived(msg0.received());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,422,long rcvCnt = recovery.onReceived();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,424,if (rcvCnt % ackSndThreshold == 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,431,recovery.lastAcknowledged(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,436,IgniteRunnable c;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,453,c = NOOP;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,467,private GridTcpNioCommunicationClient connected(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,468,GridNioRecoveryDescriptor recovery,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,469,GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,470,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,471,long rcvCnt,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,473,recovery.onHandshake(rcvCnt);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,477,nioSrvr.resend(ses);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,491,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,566,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,567,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,568,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,570,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,580,private IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,583,private String locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,586,private volatile InetAddress locHost;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,589,private int locPort = DFLT_PORT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,592,private int locPortRange = DFLT_PORT_RANGE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,598,private boolean directBuf = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,601,private boolean directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,604,private long idleConnTimeout = DFLT_IDLE_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,614,private long connTimeout = DFLT_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,617,private long maxConnTimeout = DFLT_MAX_CONN_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,621,private int reconCnt = DFLT_RECONNECT_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,624,private int sockSndBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,627,private int sockRcvBuf = DFLT_SOCK_BUF_SIZE;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,630,private int msgQueueLimit = DFLT_MSG_QUEUE_LIMIT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,639,private GridNioServer<Message> nioSrvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,642,private boolean tcpNoDelay = DFLT_TCP_NODELAY;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,645,private int ackSndThreshold = DFLT_ACK_SND_THRESHOLD;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,648,private int unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,651,private long sockWriteTimeout = DFLT_SOCK_WRITE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,669,private volatile CommunicationListener<Message> lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,672,private int boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,675,private int selectorsCnt = DFLT_SELECTORS_CNT;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,678,private AddressResolver addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,696,private final CountDownLatch ctxInitLatch = new CountDownLatch(1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,714,GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,738,this.addrRslvr = addrRslvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,748,if (ignite != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,749,setAddressResolver(ignite.configuration().getAddressResolver());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,750,setLocalAddress(ignite.configuration().getLocalHost());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,767,this.locAddr = locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,772,return locAddr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,784,this.locPort = locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,789,return locPort;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,810,this.locPortRange = locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,815,return locPortRange;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,828,this.idleConnTimeout = idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,833,return idleConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,838,return sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,851,this.sockWriteTimeout = sockWriteTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,856,return ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,868,this.ackSndThreshold = ackSndThreshold;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,873,return unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,885,this.unackedMsgsBufSize = unackedMsgsBufSize;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,929,this.connTimeout = connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,934,return connTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,951,this.maxConnTimeout = maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,956,return maxConnTimeout;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,969,this.reconCnt = reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,974,return reconCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,988,this.directBuf = directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,993,return directBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,998,return directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1010,this.directSndBuf = directSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1022,this.selectorsCnt = selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1027,return selectorsCnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1046,this.tcpNoDelay = tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1051,return tcpNoDelay;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1063,this.sockRcvBuf = sockRcvBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1068,return sockRcvBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1080,this.sockSndBuf = sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1085,return sockSndBuf;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1100,this.msgQueueLimit = msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1105,return msgQueueLimit;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1148,this.lsnr = lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1154,public CommunicationListener getListener() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1155,return lsnr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1197,assertParameter(locPort > 1023, "locPort > 1023");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1198,assertParameter(locPort <= 0xffff, "locPort < 0xffff");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1199,assertParameter(locPortRange >= 0, "locPortRange >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1200,assertParameter(idleConnTimeout > 0, "idleConnTimeout > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1203,assertParameter(sockRcvBuf >= 0, "sockRcvBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1204,assertParameter(sockSndBuf >= 0, "sockSndBuf >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1205,assertParameter(msgQueueLimit >= 0, "msgQueueLimit >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1207,assertParameter(selectorsCnt > 0, "selectorsCnt > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1212,assertParameter(sockWriteTimeout >= 0, "sockWriteTimeout >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1213,assertParameter(ackSndThreshold > 0, "ackSndThreshold > 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1214,assertParameter(unackedMsgsBufSize >= 0, "unackedMsgsBufSize >= 0");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1216,if (unackedMsgsBufSize > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1217,assertParameter(unackedMsgsBufSize >= msgQueueLimit * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1220,assertParameter(unackedMsgsBufSize >= ackSndThreshold * 5,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1224,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1225,locHost = U.resolveLocalHost(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1227,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1228,throw new IgniteSpiException("Failed to initialize local address: " + locAddr, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1231,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1234,nioSrvr = resetNioServer();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1236,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1237,throw new IgniteSpiException("Failed to initialize TCP server: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1241,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1242,IgniteBiTuple<Collection<String>, Collection<String>> addrs = U.resolveLocalAddresses(locHost);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1244,Collection<InetSocketAddress> extAddrs = addrRslvr == null ? null :
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1245,U.resolveAddresses(addrRslvr, F.flat(Arrays.asList(addrs.get1(), addrs.get2())), boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1253,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1254,throw new IgniteSpiException("Failed to resolve local host to addresses: " + locHost, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1260,assert locHost != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1263,startStopwatch();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1266,if (log.isDebugEnabled()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1267,log.debug(configInfo("locAddr", locAddr));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1268,log.debug(configInfo("locPort", locPort));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1269,log.debug(configInfo("locPortRange", locPortRange));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1270,log.debug(configInfo("idleConnTimeout", idleConnTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1271,log.debug(configInfo("directBuf", directBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1272,log.debug(configInfo("directSendBuf", directSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1275,log.debug(configInfo("selectorsCnt", selectorsCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1276,log.debug(configInfo("tcpNoDelay", tcpNoDelay));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1277,log.debug(configInfo("sockSndBuf", sockSndBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1278,log.debug(configInfo("sockRcvBuf", sockRcvBuf));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1279,log.debug(configInfo("msgQueueLimit", msgQueueLimit));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1285,log.debug(configInfo("sockWriteTimeout", sockWriteTimeout));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1286,log.debug(configInfo("ackSndThreshold", ackSndThreshold));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1287,log.debug(configInfo("unackedMsgsBufSize", unackedMsgsBufSize));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1296,U.quietAndWarn(log, "'TCP_NO_DELAY' for communication is off, which should be used with caution " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1323,log.debug(startInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1328,spiCtx.registerPort(boundTcpPort, IgnitePortProtocol.TCP);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1330,spiCtx.addLocalEventListener(discoLsnr, EVT_NODE_LEFT, EVT_NODE_FAILED);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1332,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1337,if (ctxInitLatch.getCount() > 0) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1339,log.debug("Waiting for context initialization.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1341,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1342,U.await(ctxInitLatch);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1345,log.debug("Context has been initialized.");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1347,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1348,U.warn(log, "Thread has been interrupted while waiting for SPI context initialization.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1352,return super.getSpiContext();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1361,private GridNioServer<Message> resetNioServer() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1363,throw new IgniteCheckedException("Tcp NIO server was already created on port " + boundTcpPort);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1365,IgniteCheckedException lastEx = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1369,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1371,private MessageFactory impl;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1375,impl = getSpiContext().messageFactory();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1377,assert impl != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1379,return impl.create(type);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1407,IgnitePredicate<Message> skipRecoveryPred = new IgnitePredicate<Message>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1409,return msg instanceof RecoveryLastReceivedMessage;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1436,boundTcpPort = port;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1443,srvr.idleTimeout(idleConnTimeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1445,return srvr;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1447,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1448,lastEx = e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1451,log.debug("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1454,onException("Failed to bind to local port (will try next port within range) [port=" + port +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1460,throw new IgniteCheckedException("Failed to bind to any port within range [startPort=" + locPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1468,unregisterMBean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1472,nioSrvr.stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1489,nioSrvr = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1492,boundTcpPort = -1;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1496,log.debug(stopInfo());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1505,ctxInitLatch.countDown();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1511,getSpiContext().deregisterPorts();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1513,getSpiContext().removeLocalEventListener(discoLsnr);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1537,throws IgniteSpiException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1539,checkAttributePresence(node, createSpiAttributeName(ATTR_ADDRS));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1540,checkAttributePresence(node, createSpiAttributeName(ATTR_HOST_NAMES));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1541,checkAttributePresence(node, createSpiAttributeName(ATTR_PORT));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1550,private void checkAttributePresence(ClusterNode node, String attrName) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1552,U.warn(log, "Remote node has inconsistent configuration (required attribute was not found) " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1559,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1560,assert msg != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1569,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1570,GridCommunicationClient client = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1572,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1573,boolean retry;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1575,do {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1578,UUID nodeId = null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1581,nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1585,client.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1592,ClusterNode node0 = getSpiContext().node(node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1599,while (retry);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1604,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1606,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1619,assert node != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1621,UUID nodeId = node.id();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1623,while (true) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1626,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1631,GridFutureAdapter<GridCommunicationClient> fut = new ConnectFuture();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1635,if (oldFut == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1636,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1639,if (client0 == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1642,if (client0 != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1649,U.sleep(200);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1652,fut.onDone(client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1654,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1655,fut.onDone(e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1658,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1660,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1664,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1665,fut = oldFut;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1667,client = fut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1672,if (getSpiContext().node(nodeId) == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1674,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1676,throw new IgniteSpiException("Destination node is not in topology: " + node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1681,return client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1682,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1890,break;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2488,assert add;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2495,private static class ConnectFuture extends GridFutureAdapter<GridCommunicationClient> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2513,private final T obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2516,private final long endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2519,private final AtomicBoolean done = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2525,private HandshakeTimeoutObject(T obj, long endTime) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2526,assert obj != null;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2527,assert obj instanceof GridCommunicationClient || obj instanceof SelectableChannel;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2528,assert endTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2530,this.obj = obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2531,this.endTime = endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2537,boolean cancel() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2538,return done.compareAndSet(false, true);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2545,if (done.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2548,((GridCommunicationClient)obj).forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2549,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2562,return endTime;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2569,return id;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2574,return S.toString(HandshakeTimeoutObject.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2581,private class HandshakeClosure extends IgniteInClosure2X<InputStream, OutputStream> {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2583,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2586,private final UUID rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2591,private HandshakeClosure(UUID rmtNodeId) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2592,this.rmtNodeId = rmtNodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2598,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2602,int n = 0;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2608,throw new IgniteCheckedException("Failed to get remote node ID (end of stream reached)");
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2610,n += cnt;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2617,throw new IgniteCheckedException("Remote node ID is not as expected [expected=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2620,log.debug("Received remote node ID: " + id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2622,catch (SocketTimeoutException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2623,throw new IgniteCheckedException("Failed to perform handshake due to timeout (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2626,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2627,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2630,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2631,out.write(U.IGNITE_HEADER);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2635,out.flush();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2641,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2642,throw new IgniteCheckedException("Failed to perform handshake.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,52,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,81,public GridDistributedTxRemoteAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,50,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,78,public GridDhtTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,51,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,76,protected GridDhtTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,45,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,59,public GridDhtTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2481,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,126,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,282,String taskName = ctx.kernalContext().task().resolveTaskName(req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,55,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,88,public GridNearTxLocal() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,43,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,63,public GridNearTxRemote() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,58,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,207,protected String taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,219,protected IgniteTxAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1310,return taskName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1312,return (taskName = cctx.kernalContext().task().resolveTaskName(taskNameHash));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1473,writeExternalMeta(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1475,out.writeObject(xidVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1476,out.writeBoolean(invalidate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1477,out.writeLong(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1478,out.writeLong(threadId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1479,out.writeLong(startTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1481,U.writeUuid(out, nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1483,out.write(isolation.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1484,out.write(concurrency.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1485,out.write(state().ordinal());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1490,readExternalMeta(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1492,xidVer = (GridCacheVersion)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1493,invalidate = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1494,timeout = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1495,threadId = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1496,startTime = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1498,nodeId = U.readUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1500,isolation = TransactionIsolation.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1501,concurrency = TransactionConcurrency.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1503,state = TransactionState.fromOrdinal(in.read());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1512,protected Object readResolve() throws ObjectStreamException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1513,return new TxShadow(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1515,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1516,threadId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1517,startTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1518,isolation,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1519,concurrency,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1520,invalidate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1521,implicit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1522,timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1523,state(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1525,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,59,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,109,protected IgniteTxLocalAdapter() {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,357,protected void writeExternalMeta(ObjectOutput out) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,365,out.writeObject(cp);
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridMetadataAwareAdapter.java,378,protected void readExternalMeta(ObjectInput in) throws IOException, ClassNotFoundException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4864,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4919,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,35,int topVer = one.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,36,int otherTopVer = other.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,38,if (topVer == otherTopVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,55,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,58,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAtomicVersionComparator.java,59,return topVer > otherTopVer ? 1 : -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,317,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,123,ctx.versions().last(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1349,obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,747,tx.writeVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,146,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,620,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,154,ver = tx == null ? cctx.versions().next() : tx.xidVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,598,GridCacheVersion ver = atomic ? null : F.isEmpty(infos) ? null : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,157,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,188,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,127,ctx.versions().next(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,116,lockVer = tx != null ? tx.xidVersion() : cctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,929,GridCacheVersion ver = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,561,public void endVersion(GridCacheVersion endVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,100,protected GridCacheVersion startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,111,protected GridCacheVersion endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,275,startVer = cctx.versions().last();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,318,this.startVer = startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1233,tx.endVersion(cctx.versions().next(tx.topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,65,private long gridStartTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,167,public GridCacheVersion next() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,179,public GridCacheVersion next(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,188,public GridCacheVersion nextForLoad() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,197,public GridCacheVersion nextForLoad(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,206,public GridCacheVersion nextForLoad(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,216,public GridCacheVersion next(GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,233,topVer = cctx.kernalContext().discovery().topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,235,if (addTime) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,237,gridStartTime = cctx.kernalContext().discovery().gridStartTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionManager.java,239,topVer += (gridStartTime - TOP_VER_BASE_TIME) / 1000;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,32,private Object cred;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,37,public Object credentials() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,44,public void credentials(Object cred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientAuthenticationRequest.java,59,cred = in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,242,restReq.credentials(req.credentials());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,670,if (expiryPlc != null && expiryPlc.entries() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,588,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,590,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,925,for (IgniteTxEntry entry : entries) {
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,232,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobContextImpl.java,239,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,181,U.writeGridUuid(out, sesId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,182,U.writeGridUuid(out, jobId);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,188,sesId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingImpl.java,189,jobId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,233,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,239,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,301,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,308,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,743,U.writeGridUuid(out, id1);
modules/core/src/main/java/org/apache/ignite/internal/GridTopic.java,750,id1 = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,255,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,264,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,132,U.writeGridUuid(out, clsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityMessage.java,144,clsLdrId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,612,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,618,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,692,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,699,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1514,xidVer.asGridUuid(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersion.java,186,public IgniteUuid asGridUuid() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,725,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,730,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,818,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,823,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,888,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,894,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1003,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1009,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,162,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueHeader.java,179,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,83,U.writeGridUuid(out, queueId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,90,queueId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,71,U.writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetHeader.java,77,id = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,95,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,101,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,102,U.writeGridUuid(out, setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,108,setId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,127,U.writeGridUuid(out, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,128,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,135,fileId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,136,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,247,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,257,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,482,U.writeGridUuid(out, lockId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,483,U.writeGridUuid(out, affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,498,lockId = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,499,affKey = U.readGridUuid(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4287,public static void writeGridUuids(DataOutput out, @Nullable Collection<IgniteUuid> col) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4294,writeGridUuid(out, id);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4318,col.add(readGridUuid(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4370,public static void writeGridUuid(DataOutput out, IgniteUuid uid) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,98,if (!U.isSufficientlyTestedOs()) {
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,99,U.warn(log, "This operating system has been tested less rigorously: " + U.osString() +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5899,public static boolean isSufficientlyTestedOs() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5900,return
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5901,win7 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5902,win8 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5903,win81 ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5904,winXp ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5905,winVista ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5906,mac ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5907,linux ||
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,5908,solaris;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,215,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,216,GridCacheDeploymentManager depMgr = cache.context().deploy();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,218,GridDeploymentInfo depInfo = wrapper.depInfo;
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,220,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,225,ldr = depMgr.globalLoader();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,227,else {
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,228,U.warn(ctx.log(getClass()), "Received cache event for cache that is not configured locally " +
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,233,try {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,285,GridDeployment dep = locStore.getDeployment(meta);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,288,dep = ldrStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,291,dep = verStore.getDeployment(ldr.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,31,class GridDeploymentMetadata {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentMetadata.java,205,void classLoaderId(IgniteUuid clsLdrId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,657,public void prepare(GridCacheDeployable deployable) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,703,if (bean != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,704,assert depEnabled : "Received deployment info while peer class loading is disabled [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,711,log.debug("Set P2P context [senderId=" + nodeId + ", msg=" + cacheMsg + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,714,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,331,if (ctx.config().isPeerClassLoadingEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,332,GridDeploymentInfo depInfo = e.deployInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,334,if (depInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,340,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsInputStreamImpl.java,499,public void apply(IgniteInternalFuture<byte[]> t) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,744,public boolean apply(Integer i) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1554,public String toString() {
modules/core/src/main/java/org/apache/ignite/lang/IgniteBiTuple.java,196,public V2 put(V1 key, V2 val) {
modules/core/src/main/java/org/jsr166/ConcurrentLinkedDeque8.java,1940,public Unsafe run() throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,161,public void apply(IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,216,processSinglePartitionUpdate(node, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,372,throw new IllegalStateException("Getting affinity for topology version earlier than affinity is " +
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,37,private static final ThreadGroup DFLT_GRP = new ThreadGroup("ignite");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,926,GridCacheEntryEx cached = entry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,928,GridCacheContext cacheCtx = entry.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,931,cached = cacheCtx.cache().peekEx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,934,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,936,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,938,cacheCtx.cache().removeEntry(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,940,if (!tx.near() && isNearEnabled(cacheCtx)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,941,GridNearCacheAdapter near = cacheCtx.isNear() ? cacheCtx.near() : cacheCtx.dht().near();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,943,GridNearCacheEntry e = near.peekExx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,946,near.removeEntry(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,949,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,950,U.error(log, "Failed to remove obsolete entry from cache: " + cached, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,592,protected FinalizationStatus finalizationStatus() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,562,if (!tx.markFinalizing(USER_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,564,log.debug("Will not finish transaction (it is handled by another thread): " + tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,566,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1815,if (tx.state(MARKED_ROLLBACK) || tx.state() == UNKNOWN) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1838,processedVers = new HashSet<>(txNum, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1906,if (!tx.markFinalizing(RECOVERY_FINISH)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1910,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1004,out.writeLong(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,1010,idx = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,47,public class CacheContinuousQueryManager extends GridCacheManagerAdapter {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1595,throw new IgniteCheckedException("Failed to send message to remote node " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,290,try (DataStreamerImpl<KeyCacheObject, Object> dataLdr =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheAdapter.java,294,dataLdr.receiver(DataStreamerCacheUpdaters.<KeyCacheObject, Object>batched());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,607,job0.cancel();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2067,private ByteOrder byteOrder = ByteOrder.nativeOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,269,Collection<GridCacheVersion> pendingVers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,222,tx.addInvalidPartition(cacheCtx, invalidPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,239,super.addInvalidPartition(cacheCtx, part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,278,addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,311,public void addInvalidPartition(GridCacheContext<?, ?> cacheCtx, int part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,54,private IgniteInternalTx tx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1608,tx.addInvalidPartition(cacheCtx, e.partition());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,74,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,76,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCache.java,78,metrics = m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,176,CacheMetricsImpl m = new CacheMetricsImpl(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,179,m.delegate(ctx.dht().near().metrics0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,181,metrics = m;
modules/core/src/main/java/org/apache/ignite/internal/client/GridClient.java,70,public GridClientData data() throws GridClientException;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,234,return data(null);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridRouterClientImpl.java,163,return clientImpl.data();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentClassLoader.java,592,GridDeploymentResponse res = comm.sendResourceRequest(path, ldrId, node, endTime);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,343,final ClusterNode dstNode, long threshold) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,465,throw new IgniteCheckedException("Got interrupted while waiting for response from node: " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,466,dstNode.id(), e);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,660,ClassLoader temp = new GridDeploymentClassLoader(
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,683,rsrcIn = temp.getResourceAsStream(path);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,703,else
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/GridJavadocAntTask.java,267,tok.update(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,111,processLockResponse(nodeId, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,820,private void processLockResponse(UUID nodeId, GridNearLockResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,503,return cacheCfg.getCacheMode() == CacheMode.REPLICATED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,697,return cacheCfg.getAtomicityMode() == ATOMIC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,877,return cacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1550,return cacheCfg.isLoadPreviousValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1578,return cacheCfg.getWriteSynchronizationMode() == FULL_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1585,return cacheCfg.getWriteSynchronizationMode() == PRIMARY_SYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,101,aff = new GridCacheAffinityProxy<>(ctx, ctx.cache().affinity());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,224,ctx.preloader().unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,129,public void unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryStatusCheckMessage.java,78,public TcpDiscoveryNode creatorNode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,105,private final Deque<String> stopSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,281,private void validate(IgniteConfiguration c,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,282,CacheConfiguration cc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,284,if (cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,297,if (cc.getNearConfiguration() != null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,298,ctx.discovery().cacheAffinityNode(ctx.discovery().localNode(), cc.getName())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,299,U.warn(log, "Near cache cannot be used with REPLICATED cache, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,302,cc.setNearConfiguration(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,307,U.warn(log, "AffinityFunction configuration parameter will be ignored for local cache [cacheName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,312,assertParameter(cc.getRebalanceBatchSize() > 0, "rebalanceBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,315,if (cc.getCacheMode() == PARTITIONED || cc.getCacheMode() == REPLICATED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,317,U.warn(log, "Cache write synchronization mode is set to FULL_ASYNC. All single-key 'put' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,322,DeploymentMode depMode = c.getDeploymentMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,324,if (c.isPeerClassLoadingEnabled() && (depMode == PRIVATE || depMode == ISOLATED) &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,340,throw new IgniteCheckedException("Cannot enable write-behind (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,343,assertParameter(cc.getWriteBehindBatchSize() > 0, "writeBehindBatchSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,344,assertParameter(cc.getWriteBehindFlushSize() >= 0, "writeBehindFlushSize >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,345,assertParameter(cc.getWriteBehindFlushFrequency() >= 0, "writeBehindFlushFrequency >= 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,346,assertParameter(cc.getWriteBehindFlushThreadCount() > 0, "writeBehindFlushThreadCount > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,349,throw new IgniteCheckedException("Cannot set both 'writeBehindFlushFrequency' and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,354,throw new IgniteCheckedException("Cannot enable read-through (loader or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,358,throw new IgniteCheckedException("Cannot enable write-through (writer or store is not provided) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,361,long delay = cc.getRebalanceDelay();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,363,if (delay != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,367,else if (cc.getRebalanceMode() == SYNC) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,368,if (delay < 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,369,U.warn(log, "Ignoring SYNC rebalance mode with manual rebalance start (node will not wait for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,373,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,382,ctx.igfsHelper().validateCacheConfiguration(cc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,777,for (String cacheName : stopSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,721,checkOwnerChanged(prev, owner, val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,834,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,836,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,268,e.recheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCacheEntry.java,270,break;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1312,start0(startCtx);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1333,private void start0(GridStartContext startCtx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1336,IgniteConfiguration cfg = startCtx.config() != null ? startCtx.config() : new IgniteConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1338,IgniteConfiguration myCfg = initializeConfiguration(cfg);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1346,ensureMultiInstanceSupport(myCfg.getDeploymentSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1347,ensureMultiInstanceSupport(myCfg.getCommunicationSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1348,ensureMultiInstanceSupport(myCfg.getDiscoverySpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1349,ensureMultiInstanceSupport(myCfg.getCheckpointSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1350,ensureMultiInstanceSupport(myCfg.getEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1351,ensureMultiInstanceSupport(myCfg.getCollisionSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1352,ensureMultiInstanceSupport(myCfg.getFailoverSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1353,ensureMultiInstanceSupport(myCfg.getLoadBalancingSpi());
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1409,if (myCfg.getConnectorConfiguration() != null) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1412,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1413,myCfg.getConnectorConfiguration().getThreadPoolSize(),
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1434,registerFactoryMbean(myCfg.getMBeanServer());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,412,String name = fd.getName();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,414,Field field = cls.getDeclaredField(name);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,416,field.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,418,buf.a(name).a('=');
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,531,!f.getType().isAnnotationPresent(GridToStringExclude.class)) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,560,GridToStringFieldDescriptor fd = new GridToStringFieldDescriptor(f.getName());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,34,private List<GridToStringFieldDescriptor> fields = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,57,Collections.sort(fields, new Comparator<GridToStringFieldDescriptor>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringClassDescriptor.java,60,return arg0.getOrder() < arg1.getOrder() ? -1 : arg0.getOrder() > arg1.getOrder() ? 1 : 0;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,33,GridToStringFieldDescriptor(String name) {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,34,assert name != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringFieldDescriptor.java,36,this.name = name;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,35,private static final String VALID_TASK_NAME =
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcConnection.java,413,return client.compute().<Boolean>executeAsync(VALID_TASK_NAME, cacheName).get(timeout, SECONDS);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,60,public IgniteFuture<?> runLocal(@Nullable Runnable r);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,74,public <R> IgniteFuture<R> callLocal(@Nullable Callable<R> c);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,86,public SchedulerFuture<?> scheduleLocal(Runnable job, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteScheduler.java,97,public <R> SchedulerFuture<R> scheduleLocal(Callable<R> c, String ptrn);
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,404,return val == null ? dflt : Boolean.valueOf(val);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,265,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,275,while (!closed && (attrs == null || !attrs.containsKey(key)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,276,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,278,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,297,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,309,while (!closed && !(isFound = isAttributeSet(key, val)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,310,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,312,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,335,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,345,while (!closed && (attrs == null || !attrs.keySet().containsAll(keys)) && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,346,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,348,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,376,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,388,while (!closed && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,394,mux.wait(end - now);
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionImpl.java,396,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,192,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,196,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,200,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,211,while (iter.hasNext() && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,215,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,229,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,328,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,332,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,336,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,358,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,364,if (!isInterrupted && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,366,fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,385,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,465,long now = System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,469,long end = timeout == 0 ? Long.MAX_VALUE : timeout + now;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,473,end = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,503,now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,507,if (!isInterrupted && !isResRcvd && now < end) {
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,509,res = fut.get(end - now);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1407,long lastChk = 0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1412,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1415,if (req == null && (segChkFreq == 0 || lastChk + segChkFreq >= now)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1424,assert req != null || lastChk + segChkFreq < now;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1434,lastChk = now;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,906,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,909,long endTime = now + timeout <= 0 ? Long.MAX_VALUE : now + timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,911,long delta = timeout;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,917,while (!uids.isEmpty() && err.get() == null && delta > 0) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,918,qryMux.wait(delta);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,920,delta = endTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,216,log.debug("Failed to handle request [req=" + req + ", e=" + e + "]");
modules/core/src/main/java/org/apache/ignite/internal/util/GridSpinReadWriteLock.java,341,long end = U.currentTimeMillis() + unit.toMillis(timeout);
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,988,private long ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1005,return jobsToSteal > 0 && U.currentTimeMillis() - ts >= msgExpireTime;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingCollisionSpi.java,1016,ts = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,84,private volatile long lastUpdateTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,305,return lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,313,public void lastUpdateTime(long lastUpdateTime) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,314,assert lastUpdateTime > 0;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,316,this.lastUpdateTime = lastUpdateTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,172,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,237,node.lastUpdateTime(U.currentTimeMillis());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,432,long rcvEnd = U.currentTimeMillis() + resWaitTime;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,435,while (U.currentTimeMillis() < rcvEnd) { // Try to receive multiple responses.
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,125,ctx.resource().injectGeneric(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,174,ctx.event().addLocalEventListener(lsnr, types);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,277,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,278,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,281,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,150,GridDeployment dep = ctx.deploy().getGlobalDeployment(depInfo.deployMode(), clsName, clsName,
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,151,depInfo.userVersion(), nodeId, depInfo.classLoaderId(), depInfo.participants(), null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,154,throw new IgniteDeploymentCheckedException("Failed to obtain deployment for class: " + clsName);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,156,ClassLoader ldr = dep.classLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,171,ctx.event().record(new CacheQueryExecutedEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,172,ctx.discovery().localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,174,EVT_CACHE_QUERY_EXECUTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,176,cacheName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,177,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,178,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,179,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,181,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,182,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,184,));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,285,return mgr.registerListener(routineId, lsnr, internal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,377,rmtFilter = rmtFilterDep.unmarshal(nodeId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,27,public void onExecution();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,355,if (!ctx.isDaemon() && data != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,356,for (DiscoveryDataItem item : data.items) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,321,String sesId = httpReq.getRequestedSessionId();
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/aspectj/package-info.java,22,package org.apache.ignite.compute.gridify.aop.aspectj;
modules/aop/src/main/java/org/apache/ignite/compute/gridify/aop/spring/package-info.java,22,package org.apache.ignite.compute.gridify.aop.spring;
modules/aws/src/main/java/org/apache/ignite/spi/checkpoint/s3/package-info.java,22,package org.apache.ignite.spi.checkpoint.s3;
modules/core/src/main/java/org/apache/ignite/cache/affinity/package-info.java,21,package org.apache.ignite.cache.affinity;
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/package-info.java,21,package org.apache.ignite.cache.affinity.rendezvous;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/package-info.java,21,package org.apache.ignite.cache.eviction.fifo;
modules/core/src/main/java/org/apache/ignite/cache/eviction/igfs/package-info.java,21,package org.apache.ignite.cache.eviction.igfs;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/package-info.java,21,package org.apache.ignite.cache.eviction.lru;
modules/core/src/main/java/org/apache/ignite/cache/eviction/package-info.java,21,package org.apache.ignite.cache.eviction;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/package-info.java,21,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/package-info.java,22,package org.apache.ignite.cache;
modules/core/src/main/java/org/apache/ignite/cache/query/annotations/package-info.java,22,package org.apache.ignite.cache.query.annotations;
modules/core/src/main/java/org/apache/ignite/cache/query/package-info.java,21,package org.apache.ignite.cache.query;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/package-info.java,21,package org.apache.ignite.cache.store.jdbc.dialect;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/package-info.java,22,package org.apache.ignite.cache.store.jdbc;
modules/core/src/main/java/org/apache/ignite/cache/store/package-info.java,22,package org.apache.ignite.cache.store;
modules/core/src/main/java/org/apache/ignite/cluster/package-info.java,22,package org.apache.ignite.cluster;
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/GridifySetToSetAbstractAspect.java,162,for (Object element : taskRes) {
modules/core/src/main/java/org/apache/ignite/compute/gridify/aop/package-info.java,22,package org.apache.ignite.compute.gridify.aop;
modules/core/src/main/java/org/apache/ignite/compute/gridify/package-info.java,22,package org.apache.ignite.compute.gridify;
modules/core/src/main/java/org/apache/ignite/compute/package-info.java,22,package org.apache.ignite.compute;
modules/core/src/main/java/org/apache/ignite/configuration/package-info.java,22,package org.apache.ignite.configuration;
modules/core/src/main/java/org/apache/ignite/events/package-info.java,22,package org.apache.ignite.events;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/package-info.java,22,package org.apache.ignite.igfs.mapreduce;
modules/core/src/main/java/org/apache/ignite/igfs/mapreduce/records/package-info.java,22,package org.apache.ignite.igfs.mapreduce.records;
modules/core/src/main/java/org/apache/ignite/igfs/package-info.java,22,package org.apache.ignite.igfs;
modules/core/src/main/java/org/apache/ignite/igfs/secondary/package-info.java,22,package org.apache.ignite.igfs.secondary;
modules/core/src/main/java/org/apache/ignite/internal/executor/package-info.java,22,package org.apache.ignite.internal.executor;
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/package-info.java,22,package org.apache.ignite.internal.igfs.common;
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/package-info.java,22,package org.apache.ignite.internal.managers.checkpoint;
modules/core/src/main/java/org/apache/ignite/internal/managers/collision/package-info.java,22,package org.apache.ignite.internal.managers.collision;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/package-info.java,22,package org.apache.ignite.internal.managers.communication;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/package-info.java,22,package org.apache.ignite.internal.managers.deployment;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/protocol/gg/package-info.java,22,package org.apache.ignite.internal.managers.deployment.protocol.gg;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/package-info.java,22,package org.apache.ignite.internal.managers.discovery;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/package-info.java,22,package org.apache.ignite.internal.managers.eventstorage;
modules/core/src/main/java/org/apache/ignite/internal/managers/failover/package-info.java,22,package org.apache.ignite.internal.managers.failover;
modules/core/src/main/java/org/apache/ignite/internal/managers/indexing/package-info.java,22,package org.apache.ignite.internal.managers.indexing;
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/package-info.java,22,package org.apache.ignite.internal.managers.loadbalancer;
modules/core/src/main/java/org/apache/ignite/internal/managers/package-info.java,22,package org.apache.ignite.internal.managers;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/package-info.java,22,package org.apache.ignite.internal.mxbean;
modules/core/src/main/java/org/apache/ignite/internal/package-info.java,22,package org.apache.ignite.internal;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/package-info.java,22,package org.apache.ignite.internal.processors.affinity;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/package-info.java,22,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/package-info.java,22,package org.apache.ignite.internal.processors.closure;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/package-info.java,22,package org.apache.ignite.internal.processors.datastreamer;
modules/core/src/main/java/org/apache/ignite/internal/processors/dr/package-info.java,22,package org.apache.ignite.internal.processors.dr;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/package-info.java,22,package org.apache.ignite.internal.processors.hadoop;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/package-info.java,22,package org.apache.ignite.internal.processors.igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/package-info.java,22,package org.apache.ignite.internal.processors.job;
modules/core/src/main/java/org/apache/ignite/internal/processors/package-info.java,22,package org.apache.ignite.internal.processors;
modules/core/src/main/java/org/apache/ignite/internal/processors/port/package-info.java,22,package org.apache.ignite.internal.processors.port;
modules/core/src/main/java/org/apache/ignite/internal/processors/resource/package-info.java,22,package org.apache.ignite.internal.processors.resource;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/package-info.java,22,package org.apache.ignite.internal.processors.rest.client.message;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.top;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/version/package-info.java,22,package org.apache.ignite.internal.processors.rest.handlers.version;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/package-info.java,22,package org.apache.ignite.internal.processors.rest;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.tcp;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/request/package-info.java,22,package org.apache.ignite.internal.processors.rest.request;
modules/core/src/main/java/org/apache/ignite/internal/processors/schedule/package-info.java,22,package org.apache.ignite.internal.processors.schedule;
modules/core/src/main/java/org/apache/ignite/internal/processors/segmentation/package-info.java,22,package org.apache.ignite.internal.processors.segmentation;
modules/core/src/main/java/org/apache/ignite/internal/processors/session/package-info.java,23,package org.apache.ignite.internal.processors.session;
modules/core/src/main/java/org/apache/ignite/internal/processors/task/package-info.java,22,package org.apache.ignite.internal.processors.task;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/package-info.java,22,package org.apache.ignite.internal.processors.timeout;
modules/core/src/main/java/org/apache/ignite/internal/util/future/package-info.java,22,package org.apache.ignite.internal.util.future;
modules/core/src/main/java/org/apache/ignite/internal/util/gridify/package-info.java,22,package org.apache.ignite.internal.util.gridify;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/loopback/package-info.java,22,package org.apache.ignite.internal.util.ipc.loopback;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/package-info.java,22,package org.apache.ignite.internal.util.ipc;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/package-info.java,22,package org.apache.ignite.internal.util.ipc.shmem;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/package-info.java,22,package org.apache.ignite.internal.util.nio;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/package-info.java,22,package org.apache.ignite.internal.util.nio.ssl;
modules/core/src/main/java/org/apache/ignite/internal/util/package-info.java,22,package org.apache.ignite.internal.util;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/package-info.java,22,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/package-info.java,22,package org.apache.ignite.internal.util.scala;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/package-info.java,22,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,32,public interface CI3<E1, E2, E3> extends GridInClosure3<E1, E2, E3> { /* No-op. */ }
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/internal/package-info.java,22,package org.apache.ignite.internal.util.typedef.internal;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/package-info.java,22,package org.apache.ignite.internal.util.typedef;
modules/core/src/main/java/org/apache/ignite/internal/util/worker/package-info.java,22,package org.apache.ignite.internal.util.worker;
modules/core/src/main/java/org/apache/ignite/lang/package-info.java,22,package org.apache.ignite.lang;
modules/core/src/main/java/org/apache/ignite/lifecycle/package-info.java,22,package org.apache.ignite.lifecycle;
modules/core/src/main/java/org/apache/ignite/logger/java/package-info.java,22,package org.apache.ignite.logger.java;
modules/core/src/main/java/org/apache/ignite/logger/package-info.java,22,package org.apache.ignite.logger;
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/package-info.java,22,package org.apache.ignite.marshaller.jdk;
modules/core/src/main/java/org/apache/ignite/marshaller/package-info.java,22,package org.apache.ignite.marshaller;
modules/core/src/main/java/org/apache/ignite/messaging/package-info.java,22,package org.apache.ignite.messaging;
modules/core/src/main/java/org/apache/ignite/mxbean/package-info.java,22,package org.apache.ignite.mxbean;
modules/core/src/main/java/org/apache/ignite/package-info.java,21,package org.apache.ignite;
modules/core/src/main/java/org/apache/ignite/plugin/extensions/communication/package-info.java,22,package org.apache.ignite.plugin.extensions.communication;
modules/core/src/main/java/org/apache/ignite/plugin/package-info.java,22,package org.apache.ignite.plugin;
modules/core/src/main/java/org/apache/ignite/plugin/security/package-info.java,22,package org.apache.ignite.plugin.security;
modules/core/src/main/java/org/apache/ignite/plugin/segmentation/package-info.java,22,package org.apache.ignite.plugin.segmentation;
modules/core/src/main/java/org/apache/ignite/scheduler/package-info.java,22,package org.apache.ignite.scheduler;
modules/core/src/main/java/org/apache/ignite/services/package-info.java,21,package org.apache.ignite.services;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/cache/package-info.java,23,package org.apache.ignite.spi.checkpoint.cache;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/jdbc/package-info.java,23,package org.apache.ignite.spi.checkpoint.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/noop/package-info.java,22,package org.apache.ignite.spi.checkpoint.noop;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/package-info.java,22,package org.apache.ignite.spi.checkpoint;
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/package-info.java,22,package org.apache.ignite.spi.checkpoint.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/collision/fifoqueue/package-info.java,22,package org.apache.ignite.spi.collision.fifoqueue;
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/package-info.java,22,package org.apache.ignite.spi.collision.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/collision/noop/package-info.java,22,package org.apache.ignite.spi.collision.noop;
modules/core/src/main/java/org/apache/ignite/spi/collision/package-info.java,22,package org.apache.ignite.spi.collision;
modules/core/src/main/java/org/apache/ignite/spi/collision/priorityqueue/package-info.java,22,package org.apache.ignite.spi.collision.priorityqueue;
modules/core/src/main/java/org/apache/ignite/spi/communication/package-info.java,22,package org.apache.ignite.spi.communication;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/package-info.java,22,package org.apache.ignite.spi.communication.tcp;
modules/core/src/main/java/org/apache/ignite/spi/deployment/local/package-info.java,22,package org.apache.ignite.spi.deployment.local;
modules/core/src/main/java/org/apache/ignite/spi/deployment/package-info.java,22,package org.apache.ignite.spi.deployment;
modules/core/src/main/java/org/apache/ignite/spi/discovery/package-info.java,22,package org.apache.ignite.spi.discovery;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.internal;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.jdbc;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.multicast;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.sharedfs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/vm/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.ipfinder.vm;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/package-info.java,22,package org.apache.ignite.spi.discovery.tcp.messages;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/package-info.java,22,package org.apache.ignite.spi.discovery.tcp;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/memory/package-info.java,22,package org.apache.ignite.spi.eventstorage.memory;
modules/core/src/main/java/org/apache/ignite/spi/eventstorage/package-info.java,22,package org.apache.ignite.spi.eventstorage;
modules/core/src/main/java/org/apache/ignite/spi/failover/always/package-info.java,22,package org.apache.ignite.spi.failover.always;
modules/core/src/main/java/org/apache/ignite/spi/failover/jobstealing/package-info.java,22,package org.apache.ignite.spi.failover.jobstealing;
modules/core/src/main/java/org/apache/ignite/spi/failover/never/package-info.java,22,package org.apache.ignite.spi.failover.never;
modules/core/src/main/java/org/apache/ignite/spi/failover/package-info.java,22,package org.apache.ignite.spi.failover;
modules/core/src/main/java/org/apache/ignite/spi/indexing/noop/package-info.java,22,package org.apache.ignite.spi.indexing.noop;
modules/core/src/main/java/org/apache/ignite/spi/indexing/package-info.java,22,package org.apache.ignite.spi.indexing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/adaptive/package-info.java,22,package org.apache.ignite.spi.loadbalancing.adaptive;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/package-info.java,22,package org.apache.ignite.spi.loadbalancing;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/package-info.java,22,package org.apache.ignite.spi.loadbalancing.roundrobin;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/weightedrandom/package-info.java,22,package org.apache.ignite.spi.loadbalancing.weightedrandom;
modules/core/src/main/java/org/apache/ignite/spi/package-info.java,22,package org.apache.ignite.spi;
modules/core/src/main/java/org/apache/ignite/startup/cmdline/package-info.java,22,package org.apache.ignite.startup.cmdline;
modules/core/src/main/java/org/apache/ignite/thread/package-info.java,22,package org.apache.ignite.thread;
modules/core/src/main/java/org/apache/ignite/transactions/package-info.java,22,package org.apache.ignite.transactions;
modules/core/src/main/java/org/jsr166/package-info.java,10,package org.jsr166;
modules/extdata/uri/src/main/java/org/apache/ignite/spi/deployment/uri/tasks/package-info.java,22,package org.apache.ignite.spi.deployment.uri.tasks;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/package-info.java,22,package org.apache.ignite.hadoop.fs;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/package-info.java,22,package org.apache.ignite.hadoop.fs.v1;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/package-info.java,22,package org.apache.ignite.hadoop.fs.v2;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/package-info.java,22,package org.apache.ignite.hadoop.mapreduce;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/package-info.java,22,package org.apache.ignite.internal.processors.query.h2;
modules/jcl/src/main/java/org/apache/ignite/logger/jcl/package-info.java,22,package org.apache.ignite.logger.jcl;
modules/jta/src/main/java/org/apache/ignite/cache/jta/jndi/package-info.java,22,package org.apache.ignite.cache.jta.jndi;
modules/jta/src/main/java/org/apache/ignite/cache/jta/package-info.java,22,package org.apache.ignite.cache.jta;
modules/jta/src/main/java/org/apache/ignite/cache/jta/reflect/package-info.java,22,package org.apache.ignite.cache.jta.reflect;
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/package-info.java,22,package org.apache.ignite.logger.log4j;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/package-info.java,22,package org.apache.ignite.internal.processors.rest.protocols.http.jetty;
modules/slf4j/src/main/java/org/apache/ignite/logger/slf4j/package-info.java,22,package org.apache.ignite.logger.slf4j;
modules/spring/src/main/java/org/apache/ignite/cache/spring/package-info.java,22,package org.apache.ignite.cache.spring;
modules/tools/src/main/java/org/apache/ignite/tools/ant/beautifier/package-info.java,22,package org.apache.ignite.tools.ant.beautifier;
modules/tools/src/main/java/org/apache/ignite/util/antgar/package-info.java,22,package org.apache.ignite.util.antgar;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/GridUriDeploymentJarVerifier.java,380,for (CodeSigner signer : signers) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/package-info.java,22,package org.apache.ignite.spi.deployment.uri;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/GridDeploymentFolderScannerHelper.java,50,for (File child : file.listFiles()) {
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/file/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.file;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/http/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners.http;
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/scanners/package-info.java,22,package org.apache.ignite.spi.deployment.uri.scanners;
modules/visor-plugins/src/main/java/org/apache/ignite/visor/plugin/package-info.java,22,package org.apache.ignite.visor.plugin;
modules/web/src/main/java/org/apache/ignite/cache/websession/package-info.java,22,package org.apache.ignite.cache.websession;
modules/web/src/main/java/org/apache/ignite/startup/servlet/package-info.java,22,package org.apache.ignite.startup.servlet;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryAuthFailedMessage.java,49,public TcpDiscoveryAuthFailedMessage(UUID creatorNodeId, InetAddress addr) {
modules/core/src/main/java/org/apache/ignite/internal/IgniteVersionUtils.java,60,BUILD_TSTAMP_STR = new SimpleDateFormat("yyyyMMdd").format(new Date(BUILD_TSTAMP * 1000));
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,241,String revTsStr = new SimpleDateFormat("yyyyMMdd").format(new Date(revTs * 1000));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,553,(handshakeFinished && res.getHandshakeStatus() == NOT_HANDSHAKING || res.getHandshakeStatus() == NEED_UNWRAP));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8848,public static <T extends R, R> List<R> arrayList(Iterable<T> c, int cap,
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8855,for (T t : c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,147,if (ver == null || deque.peekFirst().version().equals(ver)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheExplicitLockSpan.java,148,cand = deque.removeFirst();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,107,private boolean trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,190,return trackable;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,195,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,554,GridDhtTopologyFuture fut = cctx.topologyVersionFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,556,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,566,markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,568,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,959,trackable = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceDeploymentFuture.java,37,public GridServiceDeploymentFuture(ServiceConfiguration cfg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,753,U.error(log, "Error sending reply for job [nodeId=" + sndNode.id() + ", jobId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,765,U.error(log, msg, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,234,String overrideMcastGrp = System.getProperty(IGNITE_OVERRIDE_MCAST_GRP);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,237,mcastGrp = overrideMcastGrp;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,240,throw new IgniteSpiException("Multicast IP address is not specified.");
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,243,throw new IgniteSpiException("Invalid multicast port: " + mcastPort);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,246,throw new IgniteSpiException("Invalid wait time, value greater than zero is expected: " + resWaitTime);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,249,throw new IgniteSpiException("Invalid number of address request attempts, " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,259,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,260,mcastAddr = InetAddress.getByName(mcastGrp);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,262,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,263,throw new IgniteSpiException("Unknown multicast group: " + mcastGrp, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,267,throw new IgniteSpiException("Invalid multicast group address: " + mcastAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,269,Collection<String> locAddrs;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,271,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,272,locAddrs = U.resolveLocalAddresses(U.resolveLocalHost(locAddr)).get1();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,274,catch (IOException | IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,275,throw new IgniteSpiException("Failed to resolve local addresses [locAddr=" + locAddr + ']', e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,278,assert locAddrs != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,280,addrSnds = new ArrayList<>(locAddrs.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,284,for (String locAddr : locAddrs) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,285,InetAddress addr;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,288,addr = InetAddress.getByName(locAddr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,290,catch (UnknownHostException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,292,log.debug("Failed to resolve local address [locAddr=" + locAddr + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,294,continue;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,297,if (!addr.isLoopbackAddress()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,301,reqItfs.add(addr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,600,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-rcvr", log);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,644,super(ignite == null ? null : ignite.name(), "tcp-disco-multicast-addr-sender", log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,31,private GridKernalContext kernalCtx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,40,private boolean cpyOnGet;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1065,public AffinityKeyMapper defaultAffMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1066,return cacheObjCtx.defaultAffMapper();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,18,package org.apache.ignite.internal.processors.cacheobject;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,42,public class IgniteCacheObjectProcessorImpl extends GridProcessorAdapter implements IgniteCacheObjectProcessor {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,47,private static final Collection<Class<?>> IMMUTABLE_CLS = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,56,static {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,57,IMMUTABLE_CLS.add(String.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,58,IMMUTABLE_CLS.add(Boolean.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,59,IMMUTABLE_CLS.add(Byte.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,60,IMMUTABLE_CLS.add(Short.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,61,IMMUTABLE_CLS.add(Character.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,62,IMMUTABLE_CLS.add(Integer.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,63,IMMUTABLE_CLS.add(Long.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,64,IMMUTABLE_CLS.add(Float.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,65,IMMUTABLE_CLS.add(Double.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,66,IMMUTABLE_CLS.add(UUID.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,67,IMMUTABLE_CLS.add(IgniteUuid.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,68,IMMUTABLE_CLS.add(BigDecimal.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,74,public IgniteCacheObjectProcessorImpl(GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,75,super(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,81,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,83,return obj.prepareForCache(cctx.cacheObjectContext());
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,101,return (KeyCacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,192,return (CacheObject)obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,194,return toCacheObject0(obj, userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,204,protected CacheObject toCacheObject0(@Nullable Object obj, boolean userObj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,205,assert obj != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,207,if (obj instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,209,return new CacheObjectByteArrayImpl((byte[])obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,225,return new CacheObjectImpl(obj, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,282,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,288,return obj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,293,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,298,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,303,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,308,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1090,this.state = state;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,402,buf.a(cd.getSimpleClassName()).a(" [");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,416,Collection<ClusterNode> nodes = CU.affinityNodes(cctx, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,438,nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,603,assert cache != null : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,605,cache.context().dataStructures().blockSet(setId);
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,36,private static final Long CHECK_FREQ = Long.getLong(IGNITE_MARSHAL_BUFFERS_RECHECK, 10000);
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,151,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,156,if (maxOff < halfSize) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,157,byte[] newBytes = new byte[halfSize]; // Shrink.
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,161,bytes = newBytes;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,202,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,224,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,237,int bytesToCp = arr.length << 3;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,250,int bytesToCp = arr.length << 2;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,281,int bytesToCp = arr.length << 1;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,294,int bytesToCp = arr.length << 2;
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteAbstractBenchmark.java,111,return ignite().cluster().nodes().size() >= args.nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,762,private class CacheClassLoader extends ClassLoader {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7832,Class old = ldrMap.putIfAbsent(clsName, cls = Class.forName(clsName, true, ldr));
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,91,assert str.trim().length() > 0 : "Method description cannot be empty: " + mtd;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,119,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,142,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,172,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/mxbean/IgniteStandardMXBean.java,202,assert str.trim().length() > 0;
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridFilenameUtils.java,1232,if (backtrack.size() > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,262,public void onPartitionEvicted(int part) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,263,GridCacheAffinityManager aff = cctx.affinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,268,while (iter.hasNext()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,272,iter.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,354,return setDataMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,377,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,389,keys.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,401,setDataMap.remove(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,409,public void removeSetData(IgniteUuid id) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,470,if (set == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,472,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,475,set = new GridConcurrentHashSet<>());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,478,set = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,482,set.remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,483,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,484,set.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,559,iter = setIterator(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,695,private GridCloseableIterator<IgniteBiTuple<K, V>> setIterator(GridCacheQueryAdapter<?> qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,698,filter.init(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,705,data = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,707,final GridIterator<IgniteBiTuple<K, V>> it = F.iterator(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,708,data,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,711,return new IgniteBiTuple<>((K)e.item(), (V)Boolean.TRUE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,714,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,717,return filter.apply(e, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,721,return new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,723,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,727,return it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,731,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,110,if (ctx.isLocal() || ctx.isReplicated()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,113,return set != null ? set.size() : 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,144,return (set == null || set.isEmpty()) && size() == 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,529,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,535,finally {
modules/core/src/main/java/org/apache/ignite/spi/discovery/DiscoverySpiListener.java,44,public void onDiscovery(
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,146,public ContinuousQuery<K, V> setInitialQuery(Query<Cache.Entry<K, V>> initQry) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,229,public ContinuousQuery<K, V> setTimeInterval(long timeInterval) {
modules/core/src/main/java/org/apache/ignite/cache/query/ContinuousQuery.java,260,public ContinuousQuery<K, V> setAutoUnsubscribe(boolean autoUnsubscribe) {
modules/core/src/main/java/org/apache/ignite/internal/client/ssl/GridSslBasicContextFactory.java,410,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/cluster/IgniteClusterImpl.java,523,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,73,public List<List<ClusterNode>> assignment() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,80,public AffinityTopologyVersion topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,103,public Set<Integer> primaryPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,115,public Set<Integer> backupPartitions(UUID nodeId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,61,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl0.java,57,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheLazyEntry.java,130,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java,115,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectByteArrayImpl.java,153,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,740,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtilityKey.java,44,public abstract int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/KeyCacheObject.java,27,public int hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,581,public void onError(Throwable t) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockMapping.java,114,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopFileBlock.java,159,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,343,public boolean isFile() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,359,public long length() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,370,public int blockSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,379,public long blocksCount() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,430,public IgfsFileMap fileMap() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,465,public boolean evictExclude() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1231,public int hashCode() {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeMetricsBean.java,1236,public boolean equals(Object obj) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,802,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/GridConcurrentSkipListSet.java,159,public boolean equals(Object o) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridStringBuilder.java,444,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,239,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,48,public String toString() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,77,public String toString() {
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,240,public String toString() {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,206,public void setMetrics(ClusterMetrics metrics) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,478,GridContinuousHandler.RegisterStatus registerListener(UUID lsnrId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,480,boolean internal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,394,taskClsName = task.getClass().getName();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryFailResponse.java,51,this.errMsg = err.getClass() + ":" + err.getMessage();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,383,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,531,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,693,byte typeOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,695,typeOrd = reader.readByte("type");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,700,type = GridCacheQueryType.fromOrdinal(typeOrd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,255,log.debug("Sending force key request [cacheName=" + cctx.name() + "node=" + n.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,289,log.debug("Will not rebalance key (entry is not new) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,298,log.debug("Received removed DHT entry for force keys request [entry=" + e +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,307,log.debug("Will not rebalance key (local node is owner) [key=" + key + ", part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,318,log.debug("Mapping local partition [loc=" + cctx.localNodeId() + ", topVer" + topVer +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,337,log.debug("Will not rebalance key (no nodes to request from with rebalancing disabled) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,357,log.debug("Will not rebalance key (local partition is not MOVING) [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysFuture.java,511,log.debug("Trying to rebalance removed entry (will ignore) [cacheName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,943,if (X.hasCause(ex, GridCacheIndexUpdateException.class) && cacheCtx.cache().isMongoDataCache()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,945,log.debug("Failed to update mongo document index (transaction entry will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,949,txEntry.op(NOOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,953,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,955,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,956,IgniteCheckedException err = new IgniteTxHeuristicCheckedException("Failed to locally write to cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,964,state(UNKNOWN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,974,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,970,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,995,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2221,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2271,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,930,cctx.evicts().touch(this, cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,466,entry.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,789,cache.context().evicts().touch(entry, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1201,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1388,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2247,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearAtomicCache.java,255,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,225,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,335,ctx.evicts().touch(entry, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,559,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalCache.java,200,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1514,ctx.evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,240,new CacheInvokeDirectResult(key, cctx.toCacheObject(res)) : new CacheInvokeDirectResult(key, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1312,for (int i = 0; i < locked.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1403,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1413,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1418,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1451,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1461,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1466,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1570,dhtFut = updatePartialBatch(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1580,dhtFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1585,updRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1592,updRes.dhtFuture(dhtFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1596,return updRes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1679,GridCacheReturn retVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1680,Collection<IgniteBiTuple<GridDhtCacheEntry, GridCacheVersion>> deleted = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2042,batchRes.addDeleted(entry, updRes, entries);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2114,return dhtFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,745,fut.get();
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,245,assert ignite == null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,247,if (cfgPath != null && cfg != null) {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,248,throw new IllegalArgumentException("Both 'configurationPath' and 'configuration' are " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1242,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1396,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1397,U.error(log, "Failed to remove locks for keys: " + keys, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,88,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,392,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,90,private LockTimeoutObject timeoutObj;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,442,if (!isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,444,log.debug("Received lock response from node [nodeId=" + nodeId + ", res=" + res + ", fut=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,467,U.warn(log, "Failed to find mini future for response (perhaps due to stale message) [res=" + res +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNode.java,339,return clientRouterNodeId != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,44,return node.isClient();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,626,return !node.isClient() && (excludedEmpty || !excluded.contains(node));
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2062,);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentManager.java,468,locDep.deployMode() + ']', "Failed to deploy class in SHARED or CONTINUOUS mode.");
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,135,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,140,U.warn(log, "Failed to start " + name() + " protocol on port " + port + ": " + e.getMessage(),
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,101,assert !F.isEmpty(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,190,U.error(log, longMsg, e);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,192,U.error(log, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3691,warn(log, s, s);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3750,public static void warn(@Nullable IgniteLogger log, Object longMsg, Object shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3751,assert longMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3752,assert shortMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3755,log.warning(compact(longMsg.toString()));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3756,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3758,compact(shortMsg.toString()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,622,String msg = "Query execution is too long (" + time + " ms): " + sql;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,629,String longMsg = "Query execution is too long [time=" + time + " ms, sql='" + sql + '\'' +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,963,if (assignsMap != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloaderAssignments.java,64,AffinityTopologyVersion topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,123,Iterable<Integer> col = (Iterable<Integer>)qry.execute(new SumReducer()).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/CacheQuery.java,216,public CacheQuery<T> keepAll(boolean keepAll);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryManager.java,224,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,72,private volatile boolean keepAll = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,147,boolean keepAll,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,163,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,275,this.keepAll = keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,277,return this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,283,public boolean keepAll() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,284,return keepAll;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,64,private final Collection<Object> allCol = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,389,allCol.addAll(maskNulls((Collection<Object>)data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,392,onDone((Collection<R>)(qry.query().keepAll() ? unmaskNulls(allCol) : data));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,553,X.println(">>>  allCollSize: " + allCol.size());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,76,private static ThreadLocal<Queue<GridToStringThreadLocal>> threadCache = new ThreadLocal<Queue<GridToStringThreadLocal>>() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,78,Queue<GridToStringThreadLocal> queue = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,80,queue.offer(new GridToStringThreadLocal());
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,82,return queue;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,114,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,116,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,121,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,123,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,124,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,141,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,266,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,268,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,273,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,275,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,276,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,287,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,306,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,308,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,313,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,315,Object[] addNames = tmp.getAdditionalNames();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,316,Object[] addVals = tmp.getAdditionalValues();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,325,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,341,Queue<GridToStringThreadLocal> queue = threadCache.get();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,343,assert queue != null;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,348,GridToStringThreadLocal tmp = queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,355,queue.offer(tmp);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,18,package org.apache.ignite.internal.util.tostring;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,25,class GridToStringThreadLocal {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,39,return sb;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,45,Object[] getAdditionalNames() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,46,return addNames;
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,52,Object[] getAdditionalValues() {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringThreadLocal.java,53,return addVals;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,71,assert evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT || evtType == EVT_NODE_JOINED;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,79,if (evtType == EVT_NODE_FAILED || evtType == EVT_NODE_LEFT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,80,final Collection<String> caches = ctx.cache().cacheNames();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,82,final Collection<AffinityAssignmentKey> rmv = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,84,for (AffinityAssignmentKey key : affMap.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,86,rmv.add(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,89,if (!rmv.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,90,ctx.timeout().addTimeoutObject(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,91,new GridTimeoutObjectAdapter(
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,92,IgniteUuid.fromUuid(ctx.localNodeId()),
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,93,AFFINITY_MAP_CLEAN_UP_DELAY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,95,affMap.keySet().removeAll(rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,112,ctx.event().addLocalEventListener(lsnr, EVT_NODE_FAILED, EVT_NODE_LEFT, EVT_NODE_JOINED);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,449,prepare(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,455,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,458,prepare(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,486,cleanup(cfg, cfg.getEvictionPolicy(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,492,NearCacheConfiguration nearCfg = cfg.getNearConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,495,cleanup(cfg, nearCfg.getNearEvictionPolicy(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,322,return S.toString(GridDhtTxPrepareRequest.class, this, "super", super.toString());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4088,t.join();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4090,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1824,return cacheObjects().toCacheObject(cacheObjCtx, obj, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1096,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1101,completionCb.apply(req, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1103,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1195,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,454,private SecurityContext authenticate(GridRestRequest req) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,561,name = ((GridRestTaskRequest)req).taskName();
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,139,private void requestFreeSize(int size) {
modules/core/src/main/java/org/apache/ignite/internal/util/io/GridUnsafeDataOutput.java,147,byte[] newBytes = new byte[size << 1]; // Grow.
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/jdk/GridClientJdkMarshaller.java,59,ObjectInput in = new ObjectInputStream(tmp);
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridTcpRouterNioListenerAdapter.java,69,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,153,marshMap.put(GridClientJdkMarshaller.ID, new GridClientJdkMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,229,wait();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1601,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1602,throw new IgniteSpiException("Failed to send message to remote node: " + node, e);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,67,private static final Map<String, GridToStringClassDescriptor> classCache = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,70,private static final ReadWriteLock rwLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,481,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,485,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,486,classCache.remove(cls.getName() + System.identityHashCode(cls.getClassLoader()));
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,488,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,489,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,510,rwLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,512,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,513,cd = classCache.get(key);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,515,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,516,rwLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,576,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,578,try {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,579,classCache.put(key, cd);
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,581,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/tostring/GridToStringBuilder.java,582,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1168,add(ATTR_MACS, (macs.isEmpty() ? "" : macs));
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,42,private static int throttleTimeout = DFLT_THROTTLE_TIMEOUT;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,62,public static long throttleTimeout() {
modules/core/src/main/java/org/apache/ignite/configuration/FileSystemConfiguration.java,38,public static final long DFLT_FRAGMENTIZER_THROTTLING_BLOCK_LENGTH = 16 * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/GridDiagnostic.java,139,final long HALF_GB = 512/*MB*/ * 1024 * 1024;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,312,return X.timeSpan2HMSM(U.currentTimeMillis() - startTime);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1829,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1832,X.timeSpan2HMSM(U.currentTimeMillis() - startTime) + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,46,private static final long[] SPAN_DIVS = new long[] {1000L, 60L, 60L, 60L};
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,506,U.error(log, "Failed to get and add: " + this, e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1893,if (client == null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1894,assert errs != null;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,108,InetAddress locHost;
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,111,locHost = U.resolveLocalHost(ctx.config().getLocalHost());
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,114,throw new IgniteCheckedException("Failed to resolve local host to bind address: " + ctx.config().getLocalHost(), e);
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,117,System.setProperty(IGNITE_JETTY_HOST, locHost.getHostAddress());
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,424,public static boolean hasCause(@Nullable Throwable t, @Nullable Class<? extends Throwable>... cls) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,431,for (Class<? extends Throwable> c : cls) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,549,private static class AffinityAssignmentKey {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,560,private AffinityAssignmentKey(String cacheName, @NotNull AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/IgniteCache.java,507,public IgniteFuture<?> rebalance();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7405,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7408,for (Method declaredMtd : c.getDeclaredMethods()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7464,for (Class<?> c = cls != null ? cls : obj.getClass(); cls != Object.class; cls = cls.getSuperclass()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7468,mtd = c.getDeclaredMethod(mtdName, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,715,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,665,EntryProcessorResult<T> res = invokeAsync(key, entryProcessor, args).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,728,return resMap.isEmpty() ? null : resMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,731,return null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,382,long now = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,421,lastMsgSndTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,455,lastPingRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientNioTcpConnection.java,466,lastMsgRcvTime = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,29,public interface TcpDiscoverySpiMBean extends IgniteSpiManagementMBean {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,44,public String getSpiState();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,140,public long getNodesJoined();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,148,public long getNodesLeft();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBean.java,156,public long getNodesFailed();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignment.java,90,public List<ClusterNode> get(int part) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,460,if (t.getSuppressed() != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,461,for (Throwable th : t.getSuppressed()) {
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,463,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,466,return true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1670,continue;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6663,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6665,throw (Error)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6667,if (t instanceof GridClosureException) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6668,t = ((GridClosureException)t).unwrap();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6670,continue;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6674,return (IgniteCheckedException)t;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6677,return new IgniteCheckedException(t);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6679,assert t.getCause() != null; // ...and it is IgniteException.
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6681,t = t.getCause();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,615,StopFuture fut = stopFuts.get(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,618,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,619,StopFuture old = stopFuts.putIfAbsent(routineId, fut = new StopFuture(ctx));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,622,fut = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,623,else
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,624,doStop = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,627,if (doStop) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,629,LocalRoutineInfo routine = locInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,632,if (routine == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,633,stopFuts.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,635,fut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,637,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,641,unregisterHandler(routineId, routine.hnd, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1785,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1830,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,175,if (prevAssignment != null && discoEvt != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,180,else
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,182,discoEvt, topVer, backups));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,713,GridCacheEntryEx nearCached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,718,nearCached = cacheCtx.dht().near().peekEx(txEntry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,835,nearCached.innerSet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,836,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,837,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,838,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,839,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,840,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,841,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,842,txEntry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,843,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,844,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,845,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,846,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,847,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,848,txEntry.conflictExpireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,849,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,850,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,870,nearCached.innerRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,871,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,872,eventNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,873,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,874,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,875,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,877,metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,878,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,879,CU.empty0(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,880,DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,881,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,882,CU.subjectId(this, cctx),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,889,nearCached.innerReload();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1127,U.error(log, "Failed to marshal (request will not be sent).", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,243,for (GridLocalCacheEntry e : entries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,429,log.debug("Evicted partition: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,966,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,991,part.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,41,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,46,private Collection<Integer> parts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,72,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,81,updateSeq = cp.updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,82,topic = cp.topic;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,83,timeout = cp.timeout;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,84,workerId = cp.workerId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,85,topVer = cp.topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,88,this.parts = new HashSet<>(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,110,parts.add(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,117,Collection<Integer> partitions() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,124,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,125,return updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,174,return topVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,316,return 44;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,42,private long updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,74,this.updateSeq = updateSeq;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,105,long updateSequence() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,106,return updateSeq;
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,182,Method mtd = obj.getClass().getMethod(sb.toString(), paramCls);
modules/core/src/main/java/org/apache/ignite/configuration/IgniteReflectionFactory.java,200,Method mtd = obj.getClass().getMethod(sb.toString(), itf);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,459,private QueryResult<K, V> executeQuery(GridCacheQueryAdapter<?> qry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1221,IgniteSpiCloseableIterator<IgniteBiTuple<K, V>> iter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1227,executeQuery(qry, qryInfo.arguments(), loc, qry.subjectId(), taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1256,IgniteBiTuple<K, V> row = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1259,if (row == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1271,log.debug("Ignoring backup element [row=" + row +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1275,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1278,V val = row.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1285,if (val == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1289,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1292,if (statsEnabled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1293,CacheMetricsImpl metrics = cctx.cache().metrics0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1295,metrics.onRead(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1297,metrics.addGetTimeNanos(System.nanoTime() - start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1301,switch (type) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1302,case SQL:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1303,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1304,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1306,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1309,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1310,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1311,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1312,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1313,qryInfo.arguments(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1314,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1315,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1318,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1319,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1321,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1323,case TEXT:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1324,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1325,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1327,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1330,qry.queryClassName(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1331,qry.clause(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1332,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1333,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1334,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1335,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1336,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1339,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1340,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1342,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1344,case SCAN:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1345,cctx.gridEvents().record(new CacheQueryReadEvent<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1346,cctx.localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1348,EVT_CACHE_QUERY_OBJECT_READ,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1351,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1352,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1353,qry.scanFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1354,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1355,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1356,qry.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1357,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1360,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1361,null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1363,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1503,fut.onDone(executeQuery(qryInfo.query(), qryInfo.arguments(), false,
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,764,return config().isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1974,return cfg.isDaemon() || "true".equalsIgnoreCase(System.getProperty(IGNITE_DAEMON));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,415,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1496,throw new SQLException("Value is an not instance of " + cls.getName());
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,47,return new StreamTransformer<K, V>() {
modules/core/src/main/java/org/apache/ignite/stream/StreamTransformer.java,49,return ep.process(entry, args);
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,55,boolean isLog4jUsed = U.gridClassLoader().getResource("org/apache/log4j/Appender.class") != null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,57,try {
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,59,U.addLog4jNoOpLogger();
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,60,else
modules/core/src/main/java/org/apache/ignite/internal/client/impl/GridClientImpl.java,63,catch (IgniteCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,606,ServiceConfiguration cfg = dep.configuration();
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,616,public static Integer evictionPolicyMaxSize(@Nullable EvictionPolicy plc) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,618,return ((LruEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,624,return ((FifoEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,934,return updateWithBatch(op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,935,keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,936,vals,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,937,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,938,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,939,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,941,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,942,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,945,Iterator<?> valsIter = vals != null ? vals.iterator() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,951,boolean intercept = ctx.config().getInterceptor() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,953,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,955,throw new NullPointerException("Null key.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,957,Object val = valsIter != null ? valsIter.next() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,960,throw new NullPointerException("Null value.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,962,KeyCacheObject cacheKey = ctx.toCacheKeyObject(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,965,val = ctx.toCacheObject(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,967,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,968,GridCacheEntryEx entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,970,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,971,entry = entryEx(cacheKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,973,GridTuple3<Boolean, Object, EntryProcessorResult<Object>> t = entry.innerUpdateLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,974,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,975,val == null ? DELETE : op,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,976,val,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,977,invokeArgs,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,979,retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,980,expiryPlc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,981,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,982,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,984,intercept,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,985,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,986,taskName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,988,if (op == TRANSFORM) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,989,if (t.get3() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,990,Map<K, EntryProcessorResult> computedMap;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,992,if (res == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,993,computedMap = U.newHashMap(keys.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,995,res = new IgniteBiTuple<>(true, computedMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,997,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,998,computedMap = (Map<K, EntryProcessorResult>)res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1000,computedMap.put(key, t.get3());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1004,res = new T2(t.get1(), t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1006,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1008,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1010,log.debug("Got removed entry while updating (will retry): " + key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1012,entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1014,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1016,err = partialUpdateException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1018,err.add(F.asList(key), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1020,U.error(log, "Failed to update key : " + key, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1022,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1024,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1026,ctx.evicts().touch(entry, ctx.affinity().affinityTopologyVersion());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,134,private final Collection<Connection> conns = Collections.synchronizedCollection(new ArrayList<Connection>());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,175,conns.add(c);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,345,conns.remove(conn);
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,345,curWaitingJobs += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/ClusterMetricsSnapshot.java,355,avgJobWaitTime += m.getCurrentJobWaitTime();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,268,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,361,MiniFuture fut = new MiniFuture(n, mappedKeys, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,564,MiniFuture(ClusterNode node, LinkedHashMap<KeyCacheObject, Boolean> keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,361,MiniFuture fut = new MiniFuture(n, mappedKeys, saved, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,681,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,682,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,804,else
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,182,if (!".svn".equals(fileName)) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,183,InetSocketAddress addr = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,185,StringTokenizer st = new StringTokenizer(fileName, DELIM);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,187,if (st.countTokens() == 2) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,188,String addrStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,189,String portStr = st.nextToken();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,191,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,192,int port = Integer.parseInt(portStr);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,196,catch (IllegalArgumentException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,197,U.error(log, "Failed to parse file entry: " + fileName, e);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,202,addrs.add(addr);
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskArg.java,65,boolean sysCaches
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,191,this.top = top;
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,602,forceLocDep = reader.readBoolean("forceLocDep");
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,730,userVer = reader.readString("userVer");
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,192,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/IgniteComputeImpl.java,213,ctx.task().setThreadContextIfNotNull(TC_SUBGRID, prj.nodes());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,517,boolean fullSup = dep != null && taskCls!= null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,520,Collection<? extends ClusterNode> nodes = (Collection<? extends ClusterNode>)map.get(TC_SUBGRID);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,522,Collection<UUID> top = nodes != null ? F.nodeIds(nodes) : null;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,353,for (SharedDeployment d : deps) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,354,if (!d.pendingUndeploy() && !d.undeployed()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,355,Map<UUID, IgniteUuid> parties = d.participants();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,357,if (parties != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,358,IgniteUuid ldrId = parties.get(meta.senderNodeId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,360,if (ldrId != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,361,assert !ldrId.equals(meta.classLoaderId());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,364,log.debug("Skipping deployment (loaders on remote node are different) " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,367,continue;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,372,depsToCheck = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,375,log.debug("Adding deployment to check: " + d);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,377,depsToCheck.add(d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,135,return aff.assignments(topVer);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,522,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,400,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,138,throw new IllegalStateException("Ignite requires Java 7 or above. Current Java version " +
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,263,throw new IllegalStateException("Data streamer has been closed.");
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,73,public class IgniteSpringBean implements Ignite, DisposableBean, InitializingBean,
modules/spring/src/main/java/org/apache/ignite/IgniteSpringBean.java,120,g = IgniteSpring.start(cfg, appCtx);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2981,boolean res = true;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2983,if (file.isDirectory()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2984,File[] files = file.listFiles();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2989,res &= delete(file1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2991,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2993,new JarFile(file1, false).close();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,2997,catch (IOException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3000,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3001,res &= file1.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3003,res &= file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3005,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3006,res = file.delete();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3008,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,277,cfg.setNodeFilter(F.<ClusterNode>alwaysTrue() == prj.predicate() ? null : prj.predicate());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,279,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,301,return deploy(cfg);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1740,boolean conn = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1751,while (!conn) { // Reconnection on handshake timeout.
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1784,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1786,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1789,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1804,conn = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1807,if (!conn) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1922,private <T> long safeHandshake(
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1923,T client,
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1928,HandshakeTimeoutObject<T> obj = new HandshakeTimeoutObject<>(client, U.currentTimeMillis() + timeout);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1936,((GridCommunicationClient)client).doHandshake(new HandshakeClosure(rmtNodeId));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1937,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1938,SocketChannel ch = (SocketChannel)client;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1940,boolean success = false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1942,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1960,log.debug("Received remote node ID: " + rmtNodeId0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1964,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1974,buf.order(ByteOrder.nativeOrder());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1978,assert written;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1980,buf.flip();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1987,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1989,log.debug("Waiting for handshake [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2008,log.debug("Received handshake message [rmtNode=" + rmtNodeId + ", rcvCnt=" + rcvCnt + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2010,if (rcvCnt == -1) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2012,log.debug("Connection rejected, will retry client creation [rmtNode=" + rmtNodeId + ']');
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2014,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2015,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2017,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2018,success = true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2020,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2022,log.debug("Failed to read from channel: " + e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2024,throw new IgniteCheckedException("Failed to read from channel.", e);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2026,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2028,U.closeQuiet(ch);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1977,private static class CacheSqlMetadata implements GridCacheSqlMetadata {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2114,private static class CacheSqlIndexMetadata implements GridCacheSqlIndexMetadata {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8802,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8803,Method mtd = cls.getDeclaredMethod(name, paramTypes);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8805,if (mtd.getReturnType() != void.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8806,mtd.setAccessible(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8808,return mtd;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8811,catch (NoSuchMethodException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,400,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,404,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,410,log.debug("Partition map before afterExchange [exchId=" + exchFut.exchangeId() + ", fullMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,411,fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,413,long updateSeq = this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,415,for (int p = 0; p < num; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,421,if (locPart == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,423,log.debug("Skipping local partition afterExchange (will not create): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,425,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,428,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,430,if (state == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,432,Collection<ClusterNode> owners = owners(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,435,if (F.isEmpty(owners)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,436,boolean owned = locPart.own();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,439,locPart + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,443,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,454,log.debug("Owned partition: " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,457,log.debug("Will not own partition (there are owners to rebalance from) [locPart=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,458,locPart + ", owners = " + owners + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,460,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,464,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,465,if (locPart != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,466,GridDhtPartitionState state = locPart.state();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,469,locPart.rent(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,473,changed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,476,log.debug("Evicting moving partition (it does not belong to affinity): " + locPart);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,482,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,485,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,759,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1140,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1144,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1146,assert part.state() == EVICTED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1148,long seq = updateSeq ? this.updateSeq.incrementAndGet() : this.updateSeq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1152,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,1155,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,221,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,222,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,69,public GridDeploymentInfoBean(IgniteUuid clsLdrId, String userVer, DeploymentMode depMode,
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,70,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,75,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,85,locDepOwner = dep.localDeploymentOwner();
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,124,public void localDeploymentOwner(boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,125,this.locDepOwner = locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,68,private volatile boolean locDepOwner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,150,&& !cctx.kernalContext().job().internal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,151,ClassLoader ldr = Thread.currentThread().getContextClassLoader();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,157,locDepOwner = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,351,public void p2pContext(UUID sndId, IgniteUuid ldrId, String userVer, DeploymentMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,352,Map<UUID, IgniteUuid> participants, boolean locDepOwner) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,423,Map<UUID, IgniteUuid> added = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,426,added = addGlobalParticipants(sndId, ldrId, participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,433,added.remove(sndId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,445,added.remove(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,453,cctx.gridDeploy().addCacheParticipants(allParticipants, added);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,671,dep.localDeploymentOwner(locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,690,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,709,return new GridDeploymentInfoBean(d.loaderId(), d.userVersion(), d.mode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,710,participants, locDepOwner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,707,cctx.deploy().p2pContext(nodeId, bean.classLoaderId(), bean.userVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,708,bean.deployMode(), bean.participants(), bean.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,335,depMgr.p2pContext(nodeId, depInfo.classLoaderId(), depInfo.userVersion(), depInfo.deployMode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,336,depInfo.participants(), depInfo.localDeploymentOwner());
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,69,URL url = U.resolveIgniteUrl(path);
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,72,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/file/VisorLatestTextFilesTask.java,75,File folder = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,218,UUID uuid = ignite.localNode().id();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,219,String nid = uuid.toString().toLowerCase();
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,223,try {
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,224,File fld = new File(url.toURI());
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,225,int pathIdx = (fld.isDirectory() ? fld : fld.getParentFile()).getAbsolutePath().length() + 1;
modules/core/src/main/java/org/apache/ignite/internal/visor/log/VisorLogSearchTask.java,227,List<VisorLogFile> matchingFiles = matchedFiles(fld, filePtrn);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,427,public static List<VisorLogFile> fileTree(File file, int maxDepth, @Nullable FileFilter filter) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,454,public static List<VisorLogFile> matchedFiles(File fld, final String ptrn) {
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,455,List<VisorLogFile> files = fileTree(fld, MAX_FOLDER_DEPTH,
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,862,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,865,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,867,assert obj instanceof GridJobWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,869,IgniteUuid jobId1 = ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,870,IgniteUuid jobId2 = ((GridJobWorker)obj).ses.getJobId();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,872,assert jobId1 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,873,assert jobId2 != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,875,return jobId1.equals(jobId2);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,472,Collection<GridJobResultImpl> jobResList = new ArrayList<>(jobs.size());
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,102,return "Ignite Cache";
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,204,(t[1] < 10 ? "0" + t[1] : Long.toString(t[1])) + ':' +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,311,forcePrimary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,312,subjId0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,313,taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,315,expiryPlc,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,51,private static final Field RESULT_FIELD;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,56,static {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,57,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,58,RESULT_FIELD = JdbcResultSet.class.getDeclaredField("result");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,60,RESULT_FIELD.setAccessible(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,62,catch (NoSuchFieldException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,63,throw new IllegalStateException("Check H2 version in classpath.", e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,294,QueryResult res = qr.result(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,298,int page = res.page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,386,private class QueryResults {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,388,private final long qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,391,private final AtomicReferenceArray<QueryResult> results;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,394,private volatile boolean canceled;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,401,this.qryReqId = qryReqId;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,403,results = new AtomicReferenceArray<>(qrys);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,410,QueryResult result(int qry) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,411,return results.get(qry);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,420,throw new IllegalStateException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,426,boolean isAllClosed() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,427,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,428,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,431,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,434,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,439,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,441,canceled = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,443,for (int i = 0; i < results.length(); i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,444,QueryResult res = results.get(i);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,447,res.close();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,455,private class QueryResult implements AutoCloseable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,457,private final ResultInterface res;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,460,private final ResultSet rs;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,463,private int page;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,469,private volatile boolean closed;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,492,synchronized boolean fetchNextPage(List<Value[]> rows, int pageSize) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,494,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,496,page++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,498,for (int i = 0 ; i < pageSize; i++) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,500,return true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,502,rows.add(res.currentRow());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,505,return false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,511,return;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,513,closed = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,46,public GridLuceneDirectory(GridUnsafeMemory mem) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,64,List<String> names = new ArrayList<>(fileNames.size());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,67,names.add(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,113,doDeleteFile(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,122,private void doDeleteFile(String name) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,140,GridLuceneFile existing = fileMap.remove(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,148,fileMap.put(name, file);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,181,doDeleteFile(fileName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,184,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,29,public class GridLuceneFile implements Serializable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,31,private static final long serialVersionUID = 0L;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,34,public static final AtomicInteger filesCnt = new AtomicInteger();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,56,filesCnt.incrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,101,protected final synchronized long getBuffer(int idx) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,108,protected final synchronized int numBuffers() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,118,protected long newBuffer() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,125,public synchronized void delete() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,134,filesCnt.decrementAndGet();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneFile.java,140,public long getSizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,272,U.closeQuiet(dir);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,30,public class GridLuceneInputStream extends IndexInput {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,29,public class GridLuceneOutputStream extends IndexOutput {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,264,if (!markObsolete(dhtVer)) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,684,return Integer.highestOneBit(v - 1) << 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,897,exchFut.init();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,440,public void init() throws IgniteInterruptedCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1103,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1213,GridCacheQueryAdapter<?> qry = qryInfo.query();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1300,if (readEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2198,tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,768,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1379,proxy.gate().onStopped();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2322,for (Map.Entry<String, IgniteCacheProxy<?, ?>> entry : jCacheProxies.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2324,res.add(entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,50,public class IgniteCacheProxy<K, V> extends AsyncSupportAdapter<IgniteCache<K, V>>
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,51,implements IgniteCache<K, V>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,53,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,81,private CacheManager cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,86,public IgniteCacheProxy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,96,public IgniteCacheProxy(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,97,GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,100,boolean async
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,101,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,102,super(async);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,104,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,105,assert delegate != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,107,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,108,this.delegate = delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,111,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,119,public GridCacheContext<K, V> context() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,120,return ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,126,public GridCacheGateway<K, V> gate() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,127,return gate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,149,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,156,CacheConfiguration cfg = ctx.config();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,159,throw new IllegalArgumentException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,161,return clazz.cast(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,168,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,171,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,197,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,217,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,220,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,222,setFuture(delegate.localLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,223,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,224,delegate.localLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,226,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,230,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,231,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,237,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,240,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,241,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,244,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,246,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,249,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,253,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,254,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,260,return lockAll(Collections.singleton(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,272,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,273,return byCurrThread ? delegate.isLockedByThread(key) : delegate.isLocked(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,275,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,301,TextQuery p = (TextQuery)filter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,306,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,310,else if (filter instanceof SpiQuery) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,314,qry.projection(grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,318,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,320,throw new CacheException("Use methods 'queryFields' and 'localQueryFields' for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,321,SqlFieldsQuery.class.getSimpleName() + ".");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,323,throw new CacheException("Unsupported query type: " + filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,332,throw new NoSuchElementException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,336,cur = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,346,fut.cancel();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,357,return ctx.kernalContext().grid().cluster().forLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,360,return ctx.kernalContext().grid().cluster().forDataNodes(ctx.name()).forRandom();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,362,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,375,throw new IgniteException("Initial predicate for continuous query can't be an instance of another " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,379,throw new IgniteException("Mandatory local listener is not set for the query: " + qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,381,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,382,final UUID routineId = ctx.continuousQueries().executeQuery(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,383,qry.getLocalListener(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,384,qry.getRemoteFilter(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,385,qry.getPageSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,386,qry.getTimeInterval(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,387,qry.isAutoUnsubscribe(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,390,final QueryCursor<Cache.Entry<K, V>> cur =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,391,qry.getInitialQuery() != null ? query(qry.getInitialQuery()) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,393,return new QueryCursor<Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,399,return cur != null ? cur.getAll() : Collections.<Cache.Entry<K, V>>emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,404,cur.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,406,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,407,ctx.kernalContext().continuous().stopRoutine(routineId).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,409,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,410,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,415,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,416,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,423,A.notNull(qry, "qry");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,427,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,428,validate(qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,453,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,457,throw new CacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,459,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,477,private void validate(Query qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,487,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,488,return delegate.localEntries(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,490,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,491,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,493,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,502,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,505,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,539,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,549,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,550,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,558,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,559,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,560,setFuture(delegate.sizeAsync(peekModes));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,562,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,564,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,565,return delegate.size(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,567,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,568,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,570,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,579,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,580,return delegate.localSize(peekModes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,582,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,583,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,585,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,592,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,595,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,596,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,599,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,601,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,604,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,615,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,618,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,619,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,622,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,624,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,627,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,640,public Map<K, V> getAll(Collection<? extends K> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,641,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,644,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,645,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,648,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,650,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,653,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,657,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,658,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,683,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,684,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,685,setFuture(delegate.containsKeyAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,687,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,689,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,690,return delegate.containsKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,692,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,701,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,702,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,703,setFuture(delegate.containsKeysAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,705,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,707,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,708,return delegate.containsKeys(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,710,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,717,Set<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,718,boolean replaceExisting,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,720,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,723,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,724,IgniteInternalFuture<?> fut = ctx.cache().loadAll(keys, replaceExisting);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,726,if (completionLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,727,fut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,729,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,730,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,732,completionLsnr.onCompletion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,734,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,735,completionLsnr.onException(cacheException(e));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,741,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,748,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,751,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,754,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,757,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,761,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,762,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,768,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,771,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,772,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,775,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,777,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,780,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,784,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,785,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,791,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,794,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,796,setFuture(delegate.putAllAsync(map));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,797,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,798,delegate.putAll(map);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,800,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,804,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,805,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,811,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,814,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,815,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,818,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,820,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,823,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,827,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,828,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,834,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,837,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,838,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,841,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,843,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,846,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,850,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,851,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,857,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,860,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,861,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,862,setFuture(delegate.removeAsync(key, oldVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,864,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,866,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,867,return delegate.remove(key, oldVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,869,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,873,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,874,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,880,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,883,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,884,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,887,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,889,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,892,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,896,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,897,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,903,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,906,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,907,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,910,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,912,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,915,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,919,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,920,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,926,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,929,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,930,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,933,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,935,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,938,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,942,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,943,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,949,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,952,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,953,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,956,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,958,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,961,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,965,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,966,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,972,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,975,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,977,setFuture(delegate.removeAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,978,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,979,delegate.removeAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,981,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,985,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,986,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,994,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,996,setFuture(delegate.removeAllAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,997,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,998,delegate.removeAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1000,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1012,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1015,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1018,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1019,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1021,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1048,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1050,setFuture(delegate.clearAsync());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1051,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1052,delegate.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1054,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1055,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1057,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1066,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1067,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1069,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1078,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1080,delegate.clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1082,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1089,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1090,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1093,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1094,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1108,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1110,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1111,EntryProcessorResult<T> res = delegate.invoke(key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1113,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1116,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1120,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1121,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1127,throws EntryProcessorException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1167,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1170,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1171,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1172,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1174,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1176,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1177,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1179,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1183,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1184,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1190,CacheEntryProcessor<K, V, T> entryProcessor,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1191,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1192,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1195,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1196,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1197,setFuture(delegate.invokeAllAsync(keys, entryProcessor, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1199,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1201,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1202,return delegate.invokeAll(keys, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1204,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1208,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1209,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1215,Map<? extends K, ? extends EntryProcessor<K, V, T>> map,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1216,Object... args) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1217,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1220,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1221,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1222,setFuture(delegate.invokeAllAsync(map, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1224,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1226,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1227,return delegate.invokeAll(map, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1229,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1233,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1234,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1240,return delegate.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1245,return cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1251,public void setCacheManager(CacheManager cacheMgr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1252,this.cacheMgr = cacheMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1258,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1260,IgniteInternalFuture<?> fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1262,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1265,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1269,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1270,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1272,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1273,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1280,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1282,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1283,return ctx.kernalContext().cache().context().closed(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1285,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1294,return delegate;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1301,return (T)this;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1303,return (T)ctx.grid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1307,throw new IllegalArgumentException("Unwrapping to class is not supported: " + clazz);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1314,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1317,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1318,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1320,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1329,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1330,ctx.continuousQueries().cancelJCacheQuery(lsnrCfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1332,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1333,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1335,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1344,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1345,return ctx.cache().igniteIterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1347,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1383,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1393,return new IgniteCacheProxy<>((GridCacheContext<K1, V1>)ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1398,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1435,return new IgniteCacheProxy<>(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1440,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1449,private RuntimeException cacheException(IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1450,return CU.convertToCacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1456,private <R> void setFuture(IgniteInternalFuture<R> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1470,out.writeObject(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1472,out.writeObject(delegate);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1480,ctx = (GridCacheContext<K, V>)in.readObject();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1486,gate = ctx.gate();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1626,cancelledJobs.remove(worker.getJobId(), worker);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1628,heldJobs.remove(worker.getJobId());
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,36,private final IgniteThread timeoutWorker;
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,60,new TimeoutWorker());
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,65,timeoutWorker.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,73,U.interrupt(timeoutWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/timeout/GridTimeoutProcessor.java,144,while (true) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,31,public class GridLuceneDirectory extends Directory {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,47,this.mem = mem;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,49,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,50,setLockFactory(new GridLuceneLockFactory());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,52,catch (IOException e) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,53,throw new IllegalStateException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,74,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,76,return fileMap.containsKey(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,83,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,92,ensureOpen();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneDirectory.java,94,throw new IllegalStateException(name);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,106,writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_30, new StandardAnalyzer(
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,107,Version.LUCENE_30)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,154,doc.add(new Field(VAL_STR_FIELD_NAME, val.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,163,doc.add(new Field(idxdFields[i], fieldVal.toString(), Field.Store.YES, Field.Index.ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,173,writer.deleteDocuments(new Term(KEY_FIELD_NAME, keyStr));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,178,doc.add(new Field(KEY_FIELD_NAME, keyStr, Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,185,doc.add(new Field(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(expires,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,186,DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,188,writer.addDocument(doc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,237,reader = IndexReader.open(writer, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,245,MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_30, idxdFields,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,249,Filter f = new TermRangeFilter(EXPIRATION_TIME_FIELD_NAME, DateTools.timeToString(U.currentTimeMillis(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,250,DateTools.Resolution.MILLISECOND), null, false, false);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,255,docs = searcher.search(parser.parse(qry), f, Integer.MAX_VALUE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,327,return filters == null || filters.apply(key, val) ;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneIndex.java,390,U.closeQuiet(searcher);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,67,length = file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,152,assert numBytes >= 0 : "numBytes=" + numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,154,GridLuceneOutputStream gridOut = out instanceof GridLuceneOutputStream ? (GridLuceneOutputStream)out : null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,156,long left = numBytes;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,158,while (left > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,159,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,160,++currBufIdx;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,162,switchCurrentBuffer(true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,165,final int bytesInBuf = bufLength - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,166,final int toCp = (int)(bytesInBuf < left ? bytesInBuf : left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,169,gridOut.writeBytes(currBuf + bufPosition, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,170,else {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,171,byte[] buff = new byte[toCp];
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,173,mem.readBytes(currBuf + bufPosition, buff);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,175,out.writeBytes(buff, toCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,178,bufPosition += toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,180,left -= toCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneInputStream.java,183,assert left == 0 : "Insufficient bytes to copy: numBytes=" + numBytes + " copied=" + (numBytes - left);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,35,return new LockImpl(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,40,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,59,return locks.add(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,64,locks.remove(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneLockFactory.java,69,return locks.contains(lockName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,92,setFileLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,94,if (pos < bufStart || pos >= bufStart + bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,95,currBufIdx = (int)(pos / BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,97,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,100,bufPosition = (int)(pos % BUFFER_SIZE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,105,return file.getLength();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,178,public long sizeInBytes() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,179,return (long)file.numBuffers() * (long)BUFFER_SIZE;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,222,void writeBytes(long ptr, int len) throws IOException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,223,while (len > 0) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,224,if (bufPosition == bufLength) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,225,currBufIdx++;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,226,switchCurrentBuffer();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,229,int remainInBuf = BUFFER_SIZE - bufPosition;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,230,int bytesToCp = len < remainInBuf ? len : remainInBuf;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,232,mem.copyMemory(ptr, currBuf + bufPosition, bytesToCp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,234,ptr += bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,235,len -= bytesToCp;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridLuceneOutputStream.java,236,bufPosition += bytesToCp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,486,if (node2part != null && node2part.compareTo(partMap) >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,488,log.debug("Stale partition map for full partition map update (will ignore) [lastExchId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,494,updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,505,if (newPart != null && newPart.updateSequence() < part.updateSequence()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,508,mapString(part) + ", newPart=" + mapString(newPart) + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,29,implements Comparable<GridDhtPartitionFullMap>, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,148,assert nodeId == null || (nodeOrder != o.nodeOrder && !nodeId.equals(o.nodeId)) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,149,(nodeOrder == o.nodeOrder && nodeId.equals(o.nodeId)): "Inconsistent node order and ID [id1=" + nodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,153,return -1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,155,return 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,157,return 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,159,int res = Long.compare(nodeOrder, o.nodeOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,162,res = Long.compare(updateSeq, o.updateSeq);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionFullMap.java,164,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,49,private Collection<Integer> last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,126,Collection<Integer> last() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,127,return last == null ? Collections.<Integer>emptySet() : last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,133,void last(int p) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,135,last = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,137,if (last.add(p)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,138,msgSize += 4;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1159,onReassignmentFailed(topVer, retries);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,357,return mtd.invoke(svcCtx.service(), args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2238,if (loaded.size() != loadKeys.size()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2241,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,82,private final Lock lock = new ReentrantLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,217,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,376,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,382,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,453,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,455,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,456,curLocVal = locVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,467,long curGlobalVal = seq.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,469,long newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,472,long off = batchSize > 1 ? batchSize - 1 : 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,475,if (curLocVal + l >= curGlobalVal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,476,newLocVal = curLocVal + l;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,478,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,480,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,481,newLocVal = curGlobalVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,483,newUpBound = newLocVal + off;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,486,locVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,487,upBound = newUpBound;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,490,curLocVal = newLocVal;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,492,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,493,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,314,U.cancel(exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,317,log.debug("Before joining on exchange worker: " + exchWorker);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,319,U.join(exchWorker, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,306,return nearEntries().size() + dht().size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,208,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,105,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,163,int taskNameHash
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,164,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,453,return cctx.affinityNode() ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,454,Collections.singletonList(cctx.localNode()) :
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,357,String fmt = "[%d{ABSOLUTE}][%-5p][%t][%c{1}] %m%n";
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/shuffle/streams/HadoopOffheapBuffer.java,95,assert size > 0 : size;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1413,Throwable err
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,965,boolean escapeAll = schema.escapeAll();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1246,createSchema(schema);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1247,createSqlFunctions(schema, ccfg.getSqlFunctionClasses());
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,137,final String cacheName = req0.cacheName();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/QueryCursorImpl.java,29,public class QueryCursorImpl<T> implements QueryCursorEx<T> {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,33,private static final long RETRY_TIMEOUT = 3000;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,131,U.warn(log, "Failed to get item, will retry poll [queue=" + queueName + ", idx=" + idx + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1489,final int reachTimeout = 2000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2763,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,18,package org.apache.ignite.internal.processors.cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,25,public class GridCacheTryPutFailedException extends IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTryPutFailedException.java,27,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,375,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,378,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,379,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateFuture.java,49,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,305,assert res == null || res instanceof GridCacheReturn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,307,GridCacheReturn ret = (GridCacheReturn)res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,309,Object retval =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,313,retval = Collections.emptyMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,315,if (super.onDone(retval, err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,319,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/GridLocalLockFuture.java,41,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,644,if (perNodeCnt > maxPerNodeCnt && maxPerNodeCnt != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4432,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4439,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4634,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4667,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4685,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4704,protected void saveFuture(final FutureHolder holder, IgniteInternalFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4714,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4719,asyncOpRelease();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,613,IgniteInternalFuture<T> fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,633,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,640,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1575,IgniteInternalFuture fail = asyncOpAcquire();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1595,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1602,saveFuture(holder, f);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/client/message/GridClientNodeBean.java,252,out.writeObject(consistentId);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,577,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,591,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,625,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,630,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,819,threadProcessingMessage(true);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,824,threadProcessingMessage(false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,27,private static ThreadLocal<Boolean> threadProcMsg = new ThreadLocal<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,29,return Boolean.FALSE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,42,return threadProcMsg.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioBackPressureControl.java,48,public static void threadProcessingMessage(boolean processing) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1783,cfg.setEventStorageSpi(new MemoryEventStorageSpi());
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,752,public <T extends Event> Collection<T> localEvents(IgnitePredicate<T> p) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1232,private abstract class BusyRunnable implements Runnable {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1247,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,154,private GridFutureAdapter<DiscoveryEvent> locJoinEvt = new GridFutureAdapter<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,384,DiscoCache cache = new DiscoCache(locNode, F.view(topSnapshot, F.remoteNodes(locNode.id())));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,386,discoCacheHist.put(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,388,boolean set = updateTopologyVersionIfGreater(nextTopVer, cache);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,403,discoEvt.topologySnapshot(topVer, new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,404,F.viewReadOnly(topSnapshot, new C1<ClusterNode, ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,406,return e;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,410,locJoinEvt.onDone(discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1099,return resolveDiscoCache(cacheName, topVer).cacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1108,public Collection<ClusterNode> cacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1109,return resolveDiscoCache(null, topVer).allNodesWithCaches(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1129,public Collection<ClusterNode> remoteCacheNodes(AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1130,return resolveDiscoCache(null, topVer).remoteCacheNodes(topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1141,return resolveDiscoCache(cacheName, topVer).aliveCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1152,return resolveDiscoCache(cacheName, topVer).aliveRemoteCacheNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1183,return resolveDiscoCache(cacheName, topVer).cacheAffinityNodes(cacheName, topVer.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1239,public boolean hasNearCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1240,return resolveDiscoCache(cacheName, topVer).hasNearCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1250,private DiscoCache resolveDiscoCache(@Nullable String cacheName, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1265,throw new IgniteException("Failed to resolve nodes topology [cacheName=" + cacheName +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1314,return locJoinEvt.get();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1437,discoWrk.addEvent(EVT_NODE_SEGMENTED, AffinityTopologyVersion.NONE, getSpi().getLocalNode(),
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1438,Collections.<ClusterNode>emptyList(), null);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1480,private void recordEvent(int type, long topVer, ClusterNode node, Collection<ClusterNode> topSnapshot) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1510,ctx.event().record(evt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1683,ctx.event().record(customEvt);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1697,recordEvent(type, topVer.topologyVersion(), node, evt.get4());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1914,private class DiscoCache {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1916,private final List<ClusterNode> rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1919,private final List<ClusterNode> allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1923,private final Collection<ClusterNode> allNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1927,private final Collection<ClusterNode> rmtNodesWithCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1931,private final Map<String, Collection<ClusterNode>> allCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1935,private final Map<String, Collection<ClusterNode>> rmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1939,private final Map<String, Collection<ClusterNode>> affCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1943,private final Set<String> nearEnabledCaches;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1946,private final NavigableMap<IgniteProductVersion, Collection<ClusterNode>> nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1949,private final List<ClusterNode> daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1952,private final Map<UUID, ClusterNode> nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1955,private final ClusterNode loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1958,private final long maxOrder;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1964,private final ConcurrentMap<String, Collection<ClusterNode>> aliveCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1970,private final ConcurrentMap<String, Collection<ClusterNode>> aliveRmtCacheNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1986,private DiscoCache(ClusterNode loc, Collection<ClusterNode> rmts) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1987,this.loc = loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1991,assert !rmtNodes.contains(loc) : "Remote nodes collection shouldn't contain local node" +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1994,List<ClusterNode> all = new ArrayList<>(rmtNodes.size() + 1);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1997,all.add(loc);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1999,all.addAll(rmtNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2001,allNodes = Collections.unmodifiableList(all);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2009,Collection<ClusterNode> nodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2010,Collection<ClusterNode> rmtNodesWithCaches = new HashSet<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2012,aliveCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2013,aliveRmtCacheNodes = new ConcurrentHashMap8<>(allNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2016,nodesByVer = new TreeMap<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2018,long maxOrder0 = 0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2020,Set<String> nearEnabledSet = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2022,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2023,assert node.order() != 0 : "Invalid node order [locNode=" + loc + ", node=" + node + ']';
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2026,maxOrder0 = node.order();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2028,boolean hasCaches = false;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2030,for (Map.Entry<String, CachePredicate> entry : registeredCaches.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2031,String cacheName = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2033,CachePredicate filter = entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2035,if (filter.cacheNode(node)) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2036,nodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2039,rmtNodesWithCaches.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2041,addToMap(cacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2044,addToMap(aliveCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2047,addToMap(dhtNodesMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2050,nearEnabledSet.add(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2052,if (!loc.id().equals(node.id())) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2053,addToMap(rmtCacheMap, cacheName, node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2056,addToMap(aliveRmtCacheNodes, maskNull(cacheName), node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2059,hasCaches = true;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2072,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2075,Collection<ClusterNode> nodes = nodesByVer.get(nodeVer);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2077,if (nodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2078,nodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2080,nodesByVer.put(nodeVer, nodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2083,nodes.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2087,for (ClusterNode node : allNodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2088,IgniteProductVersion nodeVer = U.productVersion(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2091,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> updateView =
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2092,nodesByVer.headMap(nodeVer, false);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2095,prevVersions.add(node);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2098,maxOrder = maxOrder0;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2100,allCacheNodes = Collections.unmodifiableMap(cacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2101,rmtCacheNodes = Collections.unmodifiableMap(rmtCacheMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2102,affCacheNodes = Collections.unmodifiableMap(dhtNodesMap);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2103,allNodesWithCaches = Collections.unmodifiableCollection(nodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2104,this.rmtNodesWithCaches = Collections.unmodifiableCollection(rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2105,nearEnabledCaches = Collections.unmodifiableSet(nearEnabledSet);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2107,daemonNodes = Collections.unmodifiableList(new ArrayList<>(
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2110,Map<UUID, ClusterNode> nodeMap = new HashMap<>(allNodes().size() + daemonNodes.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2113,nodeMap.put(n.id(), n);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2115,this.nodeMap = nodeMap;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2125,private void addToMap(Map<String, Collection<ClusterNode>> cacheMap, String cacheName, ClusterNode rich) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2126,Collection<ClusterNode> cacheNodes = cacheMap.get(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2128,if (cacheNodes == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2129,cacheNodes = new ArrayList<>(allNodes.size());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2131,cacheMap.put(cacheName, cacheNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2134,cacheNodes.add(rich);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2138,ClusterNode localNode() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2139,return loc;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2143,Collection<ClusterNode> remoteNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2144,return rmtNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2148,Collection<ClusterNode> allNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2149,return allNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2165,Collection<ClusterNode> elderNodes(IgniteProductVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2166,Map.Entry<IgniteProductVersion, Collection<ClusterNode>> entry = nodesByVer.ceilingEntry(ver);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2169,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2171,return entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2177,NavigableMap<IgniteProductVersion, Collection<ClusterNode>> versionsMap() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2178,return nodesByVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2187,Collection<ClusterNode> allNodesWithCaches(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2188,return filter(topVer, allNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2198,Collection<ClusterNode> cacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2199,return filter(topVer, allCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2219,Collection<ClusterNode> remoteCacheNodes(final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2220,return filter(topVer, rmtNodesWithCaches);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2231,Collection<ClusterNode> cacheAffinityNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2232,return filter(topVer, affCacheNodes.get(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2242,Collection<ClusterNode> aliveCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2243,return filter(topVer, aliveCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2253,Collection<ClusterNode> aliveRemoteCacheNodes(@Nullable String cacheName, final long topVer) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2254,return filter(topVer, aliveRmtCacheNodes.get(maskNull(cacheName)));
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2283,boolean hasNearCache(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2284,return nearEnabledCaches.contains(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2292,void updateAlives(ClusterNode leftNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2294,return;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2296,filterNodeMap(aliveCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2298,filterNodeMap(aliveRmtCacheNodes, leftNode);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2310,private void filterNodeMap(ConcurrentMap<String, Collection<ClusterNode>> map, final ClusterNode exclNode) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2311,for (String cacheName : registeredCaches.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2312,String maskedName = maskNull(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2314,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2315,Collection<ClusterNode> oldNodes = map.get(maskedName);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2318,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2320,Collection<ClusterNode> newNodes = new ArrayList<>(oldNodes);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2323,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2326,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2337,private String maskNull(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2338,return cacheName == null ? NULL_CACHE_NAME : cacheName;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2346,private Collection<ClusterNode> filter(final long topVer, @Nullable Collection<ClusterNode> nodes) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2348,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2351,return nodes.isEmpty() || topVer < 0 || topVer >= maxOrder ?
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2352,nodes :
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2353,F.view(nodes, new P1<ClusterNode>() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2355,return node.order() <= topVer;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2361,Collection<ClusterNode> daemonNodes() {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2362,return daemonNodes;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2370,return nodeMap.get(id);
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2375,return S.toString(DiscoCache.class, this, "allNodesWithDaemons", U.toShortString(allNodes));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,550,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,575,getOrCreate(type).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,582,getOrCreate(t).add(lsnr);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,598,private Collection<GridLocalEventListener> getOrCreate(Integer type) {
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,599,Set<GridLocalEventListener> set = lsnrs.get(type);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,604,Set<GridLocalEventListener> prev = lsnrs.putIfAbsent(type, set);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,145,public List<List<ClusterNode>> calculate(AffinityTopologyVersion topVer, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityAssignmentCache.java,166,sorted = new ArrayList<>(ctx.discovery().cacheAffinityNodes(cacheName, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,103,private final GridLocalEventListener discoLsnr = new GridLocalEventListener() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,109,DiscoveryEvent e = (DiscoveryEvent)evt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,113,assert e.type() == EVT_NODE_JOINED || e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,114,e.type() == EVT_DISCOVERY_CUSTOM_EVT;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,116,final ClusterNode n = e.eventNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,121,if (e.type() != EVT_DISCOVERY_CUSTOM_EVT) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,124,if (e.type() == EVT_NODE_LEFT || e.type() == EVT_NODE_FAILED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,132,e.type() != EVT_NODE_JOINED || n.order() > loc.order() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,137,affinityTopologyVersion(e),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,138,e.type());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,143,DiscoveryCustomEvent customEvt = (DiscoveryCustomEvent)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,173,exchFut.onEvent(exchId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,210,cctx.gridEvents().addLocalEventListener(discoLsnr, EVT_NODE_JOINED, EVT_NODE_LEFT, EVT_NODE_FAILED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,246,DiscoveryEvent discoEvt = cctx.discovery().localJoinEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,638,fut.onEvent(exchId, discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,345,ClusterNode n = cctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,371,Collection<UUID> allIds = topVer.topologyVersion() > 0 ? F.nodeIds(CU.allNodes(cctx, topVer)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,394,ClusterNode n = cctx.discovery().node(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,962,Collection<UUID> nodeIds = F.nodeIds(nodes(p, topVer, OWNING));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,980,List<ClusterNode> sorted = new ArrayList<>(cctx.discovery().nodes(nodeIds));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,983,Collections.sort(sorted, CU.nodeComparator(true));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,985,int diff = sorted.size() - affCnt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,988,ClusterNode n = sorted.get(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1686,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1913,boolean checkReaders = hasNear || ctx.discovery().hasNearCache(name(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,372,public void onEvent(GridDhtPartitionExchangeId exchId, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,822,topSnapshot.set(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,87,private GridLocalEventListener topLsnr = new TopologyListener();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1033,private class TopologyListener implements GridLocalEventListener {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,813,comp.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAssignmentFetchFuture.java,185,U.error(log0, "Failed to request affinity assignment from remote node (will " +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,203,U.shutdownNow(GridServiceProcessor.class, depExe, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1040,depExe.submit(new BusyRunnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,36,private final AtomicBoolean starting = new AtomicBoolean(false);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,35,public class FifoEvictionPolicy<K, V> implements EvictionPolicy<K, V>, FifoEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,61,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,70,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,81,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,100,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,102,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,106,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,108,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,109,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,112,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,120,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,158,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,159,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,179,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/fifo/FifoEvictionPolicy.java,184,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,35,public class LruEvictionPolicy<K, V> implements EvictionPolicy<K, V>, LruEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,61,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,70,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,81,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,100,if (!rmv) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,102,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,105,shrink();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,107,else {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,108,Node<EvictableEntry<K, V>> node = entry.removeMeta();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,111,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,119,private boolean touch(EvictableEntry<K, V> entry) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,129,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,137,queue.unlinkx(node);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,149,else if (queue.unlinkx(node)) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,155,queue.unlinkx(newNode);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,165,private void shrink() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,166,int max = this.max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,186,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,191,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/lru/LruEvictionPolicy.java,196,return S.toString(LruEvictionPolicy.class, this, "size", queue.sizex());
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,37,public class RandomEvictionPolicy<K, V> implements EvictionPolicy<K, V>, RandomEvictionPolicyMBean, Externalizable {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,39,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,47,public RandomEvictionPolicy() {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,56,public RandomEvictionPolicy(int max) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,57,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,59,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,68,return max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,77,A.ensure(max > 0, "max > 0");
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,79,this.max = max;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,86,return;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,88,IgniteCache<K, V> cache = entry.unwrap(IgniteCache.class);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,92,for (int i = max; i < size; i++) {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,93,Cache.Entry<K, V> e = cache.randomEntry();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,96,e.unwrap(EvictableEntry.class).evict();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,102,out.writeInt(max);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,107,max = in.readInt();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicy.java,112,return S.toString(RandomEvictionPolicy.class, this);
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,18,package org.apache.ignite.cache.eviction.random;
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,26,public interface RandomEvictionPolicyMBean {
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,33,public int getMaxSize();
modules/core/src/main/java/org/apache/ignite/cache/eviction/random/RandomEvictionPolicyMBean.java,41,public void setMaxSize(int max);
modules/core/src/main/java/org/apache/ignite/internal/visor/util/VisorTaskUtils.java,621,return ((RandomEvictionPolicyMBean)plc).getMaxSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,89,private boolean callAsync(IgniteCallable<Integer> subJob, int idx) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,90,IgniteCompute compute = ignite.compute(ignite.cluster().forCacheNodes(cacheName)).withAsync();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,92,compute.call(subJob);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,94,IgniteFuture<Integer> fut = compute.future();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,111,IgniteCache cache = ignite.cache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,114,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,117,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,120,return null;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,138,private static class VisorCacheSizeCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,140,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,143,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,148,private VisorCacheSizeCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,149,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,154,return cache.size(CachePeekMode.PRIMARY);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,162,private static class VisorCacheClearCallable implements IgniteCallable<Integer> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,164,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,167,private final IgniteCache cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,172,private VisorCacheClearCallable(IgniteCache cache) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,173,this.cache = cache;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,178,cache.clear();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheClearTask.java,180,return 0;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,188,private GridSqlElement parseTable(TableFilter filter) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,196,else if (tbl instanceof TableView) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1953,Collection<String> idxFields = e.getValue().fields();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1958,descendings.add(idxField);
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,159,return new Date(revTs);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1126,Server web = new Server(webSrv, "-webPort", "0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,774,boolean keyPrimary = ctx.affinity().primary(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,783,boolean keyBackup = ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,804,nearKey = !ctx.affinity().belongs(ctx.localNode(), part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,174,public List<ClusterNode> nodes(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,175,return nodes(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,183,public List<ClusterNode> nodes(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,196,return primary(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,205,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,219,public boolean primary(ClusterNode n, Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,220,return F.eq(primary(key, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,229,public boolean primary(ClusterNode n, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,230,return F.eq(primary(part, topVer), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,238,public Collection<ClusterNode> backups(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,239,return backups(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,247,public Collection<ClusterNode> backups(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,248,List<ClusterNode> nodes = nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,263,public Collection<ClusterNode> remoteNodes(Iterable keys, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,264,Collection<Collection<ClusterNode>> colcol = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,267,colcol.add(nodes(key, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,269,return F.view(F.flatCollections(colcol), F.remoteNodes(cctx.localNodeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,277,public boolean localNode(Object key, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,278,return localNode(partition(key), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,286,public boolean localNode(int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,289,return nodes(part, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,298,public boolean belongs(ClusterNode node, int part, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,302,return nodes(part, topVer).contains(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1672,public boolean hasKey(Iterable<? extends K> keys, Collection<Integer> movingParts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1673,for (K key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1675,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1678,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,875,if (cctx.affinity().backups(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1259,assert ctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1260,assert key != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1262,CacheConfiguration cfg = ctx.cache().configuration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1265,return ctx.localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,66,return cctx.affinity().primary(n, key, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,73,return cctx.affinity().backups(key, topologyVersion()).contains(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,114,for (ClusterNode affNode : cctx.affinity().nodes(part, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,130,return F.first(cctx.affinity().nodes(part, topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,176,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,198,return cctx.affinity().nodes(partition(key), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,205,return cctx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,683,List<ClusterNode> nodes = ctx.affinity().nodes(e.getKey(), topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,377,if (cctx.affinity().belongs(node, partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,532,return cctx.affinity().primary(cctx.localNode(), id, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,418,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,234,return !cacheCtx.affinity().backups(key, topVer).contains(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1796,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1925,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1948,return ctx.affinity().primary(ctx.localNode(), key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1987,boolean primary = !req.fastMap() || ctx.affinity().primary(ctx.localNode(), entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2073,if (!ctx.affinity().belongs(node, entry.partition(), topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,133,return allowDetached && !ctx.affinity().primary(ctx.localNode(), key, topVer) ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,549,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,945,if (!cctx.affinity().primary(cctx.localNode(), key, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1025,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,605,if (!cctx.affinity().localNode(info.key(), cctx.affinity().affinityTopologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1147,ClusterNode primary = cctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,516,ClusterNode primary = ctx.affinity().primary(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,630,ClusterNode primary = ctx.affinity().primary(key, cand.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1429,List<ClusterNode> affNodes = cacheCtx.affinity().nodes(part, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,432,List<ClusterNode> nodes0 = ctx.affinity().nodes(hdrPart, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridSetQueryPredicate.java,89,return !filter || ctx.affinity().primary(ctx.localNode(), k, ctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1919,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5914,return ttl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5921,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5926,return CU.TTL_NOT_CHANGED;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3300,long ttl = ttlExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3302,long expTime = CU.toExpireTime(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,613,long ttl = req.accessTtl();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,615,final CacheExpiryPolicy expiryPlc = CacheExpiryPolicy.forAccess(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,375,flags = reader.readCollection("flags", MessageCollectionItemType.BOOLEAN);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,383,futId = reader.readIgniteUuid("futId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,391,keys = reader.readCollection("keys", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,399,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,407,readThrough = reader.readBoolean("readThrough");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,415,reload = reader.readBoolean("reload");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,423,skipVals = reader.readBoolean("skipVals");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,431,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,439,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,447,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,455,ver = reader.readMessage("ver");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,301,accessPolicy(cacheCtx, keys),
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,126,U.writeStringMap(out, req.properties());
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,243,req.properties(U.readStringMap(in));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,207,U.writeStringMap(out, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileImpl.java,225,props = U.readStringMap(in);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4620,public static void writeStringMap(DataOutput out, @Nullable Map<String, String> map) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4621,if (map != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4622,out.writeInt(map.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4624,for (Map.Entry<String, String> e : map.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4625,writeUTFStringNullable(out, e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4626,writeUTFStringNullable(out, e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4629,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4630,out.writeInt(-1);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4640,public static Map<String, String> readStringMap(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4641,int size = in.readInt();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4644,return null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4645,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4646,Map<String, String> map = U.newHashMap(size);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4649,map.put(readUTFStringNullable(in), readUTFStringNullable(in));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4651,return map;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4662,public static void writeUTFStringNullable(DataOutput out, @Nullable String val) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4663,if (val != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4664,out.writeBoolean(true);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4666,out.writeUTF(val);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4668,else
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4669,out.writeBoolean(false);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4679,public static String readUTFStringNullable(DataInput in) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,4680,return in.readBoolean() ? in.readUTF() : null;
modules/aws/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/s3/TcpDiscoveryS3IpFinder.java,240,s3 = cfg != null ? new AmazonS3Client(cred, cfg) : new AmazonS3Client(cred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,286,qryProc.onSwap(space, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,372,qryProc.remove(space, key, val);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,693,final String qry, @Nullable final Collection<Object> params, GridQueryTypeDescriptor type,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,731,sql = generateQuery(qry.getSql(), tblDesc);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,831,private String generateQuery(String qry, TableDescriptor tbl) throws IgniteCheckedException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,841,from = " FROM " + t +
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientConnectionManagerAdapter.java,289,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,52,private final Set<String> routerAddrs;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,82,routerAddrs = (!cfg.getRouters().isEmpty() && cfg.getServers().isEmpty()) ?
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,83,new HashSet<>(cfg.getRouters()) : null;
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,369,boolean router = routerAddrs == null ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,370,routerAddrs.contains(addr.getHostName() + ":" + addr.getPort()) ||
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,371,routerAddrs.contains(addr.getAddress().getHostAddress() + ":" + addr.getPort());
modules/core/src/main/java/org/apache/ignite/internal/client/impl/connection/GridClientTopology.java,374,F.containsAny(U.allLocalMACs(), node.attribute(ATTR_MACS).toString().split(", "));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,168,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,171,sb.a(cols[j]).a(" > ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,173,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,187,for (int cnt = keyCols.size(); cnt > 0; cnt--) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,190,sb.a(cols[j]).a(" <= ? ");
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,192,sb.a(cols[j]).a(" = ? AND ");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,419,AffinityTopologyVersion topVer = null;
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,146,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/cache/store/CacheLoadOnlyStoreAdapter.java,153,exec.submit(new Worker(c, buf, args));
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,134,public static final int DFLT_PUBLIC_THREAD_CNT = Math.max(8, AVAILABLE_PROC_CNT) * 2;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,545,public void start(final IgniteConfiguration cfg,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,887,private long lastCompletedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,891,return;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,893,ThreadPoolExecutor exec = (ThreadPoolExecutor)execSvc;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,902,interval + "ms, is executorService pool size large enough?)");
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,904,lastCompletedCnt = completedCnt;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1444,grid0.start(myCfg, utilityCacheExecSvc, marshCacheExecSvc, execSvc, sysExecSvc, p2pExecSvc, mgmtExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,451,ClusterNode node = ctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,453,if (node == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,455,log.debug("Ignoring message from dead node [senderId=" + nodeId + ", msg=" + msg + ']');
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,457,return; // We can't receive messages from non-discovered ones.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1371,execSvc.submit(jobs.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2730,A.notNull(key, "key", val, "val");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,131,preldr.onKernalStart();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,54,private Collection<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,127,return invalidParts;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,51,private final Marshaller jdkMarshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,54,private final GridKernalContext ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,64,public GridTcpMemcachedNioListener(IgniteLogger log, GridRestProtocolHandler hnd, GridKernalContext ctx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpMemcachedNioListener.java,67,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,98,memcachedLsnr = new GridTcpMemcachedNioListener(log, hnd, ctx);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,195,return new ChainFuture<>(this, doneCb);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,449,IgniteClosure<? super IgniteInternalFuture<R>, T> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,454,fut.listen(new GridFutureChainListener<>(this, doneCb));
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,28,public class GridFutureChainListener<T, R> implements IgniteInClosure<IgniteInternalFuture<T>> {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,45,IgniteClosure<? super IgniteInternalFuture<T>, R> doneCb
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridAbstractCommunicationClient.java,41,protected GridAbstractCommunicationClient(@Nullable GridNioMetricsListener metricsLsnr) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,70,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioAsyncNotifyFilter.java,110,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,81,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,86,return proceedSessionWrite(ses, res);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,111,public GridNioFuture<?> proceedSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilter.java,155,public GridNioFuture<?> onSessionWrite(GridNioSession ses, Object msg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterAdapter.java,114,return nextFilter.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,184,return tail.onSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,259,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,37,private final ArrayDeque<GridNioFuture<?>> msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,77,public GridNioRecoveryDescriptor(int queueLimit, ClusterNode node, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,81,msgFuts = new ArrayDeque<>(queueLimit);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,152,public boolean add(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,153,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,155,if (!fut.skipRecovery()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,157,msgFuts.addLast(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,159,return msgFuts.size() < queueLimit;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,177,GridNioFuture<?> fut = msgFuts.pollFirst();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,191,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,197,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,199,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,204,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,210,public Deque<GridNioFuture<?>> messagesFutures() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,211,return msgFuts;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,250,public void connected() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,275,GridNioFuture<?>[] futs = null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,295,if (nodeLeft && !msgFuts.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,296,futs = msgFuts.toArray(new GridNioFuture<?>[msgFuts.size()]);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,298,msgFuts.clear();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,303,completeOnNodeLeft(futs);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioRecoveryDescriptor.java,355,private void completeOnNodeLeft(GridNioFuture<?>[] futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,62,public static final int DFLT_SEND_QUEUE_LIMIT = 1024;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,98,private int balanceIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,250,new DirectNioClientWorker(i, gridName, "grid-nio-worker-" + i, log) :
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,251,new ByteBufferNioClientWorker(i, gridName, "grid-nio-worker-" + i, log);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,330,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,340,GridNioFuture<?> send(GridNioSession ses, ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,341,assert ses instanceof GridSelectorNioSessionImpl;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,345,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,347,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,349,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,357,GridNioFuture<?> send(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,362,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,363,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,365,send0(impl, fut, false);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,367,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,375,private void send0(GridSelectorNioSessionImpl ses, NioOperationFuture<?> fut, boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,377,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,379,int msgCnt = sys ? ses.offerSystemFuture(fut) : ses.offerFuture(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,383,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,387,clientWorkers.get(ses.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,397,public GridNioFuture<?> sendSystem(GridNioSession ses, Message msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,398,return sendSystem(ses, msg, null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,409,public GridNioFuture<?> sendSystem(GridNioSession ses,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,416,NioOperationFuture<?> fut = new NioOperationFuture<Void>(impl, NioOperation.REQUIRE_WRITE, msg,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,417,skipRecoveryPred.apply(msg));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,425,send0(impl, fut, true);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,427,return fut;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,436,GridNioRecoveryDescriptor recoveryDesc = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,438,if (recoveryDesc != null && !recoveryDesc.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,439,Deque<GridNioFuture<?>> futs = recoveryDesc.messagesFutures();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,446,GridNioFuture<?> fut0 = futs.iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,448,for (GridNioFuture<?> fut : futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,451,((NioOperationFuture)fut).resetSession(ses0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,457,clientWorkers.get(ses0.selectorIndex()).offer(((NioOperationFuture)fut0));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,466,GridNioFuture<?> pauseResumeReads(GridNioSession ses, NioOperation op) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,478,clientWorkers.get(impl.selectorIndex()).offer(fut);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,591,clientWorkers.get(balanceIdx).offer(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,593,balanceIdx++;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,697,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,703,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,706,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,711,buf = req.message();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,746,req.onDone();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,878,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,884,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,886,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,887,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,889,break;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,897,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,914,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,919,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1003,queue.remove(buf);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1021,NioOperationFuture<?> req = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1029,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1031,if (req == null && buf.position() == 0) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1032,key.interestOps(key.interestOps() & (~SelectionKey.OP_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1034,return;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1042,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1044,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1061,req = (NioOperationFuture<?>)ses.pollFuture();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1066,msg = req.directMessage();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1121,private abstract class AbstractNioClientWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1180,private void offer(NioOperationFuture req) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1192,private void bodyInternal() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1195,NioOperationFuture req;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1197,while ((req = changeReqs.poll()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1198,switch (req.operation()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1200,register(req);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1205,case REQUIRE_WRITE: {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1207,SelectionKey key = req.session().key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1209,if (key.isValid()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1210,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1213,((GridNioSessionImpl)key.attachment()).bytesSent(0);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1416,idx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1483,Socket sock = ((SocketChannel)key.channel()).socket();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1527,NioOperationFuture<?> fut = ses.removeMeta(NIO_OPERATION.ordinal());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1529,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1531,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1534,while ((fut = (NioOperationFuture<?>)ses.pollFuture()) != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1536,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1540,recovery.release();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1545,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1548,fut.connectionClosed();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1744,private enum NioOperation {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1764,private static class NioOperationFuture<R> extends GridNioFutureImpl<R> {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1779,private ByteBuffer msg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1782,private Message commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1841,NioOperationFuture(GridSelectorNioSessionImpl ses, NioOperation op,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1842,ByteBuffer msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1870,this.commMsg = commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1877,private NioOperation operation() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1884,private ByteBuffer message() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1891,private Message directMessage() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1892,return commMsg;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1898,private void resetSession(GridSelectorNioSessionImpl ses) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1899,assert commMsg != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1901,this.ses = ses;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1907,private SocketChannel socketChannel() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1914,private GridSelectorNioSessionImpl session() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1935,private void connectionClosed() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1936,assert op == NioOperation.REQUIRE_WRITE;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1937,assert ses != null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1939,onDone(new IOException("Failed to send message (connection was closed): " + ses));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1992,SelectionKey key = ((GridSelectorNioSessionImpl)ses).key();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1995,key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2000,return send(ses, (Message)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,2003,return send(ses, (ByteBuffer)msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSession.java,162,public void recoveryDescriptor(GridNioRecoveryDescriptor recoveryDesc);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionImpl.java,102,return chain().onSessionWrite(this, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,40,private final ConcurrentLinkedDeque8<GridNioFuture<?>> queue = new ConcurrentLinkedDeque8<>();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,47,private final int selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,50,private final AtomicInteger queueSize = new AtomicInteger();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,63,private GridNioRecoveryDescriptor recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,83,int selectorIdx,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,94,assert selectorIdx >= 0;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,104,this.selectorIdx = selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,127,assert this.key == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,156,int selectorIndex() {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,157,return selectorIdx;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,166,int offerSystemFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,173,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,186,int offerFuture(GridNioFuture<?> writeFut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,198,return queueSize.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,204,void resend(Collection<GridNioFuture<?>> futs) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,211,boolean set = queueSize.compareAndSet(0, futs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,213,assert set;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,220,GridNioFuture<?> last = queue.poll();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,223,queueSize.decrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,228,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,229,if (!recovery.add(last)) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,252,boolean removeFuture(GridNioFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,264,return queueSize.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,271,recovery = recoveryDesc;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,276,return recovery;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,281,if (val instanceof GridNioRecoveryDescriptor) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,282,recovery = (GridNioRecoveryDescriptor)val;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,285,recovery.connected();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,44,public GridTcpNioCommunicationClient(GridNioSession ses, IgniteLogger log) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,45,super(null);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,103,assert nodeId == null;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,105,GridNioFuture<?> fut = ses.send(msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,107,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,108,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,109,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,111,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,113,log.debug("Failed to send message [client=" + this + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,116,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,117,else
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridTcpNioCommunicationClient.java,118,throw new IgniteCheckedException("Failed to send message [client=" + this + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,233,return proceedSessionWrite(ses, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,390,req.future().onDone((GridNioFuture<Object>)parent.proceedSessionWrite(ses, req.buffer()));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslHandler.java,435,return parent.proceedSessionWrite(ses, cp);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,186,public static final int DFLT_SELECTORS_CNT = Math.min(4, Runtime.getRuntime().availableProcessors());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,189,private static final int NODE_ID_META = GridNioSessionMetaKey.nextUniqueKey();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,204,public static final int DFLT_ACK_SND_THRESHOLD = 16;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,250,UUID id = ses.meta(NODE_ID_META);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,252,if (id != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,407,GridNioRecoveryDescriptor recovery = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,409,if (recovery != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,410,if (msg instanceof RecoveryLastReceivedMessage) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,414,log.debug("Received recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,421,else {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,426,log.debug("Send recovery acknowledgement [rmtNode=" + sndId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,429,nioSrvr.sendSystem(ses, new RecoveryLastReceivedMessage(rcvCnt));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,455,notifyListener(sndId, msg, c);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,475,ses.recoveryDescriptor(recovery);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,482,recovery.connected();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,539,IgniteInClosure<IgniteInternalFuture<?>> lsnr = new IgniteInClosure<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,541,try {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,542,msgFut.get();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,544,GridTcpNioCommunicationClient client =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,547,fut.onDone(client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,549,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,551,log.debug("Failed to send recovery handshake " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,554,recoveryDesc.release();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,556,fut.onDone();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,558,finally {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,559,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,571,clientFuts.remove(rmtNode.id(), fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,666,private final ConcurrentMap<UUID, GridCommunicationClient> clients = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,713,private final ConcurrentMap<UUID, GridFutureAdapter<GridCommunicationClient>> clientFuts =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,717,private final ConcurrentMap<ClientKey, GridNioRecoveryDescriptor> recoveryDescs = GridConcurrentFactory.newMap();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1440,log.info("Successfully bound to TCP port [port=" + boundTcpPort +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1486,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1509,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1522,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1524,if (client != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1526,log.debug("Forcing NIO client close since node has left [nodeId=" + nodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1529,client.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1531,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1576,client = reserveClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1618,private GridCommunicationClient reserveClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1624,GridCommunicationClient client = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1633,GridFutureAdapter<GridCommunicationClient> oldFut = clientFuts.putIfAbsent(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1637,GridCommunicationClient client0 = clients.get(nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1640,client0 = createNioClient(node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1643,GridCommunicationClient old = clients.put(nodeId, client0);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1645,assert old == null : "Client already created " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1661,clientFuts.remove(nodeId, fut);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1684,clients.remove(nodeId, client);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1709,protected GridCommunicationClient createTcpClient(ClusterNode node) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1792,meta.put(NODE_ID_META, node.id());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1802,client = new GridTcpNioCommunicationClient(ses, log);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1966,recovery.incrementConnectCount(),
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1972,buf = ByteBuffer.allocate(33);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2067,private GridNioRecoveryDescriptor recoveryDescriptor(ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2068,ClientKey id = new ClientKey(node.id(), node.order());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2070,GridNioRecoveryDescriptor recovery = recoveryDescs.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2075,int queueLimit = unackedMsgsBufSize != 0 ? unackedMsgsBufSize : (maxSize * 5);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2077,GridNioRecoveryDescriptor old =
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2078,recoveryDescs.putIfAbsent(id, recovery = new GridNioRecoveryDescriptor(queueLimit, node, log));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2103,private static class ClientKey {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2105,private UUID nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2108,private long order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2114,private ClientKey(UUID nodeId, long order) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2115,this.nodeId = nodeId;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2116,this.order = order;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2122,return true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2125,return false;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2127,ClientKey other = (ClientKey)obj;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2129,return order == other.order && nodeId.equals(other.nodeId);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2135,int res = nodeId.hashCode();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2137,res = 31 * res + (int)(order ^ (order >>> 32));
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2139,return res;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2144,return S.toString(ClientKey.class, this);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2711,buf.put(HANDSHAKE_MSG_TYPE);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,181,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,204,evtProcSvc.submit(new EventHandler() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1278,return proceedSessionWrite(ses, msg);
modules/tools/src/main/java/org/apache/ignite/tools/classgen/ClassesGenerator.java,103,throw new Exception(sb.toString().trim());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,48,private static final ConcurrentHashMap<String, IgniteInternalFuture<GridClient>> cliMap = new ConcurrentHashMap<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,90,private static ClientProtocol createProtocol(String addr, Configuration conf) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,102,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,105,if (fut == null) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,106,GridFutureAdapter<GridClient> fut0 = new GridFutureAdapter<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,111,return oldFut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,112,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,113,GridClientConfiguration cliCfg = new GridClientConfiguration();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,115,cliCfg.setProtocol(TCP);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,117,cliCfg.setMarshaller(new GridClientJdkMarshaller());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,118,cliCfg.setDaemon(true);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,120,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,121,GridClient cli = GridClientFactory.start(cliCfg);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,123,fut0.onDone(cli);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,125,return cli;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,127,catch (GridClientException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,128,fut0.onDone(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,135,return fut.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopClientProtocolProvider.java,137,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3982,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,422,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,439,true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,468,public <R> IgniteInternalFuture<R> callAsyncNoFailover(GridClosureCallMode mode, @Nullable Callable<R> job,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,499,public <R> IgniteInternalFuture<Collection<R>> callAsyncNoFailover(GridClosureCallMode mode,
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,501,boolean sys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,702,boolean loc = ctx.localNodeId().equals(sndNode.id()) && !ctx.config().isMarshalLocalJobs();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,704,Map<Object, Object> attrs = jobCtx.getAttributes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4801,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4803,return ctx.preloader().syncFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,469,public void forcePreloadExchange(GridDhtPartitionsExchangeFuture exchFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,471,new GridDhtPartitionsExchangeFuture(cctx, exchFut.discoveryEvent(), exchFut.exchangeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePreloader.java,124,public void forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1491,ctx.preloader().forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1493,return new IgniteFutureImpl<>(ctx.preloader().syncFuture());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,183,GridDhtPartitionExchangeId exchId) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,523,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1634,entry.versionedValue(ctx.toCacheObject(v), null, ver);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,503,setFilters(filters);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,505,try {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,524,setFilters(null);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,901,LT.warn(log, null, "Possible thread pool starvation detected (no task completed in last " +
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentPerVersionStore.java,295,LT.warn(log, null, "Local node is in participants (most probably, " +
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,689,LT.warn(log, null, "Failed to check network segment (retrying every 2000 ms).");
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,258,LT.warn(log, null, "Trying to record event without checking if it is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,375,LT.warn(log, null, "Ignoring deployment in PRIVATE or ISOLATED mode " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheDeploymentManager.java,384,LT.warn(log, null, "Local and remote deployment mode mismatch (please fix configuration and restart) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,246,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,256,LT.warn(log, null, "Failed to find event node in grid topology history " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,317,LT.warn(log, null, "Added event without checking if event is recordable: " + U.gridEventName(type));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,330,LT.warn(log, null, "Added event without checking if event is recordable: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockSyncProcessor.java,433,LT.warn(log, e, "Failed to send time request to remote node [rmtNodeId=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,415,LT.warn(log, e, "Failed to get fragmentizer file info (will retry).");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1347,LT.warn(log, e, "Failed to get secondary file system consumed space size.");
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,521,LT.warn(log, null, "Number of jobs in task is too large for task: " + ses.getTaskName() +
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,86,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,100,public static void warn(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,135,private static void log(@Nullable IgniteLogger log, @Nullable Throwable e, String longMsg, @Nullable String shortMsg,
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,282,LT.warn(log, null, msg);
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,288,LT.warn(log, null, OUT_OF_RESOURCES_MSG);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridConnectionBytesVerifyFilter.java,117,LT.warn(log, null, "Unknown connection detected (is some other software connecting to this " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioCodecFilter.java,112,LT.warn(log, null, "Parser returned null but there are still unread data in input buffer (bug in " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioFilterChain.java,160,LT.warn(log, ex, "Failed to forward GridNioException to filter chain [ses=" + ses + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,673,LT.warn(log, null, "Read buffer contains data after filter chain processing (will discard " +
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridSelectorNioSessionImpl.java,230,LT.warn(log, null, "Unacknowledged messages queue size overflow, will attempt to reconnect " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,229,LT.warn(log, null, "Communication SPI Session write timed out (consider increasing " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1866,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1897,LT.warn(log, null, "Failed to connect to a remote node " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,452,LT.warn(log, e, "Failed to deserialize multicast response.");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,825,LT.warn(log, null, OUT_OF_RESOURCES_TCP_MSG);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1028,LT.warn(log, null, "Connect timed out (consider increasing 'connTimeout' " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,1053,LT.warn(log, null, "Failed to connect to a remote Hadoop process (is process still running?). " +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,632,LT.warn(log, null, longMsg, msg);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,39,private static final Collection<String> CONVERTED_ERR = F.asList(
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,43,);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,130,try {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,131,writeObject0(obj);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,133,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,134,Throwable t = e;
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,136,do {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,138,throw new IOException("You are trying to serialize internal classes that are not supposed " +
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,142,while ((t = t.getCause()) != null);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedObjectOutputStream.java,144,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,849,boolean startEvtFired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,921,if (!cacheCtx.isReplicated() || !startEvtFired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,922,DiscoveryEvent discoEvt = exchFut.discoveryEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,924,cacheCtx.events().addPreloadEvent(-1, EVT_CACHE_REBALANCE_STARTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,925,discoEvt.eventNode(), discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,930,startEvtFired = true;
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1435,return cfg.getConnectorConfiguration() != null;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1486,T val = cls == String.class ? (T)String.valueOf(curr.get(colIdx - 1)) : (T)curr.get(colIdx - 1);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcResultSet.java,1490,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1619,colIdxs.put(meta.getColumnLabel(i), i);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,152,return String.format("SELECT %s FROM (SELECT %s, ROWNUM() AS rn FROM %s ORDER BY %s) WHERE mod(rn, ?) = 0",
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,153,cols, cols, fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,234,U.error(null, "Failed to notify listener: " + lsnr, e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,104,addPage0(page);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,111,assert !cnt.initialized : "Counter is already initialized.";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,113,cnt.addAndGet(allRows);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,118,cnt.initialized = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,121,if (cnt.addAndGet(-pageRowsCnt) == 0) { // Result can be negative in case of race between messages, it is ok.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,122,boolean last = true;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,124,for (Counter c : remainingRows.values()) { // Check all the sources.
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,125,if (c.get() != 0 || !c.initialized) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,126,last = false;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,128,break;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,351,volatile boolean initialized;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1555,IgniteBiTuple<Collection<String>, Collection<String>> res = cachedLocalAddr;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1558,List<InetAddress> localAddrs = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1563,localAddrs.add(addr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1567,localAddrs = filterReachable(localAddrs);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1570,addresses(addr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1577,cachedLocalAddr = res;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1583,addresses(locAddr, addrs, hostNames);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1593,private static void addresses(InetAddress addr, Collection<String> addrs, Collection<String> hostNames) {
modules/core/src/main/java/org/apache/ignite/internal/visor/misc/VisorResolveHostNameTask.java,66,IgniteUtils.resolveLocalAddresses(InetAddress.getByName("0.0.0.0"));
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,525,int len = bytes.length;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,528,for (int i = 0; i < align && i < len; i++) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMemory.java,532,ptr++;
modules/core/src/main/java/org/apache/ignite/spi/loadbalancing/roundrobin/RoundRobinGlobalLoadBalancer.java,111,EVT_NODE_FAILED, EVT_NODE_JOINED, EVT_NODE_LEFT
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentRequest.java,128,return S.toString(GridDhtAffinityAssignmentRequest.class, this);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioSessionMetaKey.java,30,SSL_HANDLER,
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,137,SSLEngine engine = sslCtx.createSSLEngine();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,139,engine.setUseClientMode(clientMode);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,141,if (!clientMode) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,142,engine.setWantClientAuth(wantClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,144,engine.setNeedClientAuth(needClientAuth);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,148,engine.setEnabledCipherSuites(enabledCipherSuites);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,151,engine.setEnabledProtocols(enabledProtos);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,156,ses.addMeta(SSL_HANDLER.ordinal(), hnd);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/ssl/GridNioSslFilter.java,360,GridNioSslHandler hnd = ses.meta(SSL_HANDLER.ordinal());
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1790,Map<Integer, Object> meta = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3844,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3887,else
modules/core/src/main/java/org/apache/ignite/cache/affinity/rendezvous/RendezvousAffinityFunction.java,293,byte[] nodeHashBytes = ignite.configuration().getMarshaller().marshal(nodeHash);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,266,filterBytes = ctx.config().getMarshaller().marshal(filter);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,376,bytes = marsh.marshal(evt);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,390,evt = marsh.unmarshal(bytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingsResponse.java,76,siblings = marsh.unmarshal(siblingsBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,125,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,127,predBytes = ctx.config().getMarshaller().marshal(pred);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,73,byte[] bytes = opMarsh.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/client/marshaller/optimized/GridClientOptimizedMarshaller.java,93,return opMarsh.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,49,return MARSHALLER.marshal(args);
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcUtils.java,78,return MARSHALLER.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,140,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,171,byte[] data = state == null ? null : marsh.marshal(state);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,920,ioMsg.topicBytes(marsh.marshal(topic));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1127,serMsg = marsh.marshal(msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1130,serTopic = marsh.marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,439,req.responseTopicBytes(marsh.marshal(req.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,885,byte[] serFilter = marsh.marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,976,msg.responseTopicBytes(marsh.marshal(msg.responseTopic()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1090,res.eventsBytes(marsh.marshal(res.events()));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1091,res.exceptionBytes(marsh.marshal(res.exception()));
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,425,return marsh.unmarshal(swapBytes, ldr != null ? ldr : U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,435,private byte[] marshal(Object obj) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/managers/swapspace/GridSwapSpaceManager.java,436,return ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,71,ctx.config().getMarshaller().marshal(o),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,106,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1153,return ctx.marshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,215,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,123,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,106,affAssignmentBytes = ctx.marshaller().marshal(affAssignment);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,375,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,183,topicBytes = ctx.marshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,95,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,86,partsBytes = ctx.marshaller().marshal(parts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,185,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,105,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,271,rdc = mrsh.unmarshal(rdcBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,112,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,493,bytes = ctx.config().getMarshaller().marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,144,data = MARSHALLER.marshal(F.asList(schemasMap, indexesInfo));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcMetadataTask.java,154,data = MARSHALLER.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,67,Map<String, Object> args = MARSHALLER.unmarshal(arg, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,115,bytes = MARSHALLER.marshal(res.getData());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/jdbc/GridCacheQueryJdbcTask.java,120,bytes = MARSHALLER.marshal(new SQLException(res.getException().getMessage()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,236,keyBytes = marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,242,valBytes = marsh.marshal(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1046,closureBytes = marsh.marshal(c.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1189,msg.dataBytes(marsh.marshal(msg.data()));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,281,errBytes = err != null ? marsh.marshal(err) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1120,updaterBytes = ctx.config().getMarshaller().marshal(rcvr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1124,topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1245,err = ctx.config().getMarshaller().unmarshal(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,94,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,102,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,98,errBytes = marsh.marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,106,err = marsh.unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,358,loc ? null : marsh.marshal(attrs), attrs);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,470,loc ? null : marsh.marshal(topic)),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,985,sesAttrs = marsh.unmarshal(req.getSessionAttributesBytes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1284,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1286,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1288,loc ? null : marsh.marshal(null),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,710,loc ? null : marsh.marshal(ex),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,712,loc ? null: marsh.marshal(res),
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,714,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,107,return keyBytes != null ? keyBytes : marsh.marshal(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,109,res.resultBytes(ctx.config().getMarshaller().marshal(desc.result()));
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,463,byte[] topicBytes = ctx.config().getMarshaller().marshal(topic);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,695,return jdkMarshaller.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestParser.java,777,jdkMarshaller.marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,827,loc ? null : marsh.marshal(attrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1227,loc ? null : marsh.marshal(siblings)),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1119,loc ? null : marsh.marshal(res.getJob()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1124,loc ? null : marsh.marshal(ses.getJobSiblings()),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1126,loc ? null : marsh.marshal(sesAttrs),
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1128,loc ? null : marsh.marshal(jobAttrs),
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,77,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,100,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,101,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,185,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,209,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,210,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,238,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,239,throw new IgniteCheckedException("Failed to deserialize object with given class loader: " + clsLdr, e);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,59,return (SharedFsCheckpointData)m.unmarshal(in, U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsUtils.java,89,m.marshal(data, out);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,545,byte[] addrsData = marsh.marshal(addrs);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,564,addrs = marsh.unmarshal(Arrays.copyOfRange(data, U.IGNITE_HEADER.length, data.length), null);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,562,keyBytes = ignite.configuration().getMarshaller().marshal(key.key());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,30,private Marshaller marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,35,public HadoopMarshallerFilter(Marshaller marshaller) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,38,this.marshaller = marshaller;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,60,return proceedSessionWrite(ses, marshaller.marshal(msg));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopMarshallerFilter.java,67,proceedMessageReceived(ses, marshaller.unmarshal((byte[])msg, null));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1166,return marshaller.marshal(obj);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1522,U.setWorkDirectory(cfg.getWorkDirectory(), ggHome);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1533,IgniteLogger cfgLog = initLogger(cfg.getGridLogger(), nodeId);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1824,private IgniteLogger initLogger(@Nullable IgniteLogger cfgLog, UUID nodeId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServer.java,156,IpcSharedMemoryServerEndpoint endpoint = new IpcSharedMemoryServerEndpoint();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,133,private static volatile String igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8295,String igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8297,if (igniteWork0 == null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8298,synchronized (IgniteUtils.class) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8300,igniteWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8303,return;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8305,File workDir;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8308,workDir = new File(userWorkDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8310,workDir = new File(IGNITE_WORK_DIR);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8312,workDir = new File(userIgniteHome, "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8313,else {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8314,String tmpDirPath = System.getProperty("java.io.tmpdir");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8317,throw new IgniteCheckedException("Failed to create work directory in OS temp " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8320,workDir = new File(tmpDirPath, "ignite" + File.separator + "work");
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8324,throw new IgniteCheckedException("Work directory path must be absolute: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8327,throw new IgniteCheckedException("Work directory does not exist and cannot be created: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8330,throw new IgniteCheckedException("Cannot read from work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8333,throw new IgniteCheckedException("Cannot write to work directory: " + workDir);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8335,igniteWork = workDir.getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8351,igniteWork = null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8362,public static File resolveWorkDirectory(String path, boolean delIfExist) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8366,String ggWork0 = igniteWork;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8371,dir = new File(ggWork0, dir.getPath());
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,125,public IpcSharedMemoryServerEndpoint() {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,136,public IpcSharedMemoryServerEndpoint(IgniteLogger log, UUID locNodeId, String gridName) {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,166,tokDir = U.resolveWorkDirectory(tokDirPath, false);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLogger.java,352,fileHnd.nodeId(nodeId);
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,79,public void nodeId(UUID nodeId) throws IgniteCheckedException, IOException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,90,ptrn = new File(logDirectory(), ptrn.replace("%{id8}", U.id8(nodeId))).getAbsolutePath();
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,134,private static File logDirectory() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/logger/java/JavaLoggerFileHandler.java,135,return !F.isEmpty(U.IGNITE_LOG_DIR) ? new File(U.IGNITE_LOG_DIR) : U.resolveWorkDirectory("log", false);
modules/core/src/main/java/org/apache/ignite/spi/checkpoint/sharedfs/SharedFsCheckpointSpi.java,267,folder = U.resolveWorkDirectory(curDirPath, false);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/sharedfs/TcpDiscoverySharedFsIpFinder.java,138,tmp = U.resolveWorkDirectory(path, false);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,263,dir = U.resolveWorkDirectory(path, true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,87,outputBase = U.resolveWorkDirectory("hadoop", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,99,ctx.kernalContext().gridName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,361,Process proc = startJavaProcess(childProcId, startMeta, job);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,498,HadoopJob job) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java,506,File workDir = U.resolveWorkDirectory("", false);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/child/HadoopExternalProcessStarter.java,79,U.setWorkDirectory(args.workDir, U.getIgniteHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,236,String gridName
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/communication/HadoopExternalCommunication.java,660,locProcDesc.processId(), gridName);
modules/urideploy/src/main/java/org/apache/ignite/spi/deployment/uri/UriDeploymentSpi.java,1051,uri = U.resolveWorkDirectory(DFLT_DEPLOY_DIR, false).toURI();
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,63,return (SqlQuery<K, V>)super.setPageSize(pageSize);
modules/core/src/main/java/org/apache/ignite/cache/query/SpiQuery.java,68,return (SqlQuery<K, V>)super.setLocal(loc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,338,return new CacheEntryImpl<>(e.getKey(), e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,342,return cur != null || (cur = fut.next()) != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,603,if (qry.clause() == null) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7989,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,7990,Class<?> cls = obj.getClass();
modules/core/src/main/java/org/apache/ignite/internal/managers/loadbalancer/GridLoadBalancerManager.java,72,return getSpi(ses.getLoadBalancingSpi()).getBalancedNode(ses, top, job);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,391,internal = dep.internalTask(task, taskCls);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,223,catch (IgniteTxOptimisticCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,235,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,236,U.error(log, "Failed to invalidate transaction: " + tx, e);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1462,fullTblName = F.isEmpty(schema) ? tblName : schema + "." + tblName;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1466,cols = F.concat(false, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1475,loadCacheQry = dialect.loadCacheQuery(fullTblName, cols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1477,loadCacheSelRangeQry = dialect.loadCacheSelectRangeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1479,loadQrySingle = dialect.loadQuery(fullTblName, keyCols, cols, 1);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1481,maxKeysPerStmt = dialect.getMaxParameterCount() / keyCols.size();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1483,loadQry = dialect.loadQuery(fullTblName, keyCols, cols, maxKeysPerStmt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1485,insQry = dialect.insertQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1487,updQry = dialect.updateQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1489,mergeQry = dialect.mergeQuery(fullTblName, keyCols, uniqValCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1491,remQry = dialect.removeQuery(fullTblName, keyCols);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1522,return dialect.loadQuery(fullTblName, keyCols, cols, keyCnt);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1533,return dialect.loadCacheRangeQuery(fullTblName, keyCols, cols, appendLowerBound, appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/BasicJdbcDialect.java,246,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/DB2Dialect.java,35,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/H2Dialect.java,35,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,45,public String loadCacheRangeQuery(String fullTblName,
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/JdbcDialect.java,46,Collection<String> keyCols, Iterable<String> uniqCols, boolean appendLowerBound, boolean appendUpperBound);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/MySQLDialect.java,35,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/OracleDialect.java,35,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,35,Collection<String> uniqCols) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/dialect/SQLServerDialect.java,65,match, setCols, colsLst, valuesCols);
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,99,toJavaFieldName(colName), toJavaType(col.type(), col.nullable()).getName(),
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,459,private static Class<?> toJavaType(int type, boolean nullable) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,460,switch (type) {
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,466,return nullable ? Byte.class : byte.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,469,return nullable ? Short.class : short.class;
modules/schema-import/src/main/java/org/apache/ignite/schema/model/PojoDescriptor.java,472,return nullable ? Integer.class : int.class;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,635,String selQry = args[i + 1].toString();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,639,futs.add(pool.submit(new LoadCacheCustomQueryWorker<>(em, selQry, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,648,for (EntryMapping em : entryMappings) {
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,605,Space old = spaces.putIfAbsent(masked, space = new Space(masked));
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,803,private SwapValuesQueue(int minTakeSize, int maxSize) {
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,819,mayAdd.await();
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1385,private final SwapValuesQueue que = new SwapValuesQueue(writeBufSize, maxWriteQueSize);
modules/core/src/main/java/org/apache/ignite/spi/swapspace/file/FileSwapSpaceSpi.java,1409,private Space(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousHandler.java,56,public void onListenerRegistered(UUID routineId, GridKernalContext ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,360,if (registerHandler(data.nodeId, item.routineId, item.hnd, item.bufSize, item.interval,
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,362,item.hnd.onListenerRegistered(item.routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,390,hnd.onListenerRegistered(routineId, this.ctx);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,91,hadoopJobID = new JobID(jobId.globalId().toString(), jobId.localId());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,100,HadoopFileSystemsUtils.setupFileSystems(jobConf);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,102,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,105,jobConf.set(e.getKey(), e.getValue());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,107,jobCtx = new JobContextImpl(jobConf, hadoopJobID);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,124,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,176,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,238,Thread.currentThread().setContextClassLoader(jobConf.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,244,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,82,Thread.currentThread().setContextClassLoader(cfg.getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,91,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,108,Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,130,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,179,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,180,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,202,Thread.currentThread().setContextClassLoader(null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,233,Thread.currentThread().setContextClassLoader(jobConf().getClassLoader());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,248,Thread.currentThread().setContextClassLoader(null);
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,201,String gridNameR = t.get1();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1030,public static IgniteKernal gridx(@Nullable String name) {
modules/core/src/main/java/org/apache/ignite/internal/client/GridClientConfiguration.java,151,marshaller = cfg.getMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,657,IgniteKernal g = IgnitionEx.gridx(gridName);
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterNodeLocalMapImpl.java,86,return IgnitionEx.gridx(stash.get()).cluster().nodeLocalMap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4789,return IgnitionEx.gridx(t.get1()).cachex(t.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,2002,IgniteKernal grid = IgnitionEx.gridx(t.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,120,private Marshaller marshaller = new JdkMarshaller();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,41,this.ctx = ctx;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,46,GridByteArrayOutputStream out = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,48,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,49,out = new GridByteArrayOutputStream(DFLT_BUFFER_SIZE);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,51,marshal(obj, out);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,53,return out.toByteArray();
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,55,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,56,U.close(out, null);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,62,GridByteArrayInputStream in = null;
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,64,try {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,65,in = new GridByteArrayInputStream(arr, 0, arr.length);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,67,return unmarshal(in, clsLdr);
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,69,finally {
modules/core/src/main/java/org/apache/ignite/marshaller/AbstractMarshaller.java,70,U.close(in, null);
modules/core/src/main/java/org/apache/ignite/marshaller/jdk/JdkMarshaller.java,62,public class JdkMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshaller.java,78,public class OptimizedMarshaller extends AbstractMarshaller {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,1254,if (ctx.event().isRecordable(evtType)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,262,return dataCachePrj.igfsDataSpaceMax();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,31,class GridUnsafeLru {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,158,return lrus[addIdx.getAndIncrement() % cnt].offer(part, addr, hash);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeLru.java,167,int idx = rmvIdx.getAndIncrement();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,171,private final GridCacheMapEntry entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,181,this.entry = entry;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,486,return loadCacheRange(m, clo, null, null);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,669,futs.add(pool.submit(loadCacheRange(em, clo, null, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,679,futs.add(pool.submit(loadCacheRange(em, clo, lowerBound, upperBound)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,682,futs.add(pool.submit(loadCacheRange(em, clo, upperBound, null)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,684,else
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,685,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,687,catch (SQLException ignored) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,688,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,695,futs.add(pool.submit(loadCacheFull(em, clo)));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,95,res.add(parent);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,96,res.addAll(children);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,326,private void finish(Iterable<GridDistributedTxMapping> mappings) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,329,finish(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,335,private void finish(GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,333,void await(IgfsPath... paths) {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,54,return val != null ? new SimpleValueWrapper(val) : null;
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,71,cache.put(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,76,Object old = cache.putIfAbsent(key, val);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCache.java,78,return old != null ? new SimpleValueWrapper(old) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,106,protected CleanupWorker() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,179,return primaryAndBackups(affInfo, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,201,key = ((CacheObject)key).value(affInfo.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,203,return affInfo.mapper.affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,457,key = ((CacheObject)key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,459,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,474,private <K> List<ClusterNode> primaryAndBackups(AffinityInfo aff, K key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,478,int part = aff.affFunc.partition(aff.mapper.affinityKey(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,480,return aff.assignment.get(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,536,private AffinityKeyMapper keyMapper() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,537,return mapper;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,627,return cache().affinityFunction().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,739,key = ((CacheObject)key).value(cache().cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,741,return cache().keyMapper().affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,786,return cache().assignment().get(partition(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,820,map.put(p, mapPartitionToNode(p));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,165,public int partition(Object key) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1843,return cacheObjects().toCacheKeyObject(cacheObjCtx, obj, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryInfo.java,403,key = ctx.cacheObjects().toCacheKeyObject(cacheObjCtx, key0, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,125,public KeyCacheObject toCacheKeyObject(CacheObjectContext ctx, Object obj, boolean userObj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,399,keys.add(cacheObjProc.toCacheKeyObject(cacheObjCtx, entry.getKey(), true));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,404,KeyCacheObject key = cacheObjProc.toCacheKeyObject(cacheObjCtx, e.getKey(), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,491,KeyCacheObject key0 = cacheObjProc.toCacheKeyObject(cacheObjCtx, key, true);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,131,public class SpringCacheManager implements CacheManager, InitializingBean {
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,255,ignite = Ignition.start(cfgPath);
modules/spring/src/main/java/org/apache/ignite/cache/spring/SpringCacheManager.java,257,ignite = Ignition.start(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,167,if (igfsCtx.configuration().getPathModes() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,168,for (Map.Entry<String, IgfsMode> e : igfsCtx.configuration().getPathModes().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,194,modeRslvr = new IgfsModeResolver(dfltMode, modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,549,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,596,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,614,if (!childrenModes.equals(Collections.singleton(PRIMARY))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,615,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,699,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,796,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,875,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,879,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,892,else if (mode == PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,893,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,919,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,923,if (childrenModes.contains(DUAL_SYNC) || childrenModes.contains(DUAL_ASYNC)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,957,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,999,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1014,if (info == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1015,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1190,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1210,if (!create) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1211,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1257,if (desc == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1258,checkConflictWithPrimary(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1280,private void checkConflictWithPrimary(IgfsPath path) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1281,if (secondaryFs != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1282,if (secondaryFs.info(path) != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1283,throw new IgfsInvalidPathException("Path mapped to a PRIMARY mode found in secondary file " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1313,assert mode == DUAL_SYNC || mode == DUAL_ASYNC;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,38,private ArrayList<T2<IgfsPath, IgfsMode>> modes;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,44,private Map<IgfsPath, Set<IgfsMode>> childrenModesCache;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,55,if (modes != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,56,ArrayList<T2<IgfsPath, IgfsMode>> modes0 = new ArrayList<>(modes);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,59,Collections.sort(modes0, new Comparator<Map.Entry<IgfsPath, IgfsMode>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,61,Map.Entry<IgfsPath, IgfsMode> o2) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,62,return o2.getKey().components().size() - o1.getKey().components().size();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,66,this.modes = modes0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,69,childrenModesCache = new GridBoundedConcurrentLinkedHashMap<>(MAX_PATH_CACHE);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,89,if (startsWith(path, entry.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,111,public Set<IgfsMode> resolveChildrenModes(IgfsPath path) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,112,assert path != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,115,return Collections.singleton(dfltMode);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,116,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,117,Set<IgfsMode> children = childrenModesCache.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,119,if (children == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,120,children = new HashSet<>(IgfsMode.values().length, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,122,IgfsMode pathDefault = dfltMode;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,124,for (T2<IgfsPath, IgfsMode> child : modes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,125,if (startsWith(path, child.getKey())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,126,pathDefault = child.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,128,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,131,children.add(child.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,134,children.add(pathDefault);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,136,childrenModesCache.put(path, children);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,139,return children;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,158,private static boolean startsWith(IgfsPath path, IgfsPath prefix) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,159,List<String> p1Comps = path.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,160,List<String> p2Comps = prefix.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,163,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,165,for (int i = 0; i < p1Comps.size(); i++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,168,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,171,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsModeResolver.java,175,return true;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,584,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(srcPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,586,if (childrenModes.contains(PROXY)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,588,clientLog.logRename(srcPath, PROXY, dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,592,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,594,clientLog.logRename(srcPath, modeRslvr.resolveMode(srcPath), dstPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,614,Set<IgfsMode> childrenModes = modeRslvr.resolveChildrenModes(path);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,616,if (childrenModes.contains(PROXY)) {
modules/schedule/src/main/java/org/apache/ignite/internal/processors/schedule/ScheduleFutureImpl.java,437,return nextExecutionTimes(1, U.currentTimeMillis())[0];
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,529,GridCacheAdapter<Object,Object> cache = ctx.cache().internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,351,protected Object getColumnValue(ResultSet rs, int colIdx, Class<?> type) throws SQLException {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,353,return rs.getInt(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,356,return rs.getLong(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,359,return rs.getDouble(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,362,return rs.getBoolean(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,365,return rs.getByte(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,368,return rs.getShort(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,371,return rs.getFloat(colIdx);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,373,if (type == Integer.class || type == Long.class || type == Double.class ||
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,374,type == Byte.class || type == Short.class ||  type == Float.class) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,401,return val;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,403,if (val instanceof byte[]) {
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,404,ByteBuffer bb = ByteBuffer.wrap((byte[])val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,406,long most = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,407,long least = bb.getLong();
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,409,return new UUID(most, least);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,413,return UUID.fromString((String)val);
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,416,return val;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,276,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,299,IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,319,public IgniteFuture<?> addData(Collection<? extends Map.Entry<K, V>> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,339,public IgniteFuture<?> addData(Map<K, V> entries) throws IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,356,public void flush() throws CacheException, IgniteInterruptedException, IllegalStateException;
modules/core/src/main/java/org/apache/ignite/IgniteDataStreamer.java,377,public void close(boolean cancel) throws CacheException, IgniteInterruptedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,723,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,828,IgniteCheckedException e = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,845,catch (IgniteCheckedException e0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,846,e = e0;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,852,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1058,U.acquire(sem);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1081,incrementActiveTasks();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1517,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1518,filterChain.onSessionClosed(ses);
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1520,catch (IgniteCheckedException e1) {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,1521,filterChain.onExceptionCaught(ses, e1);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,253,GridCommunicationClient rmv = clients.get(id);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,255,if (rmv instanceof GridTcpNioCommunicationClient &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,256,((GridTcpNioCommunicationClient)rmv).session() == ses &&
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,257,clients.remove(id, rmv)) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,258,rmv.forceClose();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2485,void addReconnectRequest(GridNioRecoveryDescriptor recoverySnd) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,2486,boolean add = q.add(recoverySnd);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,440,private static String getEnv(String name, String dflt) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,441,String res = System.getProperty(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,444,res = System.getenv(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,446,return F.isEmpty(res) ? dflt : res;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,455,private static void addUrls(Collection<URL> res, File dir, final String startsWith) throws Exception {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,456,File[] files = dir.listFiles(new FilenameFilter() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,458,return startsWith == null || name.startsWith(startsWith);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,463,throw new IOException("Path is not a directory: " + dir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,466,res.add(file.toURI().toURL());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,498,return getEnv("HADOOP_PREFIX", getEnv("HADOOP_HOME", null));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,517,hadoopUrls = new ArrayList<>();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,519,String hadoopPrefix = hadoopHome();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,522,throw new IgniteCheckedException("Failed resolve Hadoop installation location. Either HADOOP_PREFIX or " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,525,String commonHome = getEnv("HADOOP_COMMON_HOME", hadoopPrefix + "/share/hadoop/common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,526,String hdfsHome = getEnv("HADOOP_HDFS_HOME", hadoopPrefix + "/share/hadoop/hdfs");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,527,String mapredHome = getEnv("HADOOP_MAPRED_HOME", hadoopPrefix + "/share/hadoop/mapreduce");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,530,addUrls(hadoopUrls, new File(commonHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,531,addUrls(hadoopUrls, new File(hdfsHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,532,addUrls(hadoopUrls, new File(mapredHome + "/lib"), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,534,addUrls(hadoopUrls, new File(hdfsHome), "hadoop-hdfs-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,536,addUrls(hadoopUrls, new File(commonHome), "hadoop-common-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,537,addUrls(hadoopUrls, new File(commonHome), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,538,addUrls(hadoopUrls, new File(commonHome + "/lib"), "hadoop-auth-");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,540,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-common");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,541,addUrls(hadoopUrls, new File(mapredHome), "hadoop-mapreduce-client-core");
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,543,catch (Exception e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,544,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,76,U.quietAndInfo(log, "HADOOP_HOME is set to " + hadoopHome());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,78,boolean ok = false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,80,try { // Check for Hadoop installation.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,81,hadoopUrls();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,83,ok = true;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,85,catch (IgniteCheckedException e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,86,U.quietAndWarn(log, e.getMessage());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,89,if (ok) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,90,hctx = new HadoopContext(
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,91,ctx,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,92,cfg,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,93,new HadoopJobTracker(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,94,new HadoopEmbeddedTaskExecutor(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,97,new HadoopShuffle());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,101,c.start(hctx);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopProcessor.java,103,hadoop = new HadoopImpl(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,687,if (e.getValue() < maxPerNodeCnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1341,if (cacheCtx.isNear() && entry != null && readCommitted()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1344,cacheCtx.cache().removeEntry(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,296,long maxSpaceSize = cfg.getMaxSpaceSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,298,if (maxSpaceSize > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,300,long maxHeapSize = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,301,long offHeapSize = dataCacheCfg.getOffHeapMaxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,305,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater that size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,309,throw new IgniteCheckedException("Maximum IGFS space size cannot be greater than size of available heap " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,323,U.warn(log, "IGFS max space size is not specified but data cache values are stored off-heap (max " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,261,if (igfsDataSpaceMax == 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,262,long maxMem = Runtime.getRuntime().maxMemory();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,265,long jvmFreeSize = (maxMem - 512 * 1024 * 1024);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,268,jvmFreeSize = maxMem / 2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,270,long dfltMaxSize = (long)(0.8f * maxMem);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,272,igfsDataSpaceMax = Math.min(dfltMaxSize, jvmFreeSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,516,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,518,log.debug("Failed to find write completion future for file in pending write map (most likely it was " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8227,try {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8228,Collection<InetSocketAddress> extAddrs0 = addrRslvr.getExternalAddresses(sockAddr);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8231,extAddrs.addAll(extAddrs0);
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8233,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8234,throw new IgniteSpiException("Failed to get mapped external addresses " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8122,List<InetAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8181,List<InetSocketAddress> res = new ArrayList<>(addrs.size());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,79,private volatile CountDownLatch internalLatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,82,private final AtomicBoolean initGuard = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,241,internalLatch.countDown();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,248,if (initGuard.compareAndSet(false, true)) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,41,addChild(on);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,64,return size() < 3 ? null : child(2);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,77,GridSqlElement on = on();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlJoin.java,80,buff.append(" \n ON ").append(StringUtils.unEnclose(on.getSQL()));
modules/core/src/main/java/org/apache/ignite/internal/IgniteServicesImpl.java,224,return ctx.service().serviceProxy(prj, name, svcItf, sticky);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,556,return new GridServiceProxy<>(prj, name, svcItf, sticky, ctx).proxy();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,620,nm.setNonHeapMemoryUsed(metrics.getNonHeapMemoryUsed());
modules/core/src/main/java/org/apache/ignite/internal/cluster/ClusterGroupAdapter.java,287,Collection<ClusterNode> all = ctx.discovery().allNodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,716,its.add(cache.localEntriesIterator(modes.primary, modes.backup));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,727,its.add(swapMgr.<K, V>swapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,730,its.add(swapMgr.<K, V>offheapIterator(modes.primary, modes.backup, topVer));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1099,return F.isEmpty(p) || isAll(e.<K1, V1>wrapLazyValue(), p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1773,return cacheCfg.getMemoryMode() == OFFHEAP_TIERED && isOffHeapEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,147,public <K, V> Cache.Entry<K, V> wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1307,public <K, V> Iterator<Map.Entry<K, V>> lazySwapIterator() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1311,return lazyIterator(cctx.gridSwap().rawIterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1366,public <K, V> Iterator<Map.Entry<K, V>> lazyOffHeapIterator() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1370,return lazyIterator(offheap.iterator(spaceName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1398,final GridCloseableIterator<? extends Map.Entry<byte[], byte[]>> it) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1656,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1664,return cacheEntryIterator(this.<K, V>lazySwapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1669,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1694,return cacheEntryIterator(this.<K, V>lazyOffHeapIterator());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1699,return new PartitionsIterator<K, V>(parts) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1916,advance();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1944,private void advance() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,925,public Iterator<Cache.Entry<K, V>> localEntriesIterator(final boolean primary, final boolean backup) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,1058,entry = next.wrapLazyValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2288,key = cctx.toCacheKeyObject(keyBytes()).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,478,res = secondaryFs.exists(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,882,Collection<IgfsPath> children = secondaryFs.listPaths(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,885,files.add(child.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,926,Collection<IgfsFile> children = secondaryFs.listFiles(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,928,for (IgfsFile child : children) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1722,IgfsFile status = secondaryFs.info(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,326,throw new IgniteCheckedException("Cannot start cache in PRIVATE or ISOLATED deployment mode: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,327,ctx.config().getDeploymentMode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,876,public boolean onTtlExpired(GridCacheVersion obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,466,long delta = e.expireTime() == 0 ? 0 : e.expireTime() - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,468,if (delta >= 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,469,CacheObject val = e.value();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,471,val = cctx.kernalContext().cacheObjects().prepareForCache(val, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,482,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,483,clearIndex(e.value());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,498,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,500,if (expireTime > 0 && U.currentTimeMillis() >= expireTime) { // Don't swap entry if it's expired.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,502,if (cctx.offheapTiered()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,503,cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,508,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,535,expireTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,537,valClsLdrId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,575,cctx.swap().remove(key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,647,CacheObject old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,648,CacheObject ret = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,652,boolean expired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,654,CacheObject expiredVal = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,656,boolean hasOldBytes;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,662,startVer = ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,668,double delta;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,670,long expireTime = expireTimeExtras();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,672,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,673,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,676,log.debug("Checked expiration time for entry [timeLeft=" + delta + ", entry=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,679,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,682,CacheObject val = this.val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,689,boolean valid = valid(tx != null ? tx.topologyVersion() : cctx.affinity().affinityTopologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,692,if (val == null && !hasOldBytes && readSwap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,694,if (isNew() || !valid) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,697,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,698,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,701,clearIndex(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,703,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,711,val = unswap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,714,if (expireTime > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,715,delta = expireTime - U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,718,log.debug("Checked expiration time for entry [timeLeft=" + delta +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,722,expired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,728,old = expired || !valid ? null : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,730,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,731,expiredVal = val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,733,value(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,736,if (old == null && !hasOldBytes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,745,ret = old;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,748,if (evt && expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,749,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,750,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,751,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,752,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,753,owner,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,754,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,755,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,756,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,757,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,758,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,759,subjId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,760,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,764,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,767,evt = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,770,if (evt && !expired && cctx.events().isRecordable(EVT_CACHE_OBJECT_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,787,boolean loadedFromStore = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,789,if (ret == null && readThrough) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,806,loadedFromStore = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,826,updateIndex(ret, expTime, nextVer, prevVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2439,if (!hasValueUnlocked() || checkExpired()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2441,ver = nextVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2452,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2462,cctx.onDeferredDelete(this, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3522,boolean expired = checkExpired();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3524,if (expired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3539,if (cctx.events().isRecordable(EVT_CACHE_OBJECT_EXPIRED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3540,cctx.events().addEvent(partition(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3541,key,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3542,cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3543,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3544,EVT_CACHE_OBJECT_EXPIRED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3545,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3546,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3547,expiredVal,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3548,expiredVal != null || hasOldBytes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3549,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3550,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3554,cctx.continuousQueries().onEntryExpired(this, key, expiredVal);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3569,return obsolete;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,925,public void remove(final KeyCacheObject key) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,954,int part = cctx.affinity().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,508,cctx.swap().remove(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,211,if (cctx.isReplicated() || cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,212,boolean primary = cctx.affinity().primary(cctx.localNode(), key, AffinityTopologyVersion.NONE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1000,val0 = CU.value(val, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1439,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1446,return new GridTuple3<>(false, cctx.unwrapTemporary(value(old0, old, false)), invokeRes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2013,updated0 = value(updated0, updated, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2221,return cacheObj != null ? cacheObj.value(cctx.cacheObjectContext(), cpy) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,228,resMap.put(key0 != null ? key0 : CU.value(key, cctx, true), res0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1379,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), computed, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1386,invokeRes.addEntryProcessResult(ctx, entry.key(), invokeEntry.key(), null, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1844,compRes.get2());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,499,return m.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1182,if (cctx.offheapTiered() && hadValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1183,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1185,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1274,cctx.config().getInterceptor().onAfterRemove(entry0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1542,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1543,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1545,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2142,if (cctx.offheapTiered() && hasValPtr) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2143,boolean rmv = cctx.swap().removeOffheap(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2145,assert rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,78,public Service service() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceAssignments.java,79,return cfg.getService();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,838,private Service copyAndInject(Service svc) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,841,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,842,byte[] bytes = m.marshal(svc);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,846,ctx.resource().inject(cp);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,848,return cp;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,850,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,851,log.error("Failed to copy service (will reuse same instance): " + svc.getClass(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,853,return svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceDescriptorImpl.java,56,return dep.configuration().getService().getClass();
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,59,private String name;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,66,private int totalCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,69,private int maxPerNodeCnt;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,72,private String cacheName;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,75,private Object affKey;
modules/core/src/main/java/org/apache/ignite/services/ServiceConfiguration.java,79,private IgnitePredicate<ClusterNode> nodeFilter;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,202,setFuture(ctx.cache().globalLoadCacheAsync(p, args));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,203,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,204,ctx.cache().globalLoadCache(p, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,287,final CacheQuery<Map.Entry<K,V>> qry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,326,return new QueryCursorImpl<>(new GridCloseableIteratorAdapter<Entry<K,V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,328,private Map.Entry<K,V> cur;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,334,Map.Entry<K,V> e = cur;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,71,private transient WebSessionListener lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,138,public void listener(WebSessionListener lsnr) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,139,assert lsnr != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,141,this.lsnr = lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,244,lsnr.destroySession(id);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,162,private WebSessionListener lsnr;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,292,sesId = doFilter0(httpReq, res, chain);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,298,sesId = doFilter0(httpReq, res, chain);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,317,private String doFilter0(HttpServletRequest httpReq, ServletResponse res, FilterChain chain) throws IOException,
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,351,else {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,354,sesId = cached.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,360,cached.listener(lsnr);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,370,Collection<T2<String, Object>> updates = ((WebSession)ses).updates();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,387,String sesId = sesIdTransformer != null ? sesIdTransformer.apply(ses.getId()) : ses.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,45,private final int retries;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,48,private final IgniteLogger log;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,56,assert ignite != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,60,this.retries = retries > 0 ? retries : 1;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,62,log = ignite.log();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,68,public void destroySession(String sesId) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,69,assert sesId != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,86,public void updateAttributes(String sesId, Collection<T2<String, Object>> updates, int maxInactiveInterval) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,87,assert sesId != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,88,assert updates != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,91,log.debug("Session attributes updated [id=" + sesId + ", updates=" + updates + ']');
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,93,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,94,for (int i = 0; i < retries; i++) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,95,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,96,IgniteCache<String, WebSession> cache0;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,98,if (maxInactiveInterval > 0) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,99,long ttl = maxInactiveInterval * 1000;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,101,ExpiryPolicy plc = new ModifiedExpiryPolicy(new Duration(MILLISECONDS, ttl));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,105,else
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,108,cache0.invoke(sesId, new AttributesProcessor(updates));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,110,break;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,113,if (i == retries - 1) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,114,U.warn(log, "Failed to apply updates for session (maximum number of retries exceeded) [sesId=" +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,115,sesId + ", retries=" + retries + ']');
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,117,else {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,118,U.warn(log, "Failed to apply updates for session (will retry): " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,126,U.error(log, "Failed to update session attributes [id=" + sesId + ']', e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,132,return S.toString(WebSessionListener.class, this);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,120,if (f != null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,121,String spaceName = ((GridH2Table)getTable()).spaceName();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,123,p = f.forSpace(spaceName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,126,return new FilteringIterator(iter, U.currentTimeMillis(), p);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,179,IgniteBiPredicate<Object, Object> fltr) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,183,this.fltr = fltr;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,201,Object val = row.getValue(valCol).getObject();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2IndexBase.java,204,assert val != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,746,forceTransformBackups = reader.readBoolean("forceTransformBackups");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,754,futVer = reader.readMessage("futVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,762,invokeArgsBytes = reader.readObjectArray("invokeArgsBytes", MessageCollectionItemType.BYTE_ARR, byte[].class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,834,byte syncModeOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,836,syncModeOrd = reader.readByte("syncMode");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,841,syncMode = CacheWriteSynchronizationMode.fromOrdinal(syncModeOrd);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,846,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,854,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,862,ttls = reader.readMessage("ttls");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,870,vals = reader.readCollection("vals", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,878,writeVer = reader.readMessage("writeVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,494,protected void batchStoreCommit(Iterable<IgniteTxEntry> writeEntries) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,499,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,500,if (writeEntries != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,501,Map<Object, IgniteBiTuple<Object, GridCacheVersion>> putMap = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,502,List<Object> rmvCol = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,507,for (IgniteTxEntry e : writeEntries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,509,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,511,boolean intercept = e.context().config().getInterceptor() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,516,IgniteBiTuple<GridCacheOperation, CacheObject> res = applyTransformClosures(e, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,518,GridCacheContext cacheCtx = e.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,520,GridCacheOperation op = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,521,KeyCacheObject key = e.key();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,522,CacheObject val = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,523,GridCacheVersion ver = writeVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,525,if (op == CREATE || op == UPDATE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,527,if (rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,528,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,533,rmvCol.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,535,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,545,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,548,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,554,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,556,val = cacheCtx.toCacheObject(cacheCtx.unwrapTemporary(interceptorVal));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,566,else if (op == DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,568,if (putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,569,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,574,putMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,576,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,585,writeStore = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,588,if (intercept) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,589,IgniteBiTuple<Boolean, Object> t = cacheCtx.config().getInterceptor().onBeforeRemove(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,593,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,604,log.debug("Ignoring NOOP entry for batch store commit: " + e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,607,if (putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,608,assert rmvCol == null || rmvCol.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,609,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,615,if (rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,616,assert putMap == null || putMap.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,617,assert writeStore != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,627,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,628,commitError(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,633,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,635,throw ex;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,637,catch (Throwable ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,638,commitError(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,643,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,645,throw new IgniteCheckedException("Failed to commit transaction to database: " + this, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalEx.java,48,public void commitError(Throwable e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,165,Collection<IgfsBlockLocation> blocks;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,167,try {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,168,blocks = igfs.affinity(new IgfsPath(split0.file()), split0.start(), split0.length());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,170,catch (IgniteException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,171,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,174,assert blocks != null;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,178,return bestNode(blocks.iterator().next().nodeIds(), topIds, nodeLoads, false);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,179,else {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,181,Map<UUID, Long> nodeMap = new HashMap<>();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,183,List<UUID> bestNodeIds = null;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,184,long bestLen = -1L;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,186,for (IgfsBlockLocation block : blocks) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,187,for (UUID blockNodeId : block.nodeIds()) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,188,if (topIds.contains(blockNodeId)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,189,Long oldLen = nodeMap.get(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,190,long newLen = oldLen == null ? block.length() : oldLen + block.length();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,192,nodeMap.put(blockNodeId, newLen);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,194,if (bestNodeIds == null || bestLen < newLen) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,195,bestNodeIds = new ArrayList<>(1);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,197,bestNodeIds.add(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,199,bestLen = newLen;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,201,else if (bestLen == newLen) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,202,assert !F.isEmpty(bestNodeIds);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,204,bestNodeIds.add(blockNodeId);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,210,if (bestNodeIds != null) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,211,return bestNodeIds.size() == 1 ? bestNodeIds.get(0) :
modules/hadoop/src/main/java/org/apache/ignite/hadoop/mapreduce/IgniteHadoopMapReducePlanner.java,212,bestNode(bestNodeIds, topIds, nodeLoads, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceNotFoundException.java,33,super("Service node found: " + name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,182,ctx.service().cancel(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,506,return (T)ctxs.iterator().next().service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,528,return ctxs.iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,549,throw new IgniteException("Service does not implement specified interface [svcItf=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,552,return (T)ctx.service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,592,res.add((T)ctx.service());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,744,Service svc = assigns.service();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,765,final Service cp = copyAndInject(svc);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,767,final ExecutorService exe = Executors.newSingleThreadExecutor(threadFactory);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,769,final ServiceContextImpl svcCtx = new ServiceContextImpl(assigns.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,770,UUID.randomUUID(), assigns.cacheName(), assigns.affinityKey(), cp, exe);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,772,ctxs.add(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,774,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,776,cp.init(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,778,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,779,log.error("Failed to initialize service (service will not be deployed): " + assigns.name(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,781,ctxs.remove(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,784,throw (Error)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,787,throw (RuntimeException)e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,789,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,793,log.info("Starting service instance [name=" + svcCtx.name() + ", execId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,794,svcCtx.executionId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,797,exe.submit(new Runnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,799,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,800,cp.execute(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,802,catch (InterruptedException | IgniteInterruptedCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,804,log.debug("Service thread was interrupted [name=" + svcCtx.name() + ", execId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,805,svcCtx.executionId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,807,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,808,if (e.hasCause(InterruptedException.class) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,809,e.hasCause(IgniteInterruptedCheckedException.class)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,811,log.debug("Service thread was interrupted [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,814,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,815,U.error(log, "Service execution stopped with error [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,819,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,820,log.error("Service execution stopped with error [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,823,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,825,exe.shutdownNow();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,869,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,870,svcCtx.service().cancel(svcCtx);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,872,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,873,log.error("Failed to cancel service (ignoring) [name=" + svcCtx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,876,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,878,ctx.resource().cleanup(svcCtx.service());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,880,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,881,log.error("Failed to clean up service (will ignore): " + svcCtx.name(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,345,ServiceContextImpl svcCtx = ((IgniteKernal) ignite).context().service().serviceContext(svcName);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,53,private final Service svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,74,ServiceContextImpl(String name, UUID execId, String cacheName, Object affKey, Service svc,
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,80,this.svc = svc;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,113,Service service() {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/ServiceContextImpl.java,135,catch (NoSuchMethodException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,487,IgniteUuid jobId = IgniteUuid.fromUuid(node.id());
modules/core/src/main/java/org/apache/ignite/IgniteSystemProperties.java,498,return (Properties)System.getProperties().clone();
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,815,log.debug("Successfully executed GridComputeJobMasterLeaveAware.onMasterNodeLeft() callback " +
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,819,U.error(log, "Failed to execute GridComputeJobMasterLeaveAware.onMasterNodeLeft() callback " +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,659,throw new IgniteCheckedException("Task name specified by @GridComputeTaskName annotation" +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,721,String errMsg = "Failed to obtain remote job result policy for result from GridComputeTask.result(..) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,734,log.debug("Ignoring GridComputeTask.result(..) value since task is already reducing or" +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,6140,return "GridNode [id=" + n.id() + ", order=" + n.order() + ", addr=" + n.addresses() +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,56,public static final String GET_ADDRS_QRY = "select hostname, port from tbl_addrs";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,59,public static final String REG_ADDR_QRY = "insert into tbl_addrs values (?, ?)";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,62,public static final String UNREG_ADDR_QRY = "delete from tbl_addrs where hostname = ? and port = ?";
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,71,public static final String CHK_QRY = "select count(*) from tbl_addrs";
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheContinuousQueryExample.java,85,qry.setRemoteFilter(new CacheEntryEventSerializableFilter<Integer, String>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheContinuousQueryExample.java,87,return e.getKey() > 10;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,1445,igfsExecSvc, restExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1641,boolean needVal = intercept || retval || op == GridCacheOperation.TRANSFORM || !F.isEmptyOrNulls(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,161,ctx.resource().injectGeneric(locLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,189,boolean recordIgniteEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,191,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,203,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,206,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,207,U.error(cctx.logger(CacheContinuousQueryHandler.class), "CacheEntryEventFilter failed: " + e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,322,Collection<CacheContinuousQueryEntry> entries = (Collection<CacheContinuousQueryEntry>)objs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,36,public void onEntryUpdated(CacheContinuousQueryEvent<K, V> evt, boolean primary, boolean recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,188,lsnr.onEntryUpdated(evt, primary, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,238,lsnr.onEntryUpdated(evt, primary, recordIgniteEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,614,private static class JCacheQueryLocalListener<K, V> implements CacheEntryUpdatedListener<K, V> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,616,private final CacheEntryListener<K, V> impl;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,639,assert impl instanceof CacheEntryCreatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,646,assert impl instanceof CacheEntryUpdatedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,653,assert impl instanceof CacheEntryRemovedListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,660,assert impl instanceof CacheEntryExpiredListener;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,700,private CacheEntryEventFilter impl;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,30,public static final int DFLT_SEG_POOL_SIZE = 8;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,33,public static final int DFLT_CONCUR_LVL = 16;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,39,private final int segShift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,42,private final int segMask;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,47,public IgniteStripedThreadPoolExecutor() {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,48,execs = new ExecutorService[DFLT_CONCUR_LVL];
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,50,ThreadFactory factory = new IgniteThreadFactory(null);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,53,execs[i] = Executors.newFixedThreadPool(DFLT_SEG_POOL_SIZE, factory);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,56,int sshift = 0;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,57,int ssize = 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,59,while (ssize < DFLT_CONCUR_LVL) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,60,++sshift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,62,ssize <<= 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,65,segShift = 32 - sshift;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,66,segMask = ssize - 1;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,78,List<Runnable> res = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,120,return execForTask(task).submit(task);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,125,return execForTask(task).submit(task, result);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,130,return execForTask(task).submit(task);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,135,throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,136,List<Future<T>> futs = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,139,futs.add(execForTask(task).submit(task));
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,141,boolean done = false;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,143,try {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,144,for (Future<T> fut : futs) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,145,try {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,146,fut.get();
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,148,catch (ExecutionException | InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,153,done = true;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,155,return futs;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,157,finally {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,158,if (!done) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,160,fut.cancel(true);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,167,TimeUnit unit) throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,168,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,173,ExecutionException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,174,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,179,throws InterruptedException, ExecutionException, TimeoutException {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,180,throw new RuntimeException("Not implemented.");
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,185,execForTask(cmd).execute(cmd);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,198,private int hash(int h) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,201,h += (h <<  15) ^ 0xffffcd7d;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,202,h ^= (h >>> 10);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,203,h += (h <<   3);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,204,h ^= (h >>>  6);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,205,h += (h <<   2) + (h << 14);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,206,return h ^ (h >>> 16);
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,213,private <T> ExecutorService execForTask(T cmd) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,214,assert cmd != null;
modules/core/src/main/java/org/apache/ignite/thread/IgniteStripedThreadPoolExecutor.java,217,return execs[(hash(cmd.hashCode()) >>> segShift) & segMask];
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockServer.java,63,int endPort = startPort + ctx.config().getTimeServerPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,118,int lastPort = cfg.getPort() + cfg.getPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,120,for (int port0 = cfg.getPort(); port0 <= lastPort; port0++) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1368,for (int port = locPort; port < locPort + locPortRange; port++) {
modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyRestProtocol.java,157,int lastPort = initPort + config().getPortRange() - 1;
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,449,return start0(new GridStartContext(new IgniteConfiguration(), null, springCtx)).grid();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,462,return start(cfg, null);
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,481,return start0(new GridStartContext(cfg, null, springCtx)).grid();
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,783,new GridStartContext(cfg, springCfgUrl, springCtx == null ? cfgMap.get2() : springCtx));
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,817,private static IgniteNamedInstance start0(GridStartContext startCtx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,840,if (old != null) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,844,throw new IgniteCheckedException("Ignite instance with this name has already been started: " + name);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,194,return attrs.get(name);
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/XmlGenerator.java,185,addElement(doc, map, "entry", "key", field.javaName(), "value", field.javaTypeName());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,200,throw new IgniteCheckedException("Failed to perform handshake because actual Grid name differs from expected " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,204,throw new IgniteCheckedException("Failed to perform handshake because actual IGFS name differs from expected " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,317,throw new IOException("Failed to communicate with IGFS.", err);
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,39,throw new IllegalStateException("Hadoop module is not found in class path.");
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,44,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,49,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,54,return new GridFinishedFuture<>(new IgniteCheckedException("Hadoop is not available."));
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,59,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,64,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,69,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopNoopProcessor.java,74,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,819,private void moveNonTx(IgniteUuid fileId, @Nullable String srcFileName, IgniteUuid srcParentId, String destFileName,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1093,Map<String, IgfsListingEntry> transferListing = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1095,transferListing.putAll(rootListing);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2490,private Iterable<Object> lifecycleAwares(CacheConfiguration ccfg, Object...objs) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3628,updateTtl(ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,818,GridCacheVersion nextVer = nextVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1593,UUID evtNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1594,UUID affNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1598,boolean writeThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1599,boolean retval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1601,boolean evt,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1602,boolean metrics,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1603,boolean primary,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1604,boolean verCheck,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1605,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1607,GridDrType drType,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1608,long explicitTtl,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1609,long explicitExpireTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1611,boolean conflictResolve,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1612,boolean intercept,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1264,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1265,boolean hasNear,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1266,GridNearAtomicUpdateRequest req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1267,GridNearAtomicUpdateResponse res,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1268,List<GridDhtCacheEntry> locked,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1269,GridCacheVersion ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1271,CI2<GridNearAtomicUpdateRequest, GridNearAtomicUpdateResponse> completionCb,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1272,boolean replicate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1273,String taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1889,boolean hasNear,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1890,int firstEntryIdx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1891,List<GridDhtCacheEntry> entries,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1893,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1899,CI2<GridNearAtomicUpdateRequest, GridNearAtomicUpdateResponse> completionCb,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1902,boolean replicate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1903,UpdateBatchResult batchRes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1904,String taskName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1123,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1241,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1275,CacheObject old = entry.innerGet(null,
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,65,old = cache0.tryPutIfAbsent(id, clsName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,1516,assert meta.phase() == PHASE_CANCELLING || err != null: "Invalid phase for cancel: " + meta;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,1534,cp.phase(PHASE_CANCELLING);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,348,final IgniteCache cache = cctx.kernalContext().cache().jcache(cctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,496,if (prep.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,497,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,498,prep.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,501,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,502,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,503,fut.onError(new IgniteCheckedException("Failed to commit transaction: " + CU.txString(this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,505,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,507,log.debug("Failed to optimistically prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,509,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,511,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,512,U.error(log, "Failed to prepare transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,514,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,517,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,520,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,521,f.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,524,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,525,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,526,fut.onError(new IgniteCheckedException("Failed to commit transaction: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,527,CU.txString(GridDhtTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,529,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,531,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,533,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,535,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,536,U.error(log, "Failed to prepare transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,538,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,546,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,548,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,549,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,550,fut.onError(new IgniteCheckedException("Failed to commit transaction: " + CU.txString(this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,552,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,554,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,556,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,558,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,559,U.error(log, "Failed to commit transaction: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,561,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,579,final GridDhtTxFinishFuture fut = new GridDhtTxFinishFuture<>(cctx, this, /*rollback*/false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,583,if (prepFut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,584,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,586,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,587,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,590,catch (IgniteTxOptimisticCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,592,log.debug("Failed optimistically to prepare transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,594,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,596,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,597,U.error(log, "Failed to rollback transaction (will make the best effort to rollback remote nodes): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,598,this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,600,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,603,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,608,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,609,f.get(); // Check for errors of a parent future.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,611,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,613,log.debug("Failed to prepare or rollback transaction [tx=" + this + ", e=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,616,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,618,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,619,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,621,CU.txString(GridDhtTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,624,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,625,U.error(log, "Failed to gracefully rollback transaction: " + CU.txString(GridDhtTxLocal.this),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,626,e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,628,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,203,return false; // Serializable will be enforced on primary mode.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,222,private boolean syncCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,223,return tx != null && tx.syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,229,private boolean syncRollback() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,230,return tx != null && tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,708,inTx() && tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,252,private boolean syncRollback() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,253,return tx != null && tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,259,private void onComplete() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,266,private boolean isSync() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,348,tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,349,tx.syncRollback(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,88,boolean syncCommit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,89,boolean syncRollback,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,258,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,163,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,208,return sync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,213,return sync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,221,private boolean sync() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,189,return false; // Serializable will be enforced on primary mode.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,383,public boolean enforceSerializable();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,435,public boolean syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,440,public boolean syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,519,public GridCacheVersion startVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,541,public GridCacheVersion endVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,144,protected boolean syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,147,protected boolean syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,665,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,670,return syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,675,return syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,681,public void syncCommit(boolean syncCommit) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,682,this.syncCommit = syncCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,688,public void syncRollback(boolean syncRollback) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,689,this.syncRollback = syncRollback;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1129,return startVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1134,return endVer;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1850,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1895,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1900,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1968,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1988,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,570,tx.syncCommit(req.syncCommit());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3973,sb.a("group=").a(cacheName).a(',');
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,643,add0(src, "");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1194,IgfsSecondaryOutputStreamDescriptor desc = meta.appendDual(secondaryFs, path, bufSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1594,public IgfsSecondaryOutputStreamDescriptor createDual(final IgfsSecondaryFileSystem fs,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1595,final IgfsPath path,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1596,final boolean simpleCreate,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1598,final boolean overwrite,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1599,final int bufSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1600,final short replication,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1601,final long blockSize,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1603,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1605,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1606,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1607,assert fs != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1608,assert path != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1611,final Deque<IgfsEvent> pendingEvts = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1613,SynchronizationTask<IgfsSecondaryOutputStreamDescriptor> task =
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1614,new SynchronizationTask<IgfsSecondaryOutputStreamDescriptor>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1616,private OutputStream out;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1620,assert !infos.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1623,IgfsPath parentPath = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1625,for (IgfsPath curPath : infos.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1627,parentPath = curPath;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1630,assert parentPath != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1635,out = simpleCreate ? fs.create(path, overwrite) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1636,fs.create(path, bufSize, overwrite, replication, blockSize, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1638,IgfsPath parent0 = path.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1640,assert parent0 != null : "path.parent() is null (are we creating ROOT?): " + path;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1643,if (!parentPath.equals(parent0)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1644,parentInfo = synchronize(fs, parentPath, parentInfo, parent0, true, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1648,IgfsPath evtPath = parent0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1650,while (!parentPath.equals(evtPath)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1653,evtPath = evtPath.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1655,assert evtPath != null; // If this fails, then ROOT does not exist.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1661,IgfsFile status = fs.info(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1664,throw fsException("Failed to open output stream to the file created in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1667,throw fsException("Failed to open output stream to the file created in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1674,IgniteUuid oldId = putIfAbsentNonTx(parentInfo.id(), path.name(), newInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1676,if (oldId != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1722,U.closeQuiet(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1758,public IgfsSecondaryOutputStreamDescriptor appendDual(final IgfsSecondaryFileSystem fs, final IgfsPath path,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1759,final int bufSize) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1768,private OutputStream out;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1775,throw fsException("Failed to open output stream to the file in the " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1778,out = fs.append(path, bufSize, false, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1781,long len = info.length();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1782,int blockSize = info.blockSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1784,int remainder = (int)(len % blockSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1786,if (remainder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1787,int blockIdx = (int)(len / blockSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1809,U.closeQuiet(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1819,return synchronizeAndExecute(task, fs, true, path);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,867,refreshPartitions(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsMXBeanImpl.java,26,class CacheMetricsMXBeanImpl implements CacheMetricsMXBean {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheMetricsMXBeanImpl.java,35,CacheMetricsMXBeanImpl(GridCacheAdapter<?, ?> cache) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,170,protected CacheMetricsMXBean mxBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,248,mxBean = new CacheMetricsMXBeanImpl(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3628,return mxBean;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,135,return ctx.cache().metrics();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,147,return ctx.cache().mxBean();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/cache/GridCacheCommandHandler.java,1030,CacheMetrics metrics = c.cache().metrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheResetMetricsTask.java,58,cache.mxBean().clear();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,707,for (long binAddr = tblAddr; binAddr < memCap; binAddr += 8) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1031,callIgfsLocalSafe(new GridPlainCallable<Object>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1033,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1034,igfsCtx.send(nodeId, topic, msg, SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1036,completionFut.onError(nodeId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1039,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1047,public Object call() throws Exception {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1050,public void apply(IgniteInternalFuture<?> fut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1293,igfsCtx.send(nodeId, topic, new IgfsAckMessage(blocksMsg.fileId(), blocksMsg.id(), err),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1294,SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,337,igfsCtx.send(node, topic, msg, GridIoPolicy.SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,167,igfsCtx.send(nodeId, topic, msg, SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,86,new FileSystemConfiguration(cfg),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,87,new IgfsMetaManager(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,96,igfsCache.put(maskName(cfg.getName()), igfsCtx);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,768,startProcessor(new GridServiceProcessor(ctx));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3768,TransactionConfiguration cfg = ctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4529,TransactionConfiguration tCfg = ctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,45,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,61,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTransactionsImpl.java,118,TransactionConfiguration cfg = cctx.gridConfig().getTransactionConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,383,IgfsFileInfo info = new IgfsFileInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2636,IgfsFileInfo updated = new IgfsFileInfo(fileInfo,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2638,modificationTime == -1 ? fileInfo.modificationTime() : modificationTime);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,184,String cacheName = U.firstNotNull(
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,201,Ignite webSesIgnite = G.ignite(gridName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,215,cache = webSesIgnite.cache(cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,218,throw new IgniteException("Cache for web sessions is not started (is it configured?): " + cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,220,CacheConfiguration cacheCfg = cache.getConfiguration(CacheConfiguration.class);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,223,throw new IgniteException("Cache for web sessions cannot be in FULL_ASYNC mode: " + cacheName);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,226,throw new IgniteException("Cache for web sessions cannot operate with lazy TTL. " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,230,U.quietAndWarn(webSesIgnite.log(), "Using LOCAL cache for web sessions caching " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,234,U.quietAndWarn(webSesIgnite.log(), "Using " + cacheCfg.getAtomicityMode() + " atomicity for web sessions " +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,238,log.info("Started web sessions caching [gridName=" + gridName + ", cacheName=" + cacheName +
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,241,txEnabled = cacheCfg.getAtomicityMode() == TRANSACTIONAL;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,243,lsnr = new WebSessionListener(webSesIgnite, cache, retries);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,319,WebSession cached;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,324,cached = cache.get(sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,430,return cached;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,42,private final IgniteCache<String, WebSession> cache;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,55,WebSessionListener(Ignite ignite, IgniteCache<String, WebSession> cache, int retries) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,57,assert cache != null;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,59,this.cache = cache;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,71,try {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,73,log.debug("Session destroyed: " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,75,catch (CacheException e) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,76,U.error(log, "Failed to remove session: " + sesId, e);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,103,cache0 = cache.withExpiryPolicy(plc);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,106,cache0 = cache;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1678,writeObj0 = CU.value(oldVal, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1690,writeObj0 = CU.value(oldVal, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1694,writeObj0 = CU.value((CacheObject)writeObj, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1701,GridCacheVersionedEntryEx oldEntry = versionedEntry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3278,CU.value(val, cctx, true),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1381,GridCacheVersionedEntryEx oldEntry = old.versionedEntry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1384,Object newVal0 = CU.value(newVal, txEntry.context(), false);
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/X.java,205,(t[0] < 10 ? "0" + t[0] : Long.toString(t[0]));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,227,mapper.map(job(r), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,236,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,279,mapper.map(job(c), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,288,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,980,return job instanceof ComputeJobMasterLeaveAware ? new C1MLA<>(job, arg) : new C1<>(job, arg);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,992,return c instanceof ComputeJobMasterLeaveAware ? new C2MLA<>(c) : new C2<>(c);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1004,return r instanceof ComputeJobMasterLeaveAware ? new C4MLA(r) : new C4(r);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1237,ComputeJob job = job(this.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1239,return Collections.singletonMap(job, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1268,ComputeJob job = job(this.job);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1270,return Collections.singletonMap(job, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1398,return Collections.singletonMap(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1447,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1503,mapper.map(job, lb.getBalancedNode(job, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1557,mapper.map(job(job, arg), n);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1590,public C1(){
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1682,public C2(){
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1732,private static class C2MLA<R> extends C2<R> implements ComputeJobMasterLeaveAware{
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1773,public C4(){
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,195,cctx.kernalContext().igfsHelper().isIgfsBlockKey(key.value(cctx.cacheObjectContext(), false))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3277,return new GridCachePlainVersionedEntry<>(key.value(cctx.cacheObjectContext(), true),
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,390,log.debug("Session created: " + sesId);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,89,WebSession(HttpSession ses) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,92,id = ses.getId();
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,113,WebSession(HttpSession ses, boolean isNew) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,114,this(ses);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,122,void accessTime(long accessTime) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,123,this.accessTime = accessTime;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,250,void setNew(boolean isNew) {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,251,this.isNew = isNew;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,331,cached = new WebSession(cached, false);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,373,lsnr.updateAttributes(ses.getId(), updates, ses.getMaxInactiveInterval());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,392,WebSession cached = new WebSession(ses, true);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,39,private static final long RETRY_DELAY = 1;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionListener.java,166,WebSession ses = new WebSession(entry.getValue());
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSession.java,199,return attrs.get(name);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,441,private static class RequestWrapper extends HttpServletRequestWrapper {
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,443,private final WebSession ses;
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,464,return ses;
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,51,this(DFLT_GRP, worker.gridName(), worker.name(), worker);
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,62,this(DFLT_GRP, gridName, threadName, r);
modules/core/src/main/java/org/apache/ignite/thread/IgniteThread.java,74,public IgniteThread(ThreadGroup grp, String gridName, String threadName, Runnable r) {
modules/core/src/main/java/org/apache/ignite/thread/IgniteThreadFactory.java,59,return new IgniteThread(gridName, threadName, r);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,512,java.awt.Desktop.getDesktop().open(destFolder);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,514,catch (IOException e) {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,1365,customPrefsFile);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,550,svcItf.getSimpleName() + ", svcCls=" + ctx.service().getClass() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,129,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,130,ClusterNode node = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,132,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,133,node = nodeForService(name, sticky);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,136,throw new IgniteException("Failed to find deployed service: " + name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,139,if (node.isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,140,ServiceContextImpl svcCtx = ctx.service().serviceContext(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,143,return mtd.invoke(svcCtx.service(), args);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,145,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,147,return ctx.closure().callAsyncNoFailover(
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,148,BALANCE,
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,149,new ServiceProxyCallable(mtd.getName(), name, mtd.getParameterTypes(), args),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,150,Collections.singleton(node),
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,151,false
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,152,).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,155,catch (GridServiceNotFoundException | ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,157,log.debug("Service was not found or topology changed (will retry): " + e.getMessage());
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,159,catch (RuntimeException | Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,160,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,162,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,163,throw new IgniteException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,169,rmtNode.compareAndSet(node, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,172,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,173,Thread.sleep(10);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,175,catch (InterruptedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,176,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,178,throw new IgniteException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,170,int nodesCnt = cctx.discovery().cacheAffinityNodes(cctx.name(), topVer).size();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,39,private transient Integer minSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,42,private transient Double avgSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,45,private transient Integer maxSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,127,public int minimumSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,128,if (minSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,129,minSize = Integer.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,132,minSize = Math.min(minSize, metric.keySize());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,135,return minSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,141,public double averageSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,142,if (avgSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,143,avgSize = 0.0d;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,146,avgSize += metric.keySize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,148,avgSize /= metrics.size();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,151,return avgSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,157,public int maximumSize() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,158,if (maxSize == null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,159,maxSize = Integer.MIN_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,162,maxSize = Math.max(maxSize, metric.keySize());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,165,return maxSize;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,162,VisorCacheMetrics cm = new VisorCacheMetrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,166,cm.size = m.getSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,167,cm.keySize = m.getKeySize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,169,cm.reads = m.getCacheGets();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,170,cm.writes = m.getCachePuts() + m.getCacheRemovals();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,171,cm.hits = m.getCacheHits();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,172,cm.misses = m.getCacheMisses();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,174,cm.txCommits = m.getCacheTxCommits();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,175,cm.txRollbacks = m.getCacheTxRollbacks();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,177,cm.avgTxCommitTime = m.getAverageTxCommitTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,178,cm.avgTxRollbackTime = m.getAverageTxRollbackTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,180,cm.puts = m.getCachePuts();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,181,cm.removals = m.getCacheRemovals();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,182,cm.evictions = m.getCacheEvictions();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,184,cm.avgReadTime = m.getAverageGetTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,185,cm.avgPutTime = m.getAveragePutTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,186,cm.avgRemovalTime = m.getAverageRemoveTime();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,197,cm.dhtEvictQueueCurrSize = m.getDhtEvictQueueCurrentSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,198,cm.txThreadMapSize = m.getTxThreadMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,199,cm.txXidMapSize = m.getTxXidMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,200,cm.txCommitQueueSize = m.getTxCommitQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,201,cm.txPrepareQueueSize = m.getTxPrepareQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,202,cm.txStartVerCountsSize = m.getTxStartVersionCountsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,203,cm.txCommittedVersionsSize = m.getTxCommittedVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,204,cm.txRolledbackVersionsSize = m.getTxRolledbackVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,205,cm.txDhtThreadMapSize = m.getTxDhtThreadMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,206,cm.txDhtXidMapSize = m.getTxDhtXidMapSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,207,cm.txDhtCommitQueueSize = m.getTxDhtCommitQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,208,cm.txDhtPrepareQueueSize = m.getTxDhtPrepareQueueSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,209,cm.txDhtStartVerCountsSize = m.getTxDhtStartVersionCountsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,210,cm.txDhtCommittedVersionsSize = m.getTxDhtCommittedVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,211,cm.txDhtRolledbackVersionsSize = m.getTxDhtRolledbackVersionsSize();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,213,return cm;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1463,U.warn(log, "Neither key nor value have property " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,98,this(true, id, 0, 0, null, null, null, null, false, System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,107,public IgfsFileInfo(boolean isDir, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,109,System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,118,this(true, null, 0, 0, null, listing, null, null, false, System.currentTimeMillis(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,129,IgfsFileInfo(int blockSize, @Nullable IgniteUuid affKey, boolean evictExclude,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,131,this(false, null, blockSize, 0, affKey, null, props, null, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,145,boolean evictExclude, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,146,this(false, null, blockSize, len, affKey, null, props, lockId, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,191,IgfsFileInfo(int blockSize, long len, boolean evictExclude, @Nullable Map<String, String> props) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,193,null, blockSize, len, null, null, props, null, true, System.currentTimeMillis(), evictExclude);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,237,this(isDir, id, blockSize, len, affKey, listing, props, null, lockId, cpProps, modificationTime,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,283,this.accessTime = accessTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,502,IgfsFileInfo info = resolveFileInfo(path, mode);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,505,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,507,return new IgfsFileImpl(path, info, data.groupBlockSize());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,929,IgfsFileInfo fsInfo = new IgfsFileInfo(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,930,child.blockSize(), child.length(), evictExclude(path, false), child.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,932,files.add(new IgfsFileImpl(child.path(), fsInfo, data.groupBlockSize()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1705,private IgfsFileInfo resolveFileInfo(IgfsPath path, IgfsMode mode) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1725,info = status.isDirectory() ? new IgfsFileInfo(true, status.properties()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1726,new IgfsFileInfo(status.blockSize(), status.length(), null, null, false,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1727,status.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1736,return info;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1440,id2InfoPrj.invokeAsync(parentId, new UpdateListingEntry(fileId, fileName, lenDelta, 0,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2305,IgfsFileInfo curInfo = status.isDirectory() ? new IgfsFileInfo(true, status.properties()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2307,igfsCtx.igfs().evictExclude(curPath, false), status.properties());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,283,IgfsFileInfo fsInfo = status.isDirectory() ? new IgfsFileInfo(true, properties(status)) :
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,284,new IgfsFileInfo((int)status.getBlockSize(), status.getLen(), null, null, false,
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,285,properties(status));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,103,GridCacheMvccCandidate owner) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,104,assert entry != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,105,assert owner != prev : "New and previous owner are identical instances: " + owner;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,106,assert owner == null || prev == null || !owner.version().equals(prev.version()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,110,log.debug("Received owner changed callback [" + entry.key() + ", owner=" + owner + ", prev=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,111,prev + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,113,if (owner != null && (owner.local() || owner.nearLocal())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,116,if (futCol != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,134,log.debug("Lock future not found for owner change callback (will try transaction futures) [owner=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,135,owner + ", prev=" + prev + ", entry=" + entry + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,138,if (cctx.tm().onOwnerChanged(entry, owner)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,140,log.debug("Found transaction for changed owner: " + owner);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,143,log.debug("Failed to find transaction for changed owner: " + owner);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,234,wrapper.p2pUnmarshal(ctx.config().getMarshaller(), ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridEventConsumeHandler.java,283,filter = ctx.config().getMarshaller().unmarshal(filterBytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,159,topic = ctx.config().getMarshaller().unmarshal(topicBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/GridMessageListenHandler.java,161,pred = ctx.config().getMarshaller().unmarshal(predBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointManager.java,296,state = marsh.unmarshal(data, ses.getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,463,msg.topic(topicOrd >= 0 ? GridTopic.fromOrdinal(topicOrd) : marsh.unmarshal(msg.topicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,178,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentLocalStore.java,160,ldr = U.gridClassLoader();
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,846,res.events(marsh.<Collection<Event>>unmarshal(res.eventsBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,849,res.exception(marsh.<Throwable>unmarshal(res.exceptionBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1042,req.responseTopic(marsh.unmarshal(req.responseTopicBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageManager.java,1058,filter = marsh.unmarshal(req.filter(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityUtils.java,104,Object src = ctx.config().getMarshaller().unmarshal(msg.source(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,77,p = ctx.marshaller().unmarshal(bytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,121,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,413,args[i] = byteCol[i] == null ? null : marsh.unmarshal(byteCol[i], ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,557,col.add(bytes == null ? null : marsh.<T>unmarshal(bytes, ldr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,228,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,363,txNodes = ctx.marshaller().unmarshal(txNodesBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,134,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,114,affAssignment = ctx.marshaller().unmarshal(affAssignmentBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,394,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,191,topic = ctx.marshaller().unmarshal(topicBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,117,parts = ctx.marshaller().unmarshal(partsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,94,parts = ctx.marshaller().unmarshal(partsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,200,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,113,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,108,marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(qry.reducer()), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,111,marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(qry.transform()), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,268,keyValFilter = mrsh.unmarshal(keyValFilterBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,274,trans = mrsh.unmarshal(transBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,277,args = mrsh.unmarshal(argsBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,287,rdc = rdc != null ? marsh.<IgniteReducer<Object, Object>>unmarshal(marsh.marshal(rdc), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,288,trans = trans != null ? marsh.<IgniteClosure<Object, Object>>unmarshal(marsh.marshal(trans), null) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,134,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,511,return ctx.config().getMarshaller().unmarshal(bytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,733,entryProcessorsCol = ctx.marshaller().unmarshal(transformClosBytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,188,val = marsh.unmarshal(valBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,219,key = marsh.unmarshal(keyBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,95,return ctx.kernalContext().cache().context().marshaller().unmarshal(bytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1050,c.job = marsh.unmarshal(closureBytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1052,c.job = marsh.unmarshal(marsh.marshal(c.job), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/closure/GridClosureProcessor.java,1055,job = marsh.unmarshal(marsh.marshal(job), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,251,msg.data(marsh.unmarshal(msg.dataBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,475,msg.data(marsh.unmarshal(msg.dataBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,809,data.p2pUnmarshal(marsh, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,191,topic = marsh.unmarshal(req.responseTopicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamProcessor.java,231,updater = marsh.unmarshal(req.updaterBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1247,jobPda0 != null ? jobPda0.classLoader() : U.gridClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,973,siblings0 = marsh.unmarshal(req.getSiblingsBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,986,dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1012,jobAttrs = marsh.unmarshal(req.getJobAttributesBytes(), dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java,1381,(Map<?, ?>)marsh.unmarshal(req.getAttributesBytes(), ses.getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,379,job = marsh.unmarshal(jobBytes, dep.classLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,211,return marsh.unmarshal(valBytes, ldr == null ? U.gridClassLoader() : ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,115,Object topic = ctx.config().getMarshaller().unmarshal(req.topicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskCommandHandler.java,410,res.result(ctx.config().getMarshaller().unmarshal(res.resultBytes(), null));
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,844,Service cp = m.unmarshal(bytes, svc.getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,943,marsh.<Map<?, ?>>unmarshal(msg.getAttributesBytes(), task.getTask().getClass().getClassLoader());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskProcessor.java,1219,topic = marsh.unmarshal(req.topicBytes(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,688,Object res0 = loc ? res.getJobResult() : marsh.unmarshal(res.getJobResultBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,691,marsh.<IgniteException>unmarshal(res.getExceptionBytes(), clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,694,marsh.<Map<Object, Object>>unmarshal(res.getJobAttributesBytes(), clsLdr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1170,return marshaller.unmarshal(bytes, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,540,jobPda = new DataStreamerPda(key.value(cacheObjCtx, false),
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,541,entry.getValue() != null ? entry.getValue().value(cacheObjCtx, false) : null,
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,542,rcvr);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1136,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1137,jobPda0 = jobPda;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,1139,assert jobPda0 != null;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlAggregateFunction.java,29,private static final GridSqlFunctionType[] TYPE_INDEX = new GridSqlFunctionType[]{
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,44,private static final GridSqlOperationType[] OPERATION_OP_TYPES = new GridSqlOperationType[]{CONCAT, PLUS, MINUS, MULTIPLY, DIVIDE, null, MODULUS};
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,47,private static final GridSqlOperationType[] COMPARISON_TYPES = new GridSqlOperationType[]{EQUAL, BIGGER_EQUAL, BIGGER, SMALLER_EQUAL,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,155,private static final Getter<JdbcPreparedStatement,Command> COMMAND = getter(JdbcPreparedStatement.class, "command");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,158,private static volatile Getter<Command,Prepared> prepared;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,170,Getter<Command,Prepared> p = prepared;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,457,res.addChild(new GridSqlSubquery(parse((Select) qry)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,503,GridSqlAggregateFunction res = new GridSqlAggregateFunction(DISTINCT.get((Aggregate)expression),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,504,TYPE.get((Aggregate)expression));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,506,Expression on = ON.get((Aggregate)expression);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,893,public void updateTtl(@Nullable GridCacheVersion ver, long ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,693,log.debug("Entry was not evicted [entry=" + entry + ", localNode=" + cctx.nodeId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,474,update(val, e.expireTime(), e.ttl(), e.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,495,if (cctx.isSwapOrOffheapEnabled() && !deletedUnlocked() && hasValueUnlocked() && !detached()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,831,update(ret, expTime, ttl, nextVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,915,update(ret, expTime, ttl, nextVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1049,update(val, expireTime, ttl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1180,update(null, 0, 0, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1363,update(old, expireTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1506,update(updated, expireTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1540,update(null, CU.TTL_ETERNAL, CU.EXPIRE_TIME_ETERNAL, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1851,update(oldVal, initExpireTime, initTtl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2062,update(updated, newExpireTime, newTtl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2137,update(null, CU.TTL_ETERNAL, CU.EXPIRE_TIME_ETERNAL, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2445,update(null, 0L, 0L, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2619,protected final void update(@Nullable CacheObject val, long expireTime, long ttl, GridCacheVersion ver) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2634,cctx.ttl().addTrackedEntry(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2659,throws IgniteCheckedException, GridCacheEntryRemovedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2674,private void updateTtl(long ttl) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2793,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2794,if (heap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2795,GridTuple<CacheObject> val = peekGlobal(false, topVer, null, expiryPlc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2798,return val.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2801,if (offheap || swap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2804,return e != null ? e.value() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2807,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2809,catch (GridCacheFilterFailedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2810,assert false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2812,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3009,throws GridCacheEntryRemovedException, GridCacheFilterFailedException, IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3037,return F.t(CU.<CacheObject>failed(failFast));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3182,update(val, CU.toExpireTime(ttl), ttl, nextVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3210,update(val, expTime, ttl, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3315,update(val, expTime, ttl, newVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,189,res = Long.compare(entry.startVersion(), o.entry.startVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,204,return expireTime == that.expireTime && entry.startVersion() == that.entry.startVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheTtlManager.java,212,res = 31 * res + (int)(entry.startVersion() ^ (entry.startVersion() >>> 32));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,776,if (swap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,781,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,782,entry = cache.peekEx(keys.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,785,entry.updateTtl(vers.get(i), ttl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,558,update(null, 0L, 0L, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,160,update(e.value(), e.expireTime(), e.ttl(), e.isNew() ? ver : e.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,900,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,222,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,344,U.error(ctx.log(getClass()), "Failed to unmarshal entry.", ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,912,GridServiceDeployment dep = (GridServiceDeployment)e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProcessor.java,1182,GridServiceAssignments assigns = (GridServiceAssignments)e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,188,private ClusterNode nodeForService(String name, boolean sticky) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,215,private ClusterNode randomNodeForService(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,219,Map<UUID, Integer> snapshot = serviceTopology(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,290,private Map<UUID, Integer> serviceTopology(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,291,for (ServiceDescriptor desc : ctx.service().serviceDescriptors()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,293,return desc.topologySnapshot();
modules/core/src/main/java/org/apache/ignite/internal/processors/service/GridServiceProxy.java,296,return null;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/jobtracker/HadoopJobTracker.java,194,true
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1229,res.remapKeys(req.keys());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,497,public boolean clear(GridCacheVersion ver, boolean readers,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2331,boolean ret;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2332,boolean rmv;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2333,boolean marked;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2335,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2336,ret = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2337,rmv = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2338,marked = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2341,GridCacheVersion startVer = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2343,if (!F.isEmptyOrNulls(filter)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2344,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2345,startVer = this.ver;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2349,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2352,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2355,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2357,CacheObject val = saveValueForIndexUnlocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2359,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2360,if ((!hasReaders() || readers)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2364,log.debug("Entry could not be marked obsolete (it is still used): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2366,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2369,clearReaders();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2371,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2373,log.debug("Entry could not be marked obsolete (it still has readers): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2375,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2378,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2380,log.debug("Got removed entry when clearing (will simply return): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2382,ret = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2384,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2388,log.debug("Entry has been marked obsolete: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2390,clearIndex(val);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2392,releaseSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2394,ret = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2395,rmv = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2397,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2402,onMarkedObsolete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2405,cctx.cache().removeEntry(this); // Clear cache.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2407,return ret;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2096,CacheObject val = swapEntry.value();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1834,return F.t(e.getKey(), swapEntry(unmarshalled));
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,827,if (prjPred == null || prjPred.apply(ctx.discovery().node(ctx.localNodeId()))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1121,RemoteRoutineInfo info;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1126,info = rmtInfos.remove(routineId);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,1136,unregisterHandler(routineId, info.hnd, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1786,return (T) cacheObjects().unwrapTemporary(this, obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,997,old = (retval || intercept) ? rawGetOrUnmarshalUnlocked(!retval) : this.val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1157,old = (retval || intercept) ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1318,boolean needVal = retval || intercept || op == GridCacheOperation.TRANSFORM || !F.isEmpty(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1327,old = needVal ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1813,oldVal = needVal ? rawGetOrUnmarshalUnlocked(!retval) : val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2701,protected boolean isOffHeapValuesOnly() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2354,CacheObject obj = cctx.cacheObjects().toCacheObject(cctx.cacheObjectContext(), t.get2(), t.get1());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2406,CacheObject obj = cctx.fromOffheap(ptr, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2408,V val = CU.value(obj, cctx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2410,assert val != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,2412,return val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryListener.java,23,interface CacheContinuousQueryListener<K, V> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,135,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,137,ConcurrentMap<UUID, CacheContinuousQueryListener> lsnrCol;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,140,lsnrCol = intLsnrCnt.get() > 0 ? intLsnrs : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,141,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,142,lsnrCol = lsnrCnt.get() > 0 ? lsnrs : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,145,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4083,ClusterGroup nodes = ctx.kernalContext().grid().cluster().forCacheNodes(ctx.name());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4091,return ctx.kernalContext().closure().callAsync(BROADCAST,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4092,Arrays.asList(new LoadCacheClosure<>(ctx.name(), p, args, plc)),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4093,nodes.nodes());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,212,if (cctx.kernalContext().config().isPeerClassLoadingEnabled()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheAffinityExample.java,115,Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);
examples/src/main/java8/org/apache/ignite/examples/java8/datagrid/CacheAffinityExample.java,110,Map<ClusterNode, Collection<Integer>> mappings = ignite.cluster().mapKeysToNodes(CACHE_NAME, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,278,GridCacheContext<Object,Object> cctx = cache.context();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,476,key = ((CacheObject) key).value(aff.cacheObjCtx, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,756,return GridAffinityProcessor.this.mapKeysToNodes(cacheName, keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,771,return GridAffinityProcessor.this.mapKeyToNode(cacheName, key);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,849,return affinityCache(cacheName, new AffinityTopologyVersion(topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,855,private long topologyVersion() {
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,856,return ctx.discovery().topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,154,return aff.partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,166,return aff.partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,187,return aff.nodes(part, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,326,return aff.primaryPartitions(nodeId, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,338,return aff.backupPartitions(nodeId, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAffinityManager.java,345,return aff.lastVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,52,return cctx.config().getAffinity().partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,152,key = ((CacheObject)key).value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,154,return cctx.config().getAffinityMapper().affinityKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,178,if (primary != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,179,Collection<K> mapped = res.get(primary);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,181,if (mapped == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,182,mapped = new ArrayList<>(Math.max(keys.size() / nodesCnt, 16));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,184,res.put(primary, mapped);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/affinity/GridCacheAffinityImpl.java,187,mapped.add(key);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,27,import org.apache.hadoop.mapreduce.lib.input.FileSplit;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,48,HadoopInputSplit split = info().inputSplit();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,50,InputSplit nativeSplit;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,52,if (split instanceof HadoopFileBlock) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,53,HadoopFileBlock block = (HadoopFileBlock)split;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,55,nativeSplit = new FileSplit(new Path(block.file().toString()), block.start(), block.length(), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,57,else
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,58,nativeSplit = (InputSplit)taskCtx.getNativeSplit(split);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2MapTask.java,60,assert nativeSplit != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1371,updatedVal = ctx.unwrapTemporary(invokeEntry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1373,updated = ctx.toCacheObject(updatedVal);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,287,Statement stmt = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,299,stmt = conn.createStatement();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,301,stmt.executeUpdate(CREATE_ADDRS_TABLE_QRY);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,303,conn.commit();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/jdbc/TcpDiscoveryJdbcIpFinder.java,319,U.closeQuiet(stmt);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,284,throw new IgniteCheckedException("IGFS metadata cache cannot start with enabled query indexing.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectContext.java,128,return col;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,589,cacheCtx.preloader().unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1308,private void registerExecutorMBeans(ExecutorService execSvc, ExecutorService sysExecSvc, ExecutorService p2pExecSvc,
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,1309,ExecutorService mgmtExecSvc, ExecutorService restExecSvc) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,89,bytes = ctx.marshaller().marshal(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,316,if (dhtVers != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,469,if (isMini(fut)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,470,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,472,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,473,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will ignore): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,475,found = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,713,private boolean isMini(IgniteInternalFuture<?> f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,714,return f.getClass().equals(MiniFuture.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,930,return S.toString(GridDhtLockFuture.class, this, super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,220,public Collection<GridCacheVersion> pendingVersions() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,221,return pendingVers == null ? Collections.<GridCacheVersion>emptyList() : pendingVers;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,277,if (owned != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,561,entryProcessors = unmarshalCollection(entryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,563,invokeArgs = unmarshalInvokeArguments(invokeArgsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,567,nearEntryProcessors = unmarshalCollection(nearEntryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,152,errBytes = ctx.marshaller().marshal(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,165,err = ctx.marshaller().unmarshal(errBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,539,entryProcessors = unmarshalCollection(entryProcessorsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,550,invokeArgs = unmarshalInvokeArguments(invokeArgsBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,131,MiniFuture f = (MiniFuture)fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,133,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,137,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will fail): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,139,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,143,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,252,private boolean isMini(IgniteInternalFuture<?> f) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,253,return f.getClass().equals(MiniFuture.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,372,MiniFuture fut = new MiniFuture(m);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,392,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,396,fut.onResult(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,410,private class MiniFuture extends GridFutureAdapter<IgniteInternalTx> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,415,private final IgniteUuid futId = IgniteUuid.randomUuid();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,424,MiniFuture(GridDistributedTxMapping m) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,431,IgniteUuid futureId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,432,return futId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,438,public ClusterNode node() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,445,public GridDistributedTxMapping mapping() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,446,return m;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,452,void onResult(Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,454,log.debug("Failed to get future result [fut=" + this + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,457,onDone(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,463,void onResult(ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,465,log.debug("Remote node left grid while sending or waiting for reply (will fail): " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,474,void onResult(GridNearTxFinishResponse res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,476,onDone(res.error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,477,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,478,onDone(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,483,return S.toString(MiniFuture.class, this, "done", isDone(), "cancelled", isCancelled(), "err", error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,229,if (ownedVals != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,252,for (IgniteTxKey key :filterFailedKeys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,230,if (keyValFilter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,237,if (rdc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,244,if (trans != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,251,if (!F.isEmpty(args)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,136,metadata = unmarshalCollection(metaDataBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,137,data = unmarshalCollection(dataBytes, ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1075,valid = prev == ACTIVE || prev == PREPARING || prev == PREPARED || prev == COMMITTING;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,749,expiryPlc =  ctx.marshaller().unmarshal(expiryPlcBytes, clsLdr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,602,if (tx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,603,IgniteInternalFuture<IgniteInternalTx> rollbackFut = tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,606,rollbackFut.listen(CU.errorLogger(log));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,630,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,640,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,951,setRollbackOnly();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,98,return loadFromBytes(name, HadoopNativeCodeLoader.class.getName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,18,package org.apache.ignite.internal.processors.hadoop.v2;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,28,public class HadoopNativeCodeLoader {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,35,public static boolean isNativeCodeLoaded() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,36,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,42,public static boolean buildSupportsSnappy() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,43,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,49,public static String getLibraryName() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,50,throw new IllegalStateException();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,60,public boolean getLoadNativeLibraries(Configuration conf) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,61,return false;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopNativeCodeLoader.java,70,public void setLoadNativeLibraries(Configuration conf, boolean loadNativeLibraries) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,77,String ignitePackagePrefix = "org.apache.ignite";
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,78,int len = ignitePackagePrefix.length();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,80,return cls.startsWith(ignitePackagePrefix) && (cls.indexOf("igfs.", len) != -1 || cls.indexOf(".fs.", len) != -1 || cls.indexOf("hadoop.", len) != -1);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,107,hasDeps = hasExternalDependencies(name, new HashSet<String>());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,217,boolean hasExternalDependencies(final String clsName, final Set<String> visited) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,239,visited.add(clsName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,241,final AtomicBoolean hasDeps = new AtomicBoolean();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,243,rdr.accept(new ClassVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,244,AnnotationVisitor av = new AnnotationVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,248,FieldVisitor fv = new FieldVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,250,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,252,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,256,MethodVisitor mv = new MethodVisitor(Opcodes.ASM4) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,258,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,260,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,264,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,266,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,270,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,274,onType(owner);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,275,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,279,for (Object o : locTypes) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,281,onType((String)o);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,284,for (Object o : stackTypes) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,286,onType((String)o);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,291,Label lb2, int i) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,292,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,296,onType(owner);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,300,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,304,onType(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,308,void onClass(String depCls) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,309,assert validateClassName(depCls) : depCls;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,311,if (depCls.startsWith("java.")) // Filter out platform classes.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,312,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,315,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,317,Boolean res = cache.get(depCls);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,320,hasDeps.set(true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,323,void onType(String type) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,325,return;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,327,int off = 0;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,330,off++; // Handle arrays.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,333,type = type.substring(off);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,336,return; // Get rid of primitives.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,338,if (type.charAt(type.length() - 1) == ';') {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,339,assert type.charAt(0) == 'L' : type;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,341,type = type.substring(1, type.length() - 1);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,344,type = type.replace('/', '.');
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,346,onClass(type);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,350,String[] ifaces) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,351,onType(superName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,353,if (ifaces != null) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,355,onType(iface);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,360,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,362,return av;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,366,onType(name);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,370,onType(desc);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,372,return fv;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,376,String[] exceptions) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,377,if (exceptions != null) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,379,onType(e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,382,return mv;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,386,if (hasDeps.get()) // We already know that we have dependencies, no need to check parent.
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopClassLoader.java,403,res = hasExternalDependencies(parentCls, visited);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,157,dfltModes.put("/ignite/primary", PRIMARY);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,159,if (secondaryFs != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,160,dfltModes.put("/ignite/proxy", PROXY);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,161,dfltModes.put("/ignite/sync", DUAL_SYNC);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,162,dfltModes.put("/ignite/async", DUAL_ASYNC);
modules/core/src/main/java/org/apache/ignite/internal/IgniteVersionUtils.java,57,VER_STR = IgniteProperties.get("ignite.version");
modules/core/src/main/java/org/apache/ignite/lang/IgniteProductVersion.java,43,Pattern.compile("(\\d+)\\.(\\d+)\\.(\\d+)(-([^0123456789][^-]+)(-SNAPSHOT)?)?(-(\\d+))?(-([\\da-f]+))?");
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,318,private boolean sqlEscapeAll;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3948,public static String maskName(@Nullable String cacheName) {
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3949,return cacheName == null ? "default" : cacheName;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,216,stmt.executeUpdate("SET SCHEMA \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,242,executeStatement("INFORMATION_SCHEMA", "CREATE SCHEMA IF NOT EXISTS \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,255,executeStatement("INFORMATION_SCHEMA", "DROP SCHEMA IF EXISTS \"" + schema + '"');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,440,Connection c = connectionForThread(tbl.schema());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,654,private ResultSet executeQuery(String space, String qry, @Nullable Collection<Object> params,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,655,TableDescriptor tbl) throws IgniteCheckedException {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,656,Connection conn = connectionForThread(tbl.schema());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,923,return "\"" + name + "\"";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1050,return "";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1052,return space;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1239,String schema = schema(ccfg.getName());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1241,if (schemas.putIfAbsent(schema, new Schema(ccfg.getName(),
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1491,fullTblName = '\"' + IgniteH2Indexing.schema(schema.spaceName) + "\"." +
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1492,escapeName(type.name(), schema.escapeAll());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1498,public String schema() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1499,return IgniteH2Indexing.schema(schema.spaceName);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1782,private Schema(@Nullable String spaceName, GridUnsafeMemory offheap, CacheConfiguration<?,?> ccfg) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,267,orgCache.put(org1.id, org1);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,268,orgCache.put(org2.id, org2);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1348,Object x = this.key ? key : val;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,129,return person.salary <= 1000;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1775,return aff.isPrimary(n, e.key().value(e.context().cacheObjectContext(), false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1785,public static <K, V> IgnitePredicate<Cache.Entry<K, V>> cachePrimary0(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1786,final Affinity<K> aff,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1787,final ClusterNode n
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1788,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1789,return new IgnitePredicate<Cache.Entry<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1791,return aff.isPrimary(n, e.getKey());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,18,package org.apache.ignite.examples.datagrid.store.dummy;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,34,public class CacheDummyPersonStore extends CacheStoreAdapter<Long, Person> {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,37,private Ignite ignite;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,41,private String cacheName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,45,private CacheStoreSession ses;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,48,private Map<Long, Person> dummyDB = new ConcurrentHashMap<>();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,52,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,54,System.out.println(">>> Store load [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,56,return dummyDB.get(key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,61,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,63,Long key = entry.getKey();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,64,Person val = entry.getValue();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,66,System.out.println(">>> Store put [key=" + key + ", val=" + val + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,68,dummyDB.put(key, val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,73,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,75,System.out.println(">>> Store remove [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,77,dummyDB.remove(key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,82,int cnt = (Integer)args[0];
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,84,System.out.println(">>> Store loadCache for entry count: " + cnt);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,88,Person p = new Person(i, "first-" + i, "last-" + 1);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,109,return ses != null ? ses.transaction() : null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,18,package org.apache.ignite.examples.datagrid.store.dummy;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,39,public class CacheDummyStoreExample {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,41,public static final int MIN_MEMORY = 1024 * 1024 * 1024;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,44,private static final int ENTRY_COUNT = 100_000;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,47,private static final Long id = Math.abs(UUID.randomUUID().getLeastSignificantBits());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,55,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,56,ExamplesUtils.checkMinMemory(MIN_MEMORY);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,59,try (Ignite ignite = Ignition.start("examples/config/example-ignite.xml")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,60,System.out.println();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,61,System.out.println(">>> Cache store example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,66,cacheCfg.setAtomicityMode(TRANSACTIONAL);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,69,cacheCfg.setCacheStoreFactory(FactoryBuilder.factoryOf(CacheDummyPersonStore.class));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,71,cacheCfg.setReadThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,72,cacheCfg.setWriteThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,74,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(cacheCfg)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,78,loadCache(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,82,executeTransaction(cache);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,92,private static void loadCache(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,93,long start = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,96,cache.loadCache(null, ENTRY_COUNT);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,98,long end = System.currentTimeMillis();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,100,System.out.println(">>> Loaded " + cache.size() + " keys with backups in " + (end - start) + "ms.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,108,private static void executeTransaction(IgniteCache<Long, Person> cache) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,109,try (Transaction tx = Ignition.ignite().transactions().txStart()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,110,Person val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,112,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,114,val = cache.getAndPut(id, new Person(id, "Isaac", "Newton"));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,116,System.out.println("Overwrote old value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,118,val = cache.get(id);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,120,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,122,tx.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyStoreExample.java,125,System.out.println("Read value after commit: " + cache.get(id));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,50,public CacheJdbcPersonStore() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,51,prepareDb();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,60,private void prepareDb() throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,67,catch (SQLException e) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,68,throw new IgniteException("Failed to create database table.", e);
examples/src/main/java/org/apache/ignite/examples/datagrid/starschema/CacheStarSchemaExample.java,57,private static int idGen = (int)System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectMessageWriter.java,39,stream.setBuffer(buf);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,49,private static final Long id = Math.abs(UUID.randomUUID().getLeastSignificantBits());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,57,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,61,System.out.println(">>> Cache auto store example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,69,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,71,val = cache.getAndPut(id, new Person(id, "Isaac", "Newton"));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,73,System.out.println("Overwrote old value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,77,System.out.println("Read value: " + val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreExample.java,82,System.out.println("Read value after commit: " + cache.get(id));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,793,return;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,807,try {
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioServer.java,808,assert readBuf.hasRemaining();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheLazyEntry.java,76,public CacheLazyEntry(GridCacheContext<K, V> ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,330,val = cacheCtx.toCacheObject(invokeEntry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,307,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,308,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,309,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,322,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,18,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,44,public class CacheAutoStoreLoadDataExample {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,46,public static final int MIN_MEMORY = 1024 * 1024 * 1024;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,54,public static void main(String[] args) throws IgniteException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,55,ExamplesUtils.checkMinMemory(MIN_MEMORY);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,57,try (Ignite ignite = Ignition.start("examples/config/example-ignite.xml")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,58,System.out.println();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,59,System.out.println(">>> Cache auto store load data example started.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,63,try (IgniteCache<Long, Person> cache = ignite.getOrCreateCache(cacheCfg)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,65,cache.loadCache(null, "java.lang.Long", "select * from PERSON where id <= 3");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,67,System.out.println("Loaded cache entries: " + cache.size());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,69,cache.clear();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,72,cache.loadCache(null);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheAutoStoreLoadDataExample.java,74,System.out.println("Loaded cache entries: " + cache.size());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,18,package org.apache.ignite.examples.datagrid.store.auto;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,36,public class CacheConfig {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,44,cfg.setAtomicityMode(TRANSACTIONAL);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,46,cfg.setCacheStoreFactory(new Factory<CacheStore<? super Long, ? super Person>>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,48,CacheJdbcPojoStore<Long, Person> store = new CacheJdbcPojoStore<>();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,50,store.setDataSource(JdbcConnectionPool.create("jdbc:h2:tcp://localhost/mem:ExampleDb", "sa", ""));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,52,return store;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,56,CacheTypeMetadata meta = new CacheTypeMetadata();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,58,meta.setDatabaseTable("PERSON");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,60,meta.setKeyType("java.lang.Long");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,63,meta.setKeyFields(Collections.singletonList(new CacheTypeFieldMetadata("ID", Types.BIGINT, "id", Long.class)));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,65,meta.setValueFields(Arrays.asList(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,66,new CacheTypeFieldMetadata("ID", Types.BIGINT, "id", long.class),
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,67,new CacheTypeFieldMetadata("FIRST_NAME", Types.VARCHAR, "firstName", String.class),
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,69,));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,71,cfg.setTypeMetadata(Collections.singletonList(meta));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,73,cfg.setWriteBehindEnabled(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,75,cfg.setReadThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,76,cfg.setWriteThrough(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,78,return cfg;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/DbH2ServerStartup.java,18,package org.apache.ignite.examples.datagrid.store.auto;
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1238,protected int fillKeyParameters(PreparedStatement stmt, int idx, EntryMapping em,
modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheAbstractJdbcStore.java,1239,Object key) throws CacheException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,52,private ConcurrentMap<IgniteUuid, GridConcurrentHashSet<GridCacheSetItemKey>> setDataMap =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,254,onSetItemUpdated((GridCacheSetItemKey)key0, rmv);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,265,for (GridConcurrentHashSet<GridCacheSetItemKey> set : setDataMap.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,266,Iterator<GridCacheSetItemKey> iter = set.iterator();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,269,GridCacheSetItemKey key = iter.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,374,GridConcurrentHashSet<GridCacheSetItemKey> set = setDataMap.get(setId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,383,Collection<GridCacheSetItemKey> keys = new ArrayList<>(BATCH_SIZE);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,385,for (GridCacheSetItemKey key : set) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,467,private void onSetItemUpdated(GridCacheSetItemKey key, boolean rmv) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,468,GridConcurrentHashSet<GridCacheSetItemKey> set = setDataMap.get(key.setId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/datastructures/CacheDataStructuresManager.java,474,GridConcurrentHashSet<GridCacheSetItemKey> old = setDataMap.putIfAbsent(key.setId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,702,Collection<GridCacheSetItemKey> data = cctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,709,new C1<GridCacheSetItemKey, IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,715,new P1<GridCacheSetItemKey>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,59,private static final int MAX_UPDATE_RETRIES = 100;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,62,private static final long RETRY_DELAY = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,57,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,95,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,152,Map<GridCacheQueueItemKey, T> putMap = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridAtomicCacheQueueImpl.java,194,GridCacheQueueItemKey key = itemKey(idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,47,protected static final long RETRY_DELAY = 1;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,350,removeKeys(cache, id, queueName, collocated, t.get1(), t.get2(), batchSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,404,Set<GridCacheQueueItemKey> keys = new HashSet<>(batchSize > 0 ? batchSize : 10);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,407,keys.add(itemKey(id, name, collocated, idx));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,520,protected GridCacheQueueItemKey itemKey(Long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,521,return itemKey(id, queueName, collocated(), idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,545,private static GridCacheQueueItemKey itemKey(IgniteUuid id, String queueName, boolean collocated, long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueAdapter.java,546,return collocated ? new CollocatedItemKey(id, queueName, idx) : new GridCacheQueueItemKey(id, queueName, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,29,class GridCacheQueueItemKey implements Externalizable, GridCacheInternal {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,110,int result = queueId.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,112,result = 31 * result + (int)(idx ^ (idx >>> 32));
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheQueueItemKey.java,114,return result;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,111,GridConcurrentHashSet<GridCacheSetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,142,GridConcurrentHashSet<GridCacheSetItemKey> set = ctx.dataStructures().setData(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,151,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,164,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,177,final GridCacheSetItemKey key = itemKey(o);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,202,Map<GridCacheSetItemKey, Boolean> addKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,218,add |= add(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,233,Set<GridCacheSetItemKey> rmvKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,249,rmv |= remove(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,266,Set<GridCacheSetItemKey> rmvKeys = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,302,Collection<GridCacheSetItemKey> rmvKeys = new ArrayList<>(BATCH_SIZE);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,396,private void retryRemoveAll(final Collection<GridCacheSetItemKey> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,409,private void retryPutAll(final Map<GridCacheSetItemKey, Boolean> keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,494,private GridCacheSetItemKey itemKey(Object item) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetImpl.java,495,return collocated ? new CollocatedItemKey(name, id, item) : new GridCacheSetItemKey(id, item);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,30,public class GridCacheSetItemKey implements GridCacheInternal, Externalizable {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,60,public IgniteUuid setId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,67,public Object item() {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,73,int result = setId.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,75,result = 31 * result + item.hashCode();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheSetItemKey.java,77,return result;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,216,if (super.onDone(tx, e != null ? e : err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,218,this.tx.sendFinishReply(commit, error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,245,private boolean syncCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,246,return tx != null && tx.syncCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,318,if (tx.isRollbackOnly()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,76,CacheConfiguration<UUID, Organization> orgCacheCfg = new CacheConfiguration<>(ORG_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,79,orgCacheCfg.setIndexedTypes(UUID.class, Organization.class);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,81,CacheConfiguration<AffinityKey<UUID>, Person> personCacheCfg = new CacheConfiguration<>(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,124,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,126,ScanQuery<AffinityKey<UUID>, Person> scan = new ScanQuery<>(
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,127,new IgniteBiPredicate<AffinityKey<UUID>, Person>() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,142,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,149,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, sql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,153,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, sql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,161,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,171,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, joinSql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,175,cache.query(new SqlQuery<AffinityKey<UUID>, Person>(Person.class, joinSql).
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,183,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,186,QueryCursor<Cache.Entry<AffinityKey<UUID>, Person>> masters =
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,187,cache.query(new TextQuery<AffinityKey<UUID>, Person>(Person.class, "Master"));
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,190,QueryCursor<Cache.Entry<AffinityKey<UUID>, Person>> bachelors =
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,191,cache.query(new TextQuery<AffinityKey<UUID>, Person>(Person.class, "Bachelor"));
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,201,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,222,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,240,IgniteCache<AffinityKey<UUID>, Person> cache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,261,IgniteCache<UUID, Organization> orgCache = Ignition.ignite().cache(ORG_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,270,IgniteCache<AffinityKey<UUID>, Person> personCache = Ignition.ignite().cache(PERSON_CACHE);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,320,private static class Person implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,323,private UUID id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,327,private UUID orgId;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,331,private String firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,335,private String lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,339,private String resume;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,343,private double salary;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,346,private transient AffinityKey<UUID> key;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,357,Person(Organization org, String firstName, String lastName, double salary, String resume) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,359,id = UUID.randomUUID();
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,361,orgId = org.id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,363,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,364,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,365,this.resume = resume;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,366,this.salary = salary;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,375,public AffinityKey<UUID> key() {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,377,key = new AffinityKey<>(id, orgId);
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,379,return key;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,384,return "Person [firstName=" + firstName +
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,396,private static class Organization implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,399,private UUID id;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,403,private String name;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,410,Organization(String name) {
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,411,id = UUID.randomUUID();
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,413,this.name = name;
examples/src/main/java/org/apache/ignite/examples/datagrid/CacheQueryExample.java,418,return "Organization [id=" + id + ", name=" + name + ']';
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,18,package org.apache.ignite.examples.datagrid.store;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,27,public class Person implements Serializable {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,29,private static final long serialVersionUID = 0L;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,32,private long id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,35,private String firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,38,private String lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,43,public Person() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,50,public Person(
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,51,long id,
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,52,String firstName,
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,53,String lastName
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,54,) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,55,this.id = id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,56,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,57,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,65,public long getId() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,66,return id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,74,public void setId(long id) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,75,this.id = id;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,83,public String getFirstName() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,84,return firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,92,public void setFirstName(String firstName) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,93,this.firstName = firstName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,101,public String getLastName() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,102,return lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,110,public void setLastName(String lastName) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,111,this.lastName = lastName;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,117,return true;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,120,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,122,Person that = (Person)o;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,125,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,128,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,131,return false;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,133,return true;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,138,int res = (int)(id ^ (id >>> 32));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,140,res = 31 * res + (firstName != null ? firstName.hashCode() : 0);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,142,res = 31 * res + (lastName != null ? lastName.hashCode() : 0);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,144,return res;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/Person.java,149,return "Person [id=" + id +
examples/src/main/java/org/apache/ignite/examples/datagrid/store/auto/CacheConfig.java,61,meta.setValueType("org.apache.ignite.examples.datagrid.store.Person");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,86,for (int i = 0; i < cnt; i++) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,94,if (ignite.affinity(cacheName).isPrimaryOrBackup(ignite.cluster().localNode(), p.getId())) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,97,dummyDB.put(p.getId(), p);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/dummy/CacheDummyPersonStore.java,100,clo.apply(p.getId(), p);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,138,st.setString(1, val.getFirstName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,139,st.setString(2, val.getLastName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,140,st.setLong(3, val.getId());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,149,st.setLong(1, val.getId());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,150,st.setString(2, val.getFirstName());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,151,st.setString(3, val.getLastName());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,369,assert false : "Got entry removed exception while holding transactional lock on entry: " + e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,458,assert ownsLockUnsafe(entry) : "Lock is not owned for commit in PESSIMISTIC mode [entry=" + entry +
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridCompoundFuture.java,361,return "Compound future listener: " + GridCompoundFuture.this;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,49,VisorCacheTypeFieldMetadata fieldMetadata = new VisorCacheTypeFieldMetadata();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeFieldMetadata.java,56,return fieldMetadata;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,79,public static Collection<VisorCacheTypeMetadata> list(Collection<CacheTypeMetadata> types) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,81,return Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,83,final Collection<VisorCacheTypeMetadata> cfgs = new ArrayList<>(types.size());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,86,cfgs.add(from(type));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheTypeMetadata.java,88,return cfgs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4149,int size = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,483,int sum = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,262,txEntry.cached(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,757,injectResources(keyValFilter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,759,final GridDhtCacheAdapter dht = cctx.isLocal() ? null : (cctx.isNear() ? cctx.near().dht() : cctx.dht());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,761,final ExpiryPolicy plc = cctx.expiry();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,857,final GridIterator<IgniteBiTuple<K, V>> it;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,859,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,860,List<GridIterator<IgniteBiTuple<K, V>>> iters = new ArrayList<>(3);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,862,iters.add(heapIt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,870,it = new CompoundIterator<>(iters);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,872,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,873,it = heapIt;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,875,return new GridCloseableIteratorAdapter<IgniteBiTuple<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,877,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,881,return it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,885,it.remove();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,453,return F.transform(cfg.getUserAttributes().entrySet(), new C1<Map.Entry<String, ?>, String>() {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,472,return F.isEmpty(beans) ? Collections.<String>emptyList() : F.transform(beans, F.<LifecycleBean>string());
modules/core/src/main/java/org/apache/ignite/mxbean/IgniteMXBean.java,86,public Collection<String> getUserAttributesFormatted();
modules/core/src/main/java/org/apache/ignite/mxbean/IgniteMXBean.java,151,public Collection<String> getLifecycleBeansFormatted();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheStoreBalancingWrapper.java,38,public static final int DFLT_LOAD_ALL_THRESHOLD = 5;
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,70,IgniteConfiguration c = loadConfiguration(args.configuration());
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,129,ignite = Ignition.start(c);
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,137,private static IgniteConfiguration loadConfiguration(String springCfgPath) throws Exception {
modules/yardstick/src/main/java/org/apache/ignite/yardstick/IgniteNode.java,179,return cfgMap.values().iterator().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,450,public boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,451,return exchWorker.topologyChanged();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,497,Collection<ClusterNode> rmts = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,986,boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,987,return !futQ.isEmpty() || busy;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,389,rebalanceMode = cc.getRebalanceMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,293,private void processMessage(UUID nodeId, GridCacheMessage msg,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheIoManager.java,294,IgniteBiInClosure<UUID, GridCacheMessage> c) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1252,if (obsoleteVer == null || !(marked = markObsolete0(obsoleteVer, true))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2362,if (!(marked = markObsolete0(ver, true))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2420,obsolete = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2453,obsolete = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2481,marked = markObsolete0(ver, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2499,protected final boolean markObsolete0(GridCacheVersion ver, boolean clear) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,2514,obsoleteVersionExtras(obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3022,rmv = markObsolete0(cctx.versions().next(this.ver), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3832,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3875,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3926,if (!hasReaders() && markObsolete0(obsoleteVer, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3971,rmv = markObsolete0(cctx.versions().next(this.ver), true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,4263,protected void obsoleteVersionExtras(@Nullable GridCacheVersion obsoleteVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,4264,extras = (extras != null) ? extras.obsoleteVersion(obsoleteVer) : obsoleteVer != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,4265,new GridCacheObsoleteEntryExtras(obsoleteVer) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,969,cacheCtx.preloader().addAssignments(e.getValue(), forcePreload);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,96,private final NavigableMap<Integer, IgniteInternalFuture<?>> preloadFuts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,99,private int maxRebalanceOrder;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,130,preloadFuts = new TreeMap<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,310,if (cc.getRebalanceMode() != CacheRebalanceMode.NONE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,311,assertParameter(cc.getRebalanceThreadPoolSize() > 0, "rebalanceThreadPoolSize > 0");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,533,maxRebalanceOrder = validatePreloadOrder(ctx.config().getCacheConfiguration());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,690,for (Map.Entry<String, GridCacheAdapter<?, ?>> e : caches.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,691,GridCacheAdapter cache = e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,693,if (maxRebalanceOrder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,694,CacheConfiguration cfg = cache.configuration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,696,int order = cfg.getRebalanceOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,698,if (order > 0 && order != maxRebalanceOrder && cfg.getCacheMode() != LOCAL) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,702,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,703,fut = new GridCompoundFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,705,preloadFuts.put(order, fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,708,fut.add(cache.preloader().syncFuture());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,714,((GridCompoundFuture<Object, Object>)fut).markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2059,Map.Entry<Integer, IgniteInternalFuture<?>> entry = preloadFuts.lowerEntry(order);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2061,return entry == null ? null : entry.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,534,public boolean clearInternal(GridCacheVersion ver, boolean swap) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,543,if (!markObsolete0(ver, false)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,232,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,357,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,444,return new GridFinishedFuture<>(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,447,return cctx.closures().callLocalSafe(new GPC<Boolean>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,449,return tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,477,((GridDhtPreloader)cctx.preloader()).onPartitionEvicted(this, updateSeq);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,481,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,484,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,524,tryEvict(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,569,if (cached.clearInternal(clearVer, swap)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,69,assert updateSeq > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,326,return S.toString(GridDhtPartitionDemandMessage.class, this, "partCnt", parts.size(), "super",
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,327,super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,18,package org.apache.ignite.internal.processors.cache.distributed.dht.preloader;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,58,private final SupplyMessage DUMMY_TOP = new SupplyMessage();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,64,private final IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,67,private final ReadWriteLock busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,71,private final Collection<DemandWorker> dmdWorkers;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,74,private IgnitePredicate<GridCacheEntryInfo> preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,78,private SyncFuture syncFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,81,private final AtomicLong timeout;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,84,private CyclicBarrier barrier;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,87,private final ReadWriteLock demandLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,90,private int poolSize;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,93,private AtomicReference<GridTimeoutObject> lastTimeoutObj = new AtomicReference<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,96,private volatile GridDhtPartitionsExchangeFuture lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,103,assert cctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,104,assert busyLock != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,106,this.cctx = cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,107,this.busyLock = busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,109,log = cctx.logger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,114,barrier = new CyclicBarrier(poolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,116,dmdWorkers = new ArrayList<>(poolSize);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,119,dmdWorkers.add(new DemandWorker(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,121,syncFut = new SyncFuture(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,123,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,124,dmdWorkers = Collections.emptyList();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,126,syncFut = new SyncFuture(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,129,syncFut.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,132,timeout = new AtomicLong(cctx.config().getRebalanceTimeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,138,void start() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,139,if (poolSize > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,141,new IgniteThread(cctx.gridName(), "preloader-demand-worker", w).start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,148,void stop() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,149,U.cancel(dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,152,log.debug("Before joining on demand workers: " + dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,154,U.join(dmdWorkers, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,157,log.debug("After joining on demand workers: " + dmdWorkers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,159,lastExchangeFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,161,lastTimeoutObj.set(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,167,IgniteInternalFuture<?> syncFuture() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,168,return syncFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,176,void preloadPredicate(IgnitePredicate<GridCacheEntryInfo> preloadPred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,177,this.preloadPred = preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,183,int poolSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,184,return poolSize;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,190,void onExchangeFutureAdded() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,191,synchronized (dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,193,w.addMessage(DUMMY_TOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,200,void forcePreload() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,201,GridTimeoutObject obj = lastTimeoutObj.getAndSet(null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,204,cctx.time().removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,206,final GridDhtPartitionsExchangeFuture exchFut = lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,208,if (exchFut != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,210,log.debug("Forcing rebalance event for future: " + exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,212,exchFut.listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,214,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,219,log.debug("Ignoring force rebalance request (no topology event happened yet).");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,225,private boolean enterBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,227,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,230,log.debug("Failed to enter to busy state (demander is stopping): " + cctx.nodeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,232,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,238,private void leaveBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,239,busyLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,246,private void preloadEvent(int type, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,247,preloadEvent(-1, type, discoEvt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,255,private void preloadEvent(int part, int type, DiscoveryEvent discoEvt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,256,assert discoEvt != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,258,cctx.events().addPreloadEvent(part, type, discoEvt.eventNode(), discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,265,private boolean dummyTopology(SupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,266,return msg == DUMMY_TOP;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,277,assert w != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,286,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,288,return deque.poll(time, MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,296,private Collection<ClusterNode> pickedOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,297,Collection<ClusterNode> affNodes = cctx.affinity().nodes(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,299,int affCnt = affNodes.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,301,Collection<ClusterNode> rmts = remoteOwners(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,303,int rmtCnt = rmts.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,306,return rmts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,308,List<ClusterNode> sorted = new ArrayList<>(rmts);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,311,Collections.sort(sorted, CU.nodeComparator(false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,314,return sorted.subList(0, affCnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,322,private Collection<ClusterNode> remoteOwners(int p, AffinityTopologyVersion topVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,323,return F.view(cctx.dht().topology().owners(p, topVer), F.remoteNodes(cctx.nodeId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,332,log.debug("Adding partition assignments: " + assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,334,long delay = cctx.config().getRebalanceDelay();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,336,if (delay == 0 || force) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,337,assert assigns != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,339,synchronized (dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,340,for (DemandWorker w : dmdWorkers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,341,w.addAssignments(assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,343,w.addMessage(DUMMY_TOP);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,347,else if (delay > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,348,assert !force;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,350,GridTimeoutObject obj = lastTimeoutObj.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,353,cctx.time().removeTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,355,final GridDhtPartitionsExchangeFuture exchFut = lastExchangeFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,357,assert exchFut != null : "Delaying rebalance process without topology event.";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,359,obj = new GridTimeoutObjectAdapter(delay) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,361,exchFut.listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,363,cctx.shared().exchange().forcePreloadExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,369,lastTimeoutObj.set(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,371,cctx.time().addTimeoutObject(obj);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,378,void unwindUndeploys() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,379,demandLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,381,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,382,cctx.deploy().unwind(cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,384,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,385,demandLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,391,return S.toString(GridDhtPartitionDemandPool.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,397,private class DemandWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,399,private int id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,405,private final LinkedBlockingDeque<SupplyMessage> msgQ =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,406,new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,409,private long cntr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,412,private IgniteLogger log = GridDhtPartitionDemandPool.this.log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,417,private DemandWorker(int id) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,418,super(cctx.gridName(), "preloader-demand-worker", GridDhtPartitionDemandPool.this.log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,420,assert id >= 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,422,this.id = id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,429,assert assigns != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,431,assignQ.offer(assigns);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,434,log.debug("Added assignments to worker: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,440,private boolean topologyChanged() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,441,return !assignQ.isEmpty() || cctx.shared().exchange().topologyChanged();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,447,private void addMessage(SupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,449,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,451,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,452,assert dummyTopology(msg) || msg.supply().workerId() == id;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,454,msgQ.offer(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,456,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,457,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,464,private void growTimeout(long timeout) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,465,long newTimeout = (long)(timeout * 1.5D);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,469,newTimeout = Long.MAX_VALUE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,473,U.warn(log, "Increased rebalancing message timeout from " + timeout + "ms to " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,474,newTimeout + "ms.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,485,private boolean preloadEntry(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,486,ClusterNode pick,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,487,int p,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,488,GridCacheEntryInfo entry,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,489,AffinityTopologyVersion topVer
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,490,) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,491,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,492,GridCacheEntryEx cached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,494,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,495,cached = cctx.dht().entryEx(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,498,log.debug("Rebalancing key [key=" + entry.key() + ", part=" + p + ", node=" + pick.id() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,500,if (cctx.dht().isIgfsDataCache() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,501,cctx.dht().igfsDataSpaceUsed() > cctx.dht().igfsDataSpaceMax()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,502,LT.error(log, null, "Failed to rebalance IGFS data cache (IGFS space size exceeded maximum " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,506,cached.context().cache().removeIfObsolete(cached.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,508,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,511,if (preloadPred == null || preloadPred.apply(entry)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,512,if (cached.initialValue(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,513,entry.value(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,514,entry.version(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,515,entry.ttl(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,516,entry.expireTime(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,517,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,518,topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,519,cctx.isDrEnabled() ? DR_PRELOAD : DR_NONE
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,520,)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,521,cctx.evicts().touch(cached, topVer); // Start tracking.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,524,cctx.events().addEvent(cached.partition(), cached.key(), cctx.localNodeId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,525,(IgniteUuid)null, null, EVT_CACHE_REBALANCE_OBJECT_LOADED, entry.value(), true, null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,526,false, null, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,529,log.debug("Rebalancing entry is already in cache (will ignore) [key=" + cached.key() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,533,log.debug("Rebalance predicate evaluated to false for entry (will ignore): " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,535,catch (GridCacheEntryRemovedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,537,log.debug("Entry has been concurrently removed while rebalancing (will ignore) [key=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,538,cached.key() + ", part=" + p + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,540,catch (GridDhtInvalidPartitionException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,542,log.debug("Partition became invalid during rebalancing (will ignore): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,544,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,547,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,548,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,550,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,551,throw new IgniteCheckedException("Failed to cache rebalanced entry (will stop rebalancing) [local=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,552,cctx.nodeId() + ", node=" + pick.id() + ", key=" + entry.key() + ", part=" + p + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,555,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,562,public Object topic(long idx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,563,return TOPIC_CACHE.topic(cctx.namexx(), cctx.nodeId(), id, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,576,private Set<Integer> demandFromNode(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,577,ClusterNode node,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,578,final AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,579,GridDhtPartitionDemandMessage d,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,580,GridDhtPartitionsExchangeFuture exchFut
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,581,) throws InterruptedException, IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,582,GridDhtPartitionTopology top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,584,cntr++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,586,d.topic(topic(cntr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,587,d.workerId(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,589,Set<Integer> missed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,592,Collection<Integer> remaining = d.partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,595,drainQueue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,598,return missed;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,600,cctx.io().addOrderedHandler(d.topic(), new CI2<UUID, GridDhtPartitionSupplyMessage>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,602,addMessage(new SupplyMessage(nodeId, msg));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,606,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,607,boolean retry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,611,do {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,612,retry = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,615,d = new GridDhtPartitionDemandMessage(d, remaining);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,617,long timeout = GridDhtPartitionDemandPool.this.timeout.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,619,d.timeout(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,622,log.debug("Sending demand message [node=" + node.id() + ", demand=" + d + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,625,cctx.io().send(node, d, cctx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,629,while (!isCancelled() && !topologyChanged()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,630,SupplyMessage s = poll(msgQ, timeout, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,633,if (s == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,634,if (msgQ.isEmpty()) { // Safety check.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,635,U.warn(log, "Timed out waiting for partitions to load, will retry in " + timeout +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,639,growTimeout(timeout);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,642,cctx.io().removeOrderedHandler(d.topic());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,645,d = new GridDhtPartitionDemandMessage(d, remaining);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,648,d.topic(topic(++cntr));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,651,cctx.io().addOrderedHandler(d.topic(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,652,new CI2<UUID, GridDhtPartitionSupplyMessage>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,654,GridDhtPartitionSupplyMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,655,addMessage(new SupplyMessage(nodeId, msg));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,660,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,662,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,664,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,665,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,669,if (dummyTopology(s)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,671,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,672,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,673,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,677,if (!s.senderId().equals(node.id())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,678,U.warn(log, "Received supply message from unexpected node [expectedId=" + node.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,681,continue; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,685,log.debug("Received supply message: " + s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,687,GridDhtPartitionSupplyMessage supply = s.supply();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,690,if (supply.classError() != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,692,log.debug("Class got undeployed during preloading: " + supply.classError());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,694,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,697,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,701,for (Map.Entry<Integer, CacheEntryInfoCollection> e : supply.infos().entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,702,int p = e.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,704,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,705,GridDhtLocalPartition part = top.localPartition(p, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,707,assert part != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,709,if (part.state() == MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,710,boolean reserved = part.reserve();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,712,assert reserved : "Failed to reserve partition [gridName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,713,cctx.gridName() + ", cacheName=" + cctx.namex() + ", part=" + part + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,715,part.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,717,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,718,Collection<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,721,for (GridCacheEntryInfo entry : e.getValue().infos()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,722,if (!invalidParts.contains(p)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,723,if (!part.preloadingPermitted(entry.key(), entry.version())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,725,log.debug("Preloading is not permitted for entry due to " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,729,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,732,if (!preloadEntry(node, p, entry, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,733,invalidParts.add(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,736,log.debug("Got entries for invalid partition during " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,742,boolean last = supply.last().contains(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,746,if (last) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,747,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,749,top.own(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,752,log.debug("Finished rebalancing partition: " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,755,preloadEvent(p, EVT_CACHE_REBALANCE_PART_LOADED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,756,exchFut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,759,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,760,part.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,761,part.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,764,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,765,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,768,log.debug("Skipping rebalancing partition (state is not MOVING): " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,771,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,772,remaining.remove(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,775,log.debug("Skipping rebalancing partition (it does not belong on current node): " + p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,779,remaining.removeAll(s.supply().missed());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,784,missed.add(miss);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,787,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,789,if (s.supply().ack()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,790,retry = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,792,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,796,while (retry && !isCancelled() && !topologyChanged());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,798,return missed;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,800,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,801,cctx.io().removeOrderedHandler(d.topic());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,808,private void drainQueue() throws InterruptedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,809,while (!msgQ.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,810,SupplyMessage msg = msgQ.take();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,813,log.debug("Drained supply message: " + msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,819,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,820,int rebalanceOrder = cctx.config().getRebalanceOrder();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,822,if (!CU.isMarshallerCache(cctx.name())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,824,log.debug("Waiting for marshaller cache preload [cacheName=" + cctx.name() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,826,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,827,cctx.kernalContext().cache().marshallerCache().preloader().syncFuture().get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,829,catch (IgniteInterruptedCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,831,log.debug("Failed to wait for marshaller cache preload future (grid is stopping): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,834,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,836,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,837,throw new Error("Ordered preload future should never fail: " + e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,841,if (rebalanceOrder > 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,842,IgniteInternalFuture<?> fut = cctx.kernalContext().cache().orderedPreloadFuture(rebalanceOrder);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,844,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,845,if (fut != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,847,log.debug("Waiting for dependant caches rebalance [cacheName=" + cctx.name() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,850,fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,853,catch (IgniteInterruptedCheckedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,855,log.debug("Failed to wait for ordered rebalance future (grid is stopping): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,858,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,860,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,861,throw new Error("Ordered rebalance future should never fail: " + e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,865,GridDhtPartitionsExchangeFuture exchFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,867,boolean stopEvtFired = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,869,while (!isCancelled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,870,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,871,barrier.await();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,873,if (id == 0 && exchFut != null && !exchFut.dummy() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,874,cctx.events().isRecordable(EVT_CACHE_REBALANCE_STOPPED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,876,if (!cctx.isReplicated() || !stopEvtFired) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,877,preloadEvent(EVT_CACHE_REBALANCE_STOPPED, exchFut.discoveryEvent());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,879,stopEvtFired = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,883,catch (BrokenBarrierException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,884,throw new InterruptedException("Demand worker stopped.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,891,assigns = poll(assignQ, cctx.gridConfig().getNetworkTimeout(), this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,893,demandLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,895,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,896,exchFut = assigns.exchangeFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,900,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,902,boolean resync = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,906,while (!isCancelled() && !topologyChanged() && !resync) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,907,Collection<Integer> missed = new HashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,911,for (ClusterNode node : assigns.keySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,913,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,915,GridDhtPartitionDemandMessage d = assigns.remove(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,920,continue; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,922,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,923,Set<Integer> set = demandFromNode(node, assigns.topologyVersion(), d, exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,925,if (!set.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,927,log.debug("Missed partitions from node [nodeId=" + node.id() + ", missed=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,928,set + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,930,missed.addAll(set);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,933,catch (IgniteInterruptedCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,934,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,936,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,938,log.debug("Node left during rebalancing (will retry) [node=" + node.id() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,941,resync = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,943,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,945,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,946,U.error(log, "Failed to receive partitions from node (rebalancing will not " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,952,if (!missed.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,954,log.debug("Reassigning partitions that were missed: " + missed);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,956,assert exchFut.exchangeId() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,958,cctx.shared().exchange().forceDummyExchange(true, exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,960,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,961,break; // While.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,964,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,965,demandLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,967,syncFut.onWorkerDone(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,970,cctx.shared().exchange().scheduleResendPartitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,973,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,975,syncFut.onWorkerDone(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,981,return S.toString(DemandWorker.class, this, "assignQ", assignQ, "msgQ", msgQ, "super", super.toString());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,990,void updateLastExchangeFuture(GridDhtPartitionsExchangeFuture lastFut) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,991,lastExchangeFut = lastFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1000,GridDhtPartitionTopology top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1005,int partCnt = cctx.affinity().partitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1007,assert exchFut.forcePreload() || exchFut.dummyReassign() ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1008,exchFut.exchangeId().topologyVersion().equals(top.topologyVersion()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1014,AffinityTopologyVersion topVer = assigns.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1016,for (int p = 0; p < partCnt; p++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1017,if (cctx.shared().exchange().hasPendingExchange()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1019,log.debug("Skipping assignments creation, exchange worker has pending assignments: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1020,exchFut.exchangeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1022,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1026,if (cctx.affinity().localNode(p, topVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1027,GridDhtLocalPartition part = top.localPartition(p, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1029,assert part != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1030,assert part.id() == p;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1032,if (part.state() != MOVING) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1034,log.debug("Skipping partition assignment (state is not MOVING): " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1036,continue; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1039,Collection<ClusterNode> picked = pickedOwners(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1041,if (picked.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1042,top.own(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1044,if (cctx.events().isRecordable(EVT_CACHE_REBALANCE_PART_DATA_LOST)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1045,DiscoveryEvent discoEvt = exchFut.discoveryEvent();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1047,cctx.events().addPreloadEvent(p,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1048,EVT_CACHE_REBALANCE_PART_DATA_LOST, discoEvt.eventNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1049,discoEvt.type(), discoEvt.timestamp());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1053,log.debug("Owning partition as there are no other owners: " + part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1055,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1056,ClusterNode n = F.first(picked);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1058,GridDhtPartitionDemandMessage msg = assigns.get(n);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1060,if (msg == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1061,assigns.put(n, msg = new GridDhtPartitionDemandMessage(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1062,top.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1063,exchFut.exchangeId().topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1064,cctx.cacheId()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1067,msg.addPartition(p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1072,return assigns;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1078,private class SyncFuture extends GridFutureAdapter<Object> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1080,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1083,private Collection<DemandWorker> remaining;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1088,private SyncFuture(Collection<DemandWorker> workers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1089,assert workers.size() == poolSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1091,remaining = Collections.synchronizedList(new LinkedList<>(workers));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1097,void onWorkerDone(DemandWorker w) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1099,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1103,log.debug("Completed full partition iteration for worker [worker=" + w + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1105,if (remaining.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1107,log.debug("Completed sync future.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1109,onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1117,private static class SupplyMessage {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1119,private UUID sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1122,private GridDhtPartitionSupplyMessage supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1127,private SupplyMessage() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1135,SupplyMessage(UUID sndId, GridDhtPartitionSupplyMessage supply) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1136,this.sndId = sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1137,this.supply = supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1143,UUID senderId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1144,return sndId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1150,GridDhtPartitionSupplyMessage supply() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1151,return supply;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandPool.java,1156,return S.toString(SupplyMessage.class, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,18,package org.apache.ignite.internal.processors.cache.distributed.dht.preloader;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,51,private final IgniteLogger log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,54,private final ReadWriteLock busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,57,private GridDhtPartitionTopology top;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,60,private final Collection<SupplyWorker> workers = new LinkedList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,63,private final BlockingQueue<DemandMessage> queue = new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,66,private final boolean depEnabled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,69,private IgnitePredicate<GridCacheEntryInfo> preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,76,assert cctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,77,assert busyLock != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,79,this.cctx = cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,80,this.busyLock = busyLock;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,82,log = cctx.logger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,84,top = cctx.dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,97,depEnabled = cctx.gridDeploy().enabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,103,void start() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,105,new IgniteThread(cctx.gridName(), "preloader-supply-worker", w).start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,111,void stop() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,112,U.cancel(workers);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,113,U.join(workers, log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,115,top = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,123,void preloadPredicate(IgnitePredicate<GridCacheEntryInfo> preloadPred) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,124,this.preloadPred = preloadPred;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,130,int poolSize() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,131,return cctx.config().getRebalanceThreadPoolSize();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,137,private boolean enterBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,139,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,142,log.debug("Failed to enter to busy state (supplier is stopping): " + cctx.nodeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,144,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,151,private void processDemandMessage(UUID nodeId, GridDhtPartitionDemandMessage d) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,153,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,155,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,156,if (cctx.rebalanceEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,158,log.debug("Received partition demand [node=" + nodeId + ", demand=" + d + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,160,queue.offer(new DemandMessage(nodeId, d));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,162,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,163,U.warn(log, "Received partition demand message when rebalancing is disabled (will ignore): " + d);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,165,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,166,leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,173,private void leaveBusy() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,174,busyLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,184,assert w != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,193,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,195,return deque.poll(2000, MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,201,private class SupplyWorker extends GridWorker {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,203,private IgniteLogger log = GridDhtPartitionSupplyPool.this.log;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,208,private SupplyWorker() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,209,super(cctx.gridName(), "preloader-supply-worker", GridDhtPartitionSupplyPool.this.log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,214,while (!isCancelled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,215,DemandMessage msg = poll(queue, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,218,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,220,ClusterNode node = cctx.discovery().node(msg.senderId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,222,if (node == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,224,log.debug("Received message from non-existing node (will ignore): " + msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,226,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,229,processMessage(msg, node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,237,private void processMessage(DemandMessage msg, ClusterNode node) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,238,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,239,assert node != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,241,GridDhtPartitionDemandMessage d = msg.message();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,243,GridDhtPartitionSupplyMessage s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,246,long preloadThrottle = cctx.config().getRebalanceThrottle();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,248,boolean ack = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,250,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,257,GridDhtLocalPartition loc = top.localPartition(part, d.topologyVersion(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,259,if (loc == null || loc.state() != OWNING || !loc.reserve()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,262,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,265,log.debug("Requested partition is not owned by local node [part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,268,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,271,GridCacheEntryInfoCollectSwapListener swapLsnr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,273,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,274,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,275,swapLsnr = new GridCacheEntryInfoCollectSwapListener(log);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,277,cctx.swap().addOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,278,cctx.swap().addSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,281,boolean partMissing = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,283,for (GridCacheEntryEx e : loc.entries()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,284,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,286,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,289,log.debug("Demanding node does not need requested partition [part=" + part +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,292,partMissing = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,294,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,297,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,298,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,301,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,305,U.sleep(preloadThrottle);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,307,s = new GridDhtPartitionSupplyMessage(d.workerId(), d.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,311,GridCacheEntryInfo info = e.info();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,313,if (info != null && !info.isNew()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,315,s.addEntry(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,317,log.debug("Rebalance predicate evaluated to false (will not sender cache entry): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,318,info);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,323,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,325,if (cctx.isSwapOrOffheapEnabled()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,326,GridCloseableIterator<Map.Entry<byte[], GridCacheSwapEntry>> iter =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,327,cctx.swap().iterator(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,330,if (iter != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,331,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,332,boolean prepared = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,334,for (Map.Entry<byte[], GridCacheSwapEntry> e : iter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,335,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,338,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,341,log.debug("Demanding node does not need requested partition " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,344,partMissing = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,346,break; // For.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,349,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,350,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,353,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,357,U.sleep(preloadThrottle);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,359,s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,363,GridCacheSwapEntry swapEntry = e.getValue();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,365,GridCacheEntryInfo info = new GridCacheEntryInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,367,info.keyBytes(e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,368,info.ttl(swapEntry.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,369,info.expireTime(swapEntry.expireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,370,info.version(swapEntry.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,371,info.value(swapEntry.value());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,374,s.addEntry0(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,375,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,377,log.debug("Rebalance predicate evaluated to false (will not send " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,380,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,384,if (depEnabled && !prepared) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,385,ClassLoader ldr = swapEntry.keyClassLoaderId() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,386,cctx.deploy().getClassLoader(swapEntry.keyClassLoaderId()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,387,swapEntry.valueClassLoaderId() != null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,388,cctx.deploy().getClassLoader(swapEntry.valueClassLoaderId()) :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,389,null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,392,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,394,if (ldr instanceof GridDeploymentInfo) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,395,s.prepare((GridDeploymentInfo)ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,397,prepared = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,403,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,405,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,406,iter.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,412,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,413,cctx.swap().removeOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,414,cctx.swap().removeSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,417,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,418,Collection<GridCacheEntryInfo> entries = swapLsnr.entries();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,420,swapLsnr = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,422,for (GridCacheEntryInfo info : entries) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,423,if (!cctx.affinity().belongs(node, part, d.topologyVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,426,s.missed(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,429,log.debug("Demanding node does not need requested partition " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,433,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,436,if (s.messageSize() >= cctx.config().getRebalanceBatchSize()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,437,ack = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,440,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,442,s = new GridDhtPartitionSupplyMessage(d.workerId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,443,d.updateSequence(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,448,s.addEntry(part, info, cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,450,log.debug("Rebalance predicate evaluated to false (will not sender cache entry): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,451,info);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,456,s.last(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,458,if (ack) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,459,s.markAck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,461,break; // Partition for loop.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,464,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,465,loc.release();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,467,if (swapLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,468,cctx.swap().removeOffHeapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,469,cctx.swap().removeSwapListener(part, swapLsnr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,474,reply(node, d, s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,476,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,477,U.error(log, "Failed to send partition supply message to node: " + node.id(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,489,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,490,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,492,log.debug("Replying to partition demand [node=" + n.id() + ", demand=" + d + ", supply=" + s + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,494,cctx.io().sendOrderedMessage(n, d.topic(), s, cctx.ioPolicy(), d.timeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,496,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,498,catch (ClusterTopologyCheckedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,500,log.debug("Failed to send partition supply message because node left grid: " + n.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,502,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,510,private static class DemandMessage extends IgniteBiTuple<UUID, GridDhtPartitionDemandMessage> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,512,private static final long serialVersionUID = 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,518,DemandMessage(UUID sndId, GridDhtPartitionDemandMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,519,super(sndId, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,525,public DemandMessage() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,532,UUID senderId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,533,return get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,539,public GridDhtPartitionDemandMessage message() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,540,return get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyPool.java,545,return "DemandMessage [senderId=" + senderId() + ", msg=" + message() + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,189,supplyPool.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,190,demandPool.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,197,assert supplyPool != null && demandPool != null : "preloadPredicate may be called only after start()";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,199,supplyPool.preloadPredicate(preloadPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,200,demandPool.preloadPredicate(preloadPred);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,215,supplyPool.stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,218,demandPool.stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,225,if (err == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,228,final long start = U.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,233,demandPool.syncFuture().listen(new CI1<Object>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,241,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,242,startFut.onDone(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,247,demandPool.onExchangeFutureAdded();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,252,demandPool.updateLastExchangeFuture(lastFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,257,return demandPool.assign(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,262,demandPool.addAssignments(assignments, forcePreload);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,533,demandPool.forcePreload();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,538,demandPool.unwindUndeploys();
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,625,return;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridTuple4.java,239,return F.eq(val1, t.val2) && F.eq(val2, t.val2) && F.eq(val3, t.val3) && F.eq(val4, t.val4);
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,54,if (!ExamplesUtils.checkMinTopologySize(ignite.cluster(), 2)) {
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,55,System.out.println();
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,56,System.out.println(">>> Please start at least 2 cluster nodes to run example.");
examples/src/main/java8/org/apache/ignite/examples/java8/messaging/MessagingExample.java,57,System.out.println();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,161,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,492,final GridNearTxPrepareResponse res = createPrepareResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,498,IgniteInternalFuture<IgniteInternalTx> fut = this.err.get() == null ?
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,499,tx.commitAsync() : tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,501,fut.listen(new CIX1<IgniteInternalFuture<IgniteInternalTx>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,504,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,506,sendPrepareResponse(res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,508,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,509,U.error(log, "Failed to send prepare response for transaction: " + tx, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,576,private GridNearTxPrepareResponse createPrepareResponse() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,578,Throwable prepErr = err.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1808,TransactionState state = tx.state();
modules/core/src/main/java/org/apache/ignite/marshaller/optimized/OptimizedMarshallerUtils.java,276,return (short)ObjectStreamClass.lookup(cls).getSerialVersionUID();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1326,public List<GridCacheClearAllRunnable<K, V>> splitClearLocally() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1327,assert CLEAR_ALL_SPLIT_THRESHOLD > 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1329,int keySize = size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1331,int cnt = Math.min(keySize / CLEAR_ALL_SPLIT_THRESHOLD + (keySize % CLEAR_ALL_SPLIT_THRESHOLD != 0 ? 1 : 0),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1332,Runtime.getRuntime().availableProcessors());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1335,cnt = 1; // Still perform cleanup since there could be entries in swap.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1337,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1339,List<GridCacheClearAllRunnable<K, V>> res = new ArrayList<>(cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1342,res.add(new GridCacheClearAllRunnable<>(this, obsoleteVer, i, cnt));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1344,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1349,return clearLocally0(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1354,clearLocally0(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1362,List<GridCacheClearAllRunnable<K, V>> jobs = splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1400,public void clearLocally(Collection<KeyCacheObject> keys, boolean readers) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1402,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1404,GridCacheVersion obsoleteVer = ctx.versions().next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1406,for (KeyCacheObject key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1407,GridCacheEntryEx e = peekEx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1409,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1411,e.clear(obsoleteVer, readers, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1413,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1414,U.error(log, "Failed to clearLocally entry (will continue to clearLocally other entries): " + e,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1415,ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1428,private boolean clearLocally(GridCacheVersion obsoleteVer, K key, @Nullable CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1429,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1430,KeyCacheObject cacheKey = ctx.toCacheKeyObject(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1432,GridCacheEntryEx entry = ctx.isSwapOrOffheapEnabled() ? entryEx(cacheKey) : peekEx(cacheKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1435,return entry.clear(obsoleteVer, false, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1437,catch (GridDhtInvalidPartitionException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1438,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1440,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1441,U.error(log, "Failed to clearLocally entry for key: " + key, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1444,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1455,clearLocally(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1463,clearLocallyAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1531,Collection<ClusterNode> nodes = ctx.grid().cluster().forCacheNodes(name(), true, true, false).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1533,if (!nodes.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4853,public void clearLocally0(Collection<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4859,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4862,validateCacheKeys(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4867,clearLocally(obsoleteVer, k, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4875,public boolean clearLocally0(K key, @Nullable CacheEntryPredicate... filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4876,A.notNull(key, "key");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4879,validateCacheKey(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4884,return clearLocally(ctx.versions().next(), key, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheClearAllRunnable.java,58,public GridCacheClearAllRunnable(GridCacheAdapter<K, V> cache, GridCacheVersion obsoleteVer, int id, int totalCnt) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheClearAllRunnable.java,139,e.clear(obsoleteVer, false, CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1247,delegate.clearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1295,return delegate.clearAsync(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProxyImpl.java,1331,delegate.clearLocallyAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1032,setFuture(delegate.clearAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,897,return ctx.affinityNode() ? super.splitClearLocally() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,74,AffinityTopologyVersion topVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,511,return super.clearLocally0(key, filter) | dht().clearLocally0(key, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,517,super.clearLocally0(keys, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,519,dht().clearLocally0(keys, filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,622,List<GridCacheClearAllRunnable<K, V>> dhtJobs = dht().splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,632,return super.splitClearLocally();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheClearAllRunnable.java,40,super(cache, obsoleteVer, dhtJob.id(), dhtJob.totalCount());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheClearAllRunnable.java,42,assert dhtJob != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,59,private final GridEventStorageManager evts;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,92,evts = igfsCtx.kernalContext().event();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,211,deleteDirectory(TRASH_ID, id);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,221,data.delete(info).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,225,if (evts.isRecordable(EVT_IGFS_FILE_PURGED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,227,evts.record(new IgfsEvent(info.path(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,228,igfsCtx.kernalContext().discovery().localNode(), EVT_IGFS_FILE_PURGED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,229,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,230,LT.warn(log, null, "Removing file without path info: " + info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,248,private void deleteDirectory(IgniteUuid parentId, IgniteUuid id) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,258,Map<String, IgfsListingEntry> listing = info.listing();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,261,return; // Directory is empty.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,263,Map<String, IgfsListingEntry> delListing;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,266,delListing = listing;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,267,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,268,delListing = new HashMap<>(MAX_DELETE_BATCH, 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,270,int i = 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,272,for (Map.Entry<String, IgfsListingEntry> entry : listing.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,273,delListing.put(entry.getKey(), entry.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,276,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,280,GridCompoundFuture<Object, ?> fut = new GridCompoundFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,283,for (IgfsListingEntry entry : delListing.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,284,if (!cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,286,deleteDirectory(id, entry.fileId());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,287,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,288,IgfsFileInfo fileInfo = meta.info(entry.fileId());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,290,if (fileInfo != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,291,assert fileInfo.isFile();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,293,fut.add(data.delete(fileInfo));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,297,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,298,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,311,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,318,break; // All entries were deleted.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteWorker.java,321,break; // Entry was deleted concurrently.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,64,private static final Map<String, String> DFLT_DIR_META = F.asMap(PROP_PERMISSION, PERMISSION_DFLT_VAL);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,721,if (res && desc != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,722,if (desc.isFile) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,724,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,727,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_DIR_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1007,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_READ));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1028,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_READ));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1082,IgfsMode mode = resolveMode(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1100,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1106,IgfsPath parent = path.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1110,mkdirs(parent, props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1112,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1115,IgniteUuid parentId = ids.size() >= 2 ? ids.get(ids.size() - 2) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1118,throw new IgfsPathNotFoundException("Failed to resolve parent directory: " + parent);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1120,String fileName = path.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1123,IgfsFileInfo info = new IgfsFileInfo(cfg.getBlockSize(), affKey, evictExclude(path, true), props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1126,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1127,IgniteUuid oldId = meta.putIfAbsent(parentId, fileName, info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1130,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1133,throw new IgfsPathAlreadyExistsException("Failed to create file (file already exists): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1134,path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1136,IgfsFileInfo oldInfo = meta.info(oldId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1138,assert oldInfo != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1141,throw new IgfsPathAlreadyExistsException("Failed to create file (path points to a " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1146,deleteFile(path, new FileDescriptor(parentId, fileName, oldId, oldInfo.isFile()), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1149,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1153,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1155,info = meta.lock(info.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1157,IgfsEventAwareOutputStream os = new IgfsEventAwareOutputStream(path, info, parentId,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1161,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1163,return os;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1185,IgfsMode mode = resolveMode(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1202,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1204,IgfsFileInfo info = meta.info(ids.get(ids.size() - 1));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1207,IgniteUuid parentId = ids.size() >= 2 ? ids.get(ids.size() - 2) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1209,if (info == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1217,throw new IgfsPathNotFoundException("Failed to resolve parent directory: " + path.parent());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1219,info = new IgfsFileInfo(cfg.getBlockSize(), /**affinity key*/null, evictExclude(path, true), props);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1221,IgniteUuid oldId = meta.putIfAbsent(parentId, path.name(), info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1224,info = meta.info(oldId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1227,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1230,assert info != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1233,throw new IgfsPathIsDirectoryException("Failed to open file (not a file): " + path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1235,info = meta.lock(info.id());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1238,evts.record(new IgfsEvent(path, localNode(), EVT_IGFS_FILE_OPENED_WRITE));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1240,return new IgfsEventAwareOutputStream(path, info, parentId, bufSize == 0 ?
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1241,cfg.getStreamBufferSize() : bufSize, mode, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1534,private void deleteFile(IgfsPath path, FileDescriptor desc, boolean rmvLocked) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1535,IgniteUuid parentId = desc.parentId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1536,IgniteUuid fileId = desc.fileId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1538,if (parentId == null || ROOT_ID.equals(fileId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1539,assert parentId == null && ROOT_ID.equals(fileId) : "Invalid file descriptor: " + desc;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1541,return; // Never remove the root directory!
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1545,return; // Never remove trash directory.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1547,meta.removeIfEmpty(parentId, desc.fileName, fileId, path, rmvLocked);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,2084,private <T> T safeOp(Callable<T> action) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,2087,return action.call();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,409,public IgfsFileInfo lock(IgniteUuid fileId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,422,throw new IgniteCheckedException("Failed to lock file (file not found): " + fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,424,IgfsFileInfo newInfo = lockInfo(oldInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,456,public IgfsFileInfo lockInfo(IgfsFileInfo info) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,457,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,458,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,459,assert info != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,462,throw new IgniteCheckedException("Failed to lock file (file is being concurrently written) [fileId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,463,info.id() + ", lockId=" + info.lockId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,465,return new IgfsFileInfo(info, IgniteUuid.randomUuid(), info.modificationTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,467,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,468,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,471,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,472,throw new IllegalStateException("Failed to get lock info because Grid is stopping: " + info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,670,private Map<String, IgfsListingEntry> directoryListing(IgniteUuid fileId, boolean skipTx) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,689,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,690,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,691,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,692,assert validTxState(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,693,assert parentId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,694,assert fileName != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,695,assert newFileInfo != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,697,IgniteUuid res = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,699,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,701,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,702,res = putIfAbsentNonTx(parentId, fileName, newFileInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,704,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,706,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,707,tx.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,710,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,712,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,713,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,716,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,717,throw new IllegalStateException("Failed to put file because Grid is stopping [parentId=" + parentId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,744,throw fsException(new IgfsPathNotFoundException("Failed to lock parent directory (not found): " + parentId));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,903,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,904,if (busyLock.enterBusy()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,905,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,906,assert validTxState(false);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,908,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,910,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,912,lockIds(parentId, fileId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,913,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,914,lockIds(fileId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,916,IgfsFileInfo fileInfo = removeIfEmptyNonTx(parentId, fileName, fileId, path, rmvLocked);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,918,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,920,delWorker.signal();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,922,return fileInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,924,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,925,tx.close();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,928,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,929,busyLock.leaveBusy();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,932,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,933,throw new IllegalStateException("Failed to remove file system entry because Grid is stopping [parentId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,934,parentId + ", fileName=" + fileName + ", fileId=" + fileId + ", path=" + path + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,950,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,951,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,952,assert parentId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,953,assert fileName != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,954,assert fileId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,955,assert !ROOT_ID.equals(fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,958,log.debug("Remove file: [parentId=" + parentId + ", fileName= " + fileName + ", fileId=" + fileId + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,961,IgfsFileInfo fileInfo = id2InfoPrj.get(fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,962,IgfsFileInfo parentInfo = id2InfoPrj.get(parentId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,964,if (fileInfo == null || parentInfo == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,965,if (parentInfo != null) { // fileInfo == null
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,966,IgfsListingEntry entry = parentInfo.listing().get(fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,970,throw new IgniteCheckedException("Failed to remove file (file system is in inconsistent state) " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,974,return null; // Parent directory or removed file cannot be locked (not found?).
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,977,assert parentInfo.isDirectory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,980,throw fsException("Failed to remove file (file is opened for writing) [fileName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,981,fileName + ", fileId=" + fileId + ", lockId=" + fileInfo.lockId() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,984,if (fileInfo.isDirectory()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,985,Map<String, IgfsListingEntry> listing = fileInfo.listing();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,988,throw fsException(new IgfsDirectoryNotEmptyException("Failed to remove file (directory is not empty)" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,993,IgfsListingEntry listingEntry = parentInfo.listing().get(fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,996,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,999,softDeleteNonTx(parentId, fileName, fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1003,id2InfoPrj.invoke(fileId, new UpdatePath(path));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1005,return builder(fileInfo).path(path).build();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1671,IgniteUuid.randomUuid(), igfsCtx.igfs().evictExclude(path, false), status.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1690,if (evts.isRecordable(EVT_IGFS_FILE_PURGED)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1691,delFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1693,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1694,t.get(); // Ensure delete succeeded.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1696,evts.record(new IgfsEvent(path, locNode, EVT_IGFS_FILE_PURGED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1698,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1699,LT.warn(log, e, "Old file deletion failed in DUAL mode [path=" + path +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1710,pendingEvts.add(new IgfsEvent(path, locNode, EVT_IGFS_FILE_DELETED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1772,IgfsFileInfo info = infos.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1800,info = lockInfo(info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1804,return new IgfsSecondaryOutputStreamDescriptor(infos.get(path.parent()).id(), info, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1814,throw new IgniteCheckedException("Failed to append to the file due to secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1923,throw new IgniteCheckedException("Failed to synchronize path due to secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2002,throw new IgniteCheckedException("Failed to create the path due to secondary file system exception: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2003,path, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2170,throw new IgniteCheckedException("Failed to delete the path due to secondary file system exception: ",
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2171,err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2199,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2224,throw new IgniteCheckedException("Failed to update the path due to secondary file system exception: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2225,path, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2289,throw new IgniteCheckedException("Failed to create path the locally because secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,791,Map<String, String> props0 = props == null ? DFLT_DIR_META : props;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,795,if (mode != PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,802,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,805,List<IgniteUuid> ids = meta.fileIds(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,806,List<String> components = path.components();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,808,assert ids.size() == components.size() + 1 : "Components doesn't contain ROOT element" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,811,IgniteUuid parentId = ROOT_ID;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,813,IgfsPath curPath = path.root();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,815,for (int step = 0, size = components.size(); step < size; step++) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,816,IgniteUuid fileId = ids.get(step + 1); // Skip the first ROOT element.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,818,if (fileId == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,819,IgfsFileInfo fileInfo = new IgfsFileInfo(true, props0); // Create new directory.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,821,String fileName = components.get(step); // Get current component name.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,823,curPath = new IgfsPath(curPath, fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,825,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,827,IgniteUuid oldId = meta.putIfAbsent(parentId, fileName, fileInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,829,fileId = oldId == null ? fileInfo.id() : oldId; // Update node ID.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,832,evts.record(new IgfsEvent(curPath, localNode(), EVT_IGFS_DIR_CREATED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,834,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,836,log.debug("Failed to create directory [path=" + path + ", parentId=" + parentId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,840,IgfsFileInfo stored = meta.info(meta.fileId(parentId, fileName));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,843,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,846,throw new IgfsParentNotDirectoryException("Failed to create directory (parent " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,849,fileId = stored.id(); // Update node ID.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,853,assert fileId != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,855,parentId = fileId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1321,IgfsFileInfo oldInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1322,IgfsFileInfo parentInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1339,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1373,assert metaCache.get(parentId) != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,132,new GridBoundedConcurrentLinkedHashMap<>(DISCOVERY_HISTORY_SIZE, DISCOVERY_HISTORY_SIZE, 0.7f, 1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,38,private UUID locNodeId;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,42,locNodeId = cctx.localNodeId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,93,locNodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEventManager.java,113,locNodeId,
modules/core/src/main/java/org/apache/ignite/igfs/IgfsPath.java,48,private static final String SLASH = "/";
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileInfo.java,214,IgfsFileInfo(Map<String, IgfsListingEntry> listing, IgfsFileInfo old) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,707,res = delete0(desc, path.parent(), recursive);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,747,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,748,IgfsPath curPath = parentPath == null ? new IgfsPath() : new IgfsPath(parentPath, desc.fileName);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,750,if (desc.isFile) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,751,deleteFile(curPath, desc, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,753,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,755,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,756,if (recursive) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,757,meta.softDelete(desc.parentId, desc.fileName, desc.fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,759,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,761,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,762,Map<String, IgfsListingEntry> infoMap = meta.directoryListing(desc.fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,764,if (F.isEmpty(infoMap)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,765,deleteFile(curPath, desc, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,767,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,769,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,771,throw new IgfsDirectoryNotEmptyException("Failed to remove directory (directory is not empty " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1442,IgniteUuid id = meta.softDelete(null, null, ROOT_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,567,IgfsFileInfo info = new IgfsFileInfo();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,571,map = new GridLeanMap<>(map);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,573,map.put(ROOT_ID, info);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,577,return map;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,736,validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,741,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,755,assert validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,839,validTxState(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1017,IgniteUuid softDelete(@Nullable IgniteUuid parentId, @Nullable String pathName, IgniteUuid pathId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1022,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1026,lockIds(pathId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1027,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1028,lockIds(parentId, pathId, TRASH_ID);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1030,IgniteUuid resId = softDeleteNonTx(parentId, pathName, pathId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1036,return resId;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1047,throw new IllegalStateException("Failed to perform soft delete because Grid is stopping [parentId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,1048,parentId + ", pathName=" + pathName + ", pathId=" + pathId + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2208,throws Exception {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2214,assert path.parent() == null || infos.get(path.parent()) != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2216,return updatePropertiesNonTx(infos.get(path.parent()).id(), infos.get(path).id(), path.name(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,2217,props);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,70,throw new NullPointerException();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,123,if (type == CAST) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,124,assert !F.isEmpty(castType) : castType;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,125,assert size() == 1;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,127,buff.append(child().getSQL()).append(" AS ").append(castType);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,129,else if (type == CONVERT) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,130,assert !F.isEmpty(castType) : castType;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,131,assert size() == 1;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,133,buff.append(child().getSQL()).append(',').append(castType);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,135,else if (type == GridSqlFunctionType.EXTRACT) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,136,ValueString v = (ValueString)((GridSqlConst)child(0)).value();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,137,buff.append(v.getString()).append(" FROM ").append(child(1).getSQL());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,139,else {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,140,for (GridSqlElement e : children) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,141,buff.appendExceptFirst(", ");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlFunction.java,142,buff.append(e.getSQL());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,244,Set<TableFilter> allFilters = new HashSet<>(select.getTopFilters());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,259,allFilters.remove(filter);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,267,assert allFilters.isEmpty();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlType.java,46,public GridSqlType(int type, int scale, long precision, int displaySize, String sql) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,151,for (DynamicCacheChangeRequest req : batch.requests()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,154,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCachePartitionExchangeManager.java,155,cctx.cache().completeStartFuture(req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1748,private void onCacheChangeRequested(DynamicCacheChangeBatch batch) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,219,ClusterNode node = ctx.discovery().node(nodeId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,221,if (ctx.config().isPeerClassLoadingEnabled() && node != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,224,GridCacheDeploymentManager depMgr =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,225,ctx.cache().internalCache(cacheName).context().deploy();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,298,GridCacheAdapter<K, V> cache = ctx.cache().<K, V>internalCache(cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,388,loc ? ctx.grid().cluster().forLocal() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,266,grp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,294,loc ? cctx.grid().cluster().forLocal() : null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,366,grp = cctx.kernalContext().grid().cluster();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,368,Collection<ClusterNode> nodes = grp.nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,371,throw new ClusterTopologyException("Failed to execute continuous query (empty cluster group is " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,374,boolean skipPrimaryCheck = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,376,switch (cctx.config().getCacheMode()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,377,case LOCAL:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,379,throw new ClusterTopologyException("Continuous query for LOCAL cache can be executed " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,382,U.warn(log, "Continuous query for LOCAL cache will be executed locally (provided projection is " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,385,grp = grp.forNode(cctx.localNode());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,387,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,389,case REPLICATED:
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,391,skipPrimaryCheck = cctx.affinityNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,393,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,595,null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/DynamicCacheDescriptor.java,39,private boolean cancelled;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1223,return F.viewReadOnly(registeredCaches.keySet(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1224,new IgniteClosure<String, String>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1226,return unmaskNull(s);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,412,UUID id = cctx.kernalContext().continuous().startRoutine(hnd, bufSize, timeInterval,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryManager.java,413,autoUnsubscribe, grp.predicate()).get();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,165,assert node.internalOrder() > maxInternalOrder() : "Adding node to the middle of the ring " +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,192,TcpDiscoveryNode last = nodes.last();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,194,return last != null ? last.internalOrder() : -1;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,302,public Collection<TcpDiscoveryNode> removeNodes(Collection<UUID> nodeIds) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,303,assert !F.isEmpty(nodeIds);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,305,rwLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,307,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,308,boolean firstRmv = true;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,310,Collection<TcpDiscoveryNode> res = null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,312,for (UUID id : nodeIds) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,313,TcpDiscoveryNode rmv = nodesMap.remove(id);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,315,if (rmv != null) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,316,if (firstRmv) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,317,nodes = new TreeSet<>(nodes);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,319,res = new ArrayList<>(nodeIds.size());
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,321,firstRmv = false;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,324,nodes.remove(rmv);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,326,res.add(rmv);
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,330,return res == null ? Collections.<TcpDiscoveryNode>emptyList() : res;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,332,finally {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,333,rwLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,583,if (nodeOrder == 0) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,584,TcpDiscoveryNode last = nodes.last();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,586,assert last != null;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryNodesRing.java,588,nodeOrder = last.internalOrder();
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryDiscardMessage.java,50,public TcpDiscoveryDiscardMessage(UUID creatorNodeId, IgniteUuid msgId) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/messages/TcpDiscoveryNodeAddedMessage.java,130,public void messages(@Nullable Collection<TcpDiscoveryAbstractMessage> msgs, @Nullable IgniteUuid discardMsgId) {
modules/core/src/main/java/org/apache/ignite/IgniteFileSystem.java,445,public IgfsFile info(IgfsPath path) throws IgniteException;
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,431,A.ensure(name == null || !name.isEmpty(), "Name cannot be null or empty.");
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,624,IgfsPath destParent = dest.parent();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,627,FileDescriptor srcDesc = getFileDescriptor(src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,630,if (srcDesc == null || srcDesc.parentId == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,632,checkConflictWithPrimary(src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,634,throw new IgfsPathNotFoundException("Failed to rename (source path not found): " + src);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,637,String srcFileName = src.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,640,FileDescriptor destDesc = getFileDescriptor(dest);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,642,String destFileName;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,644,boolean newDest = destDesc == null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,646,if (newDest) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,647,assert destParent != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,650,destDesc = getFileDescriptor(destParent);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,654,throw new IgfsPathNotFoundException("Failed to rename (destination directory does not " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,657,destFileName = dest.name();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,659,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,661,destFileName = srcFileName;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,665,throw new IgfsParentNotDirectoryException("Failed to rename (destination is not a directory): "
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,666,+ dest);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,668,meta.move(srcDesc.fileId, srcFileName, srcDesc.parentId, destFileName, destDesc.fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,670,if (srcDesc.isFile) { // Renamed a file.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,672,evts.record(new IgfsEvent(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,673,src,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,674,newDest ? dest : new IgfsPath(dest, destFileName),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,675,localNode(),
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,676,EVT_IGFS_FILE_RENAMED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,678,else { // Renamed a directory.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,680,evts.record(new IgfsEvent(src, dest, localNode(), EVT_IGFS_DIR_RENAMED));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,900,public IgfsPath apply(String e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,554,Collection<IgniteUuid> keys = Arrays.asList(fileIds);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,557,log.debug("Locking file ids: " + keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,560,Map<IgniteUuid, IgfsFileInfo> map = id2InfoPrj.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,563,log.debug("Locked file ids: " + keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,566,if (keys.contains(ROOT_ID) && !map.containsKey(ROOT_ID)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,782,public void move(IgniteUuid fileId, String srcFileName, IgniteUuid srcParentId, String destFileName,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,783,IgniteUuid destParentId) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,791,moveNonTx(fileId, srcFileName, srcParentId, destFileName, destParentId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,804,throw new IllegalStateException("Failed to move file system entry because Grid is stopping [fileId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,805,fileId + ", srcFileName=" + srcFileName + ", srcParentId=" + srcParentId + ", destFileName=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,806,destFileName + ", destParentId=" + destParentId + ']');
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2Table.java,382,Value v = row.getValue(GridH2AbstractKeyValueRow.VAL_COL);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3689,ver,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3690,expireTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3726,protected CacheObject saveValueForIndexUnlocked() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3830,CacheObject prev = saveValueForIndexUnlocked();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2090,if (qryMgr != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryFuture.java,139,onPage(nodeId, Collections.emptyList(), null, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheDistributedQueryFuture.java,226,return super.onDone(res, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,368,onPage(nodeId, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1419,U.error(log, "Failed to run query [qry=" + qryInfo + ", node=" + cctx.nodeId() + "]", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1542,U.error(log, "Failed to close iterator.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,97,beforeExchange(exchFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,141,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,142,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,198,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,204,GridDhtPartitionExchangeId exchId = exchFut.exchangeId();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,206,assert topVer.equals(exchId.topologyVersion()) : "Invalid topology version [topVer=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,207,topVer + ", exchId=" + exchId + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,210,removeNode(exchId.nodeId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,216,log.debug("Partition map beforeExchange [exchId=" + exchId + ", fullMap=" + fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,218,long updateSeq = this.updateSeq.incrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,222,if (node2part == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,226,log.debug("Created brand new full topology map on oldest node [exchId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,227,exchId + ", fullMap=" + fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,229,else if (!node2part.valid()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,233,log.debug("Created new full topology map on oldest node [exchId=" + exchId + ", fullMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,234,node2part + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,236,else if (!node2part.nodeId().equals(loc.id())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,240,log.debug("Copied old map into new map on oldest node (previous oldest node left) [exchId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,241,exchId + ", fullMap=" + fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,245,consistencyCheck();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,248,log.debug("Partition map after beforeExchange [exchId=" + exchId + ", fullMap=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,249,fullMapString() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,251,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,252,lock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopology.java,55,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,165,) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,166,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,227,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,556,topVer, txEntry.filters(), replicate ? DR_BACKUP : DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,561,txEntry.ttl(), true, true, topVer, txEntry.filters(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,581,topVer, txEntry.filters(), replicate ? DR_BACKUP : DR_NONE,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,516,cctx.swap().enableOffheapEviction(key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3201,if (isNew() || (!preload && deletedUnlocked())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,127,int off = VERSION_OFFSET; // Skip ttl, expire time.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,129,boolean verEx = bytes[off++] != 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,162,public static int valueOffset(byte[] bytes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,163,assert bytes.length > 40 : bytes.length;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,165,int off = VERSION_OFFSET; // Skip ttl, expire time.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,167,boolean verEx = bytes[off++] != 0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,169,off += verEx ? VERSION_EX_SIZE : VERSION_SIZE;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,171,off += 5; // Byte array flag + array size.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,173,assert bytes.length >= off;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapEntryImpl.java,175,return off;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,79,private final Collection<GridWeakIterator<Map.Entry>> itSet =
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,80,new GridConcurrentHashSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,115,GridOffHeapEvictListener lsnr = !swapEnabled && !offheapEnabled ? null : new GridOffHeapEvictListener() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,116,private volatile boolean firstEvictWarn;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,119,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,121,warnFirstEvict();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,123,writeToSwap(part, cctx.toCacheKeyObject(kb), vb);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,125,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,130,private void warnFirstEvict() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,131,synchronized (this) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,133,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,135,firstEvictWarn = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,138,U.warn(log, "Off-heap evictions started. You may wish to increase 'offHeapMaxMemory' in " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,419,public boolean containsKey(KeyCacheObject key) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,425,int part = cctx.affinity().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,910,void enableOffheapEviction(final KeyCacheObject key) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,916,int part = cctx.affinity().partition(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1233,ctx.near().dht().context().evicts().unwind();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1240,for (GridCacheContext<K, V> cacheCtx : ctx.cacheContexts()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1243,cacheCtx.evicts().unwind();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,1246,cacheCtx.near().dht().context().evicts().unwind();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,221,assert entry.obsolete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,504,private GridDhtLocalPartition localPartition(int p, AffinityTopologyVersion topVer, boolean create, boolean updateSeq) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,505,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,506,boolean belongs = cctx.affinity().localNode(p, topVer);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMap.java,28,public interface GridOffHeapMap<K> {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,34,public static <K> GridOffHeapMap<K> unsafeMap(long initCap) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,35,return new GridUnsafeMap<>(128, 0.75f, initCap, 0, (short)0, null);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,45,public static <K> GridOffHeapMap<K> unsafeMap(int concurrency, long initCap) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,46,return new GridUnsafeMap<>(concurrency, 0.75f, initCap, 0, (short)0, null);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,57,public static <K> GridOffHeapMap<K> unsafeMap(int concurrency, float load, long initCap) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,58,return new GridUnsafeMap<>(concurrency, load, initCap, 0, (short)0, null);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,70,public static <K> GridOffHeapMap<K> unsafeMap(long initCap, long totalMem, short lruStripes) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,71,return new GridUnsafeMap<>(128, 0.75f, initCap, totalMem, lruStripes, null);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,84,public static <K> GridOffHeapMap<K> unsafeMap(long initCap, long totalMem, short lruStripes,
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,86,return new GridUnsafeMap<>(128, 0.75f, initCap, totalMem, lruStripes, lsnr);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,100,public static <K> GridOffHeapMap<K> unsafeMap(int concurrency, long initCap, long totalMem, short lruStripes,
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,102,return new GridUnsafeMap<>(concurrency, 0.75f, initCap, totalMem, lruStripes, lsnr);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,117,public static <K> GridOffHeapMap<K> unsafeMap(int concurrency, float load, long initCap, long totalMem,
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/GridOffHeapMapFactory.java,119,return new GridUnsafeMap<>(concurrency, load, initCap, totalMem, lruStripes, lsnr);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,37,public class GridUnsafeMap<K> implements GridOffHeapMap<K> {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,72,private final Segment<K>[] segs;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,242,segs[i] = new Segment<>(i, cap);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,554,private class Segment<K> {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1004,long next = Entry.nextAddress(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1007,Entry.nextAddress(prev, next, mem); // Relink.
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1008,else {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1010,Bin.clear(binAddr, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1011,else
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1012,Bin.first(binAddr, next, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1021,int keyLen = Entry.readKeyLength(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1022,int valLen = Entry.readValueLength(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1024,valBytes = mem.readBytes(cur + HEADER + keyLen, valLen);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1028,long a;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1030,assert qAddr == (a = Entry.queueAddress(cur, mem)) : "Queue node address mismatch " +
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1033,relSize = Entry.size(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1034,relAddr = cur;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1036,cnt--;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1038,totalCnt.decrement();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1246,return remove(hash, keyBytes, true);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1255,return remove(hash, keyBytes, false) == EMPTY_BYTES;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1265,byte[] remove(int hash, byte[] keyBytes, boolean retval) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1298,if (retval) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1299,int keyLen = Entry.readKeyLength(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1300,int valLen = Entry.readValueLength(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1302,valBytes = mem.readBytes(cur + HEADER + keyLen, valLen);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1304,else
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1305,valBytes = EMPTY_BYTES;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1378,IgniteBiTuple<Long, Integer> valuePointer(int hash, byte[] keyBytes) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,237,Value v = peekValue(col);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,263,v = updateWeakValue(upd);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,265,return v == null ? upd : v;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,286,if (v == null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,289,v = getOffheapValue(KEY_COL);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,291,assert v != null : v;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,293,setValue(KEY_COL, v);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2AbstractKeyValueRow.java,296,cache();
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,589,if (locIncluded) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,590,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,592,hnd.onListenerRegistered(routineId, ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,594,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,595,return new GridFinishedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,596,new IgniteCheckedException("Failed to register handler locally: " + hnd, e));
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContext.java,96,public IgniteLogger log();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,716,return config().getGridLogger();
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,721,return config().getGridLogger().getLogger(cls);
modules/core/src/main/java/org/apache/ignite/internal/GridKernalContextImpl.java,769,return spring != null ? spring.userVersion(ldr, log()) : U.DFLT_USER_VERSION;
modules/core/src/main/java/org/apache/ignite/internal/GridLoggerProxy.java,204,return IgnitionEx.gridx(gridNameR).log().getLogger(ctgrR);
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,601,log = (GridLoggerProxy)cfg.getGridLogger().getLogger(getClass().getName() +
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,602,(gridName != null ? '%' + gridName : ""));
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2135,return log;
modules/core/src/main/java/org/apache/ignite/internal/executor/GridExecutorService.java,119,this.log = ctx.log().getLogger(GridExecutorService.class);
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentStoreAdapter.java,60,log = ctx.config().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,244,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheClearAllRunnable.java,71,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheLogger.java,70,log = cctx.kernalContext().log().getLogger(ctgr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,406,return kernalCtx.log().getLogger(category);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicLongImpl.java,215,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicReferenceImpl.java,109,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicSequenceImpl.java,135,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheAtomicStampedImpl.java,133,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,128,log = ctx.gridConfig().getGridLogger().getLogger(getClass());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,389,super(igfsCtx.kernalContext().gridName(), "fragmentizer-coordinator", igfsCtx.kernalContext().log());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerManager.java,701,super(igfsCtx.kernalContext().gridName(), "fragmentizer-worker", igfsCtx.kernalContext().log());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServerManager.java,163,super(igfsCtx.kernalContext().gridName(), "bind-worker", igfsCtx.kernalContext().log());
modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java,155,super(ctx.gridName(), "grid-job-worker", ctx.log());
modules/core/src/main/java/org/apache/ignite/internal/processors/task/GridTaskWorker.java,220,super(ctx.config().getGridName(), "grid-task-worker", ctx.config().getGridLogger());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,603,GridDhtCacheEntry lastEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,606,return it.hasNext();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,610,Map.Entry<byte[], GridCacheSwapEntry> entry = it.next();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,612,byte[] keyBytes = entry.getKey();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedCacheEntry.java,175,GridCacheEntryRemovedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,239,super.prepareMarshal(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,247,super.finishUnmarshal(ctx, ldr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,441,GridCacheEntryEx Entry = txEntry.cached();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,443,assert Entry != null : "Missing cached entry for transaction entry: " + txEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxRemoteAdapter.java,451,log.debug("Transaction does not own lock for entry (will wait) [entry=" + Entry +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,676,IgniteInternalFuture<Object> keyFut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,678,if (req.onePhaseCommit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,679,boolean forceKeys = req.hasTransforms() || req.filter() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,681,if (!forceKeys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,683,forceKeys |= req.returnValue(i);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,687,keyFut = ctx.dht().dhtPreloader().request(keys, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,691,keyFut = new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,693,return new GridEmbeddedFuture<>(keyFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,694,new C2<Object, Exception, IgniteInternalFuture<GridNearLockResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,697,return new GridDhtFinishedFuture<>(exx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,699,CacheEntryPredicate[] filter = filter0;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,702,GridDhtTxLocal tx = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,704,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,705,int cnt = keys.size();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,707,if (req.inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,708,GridCacheVersion dhtVer = ctx.tm().mappedVersion(req.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,711,tx = ctx.tm().tx(dhtVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,714,final List<GridCacheEntryEx> entries = new ArrayList<>(cnt);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,718,filter = req.filter();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,722,if (!req.inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,741,boolean timedout = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,743,for (KeyCacheObject key : keys) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,745,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,747,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,750,GridDhtCacheEntry entry = entryExx(key, req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,752,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,753,if (fut != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,756,fut.addEntry(key == null ? null : entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,758,if (fut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,759,timedout = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,761,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,765,entries.add(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,767,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,769,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,771,log.debug("Got removed entry when adding lock (will retry): " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,773,catch (GridDistributedLockCancelledException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,775,log.debug("Got lock request for cancelled lock (will ignore): " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,776,entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,778,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,780,return new GridDhtFinishedFuture<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,786,if (req.inTx()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,787,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,830,ctx.tm().txContext(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,833,log.debug("Performing DHT lock [tx=" + tx + ", entries=" + entries + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,835,IgniteInternalFuture<GridCacheReturn> txFut = tx.lockAllAsync(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,836,cacheCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,838,req.onePhaseCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,839,req.messageId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,840,req.txRead(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,841,req.needReturnValue(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,844,final GridDhtTxLocal t = tx;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,846,return new GridDhtEmbeddedFuture(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,847,txFut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,848,new C2<GridCacheReturn, Exception, IgniteInternalFuture<GridNearLockResponse>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,850,GridCacheReturn o, Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,852,e = U.unwrap(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,854,assert !t.empty();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,857,final GridNearLockResponse resp = createLockReply(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,858,entries,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,859,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,860,t,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,861,t.xidVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,862,e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,864,if (resp.error() == null && t.onePhaseCommit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,865,assert t.implicit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,867,return t.commitAsync().chain(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,868,new C1<IgniteInternalFuture<IgniteInternalTx>, GridNearLockResponse>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,870,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,872,f.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,874,catch (IgniteCheckedException e1) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,875,resp.error(e1);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,878,sendLockReply(nearNode, t, req, resp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,880,return resp;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,884,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,887,return new GridFinishedFuture<>(resp);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,891,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,893,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,894,assert fut != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,897,fut.map();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,899,final GridCacheVersion mappedVer = fut.version();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,901,return new GridDhtEmbeddedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,902,new C2<Boolean, Exception, GridNearLockResponse>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,905,e = U.unwrap(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,907,e = new GridCacheLockTimeoutException(req.version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,909,GridNearLockResponse res = createLockReply(nearNode,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,910,entries,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,911,req,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,912,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,913,mappedVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,914,e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,916,sendLockReply(nearNode, null, req, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,918,return res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,921,fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,924,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,925,String err = "Failed to unmarshal at least one of the keys for lock request message: " + req;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,927,U.error(log, err, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,929,if (tx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,930,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,931,tx.rollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,933,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,934,U.error(log, "Failed to rollback the transaction: " + tx, ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,938,return new GridDhtFinishedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,939,new IgniteCheckedException(err, e));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,943,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,212,this.tx.tmCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,380,req.writeVersion(tx.writeVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,129,super(xidVer, futId, commitVer, threadId, commit, invalidate, sys, plc, syncCommit, syncRollback, baseVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,128,return 6;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,111,super(cctx, xidVer, implicit, implicitSingle, sys, plc, concurrency, isolation, timeout, invalidate,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,508,boolean onePhaseCommit,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,488,if (tx.onePhaseCommit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,106,super(ctx, nodeId, rmtThreadId, xidVer, commitVer, sys, plc, concurrency, isolation, invalidate, timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,165,super(ctx, nodeId, rmtThreadId, xidVer, commitVer, sys, plc, concurrency, isolation, invalidate, timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxRemote.java,214,UUID nearNodeId() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,207,public boolean onePhaseCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,208,return onePhaseCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,214,public void onePhaseCommit(boolean onePhaseCommit) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,215,this.onePhaseCommit = onePhaseCommit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,213,this.tx.tmCommit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,217,if (super.onDone(tx, th != null ? th : err)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,219,AffinityTopologyVersion topVer = this.tx.topologyVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,221,for (IgniteTxEntry e : this.tx.writeMap().values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,226,GridCacheEntryEx Entry = cacheCtx.cache().peekEx(e.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,229,Entry.invalidate(null, this.tx.xidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,274,if (tx.onePhaseCommit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,277,for (GridDistributedTxMapping m : mappings.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,278,if (m.node().isLocal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,279,IgniteInternalFuture<IgniteInternalTx> fut = cctx.tm().txHandler().finishColocatedLocal(commit, tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,283,add(fut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,292,if (mappings != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,293,finish(mappings.values());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,295,markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,297,if (!isSync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,298,boolean complete = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,303,complete = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,306,onComplete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,309,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,310,assert !commit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,312,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,313,tx.rollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,315,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,316,U.error(log, "Failed to rollback empty transaction: " + tx, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,319,markInitialized();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,439,return m.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,468,onDone(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,99,super(xidVer, futId, null, threadId, commit, invalidate, sys, plc, syncCommit, syncRollback, baseVer,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,758,f.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,761,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,762,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,763,fut0.onError(new IgniteCheckedException("Failed to commit transaction: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,764,CU.txString(GridNearTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,810,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,812,fut.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,813,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,814,fut.onError(new IgniteCheckedException("Failed to gracefully rollback transaction: " + CU.txString(this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,816,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,817,fut.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,834,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,836,fut0.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,837,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,838,fut0.onError(new IgniteCheckedException("Failed to gracefully rollback transaction: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,839,CU.txString(GridNearTxLocal.this)));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,841,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,842,U.error(log, "Failed to gracefully rollback transaction: " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,843,CU.txString(GridNearTxLocal.this), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,845,fut0.onError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,107,super(ctx, nodeId, rmtThreadId, xidVer, commitVer, sys, plc, concurrency, isolation, invalidate, timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,165,super(ctx, nodeId, rmtThreadId, xidVer, commitVer, sys, plc, concurrency, isolation, invalidate, timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,176,IgniteInternalFuture<Object> fut = new GridFinishedFuture<>(); // TODO force preload keys.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,178,return new GridEmbeddedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,179,fut,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,183,throw new GridClosureException(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,186,req.reads(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,187,req.writes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,188,req.transactionNodes(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,189,req.last(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,194,locTx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,196,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,201,if (e != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,213,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,412,GridDhtTxFinishFuture fut = (GridDhtTxFinishFuture)ctx.mvcc().<IgniteInternalTx>future(res.xid(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,413,res.futureId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,415,if (fut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,417,log.debug("Received response for unknown future (will ignore): " + res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,419,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,422,fut.onResult(nodeId, res);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,527,if (req.commit()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,528,if (tx == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,530,tx = ctx.tm().onCreated(null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,531,new GridDhtTxLocal(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,532,ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,533,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,534,req.version(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,535,req.futureId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,536,req.miniId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,537,req.threadId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,538,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,540,req.system(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,541,req.policy(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,542,PESSIMISTIC,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,543,READ_COMMITTED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,545,req.isInvalidate(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,546,req.storeEnabled(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,547,req.txSize(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,550,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,551,req.subjectId(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,552,req.taskNameHash()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,555,throw new IgniteTxRollbackCheckedException("Attempt to start a completed transaction: " + req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,557,tx.topologyVersion(req.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,584,nodeId + ", req=" + req + "]";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,803,if (tx.commitVersion(req.commitVersion())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,804,tx.invalidate(req.isInvalidate());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,805,tx.systemInvalidate(req.isSystemInvalidate());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,808,tx.doneRemote(req.baseVersion(), null, null, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,810,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,876,protected void sendReply(UUID nodeId, GridDhtTxFinishRequest req) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,146,super(cctx, xidVer, implicit, implicitSingle, /*local*/true, sys, plc, concurrency, isolation, timeout,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1020,public void tmCommit() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1025,cctx.tm().commitTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1027,state(COMMITTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1009,return addCommittedTx(tx.xidVersion(), tx.nearXidVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1198,completedVers.firstKey() + ", lastVer=" + completedVers.lastKey() + ", tx=" + tx.xid() + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,364,try (IgniteInternalTx tx = utilityCache.txStartEx(PESSIMISTIC, REPEATABLE_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,365,err = utilityCache.invoke(DATA_STRUCTURES_KEY, new AddAtomicProcessor(dsInfo)).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,368,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,376,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,379,return dataStructure;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,436,T rmvInfo;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,438,try (IgniteInternalTx tx = utilityCache.txStartEx(PESSIMISTIC, REPEATABLE_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,439,T2<Boolean, IgniteCheckedException> res =
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,440,utilityCache.invoke(DATA_STRUCTURES_KEY, new RemoveDataStructureProcessor(dsInfo)).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,442,err = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,445,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,447,assert res.get1() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,449,boolean exists = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,452,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,456,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,460,afterRmv.applyx(rmvInfo);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,774,T col;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,776,try (IgniteInternalTx tx = utilityCache.txStartEx(PESSIMISTIC, REPEATABLE_READ)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,777,T2<String, IgniteCheckedException> res =
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,778,utilityCache.invoke(DATA_STRUCTURES_KEY, new AddCollectionProcessor(dsInfo)).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,780,err = res.get2();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,783,throw err;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,785,String cacheName = res.get1();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,787,final GridCacheContext cacheCtx = ctx.cache().internalCache(cacheName).context();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,795,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,798,return col;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridTransactionalCacheQueueImpl.java,75,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridTransactionalCacheQueueImpl.java,122,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridTransactionalCacheQueueImpl.java,129,U.warn(log, "Failed to add item, will retry [err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridTransactionalCacheQueueImpl.java,179,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridTransactionalCacheQueueImpl.java,222,catch (ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1120,initOffHeap();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1015,if (evictLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridUnsafeMap.java,1016,keyBytes = Entry.readKeyBytes(cur, mem);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,298,fut = qry.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,308,fut = qry.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,316,fut = qry.execute(((SpiQuery)filter).getArgs());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,455,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,49,run = new LocalQueryRunnable<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheLocalQueryFuture.java,81,private class LocalQueryRunnable<K, V, R> implements GridPlainRunnable {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryAdapter.java,350,public void onExecuted(Object res, Throwable err, long startTime, long duration) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,143,qry.query().onExecuted(res, err, startTime(), duration());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,401,catch (Error e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,402,onPageError(nodeId, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryFutureAdapter.java,404,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1725,public void onMetricsUpdate(long duration, boolean fail) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1726,metrics.onQueryExecute(duration, fail);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,33,private volatile long minTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,36,private volatile long maxTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,39,private volatile double avgTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,42,private volatile int execs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,45,private volatile int fails;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,48,private boolean executed;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,51,private final Object mux = new Object();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,55,return minTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,60,return maxTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,65,return avgTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,70,return execs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,75,return fails;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,84,public void onQueryExecute(long duration, boolean fail) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,85,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,86,if (!executed) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,87,minTime = duration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,88,maxTime = duration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,90,executed = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,92,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,94,minTime = duration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,97,maxTime = duration;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,100,execs++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,103,fails++;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,105,avgTime = (avgTime * (execs - 1) + duration) / execs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,117,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,118,m.fails = fails;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,119,m.minTime = minTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,120,m.maxTime = maxTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,121,m.execs = execs;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,122,m.avgTime = avgTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,130,out.writeLong(minTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,131,out.writeLong(maxTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,132,out.writeDouble(avgTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,133,out.writeInt(execs);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,134,out.writeInt(fails);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,139,minTime = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,140,maxTime = in.readLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,142,execs = in.readInt();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryMetricsAdapter.java,143,fails = in.readInt();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,835,return cache().assignment().get(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,848,private AffinityInfo cache() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryEx.java,673,public <K, V> GridCacheVersionedEntryEx<K, V> versionedEntry() throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,126,log.error("Failed to unmarshal off-heap entry [part=" + part + ", hash=" + hash + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,777,entry = cache.entryEx(keys.get(i));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,614,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,615,KeyCacheObject key = cctx.toCacheKeyObject(keyBytes);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,617,lastEntry = (GridDhtCacheEntry)cctx.cache().entryEx(key, false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,621,return lastEntry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,623,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,624,throw new CacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,547,GridDhtCacheEntry cached = dhtCache.entryExx(key, topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,549,addActiveCache(dhtCache.context());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,362,entry = cctx.dht().entryEx(k, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPreloader.java,364,entry.unswap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxRemote.java,296,cached.unswap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2058,GridCacheEntryEx entry;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2060,if (cached != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2061,entry = cached;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2063,cached = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2065,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2066,entry = entryEx(cacheCtx, txKey, topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2071,try {
modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java,81,U.quietAndWarn(log, e, "Failed to register marshalled class for more than 10 times in a row " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,740,GridCacheAdapter<?, ?> cache = caches.remove(maskNull(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,747,stopCache(cache, cancel);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,778,GridCacheAdapter<?, ?> cache = caches.get(maskNull(cacheName));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,891,if (!t.get()) // Just to check if there was an error.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,894,ClusterNode loc = cctx.localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,896,singleMsgs.put(nodeId, msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,898,boolean match = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,901,if (!oldestNode.get().equals(loc)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,902,match = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,904,synchronized (mux) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,907,match = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,911,if (match) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,912,boolean allReceived;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,914,synchronized (rcvdIds) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,916,updatePartitionSingleMap(msg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,918,allReceived = allReceived();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,922,if (allReceived && ready.get() && replied.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,923,spreadPartitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,925,onDone(exchId.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,928,log.debug("Exchange future full map is not sent [allReceived=" + allReceived() +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,933,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,934,U.error(log, "Failed to initialize exchange future: " + this, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,1046,initFut.listen(new CI1<IgniteInternalFuture<?>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,482,public void unlock(IgfsFileInfo info, long modificationTime) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,488,IgniteUuid lockId = info.lockId();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,494,boolean interrupted = Thread.interrupted();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,496,IgniteUuid fileId = info.id();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,498,IgniteInternalTx tx = metaCache.txStartEx(PESSIMISTIC, REPEATABLE_READ);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,502,IgfsFileInfo oldInfo = info(fileId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,505,throw fsException(new IgfsPathNotFoundException("Failed to unlock file (file not found): " + fileId));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,508,throw new IgniteCheckedException("Failed to unlock file (inconsistent file lock ID) [fileId=" + fileId +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,511,IgfsFileInfo newInfo = new IgfsFileInfo(oldInfo, null, modificationTime);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,515,assert put : "Value was not stored in cache [fileId=" + fileId + ", newInfo=" + newInfo + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,517,tx.commit();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,519,catch (GridClosureException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,520,throw U.cast(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsMetaManager.java,523,tx.close();
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,124,return get(timeout, TimeUnit.MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,129,A.ensure(timeout >= 0, "timeout cannot be negative: " + timeout);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,130,A.notNull(unit, "unit");
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,132,try {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,133,return get0(unit.toNanos(timeout));
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,135,catch (InterruptedException e) {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,136,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,138,throw new IgniteInterruptedCheckedException("Got interrupted while waiting for future to complete.", e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,314,if (dataCacheCfg.getCacheMode() == PARTITIONED) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,315,int backups = dataCacheCfg.getBackups();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,318,throw new IgniteCheckedException("IGFS data cache cannot be used with backups (set backup count " +
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,195,boolean isAbstract = Modifier.isAbstract(cls.getModifiers());
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,197,System.out.println("Processing class: " + cls.getName() + (isAbstract ? " (abstract)" : ""));
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,200,generateAndWrite(cls);
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,201,else
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,202,generate(cls);
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,352,finish(write);
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,353,finish(read);
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,442,private void finish(Collection<String> code) {
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,450,code.add(builder().a("return true;").toString());
modules/core/src/main/java/org/apache/ignite/internal/GridJobCancelRequest.java,181,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteRequest.java,739,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridJobExecuteResponse.java,332,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingsRequest.java,141,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridJobSiblingsResponse.java,120,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridTaskCancelRequest.java,104,return true;
modules/core/src/main/java/org/apache/ignite/internal/GridTaskSessionRequest.java,169,return true;
modules/core/src/main/java/org/apache/ignite/internal/direct/DirectByteBufferStream.java,948,reader = msgFormatter.reader(msgFactory);
modules/core/src/main/java/org/apache/ignite/internal/managers/checkpoint/GridCheckpointRequest.java,155,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoMessage.java,310,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoUserMessage.java,334,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentInfoBean.java,240,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentRequest.java,255,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentResponse.java,177,return true;
modules/core/src/main/java/org/apache/ignite/internal/managers/eventstorage/GridEventStorageMessage.java,420,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/AffinityTopologyVersion.java,187,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryInfoCollection.java,99,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryPredicateAdapter.java,67,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryPredicateContainsValue.java,121,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntrySerializablePredicate.java,140,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEvictionEntry.java,175,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeDirectResult.java,201,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectAdapter.java,83,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheObjectByteArrayImpl.java,129,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEntryInfo.java,320,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionRequest.java,223,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionResponse.java,201,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMessage.java,682,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,427,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTtlUpdateRequest.java,28,import org.jetbrains.annotations.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheTtlUpdateRequest.java,308,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedBaseMessage.java,347,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockRequest.java,554,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedLockResponse.java,306,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,405,byte plcOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,407,plcOrd = reader.readByte("plc");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishRequest.java,458,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxFinishResponse.java,137,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,572,byte plcOrd;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,574,plcOrd = reader.readByte("plc");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareRequest.java,649,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxPrepareResponse.java,212,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedUnlockRequest.java,141,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentRequest.java,123,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtAffinityAssignmentResponse.java,178,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockRequest.java,475,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockResponse.java,271,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishRequest.java,392,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishResponse.java,118,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareRequest.java,540,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareResponse.java,316,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtUnlockRequest.java,145,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicDeferredUpdateResponse.java,122,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateRequest.java,887,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicUpdateResponse.java,257,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,877,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateResponse.java,595,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysRequest.java,29,import org.jetbrains.annotations.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysRequest.java,246,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtForceKeysResponse.java,251,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionDemandMessage.java,311,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionExchangeId.java,220,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionSupplyMessage.java,377,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsAbstractMessage.java,138,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsFullMessage.java,181,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleMessage.java,144,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsSingleRequest.java,74,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/CacheVersionedValue.java,152,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,464,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetResponse.java,334,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,556,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockResponse.java,282,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishRequest.java,275,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,191,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,419,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,464,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearUnlockRequest.java,76,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryRequest.java,706,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryResponse.java,321,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEntry.java,282,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxEntry.java,948,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxKey.java,170,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/TxEntryValueHolder.java,225,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheRawVersionedEntry.java,310,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersion.java,329,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/version/GridCacheVersionEx.java,140,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockDeltaSnapshotMessage.java,129,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockDeltaVersion.java,168,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousMessage.java,251,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerEntry.java,153,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerRequest.java,439,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerResponse.java,154,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAckMessage.java,180,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlockKey.java,243,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsBlocksMessage.java,161,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsCommunicationMessage.java,72,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDeleteMessage.java,170,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,362,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerRequest.java,142,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFragmentizerResponse.java,104,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsSyncMessage.java,135,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryCancelRequest.java,102,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryFailResponse.java,128,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryNextPageRequest.java,155,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryNextPageResponse.java,228,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/messages/GridQueryRequest.java,199,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskResultRequest.java,156,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/task/GridTaskResultResponse.java,202,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/GridByteArrayList.java,464,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLongList.java,562,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridDirectParser.java,65,ses.addMeta(READER_META_KEY, reader = formatter.reader(msgFactory));
modules/core/src/main/java/org/apache/ignite/plugin/extensions/communication/MessageFormatter.java,46,public MessageReader reader(MessageFactory factory);
modules/core/src/main/java/org/apache/ignite/spi/collision/jobstealing/JobStealingRequest.java,98,return true;
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1401,return impl.reader(factory);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,137,plcEnabled = plc != null && memoryMode != OFFHEAP_TIERED;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,43,public static ObservableList<PojoDescriptor> parse(Connection conn, boolean tblsOnly) throws SQLException {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,44,DatabaseMetadataDialect dialect;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,50,dialect = new OracleMetadataDialect();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,52,dialect = new DB2MetadataDialect();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,54,dialect = new JdbcMetadataDialect();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,59,dialect = new JdbcMetadataDialect();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/DatabaseMetadataParser.java,66,for (DbTable tbl : dialect.tables(conn, tblsOnly)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/DB2MetadataDialect.java,28,return new HashSet<>(Arrays.asList("SYSIBM", "SYSCAT", "SYSSTAT", "SYSTOOLS"));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/DatabaseMetadataDialect.java,37,public abstract Collection<DbTable> tables(Connection conn, boolean tblsOnly) throws SQLException;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,73,try (ResultSet tblsRs = dbMeta.getTables(null, null, "%",
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,74,tblsOnly ? TABLES_ONLY : TABLES_AND_VIEWS)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,75,while (tblsRs.next()) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,76,String tblCatalog = tblsRs.getString(TBL_CATALOG_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,77,String tblSchema = tblsRs.getString(TBL_SCHEMA_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,78,String tblName = tblsRs.getString(TBL_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,81,String schema = tblSchema != null ? tblSchema : tblCatalog;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,85,continue;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,87,Set<String> pkCols = new HashSet<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,89,try (ResultSet pkRs = dbMeta.getPrimaryKeys(tblCatalog, tblSchema, tblName)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,91,pkCols.add(pkRs.getString(PK_COL_NAME_IDX));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,94,List<DbColumn> cols = new ArrayList<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,96,try (ResultSet colsRs = dbMeta.getColumns(tblCatalog, tblSchema, tblName, null)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,97,while (colsRs.next()) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,98,String colName = colsRs.getString(COL_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,100,cols.add(new DbColumn(
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,101,colName,
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,102,colsRs.getInt(COL_DATA_TYPE_IDX),
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,103,pkCols.contains(colName),
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,104,colsRs.getInt(COL_NULLABLE_IDX) == DatabaseMetaData.columnNullable));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,108,Map<String, Map<String, Boolean>> idxs = new LinkedHashMap<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,110,try (ResultSet idxRs = dbMeta.getIndexInfo(tblCatalog, tblSchema, tblName, false, true)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,111,while (idxRs.next()) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,112,String idxName = idxRs.getString(IDX_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,114,String colName = idxRs.getString(IDX_COL_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,117,continue;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,119,Map<String, Boolean> idx = idxs.get(idxName);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,121,if (idx == null) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,122,idx = new LinkedHashMap<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,124,idxs.put(idxName, idx);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,127,String askOrDesc = idxRs.getString(IDX_ASC_OR_DESC_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,129,Boolean desc = askOrDesc != null ? "D".equals(askOrDesc) : null;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,131,idx.put(colName, desc);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/JdbcMetadataDialect.java,135,tbls.add(table(schema, tblName, cols, idxs));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,233,Collection<DbColumn> cols = new ArrayList<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,235,Set<String> pkCols = Collections.emptySet();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,236,Map<String, Map<String, Boolean>> idxs = Collections.emptyMap();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,238,String user = conn.getMetaData().getUserName().toUpperCase();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,240,String sql = String.format(SQL_COLUMNS,
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,243,try (ResultSet colsRs = colsStmt.executeQuery(sql)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,244,String prevSchema = "";
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,245,String prevTbl = "";
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,247,boolean first = true;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,249,while (colsRs.next()) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,250,String owner = colsRs.getString(OWNER_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,251,String tbl = colsRs.getString(TBL_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,253,boolean changed = !owner.equals(prevSchema) || !tbl.equals(prevTbl);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,255,if (changed) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,257,first = false;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,258,else
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,259,tbls.add(table(prevSchema, prevTbl, cols, idxs));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,261,prevSchema = owner;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,262,prevTbl = tbl;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,263,cols = new ArrayList<>();
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,264,pkCols = primaryKeys(pkStmt, owner, tbl);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,265,idxs = indexes(idxStmt, owner, tbl);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,268,String colName = colsRs.getString(COL_NAME_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,270,cols.add(new DbColumn(colName, decodeType(colsRs), pkCols.contains(colName),
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,271,!"N".equals(colsRs.getString(NULLABLE_IDX))));
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,275,tbls.add(table(prevSchema, prevTbl, cols, idxs));
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/Controls.java,355,public static TitledPane titledPane(String title, Node node) {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,323,private void fill() {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,324,lockUI(connLayerPnl, connPnl, nextBtn);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,351,try (Connection conn = connect(jdbcDrvJarPath, jdbcDrvCls, jdbcUrl, jdbcInfo)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,352,pojos = DatabaseMetadataParser.parse(conn, tblsOnly);
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,627,return true;
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,630,return false;
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,637,if (rootPane.getCenter() == connLayerPnl) {
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,638,if (checkInput(jdbcDrvJarTf, true, "Path to JDBC driver is not specified!") ||
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,639,checkInput(jdbcDrvClsTf, true, "JDBC driver class name is not specified!") ||
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,640,checkInput(jdbcUrlTf, true, "JDBC URL connection string is not specified!") ||
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,642,return;
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,644,fill();
modules/schema-import/src/main/java/org/apache/ignite/schema/ui/SchemaImportApp.java,1133,regexPnl), 3);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,1051,return new ClusterTopologyCheckedException("Failed to acquire lock for keys (primary node left grid, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,1180,return new ClusterTopologyCheckedException("Failed to acquire lock for keys (primary node left grid, " +
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,579,return new ClusterTopologyException(e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,298,CacheObject val = cached.innerGet(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,299,tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,310,null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,340,ret.addEntryProcessResult(txEntry.context(), key, null, procRes, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,341,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,342,ret.invokeResult(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,344,else
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,90,switch (rs.getString(DATA_TYPE_IDX)) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,91,case "CHAR":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,92,case "NCHAR":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,93,return CHAR;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,95,case "VARCHAR2":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,96,case "NVARCHAR2":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,97,return VARCHAR;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,99,case "LONG":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,100,return LONGVARCHAR;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,102,case "LONG RAW":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,103,return LONGVARBINARY;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,105,case "FLOAT":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,106,return FLOAT;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,108,case "NUMBER":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,109,int precision = rs.getInt(DATA_PRECISION_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,110,int scale = rs.getInt(DATA_SCALE_IDX);
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,112,if (scale > 0) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,114,return FLOAT;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,117,return DOUBLE;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,119,return NUMERIC;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,121,else {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,123,return INTEGER;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,126,return BOOLEAN;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,129,return TINYINT;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,132,return SMALLINT;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,135,return INTEGER;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,138,return BIGINT;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,140,return NUMERIC;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,143,case "DATE":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,144,return DATE;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,146,case "TIMESTAMP":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,147,return TIMESTAMP;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,149,case "BFILE":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,150,case "BLOB":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,151,return BLOB;
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,153,case "CLOB":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,154,case "NCLOB":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,155,case "XMLTYPE":
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,156,return CLOB;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,295,if (hasFilters || retVal || txEntry.op() == GridCacheOperation.DELETE) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,312,if (retVal) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,362,ret.success(txEntry.op() != GridCacheOperation.DELETE || cached.hasValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,469,prepare0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,711,public void prepare(Iterable<IgniteTxEntry> reads, Iterable<IgniteTxEntry> writes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,739,private void prepare0() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,741,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,962,Map<UUID, GridDistributedTxMapping> futNearMap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1029,private boolean map(IgniteTxEntry entry, Iterable<ClusterNode> nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1030,Map<UUID, GridDistributedTxMapping> globalMap, Map<UUID, GridDistributedTxMapping> locMap) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareResponse.java,291,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareResponse.java,299,nearEvicted = reader.readCollection("nearEvicted", MessageCollectionItemType.MSG);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,585,tx.invalidPartitions(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,104,Collection<Integer> invalidParts,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,117,this.invalidParts = invalidParts;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteInternalTx.java,316,public Set<Integer> invalidPartitions();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,165,private Set<Integer> invalidParts = new GridLeanSet<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,704,invalidParts.add(part);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,707,log.debug("Added invalid partition for transaction [part=" + part + ", tx=" + this + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,676,res.invalidPartitions(dhtTx.invalidPartitions());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,988,res.invalidPartitions(tx.invalidPartitions());
modules/core/src/main/java/org/apache/ignite/internal/processors/clock/GridClockSyncProcessor.java,267,return System.currentTimeMillis();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1413,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1414,KeyCacheObject key = cctx.toCacheKeyObject(cur0.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1416,return key.value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1418,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1419,throw new IgniteException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1424,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1425,GridCacheSwapEntry e = unmarshalSwapEntry(cur0.getValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1427,swapEntry(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1429,return e.value().value(cctx.cacheObjectContext(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1431,catch (IgniteCheckedException ex) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1432,throw new IgniteException(ex);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,1437,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2218,for (GridCacheMapEntry entry : locked) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2219,if (entry != null && entry.deleted()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2221,skip = new HashSet<>(locked.size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2223,skip.add(entry.key());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2228,for (GridCacheMapEntry entry : locked) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2230,UNSAFE.monitorExit(entry);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,112,public static void info(@Nullable IgniteLogger log, String msg) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,207,log.info(longMsg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2439,if (itf.getName().endsWith("MBean")) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,2472,if (itf.getName().endsWith("MBean")) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java,56,import static org.apache.ignite.internal.IgniteNodeAttributes.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1900,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1901,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1902,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1903,drMap,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1904,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1905,null,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,1906,null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2193,addInvokeResult(txEntry, old, ret);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2253,addInvokeResult(txEntry, txEntry.value(), ret);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2291,addInvokeResult(e, cacheVal, ret);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2401,addInvokeResult(txEntry, v, ret);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2469,private void addInvokeResult(IgniteTxEntry txEntry, CacheObject cacheVal, GridCacheReturn ret) {
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,45,private static final String SQL_INDEXES = "select i.index_name, u.column_expression, i.column_name, i.descend" +
modules/schema-import/src/main/java/org/apache/ignite/schema/parser/dialect/OracleMetadataDialect.java,241,tblsOnly ? "INNER JOIN all_tables b on a.table_name = b.table_name" : "", user);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,438,if (v == null && allowLocRead) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,442,entry = dht.context().isSwapOrOffheapEnabled() ? dht.entryEx(key) : dht.peekEx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,445,if (entry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,446,boolean isNew = entry.isNewLocked() || !entry.valid(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,448,v = entry.innerGet(tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,477,catch (GridDhtInvalidPartitionException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,481,if (entry != null && (tx == null || (!tx.implicit() && tx.isolation() == READ_COMMITTED))) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,482,dht.context().evicts().touch(entry, topVer);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,23,import org.apache.ignite.lang.*;
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,45,private static final ConcurrentMap<IgniteBiTuple<Class<? extends Throwable>, String>, Long> errors =
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,76,log(log, e, msg, null, LogLevel.ERROR);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,89,log(log, e, msg, null, LogLevel.WARN);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,103,log(log, e, longMsg, shortMsg, LogLevel.WARN);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,115,log(log, null, msg, null, LogLevel.INFO);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,136,LogLevel level) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,139,IgniteBiTuple<Class<? extends Throwable>, String> tup =
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,140,e != null ? F.<Class<? extends Throwable>, String>t(e.getClass(), e.getMessage()) :
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,141,F.<Class<? extends Throwable>, String>t(null, longMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,150,level.doLog(log, longMsg, shortMsg, e);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,167,private static boolean replace(IgniteBiTuple<Class<? extends Throwable>, String> t, @Nullable Long oldStamp,
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,199,U.warn(log, longMsg, F.isEmpty(shortMsg) ? longMsg : shortMsg);
modules/core/src/main/java/org/apache/ignite/internal/util/GridLogThrottle.java,219,public abstract void doLog(IgniteLogger log, String longMsg, String shortMsg, Throwable e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,69,final String mergeTable = TABLE_FUNC_NAME + "()"; // table(0); TODO
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3045,URI uri;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3060,uri = domain.getCodeSource().getLocation().toURI();
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3064,uri = new URI(uri.toString().replace("file://", "file:/"));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,3072,return findProjectHome(new File(uri));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,517,return isDht() || isDhtAtomic() || isColocated() || (isNear() && atomic());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,760,return isNear() ? near().dht().topology() : dht().topology();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,769,GridDhtTopologyFuture fut = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,771,if (!isDhtAtomic()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,772,GridDhtCacheAdapter<K, V> cache = isNear() ? near().dht() : colocated();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,774,fut = cache.multiUpdateTopologyFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,777,return fut == null ? topology().topologyVersionFuture() : fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,226,cctx.gridEvents().addLocalEventListener(discoLsnr, EVT_NODE_FAILED, EVT_NODE_LEFT);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTopologyFuture.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTopologyFuture.java,22,import org.apache.ignite.internal.managers.discovery.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTopologyFuture.java,44,public GridDiscoveryTopologySnapshot topologySnapshot() throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1210,assert ctx.deferredDelete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,429,GridDhtTopologyFuture fut = cctx.topologyVersionFuture();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,235,get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,238,topSnapshot.compareAndSet(null, new GridDiscoveryTopologySnapshot(discoEvt.topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,239,discoEvt.topologyNodes()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,241,return topSnapshot.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2011,catch (IllegalStateException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,2013,log.debug("Failed to acquire kernal gateway (grid is stopping).");
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,1665,U.warn(log, "Local node SEGMENTED: " + node);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1957,throw new IgniteCheckedException("Remote node ID is not as expected [expected=" + rmtNodeId +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1999,throw new IgniteCheckedException("Failed to read remote node recovery handshake " +
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,22,import org.apache.ignite.internal.util.typedef.internal.*;
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureChainListener.java,60,U.warn(null, "Failed to notify chained future (is grid stopped?) [doneCb=" + doneCb +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1128,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1131,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1132,if (isAsync()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1133,IgniteInternalFuture<EntryProcessorResult<T>> fut = delegate.invokeAsync(key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1135,IgniteInternalFuture<T> fut0 = fut.chain(new CX1<IgniteInternalFuture<EntryProcessorResult<T>>, T>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1137,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1144,setFuture(fut0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1146,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1148,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1149,EntryProcessorResult<T> res = delegate.invoke(key, entryProcessor, args);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1151,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1154,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1158,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1159,throw cacheException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1100,EntryProcessorResult<T> res = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1102,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1138,EntryProcessorResult<T> res = fut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1140,return res != null ? res.get() : null;
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,81,IgniteInternalFuture<T> fut0 = fut.chain(new C1<IgniteInternalFuture<V>, T>() {
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,94,return new IgniteFutureImpl<>(fut0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,136,private CacheJtaManagerAdapter jtaMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,280,this.jtaMgr = add(jtaMgr);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1005,return jtaMgr;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,489,cleanup(cfg, cctx.jta().tmLookup(), false);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,888,U.stopLifecycleAware(log, lifecycleAwares(cache.configuration(), ctx.jta().tmLookup(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,889,ctx.store().configuredStore()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,985,CacheJtaManagerAdapter jta = JTA.create(cfg.getTransactionManagerLookupClassName() == null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,987,jta.createTmLookup(cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,995,toPrepare.add(jta.tmLookup());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1006,U.startLifecycleAware(lifecycleAwares(cfg, jta.tmLookup(), cfgStore));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManagerAdapter.java,28,public abstract class CacheJtaManagerAdapter extends GridCacheManagerAdapter {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManagerAdapter.java,35,public abstract void createTmLookup(CacheConfiguration ccfg) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,66,private String tmLookupClsName;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,243,return tmLookupClsName;
modules/hibernate/src/main/java/org/apache/ignite/cache/hibernate/HibernateTransactionalDataRegion.java,87,throw new CacheException("Hibernate TRANSACTIONAL access strategy must have Ignite cache with " +
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,39,private CacheTmLookup tmLookup;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,43,assert ccfg.getTransactionManagerLookupClassName() != null;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,46,Class<?> cls = Class.forName(ccfg.getTransactionManagerLookupClassName());
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,48,tmLookup = (CacheTmLookup)cls.newInstance();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,59,jtaTm = tmLookup.getTm();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,115,return tmLookup;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryHandler.java,353,return new CacheContinuousQueryEvent<K, V>(cache, cctx, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,1008,GridCacheRemovable latch = dsMap.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,1013,GridCacheCountDownLatchEx latch0 = (GridCacheCountDownLatchEx)latch;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,1022,latch.onRemoved();
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,294,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,295,ctx.kernalContext().dataStructures().removeCountDownLatch(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,297,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,298,throw U.convertException(e);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,20,import org.apache.ignite.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,21,import org.apache.ignite.cache.jta.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,22,import org.apache.ignite.configuration.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,23,import org.apache.ignite.internal.processors.cache.transactions.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,24,import org.jetbrains.annotations.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,26,import javax.transaction.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,36,private TransactionManager jtaTm;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,66,if (jtaTm != null) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,67,GridCacheXAResource rsrc = xaRsrc.get();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,69,if (rsrc == null || rsrc.isFinished()) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,70,try {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,71,Transaction jtaTx = jtaTm.getTransaction();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,73,if (jtaTx != null) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,74,IgniteInternalTx tx = cctx.tm().userTx();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,76,if (tx == null) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,78,.getTransactionConfiguration();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,80,tx = cctx.tm().newTx(
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,83,null,
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,84,tCfg.getDefaultTxConcurrency(),
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,85,tCfg.getDefaultTxIsolation(),
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,86,tCfg.getDefaultTxTimeout(),
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,92,);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,98,throw new IgniteCheckedException("Failed to enlist XA resource to JTA user transaction.");
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,100,xaRsrc.set(rsrc);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,103,catch (SystemException e) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,104,throw new IgniteCheckedException("Failed to obtain JTA transaction.", e);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,106,catch (RollbackException e) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,107,throw new IgniteCheckedException("Failed to enlist XAResource to JTA transaction.", e);
modules/core/src/main/java/org/apache/ignite/Ignite.java,285,public <K, V> IgniteCache<K, V> cache(@Nullable String name);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1457,curFut.set(new IgniteFutureImpl<>(fut));
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,103,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,113,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,123,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/util/future/IgniteFutureImpl.java,133,throw U.convertException(e);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,695,set = new GridCommunicationMessageSet(plc, msg.topic(), nodeId, timeout, skipOnTimeout, msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,725,nodeId, timeout, skipOnTimeout, msg));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,743,set.add(msg);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,772,if (set.reserved()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,775,msgC.run();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,777,return;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,826,msgC.run();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1789,private final Queue<IgniteBiTuple<GridIoMessage, Long>> msgs = new ConcurrentLinkedDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1817,GridIoMessage msg
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1836,msgs.add(F.t(msg, lastTs));
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1955,lsnr.onMessage(nodeId, t.get1().message());
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1961,void add(GridIoMessage msg) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1962,msgs.add(F.t(msg, U.currentTimeMillis()));
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioMessageTracker.java,59,int cnt = msgCnt.decrementAndGet();
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioMessageTracker.java,61,assert cnt >= 0 : "Invalid count: " + cnt;
modules/core/src/main/java/org/apache/ignite/internal/util/nio/GridNioMessageTracker.java,119,return S.toString(GridNioMessageTracker.class, this, super.toString());
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,33,private final ThreadLocal<GridCacheXAResource> xaRsrc = new ThreadLocal<>();
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/CacheJtaManager.java,95,rsrc = new GridCacheXAResource(tx, cctx);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,21,import org.apache.ignite.internal.processors.cache.*;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,45,private GridCacheContext cctx;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,57,public GridCacheXAResource(IgniteInternalTx cacheTx, GridCacheContext cctx) {
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,59,assert cctx != null;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,61,this.cctx = cctx;
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,65,log = U.logger(cctx.kernalContext(), logRef, GridCacheXAResource.class);
modules/jta/src/main/java/org/apache/ignite/internal/processors/cache/jta/GridCacheXAResource.java,225,return cctx == other.cctx;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,31,import org.apache.ignite.lang.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/GridCacheCountDownLatchImpl.java,292,return;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1598,hostName = F.isEmpty(hostName) || hostName.equals(ipAddr) || addr.isLoopbackAddress() ? "" : hostName;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1601,hostNames.add(hostName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1650,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1651,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,961,key.valueBytes(cctx.cacheObjectContext()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSwapManager.java,965,c.apply(val); // Probably we should read value and apply closure before removing...
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,104,private byte[] keyBytes(Object key, @Nullable byte[] keyBytes) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/offheap/GridOffHeapProcessor.java,261,public boolean removex(@Nullable String spaceName, int part, Object key, byte[] keyBytes) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,178,public static void dump() {
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,179,dump(que.get());
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,188,public static void dump(ConcurrentLinkedQueue<Item> que) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,210,return dumpWithReset(null);
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,219,return dumpWithReset(new ConcurrentLinkedQueue<Item>());
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,228,private static String dumpWithReset(@Nullable ConcurrentLinkedQueue<Item> q2) {
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,239,dump(q);
modules/core/src/main/java/org/apache/ignite/internal/util/GridDebug.java,265,Arrays.toString(data);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastructures/DataStructuresProcessor.java,769,GridCacheContext cacheCtx = ctx.cache().internalCache(cacheName).context();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2270,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), null, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2312,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), nearCfg, true).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2352,ctx.cache().dynamicStartCache(null, cacheName, nearCfg, true).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1582,boolean failIfExists
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1584,assert ccfg != null || nearCfg != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1615,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1645,return new GridFinishedFuture<>(new CacheExistsException("Failed to start near cache " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1652,return new GridFinishedFuture<>(new IgniteCheckedException("Failed to start near cache " +
modules/core/src/main/java/org/apache/ignite/internal/client/router/impl/GridTcpRouterNioListenerAdapter.java,68,marshMap.put(GridClientOptimizedMarshaller.ID, new GridClientOptimizedMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/client/GridClientConfiguration.java,113,private GridClientMarshaller marshaller = new GridClientOptimizedMarshaller();
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestProtocol.java,152,marshMap.put(GridClientOptimizedMarshaller.ID, new GridClientOptimizedMarshaller());
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,463,public <K, V> GridCloseableIterator<IgniteBiTuple<K, V>> query(String space, String clause,
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,472,TypeDescriptor type = typesByName.get(new TypeName(space, resType));
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,475,throw new CacheException("Failed to find SQL table for type: " + resType);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,477,return idx.query(space, clause, params, type, filters);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,508,public QueryCursor<List<?>> queryTwoStep(GridCacheContext<?,?> cctx, SqlFieldsQuery qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,515,return idx.queryTwoStep(cctx, qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,527,public <K,V> QueryCursor<Cache.Entry<K,V>> queryTwoStep(GridCacheContext<?,?> cctx, SqlQuery qry) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,534,return idx.queryTwoStep(cctx, qry);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,611,private static interface ClIter<X> extends AutoCloseable, Iterator<X> {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,736,public <K, V> GridCloseableIterator<IgniteBiTuple<K, V>> queryText(String space, String clause, String resType,
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,737,IndexingQueryFilter filters) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,744,TypeDescriptor type = typesByName.get(new TypeName(space, resType));
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,747,throw new CacheException("Failed to find SQL table for type: " + resType);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,765,IndexingQueryFilter filters) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,772,return idx.queryFields(space, clause, params, filters);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,133,last = lastSubmitted.compareAndSet(false, true);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java,48,queue.add(page);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,221,throw new CacheException(e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridResultPage.java,40,private final boolean last;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridResultPage.java,52,this.last = last;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridResultPage.java,55,assert res == null : "The last page must be dummy.";
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridResultPage.java,65,return last;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,461,clearAll();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeSuppressedErrorsTask.java,91,return new IgniteBiTuple<>(order, errors);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionMap.java,75,map.put(e.getKey(), state);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionMap.java,91,map.put(part, state);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionMap.java,217,map.put(part, GridDhtPartitionState.fromOrdinal(ordinal));
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,163,private final Throwable error;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,189,this.error = error;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteExceptionRegistry.java,213,public Throwable error() {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTask.java,89,taskRes.unhandledEx().put(nid, unhandledEx);
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTask.java,118,taskRes.eventsEx().put(nid, jobRes.eventsEx());
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTask.java,124,taskRes.cachesEx().put(nid, jobRes.cachesEx());
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTask.java,133,taskRes.igfssEx().put(nid, jobRes.igfssEx());
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,35,private final Map<UUID, Throwable> unhandledEx = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,53,private final Map<UUID, Throwable> evtsEx = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,59,private final Map<UUID, Throwable> cachesEx = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,68,private final Map<UUID, Throwable> igfssEx = new HashMap<>();
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,91,public Map<UUID, Throwable> unhandledEx() {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,126,public Map<UUID, Throwable> eventsEx() {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,140,public Map<UUID, Throwable> cachesEx() {
modules/core/src/main/java/org/apache/ignite/internal/visor/node/VisorNodeDataCollectorTaskResult.java,161,public Map<UUID, Throwable> igfssEx() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,227,throw new IgniteException("Query was canceled.");
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopTaskContext.java,30,private final HadoopJob job;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopFileSystemCounterWriter.java,40,private static final String DEFAULT_USER_NAME = "anonymous";
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopFileSystemCounterWriter.java,55,Configuration hadoopCfg = new Configuration();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopFileSystemCounterWriter.java,63,user = DEFAULT_USER_NAME;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopFileSystemCounterWriter.java,75,FileSystem fs = jobStatPath.getFileSystem(hadoopCfg);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,25,import org.apache.hadoop.mapreduce.*;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,157,private boolean cacheEnabled;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,210,String disableCacheName = String.format("fs.%s.impl.disable.cache", name.getScheme());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,212,cacheEnabled = !cfg.getBoolean(disableCacheName, false);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,340,close0();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,346,return;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,348,close0();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,357,if (closeGuard.compareAndSet(false, true)) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,359,LOG.debug("File system closed [uri=" + uri + ", endpoint=" + uriAuthority + ']');
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,362,return;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,364,super.close();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,366,rmtClient.close(false);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,369,clientLog.close();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,372,U.closeQuiet(secondaryFs);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,375,uri = null;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,376,rmtClient = null;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,305,private HadoopUtils() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,34,private final Configuration cfg = new Configuration();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,82,String prop = String.format("fs.%s.impl.disable.cache", uri.getScheme());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/HadoopRunnableTask.java,111,ctx = job.getTaskContext(info);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/HadoopRunnableTask.java,157,return null;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,21,import org.apache.hadoop.fs.FileSystem;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,71,private final Queue<Class<?>> taskCtxClsPool = new ConcurrentLinkedQueue<>();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,93,HadoopClassLoader clsLdr = (HadoopClassLoader)getClass().getClassLoader();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,96,Thread.currentThread().setContextClassLoader(clsLdr);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,98,jobConf = new JobConf();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,139,try (FileSystem fs = FileSystem.get(jobDir.toUri(), jobConf)) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,194,Class<?> cls = taskCtxClsPool.poll();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,201,cls = ldr.loadClass(HadoopV2TaskContext.class.getName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2Job.java,278,rsrcMgr.cleanupStagingDirectory();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,115,FileSystem fs = FileSystem.get(stagingDir.toUri(), cfg);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,118,throw new IgniteCheckedException("Failed to find map-reduce submission directory (does not exist): " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,119,stagingDir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,122,throw new IgniteCheckedException("Failed to copy job submission directory contents to local file system " +
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,147,throw new IgniteCheckedException("Failed to create local job directory: " + jobLocDir.getAbsolutePath());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,207,FileSystem srcFs = srcPath.getFileSystem(cfg);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2JobResourceManager.java,290,stagingDir.getFileSystem(ctx.getJobConf()).delete(stagingDir, true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,35,import org.apache.ignite.internal.processors.hadoop.fs.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,415,try (FileSystem fs = FileSystem.get(jobDir.toUri(), jobConf());
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1674,Object msgBody = ioMsg.body();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1676,assert msgBody != null || ioMsg.bodyBytes() != null;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1679,byte[] msgTopicBytes = ioMsg.topicBytes();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1681,Object msgTopic = ioMsg.topic();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1683,GridDeployment dep = ioMsg.deployment();
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1685,if (dep == null && ctx.config().isPeerClassLoadingEnabled() &&
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1686,ioMsg.deploymentClassName() != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1687,dep = ctx.deploy().getGlobalDeployment(
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1688,ioMsg.deploymentMode(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1689,ioMsg.deploymentClassName(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1690,ioMsg.deploymentClassName(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1691,ioMsg.userVersion(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1692,nodeId,
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1693,ioMsg.classLoaderId(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1694,ioMsg.loaderParticipants(),
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1695,null);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1698,throw new IgniteDeploymentCheckedException(
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1703,ioMsg.deployment(dep); // Cache deployment.
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1707,if (msgTopic == null && msgTopicBytes != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1708,msgTopic = marsh.unmarshal(msgTopicBytes, dep != null ? dep.classLoader() : null);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1710,ioMsg.topic(msgTopic); // Save topic to avoid future unmarshallings.
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1714,return;
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1716,if (msgBody == null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1717,msgBody = marsh.unmarshal(ioMsg.bodyBytes(), dep != null ? dep.classLoader() : null);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1719,ioMsg.body(msgBody); // Save body to avoid future unmarshallings.
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1724,ctx.resource().inject(dep, dep.deployedClass(ioMsg.deploymentClassName()), msgBody);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1726,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1727,U.error(log, "Failed to unmarshal user message [node=" + nodeId + ", message=" +
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1728,msg + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1731,if (msgBody != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1732,if (predLsnr != null) {
modules/core/src/main/java/org/apache/ignite/internal/managers/communication/GridIoManager.java,1734,removeMessageListener(TOPIC_COMM_USER, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1905,throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1926,if (locCfg.getAtomicityMode() == TRANSACTIONAL ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridClientPartitionTopology.java,221,if (oldest.id().equals(loc.id()) || exchFut.isCacheAdded(cacheId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,250,if (oldest.id().equals(loc.id()) || exchFut.isCacheAdded(cctx.cacheId())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtPartitionTopologyImpl.java,277,boolean added = exchFut.isCacheAdded(cctx.cacheId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,281,public boolean isCacheAdded(int cacheId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,291,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,455,if (isCacheAdded(cacheCtx.cacheId())) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,299,addrSnds.add(new AddressSender(mcastAddr, addr, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,312,if (addrSnds.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,313,try {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,316,addrSnds.add(new AddressSender(mcastAddr, null, addrs));
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,318,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,319,throw new IgniteSpiException("Failed to create multicast socket [mcastAddr=" + mcastAddr +
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ipfinder/multicast/TcpDiscoveryMulticastIpFinder.java,325,addrSnd.start();
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,301,assert msg != null;
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,352,private void writeString(DataOutput out, @Nullable String str) throws IOException {
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,353,out.writeBoolean(str != null);
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,356,out.writeUTF(str);
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,367,boolean hasStr = in.readBoolean();
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,370,return in.readUTF();
modules/core/src/main/java/org/apache/ignite/internal/igfs/common/IgfsMarshaller.java,372,return null;
modules/core/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopJob.java,101,void cleanupStagingDirectory();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEx.java,52,public static final String SECONDARY_FS_USER_NAME = "SECONDARY_FS_USER_NAME";
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,54,private IgfsEx igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,57,private AtomicLong rsrcIdGen = new AtomicLong();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,244,private IgfsMessage processPathControlRequest(IgfsClientSession ses, IgfsIpcCommand cmd,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,246,IgfsPathControlRequest req = (IgfsPathControlRequest)msg;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,251,IgfsControlResponse res = new IgfsControlResponse();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,254,switch (cmd) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,255,case EXISTS:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,256,res.response(igfs.exists(req.path()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,258,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,260,case INFO:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,261,res.response(igfs.info(req.path()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,263,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,265,case PATH_SUMMARY:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,266,res.response(igfs.summary(req.path()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,268,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,270,case UPDATE:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,271,res.response(igfs.update(req.path(), req.properties()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,273,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,275,case RENAME:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,276,igfs.rename(req.path(), req.destinationPath());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,278,res.response(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,280,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,282,case DELETE:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,283,res.response(igfs.delete(req.path(), req.flag()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,285,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,287,case MAKE_DIRECTORIES:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,288,igfs.mkdirs(req.path(), req.properties());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,290,res.response(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,292,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,294,case LIST_PATHS:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,295,res.paths(igfs.listPaths(req.path()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,297,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,299,case LIST_FILES:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,300,res.files(igfs.listFiles(req.path()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,302,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,304,case SET_TIMES:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,305,igfs.setTimes(req.path(), req.accessTime(), req.modificationTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,307,res.response(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,309,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,311,case AFFINITY:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,312,res.locations(igfs.affinity(req.path(), req.start(), req.length()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,314,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,316,case OPEN_READ: {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,317,IgfsInputStreamAdapter igfsIn = !req.flag() ? igfs.open(req.path(), bufSize) :
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,318,igfs.open(req.path(), bufSize, req.sequentialReadsBeforePrefetch());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,320,long streamId = registerResource(ses, igfsIn);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,323,log.debug("Opened IGFS input stream for file read [igfsName=" + igfs.name() + ", path=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,324,req.path() + ", streamId=" + streamId + ", ses=" + ses + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,326,IgfsFileInfo info = new IgfsFileInfo(igfsIn.fileInfo(), null,
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,327,igfsIn.fileInfo().modificationTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,329,res.response(new IgfsInputStreamDescriptor(streamId, info.length()));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,331,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,334,case OPEN_CREATE: {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,335,long streamId = registerResource(ses, igfs.create(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,336,req.path(),       // Path.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,337,bufSize,          // Buffer size.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,338,req.flag(),       // Overwrite if exists.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,339,affinityKey(req), // Affinity key based on replication factor.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,340,req.replication(),// Replication factor.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,341,req.blockSize(),  // Block size.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,342,req.properties()  // File properties.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,343,));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,346,log.debug("Opened IGFS output stream for file create [igfsName=" + igfs.name() + ", path=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,347,req.path() + ", streamId=" + streamId + ", ses=" + ses + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,349,res.response(streamId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,351,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,354,case OPEN_APPEND: {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,355,long streamId = registerResource(ses, igfs.append(
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,356,req.path(),        // Path.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,357,bufSize,           // Buffer size.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,358,req.flag(),        // Create if absent.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,359,req.properties()   // File properties.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,360,));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,363,log.debug("Opened IGFS output stream for file append [igfsName=" + igfs.name() + ", path=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,364,req.path() + ", streamId=" + streamId + ", ses=" + ses + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,366,res.response(streamId);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,368,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,371,default:
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,372,assert false : "Unhandled path control request command: " + cmd;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsIpcHandler.java,374,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsSecondaryFileSystemImpl.java,33,private final IgfsImpl igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsSecondaryFileSystemImpl.java,40,IgfsSecondaryFileSystemImpl(IgfsImpl igfs) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServer.java,242,private IpcEndpoint endpoint;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsServer.java,248,private IgfsClientSession ses;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,23,import org.apache.hadoop.ipc.*;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,42,public class IgniteHadoopIgfsSecondaryFileSystem implements IgfsSecondaryFileSystem, AutoCloseable {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,44,private final FileSystem fileSys;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,81,throws IgniteCheckedException {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,90,SecondaryFileSystemProvider secProvider = new SecondaryFileSystemProvider(uri, cfgPath, userName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,92,fileSys = secProvider.createFileSystem();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,94,uri = secProvider.uri().toString();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,97,uri += "/";
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,100,props.put(SECONDARY_FS_CONFIG_PATH, cfgPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,103,props.put(SECONDARY_FS_USER_NAME, userName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,105,props.put(SECONDARY_FS_URI, uri);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,107,catch (IOException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,108,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,119,URI uri = fileSys.getUri();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,133,boolean wrongVer = X.hasCause(e, RemoteException.class) ||
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,134,(e.getMessage() != null && e.getMessage().contains("Failed on local"));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,136,return !wrongVer ? cast(detailMsg, e) :
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,137,new IgfsInvalidHdfsVersionException("HDFS version you are connecting to differs from local " +
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,178,return fileSys.exists(convert(path));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,220,return fileSys.delete(convert(path), recursive);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,252,FileStatus[] statuses = fileSys.listStatus(convert(path));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,275,FileStatus[] statuses = fileSys.listStatus(convert(path));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,302,return new HadoopIgfsSecondaryFileSystemPositionedReadable(fileSys, convert(path), bufSize);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,308,return fileSys.create(convert(path), overwrite);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,322,return fileSys.create(convert(path), props0.permission(), overwrite, bufSize, (short)replication, blockSize,
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,323,null);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,336,return fileSys.append(convert(path), bufSize);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,346,final FileStatus status = fileSys.getFileStatus(convert(path));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,421,return fileSys.getContentSummary(new Path("/")).getSpaceConsumed();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,436,fileSys.close();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,438,catch (IOException e) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,439,throw new IgniteCheckedException(e);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/IgniteHadoopIgfsSecondaryFileSystem.java,448,return fileSys;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,101,private final ThreadLocal<String> userName = new ThreadLocal<String>(){
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,104,return DFLT_USER_NAME;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,109,private final ThreadLocal<Path> workingDir = new ThreadLocal<Path>(){
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,112,return getHomeDirectory();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,224,setUser(cfg.get(MRJobConfig.USER_NAME, DFLT_USER_NAME));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,247,rmtClient = new HadoopIgfsWrapper(uriAuthority, logDir, cfg, LOG);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,292,String secUserName = props.get(SECONDARY_FS_USER_NAME);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,295,SecondaryFileSystemProvider secProvider = new SecondaryFileSystemProvider(secUri, secConfPath,
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,296,secUserName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,298,secondaryFs = secProvider.createFileSystem();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,852,Path path = new Path("/user/" + userName.get());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,862,public void setUser(String userName) {
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,863,this.userName.set(userName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,865,setWorkingDirectory(null);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,876,workingDir.set(homeDir);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,889,workingDir.set(fixedNewPath);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,895,return workingDir.get();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,1156,new IgfsPath(convert(workingDir.get()), path.toUri().getPath());
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,1194,return new FileStatus(file.length(), file.isDirectory(), getDefaultReplication(),
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,1195,file.groupBlockSize(), file.modificationTime(), file.accessTime(), permission(file),
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v1/IgniteHadoopFileSystem.java,1196,file.property(PROP_USER_NAME, DFLT_USER_NAME), file.property(PROP_GROUP_NAME, "users"),
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,25,import org.apache.hadoop.mapreduce.*;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,98,private URI uri;
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,155,workingDir = new IgfsPath("/user/" + cfg.get(MRJobConfig.USER_NAME, DFLT_USER_NAME));
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,243,rmtClient = new HadoopIgfsWrapper(uriAuthority, logDir, cfg, LOG);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,287,String secUserName = props.get(SECONDARY_FS_USER_NAME);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,290,SecondaryFileSystemProvider secProvider = new SecondaryFileSystemProvider(secUri, secConfPath,
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,291,secUserName);
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,293,secondaryFs = secProvider.createAbstractFileSystem();
modules/hadoop/src/main/java/org/apache/ignite/hadoop/fs/v2/IgniteHadoopFileSystem.java,932,file.property(PROP_USER_NAME, DFLT_USER_NAME),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,129,assert status.totalReducerCnt() > 0;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/HadoopUtils.java,133,reduceProgress = 1f - status.pendingReducerCnt() / (float)status.totalReducerCnt();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,40,private @Nullable final String userName;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,54,final @Nullable String secConfPath, @Nullable String userName) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,55,this.userName = userName;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,91,public FileSystem createFileSystem() throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,95,fileSys = FileSystem.get(uri, cfg);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,96,else {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,97,try {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,98,fileSys = FileSystem.get(uri, cfg, userName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,100,catch (InterruptedException e) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,101,Thread.currentThread().interrupt();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,103,throw new IOException("Failed to create file system due to interrupt.", e);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,114,public AbstractFileSystem createAbstractFileSystem() throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/SecondaryFileSystemProvider.java,115,return AbstractFileSystem.get(uri, cfg);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,18,package org.apache.ignite.internal.processors.hadoop.fs;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,20,import org.apache.hadoop.conf.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,21,import org.apache.hadoop.fs.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,22,import org.apache.hadoop.hdfs.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,23,import org.apache.hadoop.mapreduce.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,25,import java.io.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,26,import java.net.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,28,import static org.apache.ignite.configuration.FileSystemConfiguration.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,33,public class HadoopDistributedFileSystem extends DistributedFileSystem {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,35,private final ThreadLocal<String> userName = new ThreadLocal<String>() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,38,return DFLT_USER_NAME;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,43,private final ThreadLocal<Path> workingDir = new ThreadLocal<Path>() {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,46,return getHomeDirectory();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,52,super.initialize(uri, conf);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,54,setUser(conf.get(MRJobConfig.USER_NAME, DFLT_USER_NAME));
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,62,public void setUser(String userName) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,63,this.userName.set(userName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,65,setWorkingDirectory(getHomeDirectory());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,70,Path path = new Path("/user/" + userName.get());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,72,return path.makeQualified(getUri(), null);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,77,Path fixedDir = fixRelativePart(dir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,79,String res = fixedDir.toUri().getPath();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,82,throw new IllegalArgumentException("Invalid DFS directory name " + res);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,84,workingDir.set(fixedDir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopDistributedFileSystem.java,89,return workingDir.get();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,22,import org.apache.hadoop.hdfs.protocol.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,23,import org.apache.ignite.hadoop.fs.v1.*;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,38,public static void setUser(FileSystem fs, String userName) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,40,((IgniteHadoopFileSystem)fs).setUser(userName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,42,((HadoopDistributedFileSystem)fs).setUser(userName);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/fs/HadoopFileSystemsUtils.java,55,cfg.set("fs." + HdfsConstants.HDFS_URI_SCHEME + ".impl", HadoopDistributedFileSystem.class.getName());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,55,public HadoopIgfsInProc(IgfsEx igfs, Log log) {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,64,igfs.clientLogDirectory(logDir);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,66,return new IgfsHandshakeResponse(igfs.name(), igfs.proxyPaths(), igfs.groupBlockSize(),
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,67,igfs.globalSampling());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,87,return igfs.info(path);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,100,return igfs.update(path, props);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,113,igfs.setTimes(path, accessTime, modificationTime);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,129,igfs.rename(src, dest);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,144,return igfs.delete(path, recursive);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,157,return igfs.globalSpace();
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,168,return igfs.listPaths(path);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,181,return igfs.listFiles(path);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,194,igfs.mkdirs(path, props);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,210,return igfs.summary(path);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,225,return igfs.affinity(path, start, len);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,238,IgfsInputStreamAdapter stream = igfs.open(path, bufSize);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,240,return new HadoopIgfsStreamDelegate(this, stream, stream.fileInfo().length());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,254,IgfsInputStreamAdapter stream = igfs.open(path, bufSize, seqReadsBeforePrefetch);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,256,return new HadoopIgfsStreamDelegate(this, stream, stream.fileInfo().length());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,268,int replication, long blockSize, @Nullable Map<String, String> props) throws IgniteCheckedException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,270,IgfsOutputStream stream = igfs.create(path, bufSize, overwrite,
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,271,colocate ? igfs.nextAffinityKey() : null, replication, blockSize, props);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,273,return new HadoopIgfsStreamDelegate(this, stream);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,287,IgfsOutputStream stream = igfs.append(path, bufSize, create, props);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsInProc.java,289,return new HadoopIgfsStreamDelegate(this, stream);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsIpcIo.java,44,private Log log;
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsOutProc.java,103,public HadoopIgfsOutProc(String host, int port, String grid, String igfs, Log log) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsOutProc.java,104,this(host, port, grid, igfs, false, log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsOutProc.java,116,public HadoopIgfsOutProc(int port, String grid, String igfs, Log log) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsOutProc.java,117,this(null, port, grid, igfs, true, log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,66,public HadoopIgfsWrapper(String authority, String logDir, Configuration conf, Log log) throws IOException {
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,365,hadoop = new HadoopIgfsInProc(igfs, log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,371,hadoop.close(true);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,387,hadoop = new HadoopIgfsOutProc(endpoint.port(), endpoint.grid(), endpoint.igfs(), log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,412,log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/igfs/HadoopIgfsWrapper.java,433,hadoop = new HadoopIgfsOutProc(endpoint.host(), endpoint.port(), endpoint.grid(), endpoint.igfs(), log);
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,236,FileSystem fs = FileSystem.get(jobConf());
modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/v2/HadoopV2TaskContext.java,238,HadoopFileSystemsUtils.setUser(fs, jobConf().getUser());
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryServerEndpoint.java,595,catch (InterruptedIOException ignored) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,89,if (val == null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,90,delete(key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,92,return;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,121,.setParameter("key", key).setFlushMode(FlushMode.ALWAYS).executeUpdate();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,147,if (res != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,148,Iterator iter = res.iterator();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,150,while (cnt < entryCnt && iter.hasNext()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,151,Person person = (Person)iter.next();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,62,st.execute("create table if not exists PERSONS (id number unique, firstName varchar(255), " +
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,93,System.out.println(">>> Loading key: " + key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,97,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,100,try (PreparedStatement st = conn.prepareStatement("select * from PERSONS where id=?")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,101,st.setString(1, key.toString());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,103,ResultSet rs = st.executeQuery();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,106,return new Person(rs.getLong(1), rs.getString(2), rs.getString(3));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,110,throw new CacheLoaderException("Failed to load object: " + key, e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,116,return null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,125,System.out.println(">>> Putting [key=" + key + ", val=" + val +  ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,158,throw new CacheLoaderException("Failed to put object [key=" + key + ", val=" + val + ']', e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,167,System.out.println(">>> Removing key: " + key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,171,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,174,try (PreparedStatement st = conn.prepareStatement("delete from PERSONS where id=?")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,175,st.setLong(1, (Long)key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,177,st.executeUpdate();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,181,throw new CacheWriterException("Failed to remove object: " + key, e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,24,import org.apache.ignite.transactions.Transaction;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,26,import org.hibernate.cfg.*;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,27,import org.jetbrains.annotations.*;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,38,private static final String DFLT_HIBERNATE_CFG = "/org/apache/ignite/examples/datagrid/store/hibernate" +
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,42,private static final String ATTR_SES = "HIBERNATE_STORE_SESSION";
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,45,private SessionFactory sesFactory;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,54,public CacheHibernatePersonStore() {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,55,sesFactory = new Configuration().configure(DFLT_HIBERNATE_CFG).buildSessionFactory();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,60,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,62,System.out.println(">>> Store load [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,64,Session ses = session(tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,67,return (Person) ses.get(Person.class, key);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,70,rollback(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,72,throw new CacheLoaderException("Failed to load value from cache store with key: " + key, e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,74,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,75,end(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,81,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,87,System.out.println(">>> Store put [key=" + key + ", val=" + val + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,95,Session ses = session(tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,98,ses.saveOrUpdate(val);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,101,rollback(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,105,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,106,end(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,113,Transaction tx = transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,115,System.out.println(">>> Store remove [key=" + key + ", xid=" + (tx == null ? null : tx.xid()) + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,117,Session ses = session(tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,124,rollback(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,126,throw new CacheWriterException("Failed to remove value from cache store with key: " + key, e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,128,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,129,end(ses, tx);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,140,Session ses = session(null);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,145,List res = ses.createCriteria(Person.class).list();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,164,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,165,end(ses, null);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,175,private void rollback(Session ses, Transaction tx) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,178,if (tx == null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,179,org.hibernate.Transaction hTx = ses.getTransaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,182,hTx.rollback();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,192,private void end(Session ses, @Nullable Transaction tx) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,195,if (tx == null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,196,org.hibernate.Transaction hTx = ses.getTransaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,199,hTx.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,201,ses.close();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,207,Transaction tx = ses.transaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,209,Map<String, Session> props = ses.properties();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,211,Session ses = props.remove(ATTR_SES);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,213,if (ses != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,214,org.hibernate.Transaction hTx = ses.getTransaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,216,if (hTx != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,217,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,218,if (commit) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,219,ses.flush();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,221,hTx.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,223,else
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,224,hTx.rollback();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,226,System.out.println("Transaction ended [xid=" + tx.xid() + ", commit=" + commit + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,228,catch (HibernateException e) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,229,throw new CacheWriterException("Failed to end transaction [xid=" + tx.xid() +
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,232,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,233,ses.close();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,245,private Session session(@Nullable Transaction tx) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,246,Session hbSes;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,248,if (tx != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,249,Map<String, Session> props = ses.properties();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,251,hbSes = props.get(ATTR_SES);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,253,if (hbSes == null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,254,hbSes = sesFactory.openSession();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,256,hbSes.beginTransaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,260,props.put(ATTR_SES, hbSes);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,262,System.out.println("Hibernate session open [ses=" + hbSes + ", tx=" + tx.xid() + "]");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,265,else {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,266,hbSes = sesFactory.openSession();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,268,hbSes.beginTransaction();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,271,return hbSes;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/hibernate/CacheHibernatePersonStore.java,278,return ses != null ? ses.transaction() : null;
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,1496,return Collections.singletonList(addrs.get(1));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,561,sharedCtx = createSharedContext(ctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1468,private GridCacheSharedContext createSharedContext(GridKernalContext kernalCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1483,ioMgr
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,93,GridCacheIoManager ioMgr
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,21,import org.apache.ignite.internal.processors.affinity.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,987,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,990,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,991,commitError(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,993,setRollbackOnly();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,995,cctx.tm().removeCommittedTx(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,997,throw e;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,885,static void processAnnotationsInClass(boolean key, Class<?> cls, TypeDescriptor type,
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,960,static void processAnnotation(boolean key, QuerySqlField sqlAnn, QueryTextField txtAnn,
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,971,desc.addIndex(idxName, isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1009,d.addIndex(idxName, isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1021,d.addIndex(idxName, isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1084,d.addIndex(idxName, isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1096,d.addIndex(idxName, isGeometryClass(prop.type()) ? GEO_SPATIAL : SORTED);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1265,private static boolean isGeometryClass(Class<?> cls) throws IgniteCheckedException { // TODO optimize
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1266,Class<?> dataTypeCls;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1268,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1269,dataTypeCls = Class.forName("org.h2.value.DataType");
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1271,catch (ClassNotFoundException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1272,return false; // H2 is not in classpath.
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1275,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1276,Method method = dataTypeCls.getMethod("isGeometryClass", Class.class);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1278,return (Boolean)method.invoke(null, cls);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1280,catch (Exception e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,1281,throw new IgniteCheckedException("Failed to invoke 'org.h2.value.DataType.isGeometryClass' method.", e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlOperationType.java,134,return "(INTERSECTS(" + operation.child(0) + ", " + operation.child(1) + "))";
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1840,return f2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1843,return f1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1845,return new IndexingQueryFilter() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1847,final IgniteBiPredicate<K, V> fltr1 = f1.forSpace(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1848,final IgniteBiPredicate<K, V> fltr2 = f2.forSpace(spaceName);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1851,return fltr2;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1854,return fltr1;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1856,return new IgniteBiPredicate<K, V>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryManager.java,1858,return fltr1.apply(k, v) && fltr2.apply(k, v);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryIndexing.java,225,public IndexingQueryFilter backupFilter();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,562,idx.backupFilter());
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,629,GridQueryFieldsResult res = idx.queryFields(space, sql, F.asList(args), idx.backupFilter());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1276,return cache.context().affinity().primary(ctx.discovery().localNode(), k,
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1277,AffinityTopologyVersion.NONE);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndexUnsorted.java,63,while (!iter.hasNext()){
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,123,fail(r, nodeId, "Node left the topology.");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,176,if (r != null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,177,r.rmtErr = new CacheException("Failed to execute map query on the node: " + nodeId + ", " + msg);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,180,r.latch.countDown();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,183,tbl.getScanIndex(null).fail(nodeId);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,210,throw new CacheException("Next page fetch failed.", r.rmtErr);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,538,private volatile CacheException rmtErr;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridResultPage.java,93,throw new UnsupportedOperationException();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,434,public boolean txCompatible(IgniteInternalTx tx, Iterable<Integer> activeCacheIds, GridCacheContext<K, V> cacheCtx) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,436,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,444,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,452,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3067,if (!cctx.txCompatible(this, activeCacheIds, cacheCtx)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3078,throw new IgniteCheckedException("Failed to enlist new cache to existing transaction " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,539,if (writeStore != null && writeStore != cacheCtx.store() && putMap != null && !putMap.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,543,putMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,579,if (writeStore != null && writeStore != cacheCtx.store() && rmvCol != null && !rmvCol.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,583,rmvCol.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,983,else {
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2289,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), null, false).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2333,ctx.cache().dynamicStartCache(cacheCfg, cacheCfg.getName(), nearCfg, false).get();
modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java,2372,ctx.cache().dynamicStartCache(null, cacheName, nearCfg, false).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxMapping.java,173,public void dhtVersion(GridCacheVersion dhtVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridDistributedTxMapping.java,177,e.dhtVersion(dhtVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,299,return F.t(ver, val0);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,389,void addDhtVersion(UUID nodeId, GridCacheVersion dhtVer) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,396,m.dhtVersion(dhtVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,979,tx.addDhtVersion(m.node().id(), res.dhtVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,981,m.dhtVersion(res.dhtVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareResponse.java,474,return 19;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,734,((GridNearCacheEntry)cached).recordDhtVersion(txEntry.dhtVersion());
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,25,import org.jetbrains.annotations.*;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,30,import java.util.*;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,39,private static final String ATTR_NAME = "SIMPLE_STORE_CONNECTION";
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,61,try (Connection conn = openConnection(false); Statement st = conn.createStatement()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,65,conn.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,74,Map<String, Connection> props = ses.properties();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,76,try (Connection conn = props.remove(ATTR_NAME)) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,77,if (conn != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,79,conn.commit();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,80,else
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,81,conn.rollback();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,84,System.out.println(">>> Transaction ended [commit=" + commit + ']');
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,86,catch (SQLException e) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,87,throw new CacheWriterException("Failed to end transaction: " + ses.transaction(), e);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,95,Connection conn = null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,98,conn = connection();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,112,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,113,end(conn);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,127,Connection conn = null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,130,conn = connection();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,160,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,161,end(conn);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,169,Connection conn = null;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,172,conn = connection();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,183,finally {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,184,end(conn);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,195,try (Connection conn = connection()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,196,try (PreparedStatement st = conn.prepareStatement("select * from PERSONS")) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,197,try (ResultSet rs = st.executeQuery()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,198,int cnt = 0;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,200,while (cnt < entryCnt && rs.next()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,201,Person person = new Person(rs.getLong(1), rs.getString(2), rs.getString(3));
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,203,clo.apply(person.getId(), person);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,205,cnt++;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,208,System.out.println(">>> Loaded " + cnt + " values into cache.");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,221,private Connection connection() throws SQLException  {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,224,if (ses.isWithinTransaction()) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,225,Map<Object, Object> props = ses.properties();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,227,Connection conn = (Connection)props.get(ATTR_NAME);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,229,if (conn == null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,230,conn = openConnection(false);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,234,props.put(ATTR_NAME, conn);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,237,return conn;
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,240,else
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,241,return openConnection(true);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,249,private void end(@Nullable Connection conn) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,250,if (!ses.isWithinTransaction() && conn != null) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,252,try {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,253,conn.close();
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,255,catch (SQLException ignored) {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,268,private Connection openConnection(boolean autocommit) throws SQLException {
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,269,Connection conn = DriverManager.getConnection("jdbc:h2:mem:example;DB_CLOSE_DELAY=-1");
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,271,conn.setAutoCommit(autocommit);
examples/src/main/java/org/apache/ignite/examples/datagrid/store/jdbc/CacheJdbcPersonStore.java,273,return conn;
modules/core/src/main/java/org/apache/ignite/configuration/IgniteConfiguration.java,323,private NearCacheConfiguration[] nearCacheCfg;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java,449,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,439,return storeEnabled() && store() != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,448,if (!activeCacheIds().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,449,int cacheId = F.first(activeCacheIds());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,453,return store.configured() ? store : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,560,putMap = new LinkedHashMap<>(writeMap().size(), 1.0f);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,562,putMap.put(CU.value(key, cacheCtx, false), F.t(CU.value(val, cacheCtx, false), ver));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,564,writeStore = cacheCtx.store();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,597,rmvCol = new ArrayList<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,599,rmvCol.add(key.value(cacheCtx.cacheObjectContext(), false));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,601,writeStore = cacheCtx.store();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,986,if (store != null && (!internal() || groupLock())) {
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,2622,clientMsgWorker.addMessage(msg);
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,496,private static void addQueryFields(Collection<String> src, Collection<PojoField> fields, String varName,
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,498,if (!fields.isEmpty()) {
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,499,add2(src, comment);
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,500,add2(src, (first ? "Map<String, Class<?>> " : "") + varName + " = new LinkedHashMap<>();");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,501,add0(src, "");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,504,add2(src, varName + ".put(\"" + field.javaName() + "\", " + javaTypeName(field) + ".class);");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,506,add0(src, "");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,507,add2(src, "type." + mtdName + "(" + varName + ");");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,508,add0(src, "");
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,606,addQueryFields(src, pojo.ascendingFields(), "ascFlds", "setAscendingFields",
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,610,addQueryFields(src, pojo.descendingFields(), "descFlds", "setDescendingFields",
modules/schema-import/src/main/java/org/apache/ignite/schema/generator/CodeGenerator.java,618,add2(src, (first ? "Map<String, LinkedHashMap<String, IgniteBiTuple<Class<?>, Boolean>>> " : "") +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3566,cctx.onDeferredDelete(this, obsoleteVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,52,private static final int MAX_DELETE_QUEUE_SIZE = Integer.getInteger(IGNITE_ATOMIC_CACHE_DELETE_HISTORY_SIZE,
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,228,private static final String PROP_PREFIX = "gg.jdbc.";
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,240,public static final String PARAM_NODE_ID = "nodeId";
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,243,public static final String PROP_NODE_ID = PROP_PREFIX + PARAM_NODE_ID;
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,293,props[4] = new PropertyInfo("gg.client.protocol", info.getProperty("gg.client.protocol", "TCP"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,295,props[5] = new PropertyInfo("gg.client.connectTimeout", info.getProperty("gg.client.connectTimeout", "0"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,297,props[6] = new PropertyInfo("gg.client.tcp.noDelay", info.getProperty("gg.client.tcp.noDelay", "true"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,299,props[7] = new PropertyInfo("gg.client.ssl.enabled", info.getProperty("gg.client.ssl.enabled", "false"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,301,props[8] = new PropertyInfo("gg.client.ssl.protocol", info.getProperty("gg.client.ssl.protocol", "TLS"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,303,props[9] = new PropertyInfo("gg.client.ssl.key.algorithm", info.getProperty("gg.client.ssl.key.algorithm",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,305,props[10] = new PropertyInfo("gg.client.ssl.keystore.location",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,306,info.getProperty("gg.client.ssl.keystore.location", ""),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,308,props[11] = new PropertyInfo("gg.client.ssl.keystore.password",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,309,info.getProperty("gg.client.ssl.keystore.password", ""), "Key store password.");
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,310,props[12] = new PropertyInfo("gg.client.ssl.keystore.type", info.getProperty("gg.client.ssl.keystore.type",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,312,props[13] = new PropertyInfo("gg.client.ssl.truststore.location",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,313,info.getProperty("gg.client.ssl.truststore.location", ""),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,315,props[14] = new PropertyInfo("gg.client.ssl.keystore.password",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,316,info.getProperty("gg.client.ssl.truststore.password", ""), "Trust store password.");
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,317,props[15] = new PropertyInfo("gg.client.ssl.truststore.type", info.getProperty("gg.client.ssl.truststore.type",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,319,props[16] = new PropertyInfo("gg.client.credentials", info.getProperty("gg.client.credentials", ""),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,321,props[17] = new PropertyInfo("gg.client.cache.top", info.getProperty("gg.client.cache.top", "false"),
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,324,props[18] = new PropertyInfo("gg.client.topology.refresh", info.getProperty("gg.client.topology.refresh",
modules/core/src/main/java/org/apache/ignite/IgniteJdbcDriver.java,326,props[19] = new PropertyInfo("gg.client.idleTimeout", info.getProperty("gg.client.idleTimeout", "30000"),
modules/core/src/main/java/org/apache/ignite/internal/client/GridClientConfiguration.java,163,this("gg.client", in);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,650,res.invalidPartitions(fut.invalidPartitions(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,651,new AffinityTopologyVersion(ctx.discovery().topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1108,if (topology().topologyVersion().equals(req.topologyVersion()) ||
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,299,mapOnTopology(keys, false, null, waitTopFut);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,436,futVer = cctx.versions().next(topVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,455,cctx.mvcc().addAtomicFuture(version(), this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,852,topVer = reader.readMessage("topVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,860,updateVer = reader.readMessage("updateVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,887,return 23;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,287,cand.topologyVersion(new AffinityTopologyVersion(topVer.get().topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,306,cand.topologyVersion(new AffinityTopologyVersion(topVer.get().topologyVersion()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxFuture.java,79,public GridCacheOptimisticCheckPreparedTxFuture(GridCacheSharedContext<K, V> cctx, IgniteInternalTx tx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxFuture.java,80,UUID failedNodeId, Map<UUID, Collection<UUID>> txNodes) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxFuture.java,180,tx, nodeTransactions(nodeId), futureId(), fut.futureId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxFuture.java,294,log.debug("Failed to check prepared transactions, " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxFuture.java,297,cctx.tm().salvageTx(tx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxRequest.java,65,public GridCacheOptimisticCheckPreparedTxRequest(IgniteInternalTx tx, int txNum, IgniteUuid futId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxRequest.java,66,IgniteUuid miniId) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxRequest.java,190,nearXidVer = reader.readMessage("nearXidVer");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxRequest.java,198,sys = reader.readBoolean("sys");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/GridCacheOptimisticCheckPreparedTxRequest.java,225,return 13;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,740,return idMap.get(txId);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,31,private static final int MICROSECONDS_IN_SECOND = 1_000_000;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,88,private int writesPerSec;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,91,private int hitsPerSec;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,94,private int missesPerSec;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,151,private static int perSecond(int metric, long time, long createTime) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,152,long seconds = (time - createTime) / 1000;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,154,return (seconds > 0) ? (int)(metric / seconds) : 0;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,188,cm.readsPerSec = (int)(MICROSECONDS_IN_SECOND * 1.f / m.getAverageGetTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,189,cm.writesPerSec = (int)(MICROSECONDS_IN_SECOND * 1.f / m.getAveragePutTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,190,cm.hitsPerSec = -1;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,191,cm.missesPerSec = (int)(MICROSECONDS_IN_SECOND * 1.f / m.getAverageRemoveTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,192,cm.commitsPerSec = (int)(MICROSECONDS_IN_SECOND * 1.f / m.getAverageTxCommitTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,193,cm.rollbacksPerSec = (int)(MICROSECONDS_IN_SECOND * 1.f / m.getAverageTxRollbackTime());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,324,public int writesPerSecond() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,325,return writesPerSec;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,331,public int hitsPerSecond() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,332,return hitsPerSec;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,338,public int missesPerSecond() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,339,return missesPerSec;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeResult.java,50,public CacheInvokeResult(T res) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeResult.java,51,this.res = res;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeResult.java,57,public CacheInvokeResult(Exception err) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheInvokeResult.java,58,this.err = err;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2528,return res != null ? res : new CacheInvokeResult<>((T)null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1415,invokeRes = computed != null ? new CacheInvokeResult<>(cctx.unwrapTemporary(computed)) : null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1420,invokeRes = new CacheInvokeResult<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,226,CacheInvokeResult res0 = err == null ? new CacheInvokeResult(res) : new CacheInvokeResult(err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheReturn.java,316,new CacheInvokeResult<>(CU.value(res.result(), ctx, false)) : new CacheInvokeResult<>(res.error());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,24,import org.apache.ignite.internal.managers.communication.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,668,return res != null ? res : new CacheInvokeResult<>((T)null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,667,return res != null ? res : new CacheInvokeResult<>((T)null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1152,invokeRes = new CacheInvokeResult<>(ctx.unwrapTemporary(computed));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/local/atomic/GridLocalAtomicCache.java,1155,invokeRes = new CacheInvokeResult<>(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/handlers/top/GridTopologyCommandHandler.java,264,if (!e.getKey().startsWith("org.apache.ignite.") && System.getProperty(e.getKey()) == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2082,boolean readThrough = !F.isEmptyOrNulls(filter) && !F.isAlwaysTrue(filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1329,boolean readThrough = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1333,if (needVal && old == null &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1816,boolean readThrough = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1820,if (needVal && oldVal == null && (cctx.readThrough() &&
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,1826,readThrough = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2005,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2006,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2008,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2009,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2018,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2019,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2072,boolean readThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,432,assert dhtMapping == null || nearMapping == null || dhtMapping.node() == nearMapping.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,1119,assert dhtMapping == null || nearMapping == null || dhtMapping.node() == nearMapping.node();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,160,CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,598,CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,618,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,734,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,593,return obtainLockAsync(cacheCtx, ret, passedKeys, read, needRetVal, skipped, accessTtl, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,638,CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,832,taskNameHash);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,892,taskNameHash);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,2359,req.taskNameHash());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,175,int taskNameHash
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,645,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,668,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,714,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,780,accessTtl);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,130,CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,879,filter);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,141,CacheEntryPredicate[] filter) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1067,long accessTtl) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1095,CU.empty0());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1020,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,255,true,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTransactionalCache.java,164,readThrough,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentMap.java,2012,this.prjPerCall = prjPerCall;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheConcurrentMap.java,2047,out.writeObject(prjPerCall);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1860,V val = get(key, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1879,IgniteInternalFuture<V> fut = getAsync(key, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheVersionedEntryImpl.java,27,private final Object ver;
modules/core/src/main/java/org/apache/ignite/internal/visor/query/VisorQueryTask.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/visor/query/VisorQueryTask.java,32,import java.util.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,25,public class CacheEntryImpl<K, V> implements Cache.Entry<K, V> {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,27,private final K key;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheEntryImpl.java,30,private final V val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,503,return delegate.queries().metrics();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,195,cm.qryMetrics = VisorCacheQueryMetrics.from(c.queries().metrics());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetadataTask.java,63,if (cache != null) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetadataTask.java,66,return F.first(queries.sqlMetadata());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1897,A.notNull(keys, "keys");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1899,boolean statsEnabled = ctx.config().isStatisticsEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1901,long start = statsEnabled ? System.nanoTime() : 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1903,Map<K, V> map = getAll(keys, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1906,map = interceptGet(keys, map);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1909,metrics0().addGetTimeNanos(System.nanoTime() - start);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1911,return map;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1916,A.notNull(keys, "keys");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1918,final boolean statsEnabled = ctx.config().isStatisticsEnabled();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1920,final long start = statsEnabled ? System.nanoTime() : 0L;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1922,IgniteInternalFuture<Map<K, V>> fut = getAllAsync(keys, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1925,return fut.chain(new CX1<IgniteInternalFuture<Map<K, V>>, Map<K, V>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1927,return interceptGet(keys, f.get());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1932,fut.listen(new UpdateGetTimeStatClosure<Map<K, V>>(metrics0(), start));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,1934,return fut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5017,return map.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5058,return getAllAsync(keys, deserializePortable).get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5118,return getAllAsync(keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,646,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,651,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5025,public final IgniteInternalFuture<V> getAsync(final K key, boolean deserializePortable) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5053,public Map<K, V> getAll(Collection<? extends K> keys, boolean deserializePortable) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,5114,public IgniteInternalFuture<Map<K, V>> getAllAsync(@Nullable Collection<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,597,setFuture(delegate.getAsync(key));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,602,return delegate.get(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,620,setFuture(delegate.getAllAsync(keys));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,625,return delegate.getAll(keys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,1395,prj0,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,2164,if (!skipVals && misses != null && readThrough && ctx.readThrough()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryIndexing.java,44,public void start(GridKernalContext ctx) throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,100,idx.start(ctx);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1150,mapQryExec = new GridMapQueryExecutor();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,1151,rdcQryExec = new GridReduceQueryExecutor();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,49,public class GridMapQueryExecutor implements GridMessageListener {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMapQueryExecutor.java,104,ctx.io().addMessageListener(GridTopic.TOPIC_QUERY, this);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,59,public class GridReduceQueryExecutor implements GridMessageListener {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,114,ctx.io().addMessageListener(GridTopic.TOPIC_QUERY, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,727,cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,878,cctx);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockRequest.java,290,GridCacheContext ctx
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,2264,long checkTimeout = (long)maxMissedHbs * hbFreq + 1000;
modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java,2781,log.debug("Failed to connect to next node [msg=" + msg + ", err=" + e + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,210,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,211,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will retry): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,213,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,385,fut.onResult((ClusterTopologyCheckedException)e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,606,void onResult(ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,210,if (f.node().id().equals(nodeId)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,211,f.onResult(new ClusterTopologyCheckedException("Remote node left grid (will retry): " + nodeId));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,213,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,385,fut.onResult((ClusterTopologyCheckedException)e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,724,void onResult(ClusterTopologyCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridPartitionedGetFuture.java,375,skipVals);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1145,writeThrough() &&                              // and store is enabled ...
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetFuture.java,375,skipVals);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearGetRequest.java,121,boolean skipVals
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1732,primary && writeThrough(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,590,taskNameHash);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateFuture.java,713,taskNameHash);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,173,int taskNameHash
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,824,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/startup/BasicWarmupClosure.java,247,for (CacheConfiguration cc : first.configuration().getCacheConfiguration()) {
modules/core/src/main/java/org/apache/ignite/startup/BasicWarmupClosure.java,248,GridCache<Object, Object> cache0 = ((IgniteKernal)first).getCache(cc.getName());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridMergeIndex.java,167,return fetched.size() == rowsCnt.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsAsyncImpl.java,106,igfs.stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsEx.java,57,public void stop();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,18,package org.apache.ignite.internal.processors.igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,20,import java.util.concurrent.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,21,import java.util.concurrent.locks.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,26,public class IgfsFileWorker extends IgfsThread {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,28,private static final long THREAD_REUSE_WAIT_TIME = 5000;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,31,private final Lock lock = new ReentrantLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,34,private final Condition cond = lock.newCondition();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,37,private IgfsFileWorkerBatch nextBatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,40,private IgfsFileWorkerBatch curBatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,43,private volatile boolean cancelled;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,50,IgfsFileWorker(String name) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,51,super(name);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,59,boolean addBatch(IgfsFileWorkerBatch batch) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,60,assert batch != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,62,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,64,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,65,if (!cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,66,assert nextBatch == null; // Remember, that write operations on a single file are exclusive.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,68,nextBatch = batch;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,70,cond.signalAll();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,72,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,74,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,75,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,77,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,78,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,84,while (!cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,85,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,87,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,90,cond.await(THREAD_REUSE_WAIT_TIME, TimeUnit.MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,92,curBatch = nextBatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,94,nextBatch = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,97,curBatch.finish(); // Mark the batch as finished if cancelled.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,99,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,100,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,104,curBatch.process();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,105,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,106,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,108,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,111,cancelled = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,113,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,114,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,123,boolean interrupted = interrupted();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,127,nextBatch.process();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,129,onFinish();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,133,interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,139,void cancel() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,140,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,142,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,143,cancelled = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,146,curBatch.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,149,nextBatch.finish();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,151,cond.signalAll(); // Awake the main loop in case it is still waiting for the next batch.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,153,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,154,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,163,IgfsFileWorkerBatch currentBatch() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,164,lock.lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,166,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,167,return nextBatch == null ? curBatch : nextBatch;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,169,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,170,lock.unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorker.java,177,protected void onFinish() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,22,import org.apache.ignite.internal.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,27,import java.util.concurrent.atomic.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,28,import java.util.concurrent.locks.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,33,public class IgfsFileWorkerBatch {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,35,private final CountDownLatch completeLatch = new CountDownLatch(1);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,38,private final AtomicBoolean finishGuard = new AtomicBoolean();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,41,private final ReadWriteLock finishLock = new ReentrantReadWriteLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,44,private final BlockingDeque<IgfsFileWorkerTask> queue = new LinkedBlockingDeque<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,53,private volatile IgniteCheckedException err;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,56,private boolean lastTask;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,78,boolean write(final byte[] data) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,79,return addTask(new IgfsFileWorkerTask() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,81,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,82,out.write(data);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,84,catch (IOException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,85,throw new IgniteCheckedException("Failed to write data to the file due to secondary file system " +
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,95,void process() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,96,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,97,boolean cancelled = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,99,while (!cancelled) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,101,IgfsFileWorkerTask task = queue.poll(1000, TimeUnit.MILLISECONDS);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,104,continue;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,106,task.execute();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,109,cancelled = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,111,catch (IgniteCheckedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,114,cancelled = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,116,catch (InterruptedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,117,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,119,cancelled = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,124,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,125,onComplete();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,127,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,128,U.closeQuiet(out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,130,completeLatch.countDown();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,139,void finish() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,140,if (finishGuard.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,141,finishLock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,143,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,144,queue.add(new IgfsFileWorkerTask() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,146,assert queue.isEmpty();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,148,lastTask = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,152,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,153,finishLock.writeLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,164,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,165,completeLatch.await();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,167,catch (InterruptedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,168,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,170,throw new IgniteInterruptedCheckedException(e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,173,IgniteCheckedException err0 = err;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,176,throw err0;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,184,void awaitIfFinished() throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,186,await();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,201,protected void onComplete() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,211,private boolean addTask(IgfsFileWorkerTask task) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,212,finishLock.readLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,214,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,215,if (!finishGuard.get()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,216,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,217,queue.put(task);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,219,return true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,221,catch (InterruptedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,223,Thread.currentThread().interrupt();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,225,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,228,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,229,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,232,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerBatch.java,233,finishLock.readLock().unlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerTask.java,18,package org.apache.ignite.internal.processors.igfs;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerTask.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerTask.java,25,public interface IgfsFileWorkerTask {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileWorkerTask.java,31,public void execute() throws IgniteCheckedException;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,100,private final ConcurrentHashMap8<IgfsPath, IgfsFileWorker> workerMap = new ConcurrentHashMap8<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,238,w.cancel();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,241,for (IgfsFileWorker w : workerMap.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,242,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,243,w.join();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,245,catch (InterruptedException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,246,U.error(log, e.getMessage(), e);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,250,workerMap.clear();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,253,U.closeQuiet((AutoCloseable)secondaryFs);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,276,IgfsFileWorkerBatch batch = new IgfsFileWorkerBatch(path, out);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,278,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,279,IgfsFileWorker worker = workerMap.get(path);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,281,if (worker != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,282,if (worker.addBatch(batch)) // Added batch to active worker.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,283,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,284,else
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,285,workerMap.remove(path, worker); // Worker is stopping. Remove it from map.
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,287,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,288,worker = new IgfsFileWorker("igfs-file-worker-" + path) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,290,workerMap.remove(path, this);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,294,boolean b = worker.addBatch(batch);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,296,assert b;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,298,if (workerMap.putIfAbsent(path, worker) == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,299,worker.start();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,301,break;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,336,for (Map.Entry<IgfsPath, IgfsFileWorker> workerEntry : workerMap.entrySet()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,350,IgfsFileWorkerBatch batch = workerEntry.getValue().currentBatch();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,354,batch.awaitIfFinished();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,956,else if (mode == PRIMARY) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1092,props, overwrite, bufSize, (short)replication, groupBlockSize(), affKey);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsImpl.java,1346,catch (IgniteException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsProcessor.java,181,igfsCtx.igfs().stop();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,261,GridNioRecoveryDescriptor recoveryData = ses.recoveryDescriptor();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,263,if (recoveryData != null) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,264,if (recoveryData.nodeAlive(getSpiContext().node(id))) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,265,if (!recoveryData.messagesFutures().isEmpty()) {
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,267,log.debug("Session was closed but there are unacknowledged messages, " +
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,270,recoveryWorker.addReconnectRequest(recoveryData);
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,273,else
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,274,recoveryData.onNodeLeft();
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,2436,return !node.isDaemon() && (cacheFilter.apply(node) || clientNodes.containsKey(node.id()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1863,for (DynamicCacheDescriptor desc : registeredCaches.values()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1864,CacheConfiguration cfg = desc.cacheConfiguration();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1866,if (cfg.getAffinity() instanceof RendezvousAffinityFunction) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1867,RendezvousAffinityFunction aff = (RendezvousAffinityFunction)cfg.getAffinity();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1869,AffinityNodeHashResolver hashIdRslvr = aff.getHashIdResolver();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1871,assert hashIdRslvr != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1873,Object nodeHashObj = hashIdRslvr.resolve(node);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1875,for (ClusterNode topNode : ctx.discovery().allNodes()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1876,Object topNodeHashObj = hashIdRslvr.resolve(topNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1878,if (nodeHashObj.hashCode() == topNodeHashObj.hashCode()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1879,String errMsg = "Failed to add node to topology because it has the same hash code for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1884,String sndMsg = "Failed to add node to topology because it has the same hash code for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1887,topNode.id() + ']';
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,65,private final Map<TypeName, TypeDescriptor> typesByName = new ConcurrentHashMap8<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,120,if (!F.isEmpty(ccfg.getTypeMetadata())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,121,for (CacheTypeMetadata meta : ccfg.getTypeMetadata()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,130,desc.registered(idx.registerType(ccfg.getName(), desc));
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,132,typesByName.put(new TypeName(ccfg.getName(), desc.name()), desc);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,137,Class<?>[] clss = ccfg.getIndexedTypes();
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,139,if (!F.isEmpty(clss)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,140,for (int i = 0; i < clss.length; i += 2) {
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,141,Class<?> keyCls = clss[i];
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,142,Class<?> valCls = clss[i + 1];
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,146,desc.registered(idx.registerType(ccfg.getName(), desc));
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,148,typesByName.put(new TypeName(ccfg.getName(), desc.name()), desc);
modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridQueryProcessor.java,149,types.put(new TypeId(ccfg.getName(), valCls), desc);
modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java,30,import org.apache.ignite.internal.util.typedef.*;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java,838,String upper = qry.trim().toUpperCase();
modules/core/src/main/java/org/apache/ignite/internal/processors/affinity/GridAffinityProcessor.java,407,return new AffinityInfo(f, m, t.get3(), ctx.cacheObjects().contextForCache(n, cacheName, null));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,571,CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(null, cfg.getName(), cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,660,CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(null, ccfg.getName(), ccfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1339,CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(null, ccfg.getName(), ccfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java,1628,CacheObjectContext cacheObjCtx = ctx.cacheObjects().contextForCache(null, cfg.getName(), cfg);
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessor.java,115,public CacheObjectContext contextForCache(ClusterNode node, @Nullable String cacheName,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,22,import org.apache.ignite.cluster.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,233,if (ccfg != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,234,CacheMemoryMode memMode = ccfg.getMemoryMode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,236,return new CacheObjectContext(ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,237,new GridCacheDefaultAffinityKeyMapper(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,238,ccfg.isCopyOnRead() && memMode == ONHEAP_TIERED,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,241,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,242,return new CacheObjectContext(
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,243,ctx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,244,new GridCacheDefaultAffinityKeyMapper(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,245,false,
modules/core/src/main/java/org/apache/ignite/internal/processors/cacheobject/IgniteCacheObjectProcessorImpl.java,246,ctx.config().isPeerClassLoadingEnabled());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,182,ClusterNode node = F.first(ctx.grid().cluster().forCacheNodes(cacheName).nodes());
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,185,throw new IllegalStateException("Cache doesn't exist: " + cacheName);
modules/core/src/main/java/org/apache/ignite/internal/processors/datastreamer/DataStreamerImpl.java,187,this.cacheObjCtx = ctx.cacheObjects().contextForCache(node, cacheName, null);
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,419,return S.toString(ArrayListener.class, this, "arr", Arrays.toString(arr));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlElement.java,56,public void clearChildren() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlElement.java,58,children = new ArrayList<>();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,272,res.addExpression(parseExpression(exp));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,292,res.addSelectExpression(parseExpression(expressions.get(i)));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,87,mapQry.addSelectExpression(exp);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,90,rdcQry.addSelectExpression(rdcExp);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,50,if (res.getException() == null && res.getData() instanceof Map<?, ?>) {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,37,private static volatile boolean loaded;
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,43,private static final File LOCK_FILE = new File(System.getProperty("java.io.tmpdir"), "igniteshmem.lock");
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,125,try (RandomAccessFile randomAccessFile = new RandomAccessFile(LOCK_FILE, "rws");
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,142,throw new IgniteCheckedException("Failed to obtain file lock: " + LOCK_FILE, e);
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,184,private static boolean extractAndLoad(Collection<Throwable> errs, String rsrcPath) {
modules/core/src/main/java/org/apache/ignite/internal/util/ipc/shmem/IpcSharedMemoryNativeLoader.java,190,return extract(errs, rsrc, new File(System.getProperty("java.io.tmpdir"), mapLibraryName(LIB_NAME)));
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,102,public static VisorCache from(Ignite ignite, String cacheName, int sample) throws IgniteCheckedException {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,229,cache.metrics = VisorCacheMetrics.from(ca);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,33,private final String cacheName;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,107,this.cacheName = cacheName;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,113,public String cacheName() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheAggregatedMetrics.java,114,return cacheName;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetrics.java,161,public static VisorCacheMetrics from(GridCache c) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,54,VisorCacheAggregatedMetrics am = grpAggrMetrics.get(entry.getKey());
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,59,grpAggrMetrics.put(entry.getKey(), am);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,974,if (expiry != null && entry.op() == READ) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,434,if (tx != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,435,assert tx.local();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,512,if (owner != null && owner.version().equals(lockVer)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,447,IgniteTxEntry entry = txMap.get(e.txKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,449,if (entry != null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,450,entry.op(e.op()); // Absolutely must set operation, as default is DELETE.
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,451,entry.value(e.value(), e.hasWriteValue(), e.hasReadValue());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,452,entry.entryProcessors(e.entryProcessors());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,453,entry.ttl(e.ttl());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,454,entry.filters(e.filters());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,455,entry.expiry(e.expiry());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,457,entry.conflictExpireTime(e.conflictExpireTime());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,458,entry.conflictVersion(e.conflictVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,461,entry = e;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,465,GridDhtCacheEntry cached = dhtCache.entryExx(entry.key(), topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,467,entry.cached(cached);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,469,GridCacheVersion explicit = entry.explicitVersion();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,475,throw new IgniteCheckedException("Failed to find dht mapping for explicit entry version: " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,477,entry.explicitVersion(dhtVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,480,txMap.put(entry.txKey(), entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,483,log.debug("Added entry to transaction: " + entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,486,return addReader(msgId, dhtCache.entryExx(entry.key()), entry, topologyVersion());
modules/codegen/src/main/java/org/apache/ignite/codegen/MessageCodeGenerator.java,21,import org.apache.ignite.internal.processors.query.h2.twostep.messages.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheContext.java,1632,ret |= map(entry, F.view(nearNodes, F.notIn(dhtNodes)), nearMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,256,ClusterNode locNode = cctx.localNode();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,258,DiscoveryEvent evt = new DiscoveryEvent(locNode, "Dummy event.", EVT_NODE_JOINED, locNode);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheEvictionManager.java,260,evt.topologySnapshot(locNode.order(), cctx.discovery().topology(locNode.order()));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3518,CacheObject expiredVal = val;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3525,if (cctx.deferredDelete() && !detached() && !isInternal()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3526,if (!deletedUnlocked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3527,update(null, 0L, 0L, ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3529,deletedUnlocked(true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3531,deferred = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3534,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMapEntry.java,3536,obsolete = true; // Success, will return "true".
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvcc.java,1017,if (!cand.tx() && nodeId.equals(cand.nodeId())) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccCandidate.java,234,public boolean hasReentry() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccCandidate.java,235,return reentry != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,177,for (GridDistributedCacheEntry entry : locked()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,178,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,179,entry.removeExplicitNodeLocks(discoEvt.eventNode().id());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,181,catch (GridCacheEntryRemovedException ignore) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheMvccManager.java,183,log.debug("Attempted to remove node locks from removed entry in mvcc manager " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,300,public void onUnlock() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,648,throws GridCacheEntryRemovedException {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheEntry.java,653,return mvcc == null ? null : mvcc.candidate(ver);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,191,lockVer = cctx.versions().onReceivedAndNext(nearNodeId, nearLockVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,752,hasRmtNodes = cctx.dhtMap(nearNodeId, topVer, entry, log, dhtMap, null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLockFuture.java,754,GridCacheMvccCandidate cand = entry.mappings(lockVer);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1168,boolean created = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1170,if (entry == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1171,entry = entryExx(key);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1173,created = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTransactionalCacheAdapter.java,1199,removeEntry(entry);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,248,void complete() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,249,onComplete();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,282,boolean res = false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,316,tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,317,tx.syncRollback(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,368,tx.syncCommit(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxFinishFuture.java,369,tx.syncRollback(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,230,cacheCtx.dhtMap(nearNodeId(), topologyVersion(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocalAdapter.java,231,(GridDhtCacheEntry)e.cached(), log, dhtEntryMap, nearEntryMap);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,859,GridCacheMvccCandidate added = entry.cached().candidate(version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,861,assert added != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,862,assert added.dhtLocal();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,865,req.owned(entry.txKey(), added.ownerVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,915,GridCacheMvccCandidate added = entry.cached().candidate(version());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,917,assert added != null || entry.groupLockEntry() : "Null candidate for non-group-lock entry " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,919,assert added == null || added.dhtLocal() : "Got non-dht-local candidate for prepare future" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxPrepareFuture.java,923,req.owned(entry.txKey(), added.ownerVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,508,ctx.io().send(n, req, ctx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedCache.java,590,ctx.io().send(n, req, ctx.ioPolicy());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,520,AffinityTopologyVersion topVer = tx != null ? tx.topologyVersionSnapshot() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,521,cctx.mvcc().lastExplicitLockTopologyVersion(threadId);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,654,boolean explicit;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,658,while (true) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,659,GridDistributedCacheEntry entry = null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,662,entry = cctx.colocated().entryExx(key, topVer, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/colocated/GridDhtColocatedLockFuture.java,953,addLocalKey(key, topVer, distributedKeys);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java,567,partReleaseFut.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheEntry.java,502,cand = mvcc.addNearLocal(this, locId, dhtNodeId, threadId, ver, timeout, tx, implicitSingle);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,652,AffinityTopologyVersion topVer = tx != null ? tx.topologyVersionSnapshot() :
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearLockFuture.java,653,cctx.mvcc().lastExplicitLockTopologyVersion(Thread.currentThread().getId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,88,assert cctx != null;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishFuture.java,267,return commit ? tx.syncCommit() : tx.syncRollback();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,311,GridDhtTopologyFuture topFut = topologyReadLock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,313,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,314,if (topFut == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,315,assert isDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,317,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,320,if (topFut.isDone()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,321,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,322,if (!tx.state(PREPARING)) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,323,if (tx.setRollbackOnly()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,325,onError(null, null, new IgniteTxTimeoutCheckedException("Transaction timed out and " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,327,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,328,onError(null, null, new IgniteCheckedException("Invalid transaction state for prepare " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,331,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,332,onError(null, null, new IgniteTxRollbackCheckedException("Invalid transaction state for " +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,335,return;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,338,tx.topologyVersion(topFut.topologyVersion());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,341,cctx.mvcc().addFuture(this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,343,prepare0();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,345,catch (TransactionTimeoutException | TransactionOptimisticException e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,346,onError(cctx.localNodeId(), null, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,349,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,350,topFut.listen(new CI1<IgniteInternalFuture<AffinityTopologyVersion>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,352,cctx.kernalContext().closure().runLocalSafe(new GridPlainRunnable() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,354,prepare();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,361,finally {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,362,topologyReadUnlock();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,365,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareFuture.java,366,preparePessimistic();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,338,futId = reader.readIgniteUuid("futId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,346,implicitSingle = reader.readBoolean("implicitSingle");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,354,last = reader.readBoolean("last");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,362,lastBackups = reader.readCollection("lastBackups", MessageCollectionItemType.UUID);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,370,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,378,near = reader.readBoolean("near");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,386,retVal = reader.readBoolean("retVal");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,394,subjId = reader.readUuid("subjId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,402,taskNameHash = reader.readInt("taskNameHash");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxPrepareRequest.java,429,return 35;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxAdapter.java,1166,state(MARKED_ROLLBACK, true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,583,assert tx != null : "Transaction is null for near rollback request [nodeId=" +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,586,tx.syncRollback(req.syncRollback());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,588,tx.nearFinishFutureId(req.futureId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,589,tx.nearFinishMiniId(req.miniId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,591,IgniteInternalFuture<IgniteInternalTx> rollbackFut = tx.rollbackAsync();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,594,rollbackFut.listen(CU.errorLogger(log));
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,596,return rollbackFut;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,760,if (dhtTx != null && !dhtTx.done()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,761,dhtTx.finishFuture().listen(new CI1<IgniteInternalFuture<IgniteInternalTx>>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,763,sendReply(nodeId, req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,767,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,768,sendReply(nodeId, req);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,877,if (req.replyRequired()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,878,GridCacheMessage res = new GridDhtTxFinishResponse(req.version(), req.futureId(), req.miniId());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,880,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,881,ctx.io().send(nodeId, res, req.system() ? UTILITY_CACHE_POOL : SYSTEM_POOL);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,883,catch (Throwable e) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,885,if (ctx.discovery().node(nodeId) == null) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,887,log.debug("Node left while sending finish response [nodeId=" + nodeId + ", res=" + res + ']');
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,889,else
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,890,U.error(log, "Failed to send finish response to node [nodeId=" + nodeId + ", res=" + res + ']', e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2648,return plc1.apply(fut.get(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2655,return plc1.apply(false, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2663,return new GridEmbeddedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2666,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2681,return commitAsync().chain(new CX1<IgniteInternalFuture<IgniteInternalTx>, GridCacheReturn>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2690,return loadFut.chain(new CX1<IgniteInternalFuture<Set<KeyCacheObject>>, GridCacheReturn>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2868,return plc1.apply(fut.get(), null);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2875,return plc1.apply(false, e);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2883,return new GridEmbeddedFuture<>(
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2886,);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2894,return commitAsync().chain(new CX1<IgniteInternalFuture<IgniteInternalTx>, GridCacheReturn>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2896,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2905,return loadFut.chain(new CX1<IgniteInternalFuture<Set<KeyCacheObject>>, GridCacheReturn>() {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,2907,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxLocalAdapter.java,3263,if (!explicitVer.equals(xidVer) && explicitCand.threadId() == threadId && !explicitCand.tx()) {
modules/core/src/main/java/org/apache/ignite/internal/util/future/GridFutureAdapter.java,102,acquireSharedInterruptibly(0);
modules/core/src/main/java/org/apache/ignite/internal/util/worker/GridWorker.java,122,U.error(log, "Runtime error caught during grid runnable execution: " + this, e);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,448,DataType dt = DataType.getDataType(type);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,449,if (precision > 0 && (dt.defaultPrecision == 0 ||
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,450,(dt.defaultPrecision > precision && dt.defaultPrecision < Byte.MAX_VALUE))) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,452,precision = dt.defaultPrecision;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,455,if (scale > 0 && (dt.defaultScale == 0 ||
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,456,(dt.defaultScale > scale && dt.defaultScale < precision))) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,457,scale = dt.defaultScale;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,459,if (scale > precision) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,460,precision = scale;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java,484,data.columns = generateColumnsFromQuery((Query)ses.prepare(qry.query(), false));
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1366,if (dataCachePrj.igfsDataSpaceUsed() > dataCachePrj.igfsDataSpaceMax() *
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1367,igfsCtx.configuration().getFragmentizerLocalWritesRatio()) {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1369,locRange.markDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsDataManager.java,1371,return new IgfsBlockKey(fileInfo.id(), null, fileInfo.evictExclude(), block);
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,60,private boolean done;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,224,public void markDone() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,225,done = true;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,231,public boolean done() {
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,232,return done;
modules/core/src/main/java/org/apache/ignite/internal/processors/igfs/IgfsFileAffinityRange.java,329,done = reader.readBoolean("done");
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,124,public static VisorCacheConfiguration from(Ignite ignite, CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheConfiguration.java,164,public static Iterable<VisorCacheConfiguration> list(Ignite ignite, CacheConfiguration[] caches) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,35,public class VisorCacheMetricsCollectorTask extends VisorMultiNodeTask<IgniteBiTuple<Boolean, String>,
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,36,Iterable<VisorCacheAggregatedMetrics>, Map<String, VisorCacheMetrics>> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,75,extends VisorJob<IgniteBiTuple<Boolean, String>, Map<String, VisorCacheMetrics>> {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,85,private VisorCacheMetricsCollectorJob(IgniteBiTuple<Boolean, String> arg, boolean debug) {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheMetricsCollectorTask.java,93,: F.asList(ignite.cachex(arg.get2()));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,175,assert cls.getSimpleName().equals("CommandContainer");
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,180,Prepared select = p.get(cmd);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,182,return new GridSqlQueryParser().parse((Select)select);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,203,else if (tbl instanceof FunctionTable) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,500,return new GridSqlParameter(((org.h2.expression.Parameter)expression).getIndex());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,75,List<GridSqlElement> mapExps = new ArrayList<>(srcQry.allExpressions());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,76,GridSqlElement[] rdcExps = new GridSqlElement[srcQry.select().size()];
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,93,if (!srcQry.groups().isEmpty()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,104,if (srcQry.having() != null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,106,rdcQry.whereAnd(column(columnName(srcQry.havingColumn())));
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,112,if (!srcQry.sort().isEmpty()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,119,rdcQry.limit(srcQry.limit());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,122,if (srcQry.offset() != null) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,125,rdcQry.offset(srcQry.offset());
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,129,if (srcQry.distinct()) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,179,private static void findParams(GridSqlElement el, Object[] params, ArrayList<Object> target) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSelect.java,27,public class GridSqlSelect implements Cloneable {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSelect.java,273,public GridSqlSelect from(GridSqlElement from) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSelect.java,297,public GridSqlSelect whereAnd(GridSqlElement condition) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSelect.java,362,GridSqlSelect res = (GridSqlSelect)super.clone();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,25,import org.h2.expression.Parameter;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,167,public static GridSqlSelect parse(JdbcPreparedStatement stmt) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,229,public GridSqlSelect parse(Select select) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,230,GridSqlSelect res = (GridSqlSelect)h2ObjToGridObj.get(select);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQueryParser.java,235,res = new GridSqlSelect();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,67,GridSqlSelect srcQry = GridSqlQueryParser.parse(stmt);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,71,GridSqlSelect mapQry = srcQry.clone();
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,72,GridSqlSelect rdcQry = new GridSqlSelect().from(new GridSqlFunction("PUBLIC", TABLE_FUNC_NAME)); // table(mergeTable)); TODO
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java,150,private static List<Object> findParams(GridSqlSelect qry, Object[] params, ArrayList<Object> target) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSubquery.java,25,private GridSqlSelect select;
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSubquery.java,30,public GridSqlSubquery(GridSqlSelect select) {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSubquery.java,42,public GridSqlSelect select() {
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlSubquery.java,49,public void select(GridSqlSelect select) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/protocols/tcp/GridTcpRestNioListener.java,238,restReq = new GridRestTaskRequest();
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,222,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,227,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,237,return false;
modules/core/src/main/java/org/apache/ignite/internal/jdbc/JdbcDatabaseMetadata.java,322,return false;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,187,long msgId,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1139,GridCacheContext cacheCtx,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxLocal.java,1140,IgniteTxKey key,
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,74,public IgniteLogger getLogger(Object ctgr);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,81,public void trace(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,88,public void debug(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,95,public void info(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,102,public void warning(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,110,public void warning(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,117,public void error(String msg);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,125,public void error(String msg, @Nullable Throwable e);
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,132,public boolean isTraceEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,139,public boolean isDebugEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,146,public boolean isInfoEnabled();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,153,public boolean isQuiet();
modules/core/src/main/java/org/apache/ignite/IgniteLogger.java,160,public String fileName();
modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java,1753,SocketChannel ch = SocketChannel.open();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1558,long remainingTime = U.currentTimeMillis() - (tx.startTime() + tx.timeout());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxManager.java,1563,long timeout = tx.timeout() == 0 ? 0 : remainingTime;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridNearAtomicUpdateRequest.java,553,expiryPlc = ctx.marshaller().unmarshal(expiryPlcBytes, ldr);
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,238,public VisorCache history() {
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCache.java,239,VisorCache c = new VisorCache();
modules/core/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheQueryConfiguration.java,77,public static VisorCacheQueryConfiguration from(CacheConfiguration ccfg) {
modules/core/src/main/java/org/apache/ignite/internal/IgnitionEx.java,842,throw new IgniteCheckedException("Default grid instance has already been started.");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1510,Object val = ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx, entry.key(),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,1512,updated.value(ctx.cacheObjectContext(), false));
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,367,HttpSession ses = httpReq.getSession(false);
modules/web/src/main/java/org/apache/ignite/cache/websession/WebSessionFilter.java,369,if (ses != null && ses instanceof WebSession) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3951,if (replaceExisting) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3953,Collection<ClusterNode> nodes = ctx.grid().cluster().forDataNodes(name()).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3956,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3958,return ctx.closures().callAsyncNoFailover(BROADCAST,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3959,new LoadKeysCallable<>(ctx.name(), keys, true, plc),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3960,nodes,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3961,true);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3973,else {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3974,Collection<ClusterNode> nodes = ctx.grid().cluster().forDataNodes(name()).nodes();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3977,return new GridFinishedFuture<>();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,3980,new LoadKeysCallable<>(ctx.name(), keys, false, plc),
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4022,public void localLoad(Collection<? extends K> keys,
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,4024,throws IgniteCheckedException
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheAdapter.java,6048,cache.localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtCacheAdapter.java,364,super.localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearCacheAdapter.java,278,dht().localLoad(keys, plc);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/atomic/GridDhtAtomicCache.java,384,ctx.noValArray(),
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8155,return F.viewListReadOnly(res, F.<InetAddress>identity());
modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java,8202,return F.viewListReadOnly(res, F.<InetSocketAddress>identity());
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,465,log.debug("Evicted partition: " + this);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,468,clearSwap();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,471,cctx.dr().partitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,473,cctx.dataStructures().onPartitionEvicted(id);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,475,rent.onDone();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtLocalPartition.java,479,clearDeferredDeletes();
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,298,if ("CONSOLE_ERR".equals(appender.getName())) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,337,else
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,339,rootCategory.addAppender(createConsoleAppender(Level.OFF));
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,356,private Appender createConsoleAppender(Level maxLevel) {
modules/log4j/src/main/java/org/apache/ignite/logger/log4j/Log4JLogger.java,360,Appender app = new ConsoleAppender(new PatternLayout(fmt), ConsoleAppender.SYSTEM_OUT);
modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/opt/GridH2TreeIndex.java,250,public GridH2Row findOne(GridSearchRowPointer row) {
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,446,return (QueryCursor<R>)ctx.kernalContext().query().queryLocalFields(ctx, p);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheProxy.java,448,return (QueryCursor<R>)ctx.kernalContext().query().queryTwoStep(ctx, p);
modules/core/src/main/java/org/apache/ignite/cache/affinity/fair/FairAffinityFunction.java,22,import org.apache.ignite.configuration.CacheConfiguration;
modules/core/src/main/java/org/apache/ignite/igfs/IgfsParentNotDirectoryException.java,20,import org.jetbrains.annotations.*;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheLockTimeoutException.java,20,import org.apache.ignite.internal.processors.cache.version.*;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,20,import org.apache.ignite.*;
modules/core/src/main/java/org/apache/ignite/internal/util/lang/GridInClosure3X.java,21,import org.apache.ignite.internal.util.typedef.*;
modules/core/src/main/java/org/apache/ignite/internal/util/scala/impl.java,20,import java.lang.annotation.*;
modules/core/src/main/java/org/apache/ignite/internal/util/typedef/CI3.java,20,import org.apache.ignite.internal.util.lang.*;
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,202,int idx = clsName.indexOf(".class");
modules/core/src/main/java/org/apache/ignite/internal/managers/deployment/GridDeploymentCommunication.java,205,clsName = clsName.substring(0, idx);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,299,while (workersCnt.sum() != 0) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,300,try {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,301,Thread.sleep(200);
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,303,catch (InterruptedException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/processors/rest/GridRestProcessor.java,304,interrupted = true;
modules/core/src/main/java/org/apache/ignite/internal/GridUpdateNotifier.java,43,private static final String UPD_STATUS_PARAMS = IgniteProperties.get("ignite.update.status.params");
modules/core/src/main/java/org/apache/ignite/internal/GridUpdateNotifier.java,267,(!F.isEmpty(UPD_STATUS_PARAMS) ? "&" + UPD_STATUS_PARAMS : "") +
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/GridDhtTxLocal.java,661,nearFinMiniId, err);
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,166,errBytes = reader.readByteArray("errBytes");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,174,miniId = reader.readIgniteUuid("miniId");
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/near/GridNearTxFinishResponse.java,201,return 8;
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/transactions/IgniteTxHandler.java,506,req.miniId(), new IgniteCheckedException("Transaction has been already completed."));
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,926,private final AtomicBoolean stopped = new AtomicBoolean(false);
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,969,if (stopped.compareAndSet(false, true)) {
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,970,lock.writeLock().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,972,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,975,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/offheap/unsafe/GridOffHeapSnapTreeMap.java,982,return stopped.get();
modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheManagerAdapter.java,30,protected GridCacheContext cctx;
modules/core/src/main/java/org/apache/ignite/internal/GridComponent.java,36,CONTINUOUS_PROC,
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,440,GridComponent comp = null;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,442,for (GridComponent c : ctx.components()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,443,if (c.discoveryDataType() != null && c.discoveryDataType().ordinal() == e.getKey()) {
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,444,comp = c;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,446,break;
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,451,comp.onDiscoveryDataReceived(joiningNodeId, nodeId, e.getValue());
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,452,else
modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java,453,U.warn(log, "Received discovery data for unknown component: " + e.getKey());
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,317,return DiscoveryDataExchangeType.CONTINUOUS_PROC;
modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java,353,DiscoveryData data = (DiscoveryData)obj;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,18,package org.apache.ignite.internal.util.portscanner;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,29,public class GridJmxPortFinder {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,31,public static final String IGNITE_JMX_PORT = "IGNITE_JMX_PORT";
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,34,private static final int MIN_PORT = 49112;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,37,private static final int MAX_PORT = 65535;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,42,private GridJmxPortFinder() {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,52,public static void main(String[] args) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,53,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,54,InetAddress.getLocalHost();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,56,catch (UnknownHostException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,59,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,62,int jmxPort = IgniteSystemProperties.getInteger(IGNITE_JMX_PORT, -1);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,64,if (jmxPort != -1) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,65,System.out.println(jmxPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,67,return;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,70,RandomAccessFile ra = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,71,FileLock lock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,73,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,74,File file = new File(System.getProperty("java.io.tmpdir"), "ignite.lastport.tmp");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,76,file.setReadable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,77,file.setWritable(true, false);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,79,ra = new RandomAccessFile(file, "rw");
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,81,lock = ra.getChannel().lock();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,83,ra.seek(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,85,String startPortStr = ra.readLine();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,87,int startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,89,if (startPortStr != null && !startPortStr.isEmpty()) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,90,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,91,startPort = Integer.valueOf(startPortStr) + 1;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,94,startPort = MIN_PORT;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,96,catch (NumberFormatException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,101,int port = findPort(startPort);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,103,ra.setLength(0);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,105,ra.writeBytes(String.valueOf(port));
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,108,System.out.println(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,110,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,113,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,115,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,116,lock.release();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,118,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,123,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,124,ra.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,126,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,138,private static int findPort(int startPort) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,139,for (int port = startPort; port <= MAX_PORT; port++) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,141,return port;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,144,return 0;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,153,private static boolean isAvailable(int port) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,154,ServerSocket sock = null;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,156,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,157,sock = new ServerSocket(port);
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,159,return true;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,161,catch (IOException ignored) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,162,return false;
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,164,finally {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,165,if (sock != null) {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,166,try {
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,167,sock.close();
modules/core/src/main/java/org/apache/ignite/internal/util/portscanner/GridJmxPortFinder.java,169,catch (IOException ignored) {
