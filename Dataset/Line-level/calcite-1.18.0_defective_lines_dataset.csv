File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4043,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,67,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,354,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1124,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1125,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1126,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1127,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1128,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1129,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1131,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1132,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1133,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1134,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1137,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1604,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,66,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,253,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,63,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,108,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1147,&& shouldMergeProject()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1162,RelOptUtil.pushPastProject(nodeList, project);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1392,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1418,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1454,final RelNode r = frame.rel;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,504,if (!belongsToDag(vertex)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,41,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,99,leftKeys, rightKeys, ImmutableSet.of(), joinType);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,997,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1047,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1050,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1118,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1119,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1120,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1121,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,57,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,139,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.GROUP_ID;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,512,aggMap.put(GROUP_ID, grouping);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1378,case GROUP_ID: // "GROUP_ID()"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1382,keys = ImmutableIntList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1383,break;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,118,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2802,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2804,aggConverter.getAggCalls()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2805,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,106,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,108,stack.push(new Frame(i, e));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,530,final String lowerName = name.toLowerCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,531,if (lowerName.startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,533,ordinalMap.put(lowerName, node);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,551,Frame(int ordinalInParent, RelNode r) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,553,this.r = r;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,108,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,116,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,362,return new Result(node, clauses, alias4, rel.getRowType(), aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,372,return new Result(node, clauses, alias5, rel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,373,ImmutableMap.of(alias4, rel.getRowType()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,595,implementor().visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,948,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,949,ordinalMap.get(field.getName().toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,950,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,951,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1073,&& neededAlias != null
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1074,&& (aliases.size() != 1 || !aliases.containsKey(neededAlias))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1082,return new Builder(rel, clauseList, select, newContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1163,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1165,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1177,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1179,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1213,Context context, Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1214,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1215,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1216,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1217,this.context = context;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1261,return SqlImplementor.this.result(select, clauses, rel, aliases);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,422,return Util.filter(classes, clazz::isAssignableFrom);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,313,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3124,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,489,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,145,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,149,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,37,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,41,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,44,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,124,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,125,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,126,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,127,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,128,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,129,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,143,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,144,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,145,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,146,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,383,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,386,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,409,final Map<ImmutableBitSet, Integer> filters = new LinkedHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,410,final int z = groupCount + distinctAggCalls.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,415,for (Ord<ImmutableBitSet> groupSet : Ord.zip(groupSets)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,416,filters.put(groupSet.e, z + groupSet.i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,421,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,428,for (Map.Entry<ImmutableBitSet, Integer> entry : filters.entrySet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,429,final long v = groupValue(fullGroupSet, entry.getKey());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,431,relBuilder.alias(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,432,relBuilder.equals(nodeZ, relBuilder.literal(v)),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,447,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,451,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,452,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,455,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,460,aggregate.getGroupCount(), distinct, null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,466,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1026,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1027,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1030,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1031,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1033,|| (maxClause == clause && !nonWrapSet.contains(clause))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1034,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1040,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1112,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,221,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,260,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,261,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,262,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,268,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,89,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,237,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,238,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,281,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,285,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,286,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,303,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,100,EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,26,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,48,super(LogicalTableScan.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,56,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,57,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,58,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,275,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,286,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1401,final RelDataType source = ((RexCall) node).getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1403,final RelDataType target = node.getType();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,654,ImmutableList.Builder<SqlNode> orderNodes = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,657,orderNodes.add(toSql(program, rfc));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,661,new SqlNodeList(orderNodes.build(), POS);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,final int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,640,BigDecimal divider = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,643,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,644,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,649,value = encodeIntervalOrDecimal(value, decimalType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,892,assert o instanceof TimeString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,893,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,894,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,895,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,897,o = ((TimeString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,898,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,908,assert o instanceof TimestampString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,909,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,910,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,911,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,913,o = ((TimestampString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,914,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6305,private List<String> usingNames(SqlJoin join) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6306,switch (join.getConditionType()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6307,case USING:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6308,final ImmutableList.Builder<String> list = ImmutableList.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6309,final Set<String> names = catalogReader.nameMatcher().createSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6310,for (SqlNode node : (SqlNodeList) join.getCondition()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6311,final String name = ((SqlIdentifier) node).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6312,if (names.add(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6313,list.add(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6316,return list.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6317,case NONE:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6318,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6319,final RelDataType t0 = getValidatedNodeType(join.getLeft());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6320,final RelDataType t1 = getValidatedNodeType(join.getRight());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6321,return SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6322,catalogReader.nameMatcher(), t0, t1);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,6325,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,33,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,57,import java.io.PrintWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,58,import java.io.StringWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,293,StringWriter stringWriter = new StringWriter(query.length());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,294,PrintWriter printWriter = new PrintWriter(stringWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,295,SqlWriter writer = new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, true, printWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,297,query = stringWriter.toString();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,61,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,133,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,134,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,135,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,136,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,140,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,200,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,207,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,214,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,217,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,220,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,223,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,226,writer.sep(natural + "LEFT SEMI JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,229,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,257,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,339,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,340,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,341,unparseListClause(writer, pattern.orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,342,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,124,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,144,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,145,dialect = AnsiSqlDialect.DEFAULT;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,147,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,148,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,149,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,150,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,151,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,152,return writer.toSqlString();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,338,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,345,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,346,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,347,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,349,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,352,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,148,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,153,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,178,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,181,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,201,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,202,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,203,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,213,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,215,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,217,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,219,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,229,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,231,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,233,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,238,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,239,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,240,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWithinGroupOperator.java,51,((SqlNodeList) call.operand(1)).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,224,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,128,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,297,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,25,import org.apache.calcite.util.Unsafe;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,35,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,135,new SqlPrettyWriter(AnsiSqlDialect.DEFAULT).getBean();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,141,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,142,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,148,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,149,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,151,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,152,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,154,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,155,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,157,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,158,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,160,private SubQueryStyle subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,161,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,163,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,164,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,165,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,173,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,174,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,176,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,177,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,178,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,179,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,180,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,186,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,190,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,200,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,208,this.subQueryStyle = subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,212,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,216,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,220,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,224,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,235,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,239,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,243,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,247,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,251,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,255,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,259,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,273,subQueryStyle = SubQueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,274,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,275,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,276,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,277,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,281,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,282,Unsafe.clear(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,304,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,352,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,360,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,388,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,389,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,396,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,397,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,406,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,407,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,410,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,411,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,415,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,416,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,417,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,425,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,426,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,436,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,437,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,457,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,458,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,case VALUES:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,468,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,469,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,473,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,474,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,482,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,483,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,487,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,488,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,496,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,497,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,501,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,502,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,511,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,512,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,515,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,516,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,517,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,518,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,520,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,521,switch (subQueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,522,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,535,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,536,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,537,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,538,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,539,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,540,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,541,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,542,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,545,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,557,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,558,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,559,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,561,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,562,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,563,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,564,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,567,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,568,throw Util.unexpected(subQueryStyle);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,578,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,579,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,583,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,584,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,592,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,593,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,597,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,598,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,606,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,607,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,611,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,612,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,620,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,621,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,625,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,626,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,635,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,636,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,640,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,641,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,650,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,651,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,655,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,656,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,664,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,665,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,669,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,670,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,691,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,692,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,694,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,695,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,696,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,697,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,698,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,700,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,701,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,703,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,706,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,714,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,715,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,718,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,719,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,726,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,727,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,728,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,729,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,730,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,731,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,732,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,733,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,752,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,759,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,760,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,796,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,797,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,810,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,811,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,831,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,835,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,867,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,868,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,879,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,889,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,890,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,895,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,896,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,906,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,907,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,970,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1028,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1029,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1030,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1032,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1033,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1034,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1035,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1036,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1037,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1038,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1039,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1040,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1041,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1042,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1043,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1068,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1069,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,61,final SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,64,writer.setIndentation(0);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,32,import org.apache.calcite.sql.dialect.CalciteSqlDialect;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,47,import java.io.PrintWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,48,import java.io.StringWriter;
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,207,final SqlNodeList selectList =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,208,new SqlNodeList(ImmutableList.<SqlNode>of(SqlIdentifier.star(p)), p);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,231,final StringWriter sw = new StringWriter();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,232,final PrintWriter pw = new PrintWriter(sw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,233,final SqlPrettyWriter w =
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,234,new SqlPrettyWriter(CalciteSqlDialect.DEFAULT, false, pw);
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,235,pw.print("INSERT INTO ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,237,pw.print(" ");
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,239,pw.flush();
server/src/main/java/org/apache/calcite/sql/ddl/SqlDdlNodes.java,240,final String sql = sw.toString();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,381,identifierList(modify.getInput().getRowType().getFieldNames()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,593,&& typeFactory.createTypeWithNullability(currentType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4471,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4472,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4473,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4474,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4475,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4476,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4478,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4519,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4520,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4570,final RelDataType sourceRowType = getNamespace(call).getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4571,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,193,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,213,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,214,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,86,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,87,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,88,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,94,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,98,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,101,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,111,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,112,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,113,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,120,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,123,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,129,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,83,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,638,input = convert(sort.getInput(), traitSet);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,561,boolean changed = false;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,563,changed |= new CaseShuttle().mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,721,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,722,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,339,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,432,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3391,List<SqlNode> children = ((SqlCall) stripDot(current)).getOperandList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,748,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,749,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,752,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,756,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/sql/SqlLateralOperator.java,40,writer.keyword(getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,229,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,238,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1627,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2418,return RelOptUtil.pushDownJoinConditions(originalJoin, relBuilder);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2531,leaves.add(r);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4185,leaves.add(root);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4342,if (leaves.contains(rel) || rel instanceof LogicalMatch) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,181,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,182,final CalciteCatalogReader catalogReader = createCatalogReader();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,183,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,184,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,185,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,186,this.validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,272,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,275,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,276,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,277,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,278,validator.setIdentifierExpansion(true);
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,259,if (o instanceof PdxInstance) {
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,260,return Util.toString(
geode/src/main/java/org/apache/calcite/adapter/geode/util/GeodeUtils.java,261,((PdxInstance) o).getFieldNames(), "PDX[", ",", "]");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,59,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,60,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,63,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,70,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,71,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,84,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,85,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,88,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,96,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,99,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,106,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,107,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,110,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,118,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,121,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,128,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,129,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,145,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,146,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,149,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,503,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,504,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,505,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,506,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,507,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,508,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,509,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,510,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,511,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,512,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,513,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,514,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,515,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,516,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,518,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,520,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,521,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,522,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,523,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,524,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,528,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,529,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,531,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,534,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,535,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,536,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,537,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,538,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,539,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,540,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,541,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,544,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,545,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,548,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,549,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,552,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,553,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,556,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,557,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,567,OperandTypes.or(COLLECTION_OR_MAP, RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2352,return translator.translate(operands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2355,translator.translate(operands.get(0), NullAs.IS_NULL),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,235,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,248,RelDataType ret = callBinding.getTypeFactory().leastRestrictive(argTypes);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,63,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,64,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,65,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,128,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,182,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,183,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,186,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,187,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,189,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,195,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,196,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,198,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,199,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,204,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,207,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,229,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,245,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,247,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,248,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,249,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,252,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,256,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,259,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,260,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,263,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,264,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,266,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,267,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,271,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,139,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,266,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,600,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,891,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,916,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,216,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,247,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,645,if (fieldType != java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1099,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1310,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,198,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,492,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,731,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,922,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,923,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,924,return convert(operand, fromType, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,927,public static Expression convert(Expression operand, Type fromType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,928,Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,930,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,936,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,937,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,938,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,939,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,941,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,942,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,943,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,944,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,945,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,946,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,947,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,948,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,950,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,951,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,953,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,954,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,956,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,957,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,959,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,962,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,963,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,964,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,966,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,967,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,969,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,970,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,973,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,975,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,979,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,980,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,982,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,983,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,985,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,987,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,991,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,992,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,994,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,999,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1000,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1001,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1002,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1003,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1004,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1009,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1010,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1011,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1012,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1013,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1018,if (toBox == Primitive.INT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1019,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1021,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1026,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1027,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1029,return Expressions.convert_(operand, java.sql.Date.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1034,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1035,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1037,return Expressions.convert_(operand, java.sql.Time.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1042,if (isA(fromType, Primitive.LONG)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1043,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1044,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1046,return Expressions.convert_(operand, java.sql.Timestamp.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1049,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1052,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1053,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1054,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1055,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1056,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1057,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1059,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1067,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1068,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1069,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1070,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1071,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1073,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1075,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1076,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1077,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1078,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1081,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1082,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1084,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1085,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1088,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1089,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1091,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1096,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1097,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1098,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1099,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1100,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1102,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1114,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1117,static boolean isA(Type fromType, Primitive primitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1118,return Primitive.of(fromType) == primitive
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1119,|| Primitive.ofBox(fromType) == primitive;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,154,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,162,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,187,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,398,call.getOperator().unparse(writer, call, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2788,flatElements[i] = (E) Integer.valueOf(++ordinality); // 1-based
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,199,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,524,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,655,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,738,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,818,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,937,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,938,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,195,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3998,private final Set<SubQuery> subQueryList = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4323,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4326,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4333,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4362,if (node.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4371,if (expr.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,31,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,110,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,113,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,114,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,118,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,121,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,122,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,125,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,126,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,127,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,128,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,129,filters, projects2));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,772,List<RexNode> newOperands = CaseBranch.toCaseOperands(rexBuilder, branches);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,830,private static List<RexNode> toCaseOperands(RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,831,List<CaseBranch> branches) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,973,result = simplifyBooleanCaseGeneric(rexBuilder, branches, branchType);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,992,List<CaseBranch> branches, RelDataType outputType) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,369,final SqlIdentifier sqlTargetTable =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,370,new SqlIdentifier(modify.getTable().getQualifiedName(), POS);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,858,if (LOGGER.isDebugEnabled()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,859,assert isValid(Litmus.THROW);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,874,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,876,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,894,RelOptCost relCost = getCost(rel, rel.getCluster().getMetadataQuery());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,895,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,896,return litmus.fail("rel [{}] has lower cost {} than best cost {} of subset [{}]",
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,897,rel.getDescription(), relCost, subset.bestCost, subset.getDescription());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1635,subset.propagateCostImprovements(this, mq, rel, new HashSet<>());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,930,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,327,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,328,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,356,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,357,final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,203,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,RelOptPlanner planner, SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,66,schema, EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,67,convertletTable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,317,context.getRootSchema(), null, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,318,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,725,context.getRootSchema(), prefer, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,726,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,992,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1004,new CalciteMaterializer(this, context, catalogReader, schema, planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1005,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1068,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1070,SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1075,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1078,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1147,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1283,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,269,buff.append(", r");
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,if (mq.map.put(key1, NullSentinel.INSTANCE) != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,191,mq.map.remove(key1);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1185,VALUES, WITH, WITH_ITEM, SKIP_TO_FIRST, SKIP_TO_LAST,
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,350,case OTHER_FUNCTION:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,322,if (left.isA(SqlKind.OTHER_FUNCTION) && right.isA(SqlKind.LITERAL)) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,323,if (((RexCall) left).getOperator() != SqlStdOperatorTable.ITEM) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,324,return false;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,46,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,47,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,48,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,830,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1052,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,24,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,157,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,leftResult.physType.fieldReference(left_, pair.left)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,160,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,161,rightResult.physType.fieldReference(right_, pair.right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,222,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,223,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,224,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,295,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,296,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,394,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,395,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,553,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,554,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,555,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1232,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1958,Types.castIfNecessary(type, operand),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1959,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1960,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1986,return Types.castIfNecessary(returnType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2082,return Types.castIfNecessary(returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2084,expressions.get(1)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1106,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1107,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1108,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1109,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1110,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,170,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,171,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,176,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,179,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,454,if (returnType instanceof RecordType) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,456,return expression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,458,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,136,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,182,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,207,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,223,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,277,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,291,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,292,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,293,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,294,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,295,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,300,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,301,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,302,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,303,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,304,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,620,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,639,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,149,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,322,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,328,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,351,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,352,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,292,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/sql/SqlExplain.java,175,return getFormat() == SqlExplainFormat.XML;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,95,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,170,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,174,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,137,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,180,assert curRelTrait.getTraitDef() == traitDef;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,820,new Step(edge.getSource().table,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,821,edge.getTarget().table, edge.pairs);
core/src/main/java/org/apache/calcite/materialize/LatticeNode.java,62,sb.append(parent.table.field(p.source).getName());
core/src/main/java/org/apache/calcite/materialize/LatticeSpace.java,40,new AttributedDirectedGraph<>(new Step.Factory());
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,135,map.put(Pair.of(hop.source.t, hop.target.t),
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,136,IntPair.of(hop.source.c, hop.target.c));
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,449,return new DerivedColRef(tableRefs.build(), e, alias);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,465,assert source instanceof BaseColRef;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,466,assert target instanceof BaseColRef;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,467,builder.add(new Hop((BaseColRef) source, (BaseColRef) target));
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,525,final Step h = new Step(source.table, target.table, keys);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,566,set.add(hop.source.t);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,567,set.add(hop.target.t);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,628,.append(",");
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,629,for (IntPair key : step.keys) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,633,.append(step.target().field(key.target).getName());
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,637,.toString();
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,695,final BaseColRef source;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,696,final BaseColRef target;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,698,private Hop(BaseColRef source, BaseColRef target) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,709,private static class BaseColRef extends ColRef {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,725,private DerivedColRef(Iterable<TableRef> tableRefs, RexNode e,
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,726,String alias) {
core/src/main/java/org/apache/calcite/materialize/Step.java,40,Step(LatticeTable source, LatticeTable target, List<IntPair> keys) {
core/src/main/java/org/apache/calcite/materialize/Step.java,64,.append(",");
core/src/main/java/org/apache/calcite/materialize/Step.java,65,for (IntPair key : keys) {
core/src/main/java/org/apache/calcite/materialize/Step.java,69,.append(target().field(key.target).getName());
core/src/main/java/org/apache/calcite/materialize/Step.java,72,.toString();
core/src/main/java/org/apache/calcite/materialize/Step.java,108,return new Step(source, target, keys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,109,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,159,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,244,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,155,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,159,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql/dialect/BigQuerySqlDialect.java,31,.withNullCollation(NullCollation.LOW));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,52,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,54,RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,61,RelTrait in, RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,62,this(clazz, predicate, in, out, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,77,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,80,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,82,: description);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,303,return Objects.hash(aggFunction, distinct, argList, filterArg, collation);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,286,type, null);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,251,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,279,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,107,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,108,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,109,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1117,for (RelDataTypeField field : model.rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1118,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1123,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1124,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1125,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1126,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1128,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,923,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,927,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,928,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,929,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,930,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,931,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,932,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,933,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,935,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,936,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,938,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,939,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,940,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,941,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,78,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,201,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,202,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,205,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,207,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,212,.projectNamed(structuringExps, root.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,214,.build();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,216,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,224,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,228,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,230,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,231,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,232,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,238,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,239,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,241,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,242,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,243,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,246,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,247,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,248,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,249,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,250,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,252,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,254,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,259,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,262,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,263,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,264,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,265,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,274,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,276,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,277,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,278,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,309,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,313,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,314,RelNode newInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,315,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,316,newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,317,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,318,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,319,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,320,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,321,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,323,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,324,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,326,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,327,assert newInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,329,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,331,newOrdinal += newOffset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,332,final RelDataTypeField field =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,333,newInput.getRowType().getFieldList().get(newOffset);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,return Ord.of(newOrdinal, field.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,351,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,352,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,353,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,355,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,357,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,358,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,359,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,360,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,363,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,364,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,365,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,366,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,367,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,368,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,369,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,371,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,374,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,426,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,427,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,428,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,429,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,499,final List<Pair<RexNode, String>> flattenedExpList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,500,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,501,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,502,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,504,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,506,.projectNamed(Pair.left(flattenedExpList), Pair.right(flattenedExpList),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,507,true);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,508,setNewForOldRel(rel, relBuilder.build());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,582,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,583,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,584,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,596,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,599,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,601,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,602,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,603,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,605,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,606,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,607,final Ord<RelDataType> newField =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,609,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,611,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,617,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,620,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,621,Pair.of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,622,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,624,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,625,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,628,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,629,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,630,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,631,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,634,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,643,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,645,List<RexNode> oldOperands = ((RexCall) exp).getOperands();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,646,if (oldOperands.get(0) instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,647,final RexInputRef inputRef = (RexInputRef) oldOperands.get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,648,final Ord<RelDataType> newField =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,649,getNewFieldForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,650,newExp = rexBuilder.makeCall(exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,651,((RexCall) exp).getOperator(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,652,ImmutableList.of(rexBuilder.makeInputRef(newField.e, newField.i),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,653,oldOperands.get(1)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,655,for (RelDataTypeField field : newExp.getType().getFieldList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,656,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,657,Pair.of(rexBuilder.makeFieldAccess(newExp, field.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,658,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,696,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,697,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,698,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,700,.projectNamed(Pair.left(flattenedExpList),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,727,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,807,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1781,if (validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1782,break;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,744,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/rel/mutable/MutableTableFunctionScan.java,72,&& inputs.equals(((MutableSetOp) obj).getInputs());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,99,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,639,case INPUT_REF: {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,93,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,94,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,595,throw Extensions.todo();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java,99,return gotoStatement.expression.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,37,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/Match.java,69,protected final List<RexNode> partitionKeys;
core/src/main/java/org/apache/calcite/rel/core/Match.java,99,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,112,this.partitionKeys = ImmutableList.copyOf(partitionKeys);
core/src/main/java/org/apache/calcite/rel/core/Match.java,180,public List<RexNode> getPartitionKeys() {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,506,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,519,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,63,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,77,List<RexNode> partitionKeys, RelCollation orderKeys, RexNode interval) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,91,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,436,if (e.getPartitionKeys() != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,437,for (RexNode rex : e.getPartitionKeys()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,438,SqlNode sqlNode = context.toSql(null, rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,439,partitionSqlList.add(sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2133,final List<RexNode> partitionKeys = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2136,partitionKeys.add(e);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2276,definitionNodes.build(), measureNodes.build(), after,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2277,subsetMap, allRows, partitionKeys, orders, intervalNode);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1388,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1389,registrar.extraNodes.addAll(fields());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1390,registrar.names.addAll(peek().getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1942,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1943,final List<RexNode> originalExtraNodes = fields();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1944,final List<RexNode> extraNodes = new ArrayList<>(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1945,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1946,final RelFieldCollation collation =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1947,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1948,extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1950,.contains(collation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1951,fieldCollations.add(collation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1963,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1965,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1995,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1996,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2002,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2003,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2075,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2076,for (RexNode orderKey : orderKeys) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2077,final RelFieldCollation.Direction direction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2078,switch (orderKey.getKind()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2079,case DESCENDING:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2080,direction = RelFieldCollation.Direction.DESCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2081,orderKey = ((RexCall) orderKey).getOperands().get(0);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2082,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2083,case NULLS_FIRST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2084,case NULLS_LAST:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2085,throw new AssertionError();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2086,default:
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2087,direction = RelFieldCollation.Direction.ASCENDING;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2088,break;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2090,final RelFieldCollation.NullDirection nullDirection =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2091,direction.defaultNullDirection();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2092,final RexInputRef ref = (RexInputRef) orderKey;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2093,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2094,new RelFieldCollation(ref.getIndex(), direction, nullDirection));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2127,ImmutableList.copyOf(partitionKeys), RelCollations.of(fieldCollations),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2330,final List<RexNode> extraNodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/util/Pair.java,208,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,209,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,210,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,213,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,214,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,127,BINDABLE_WINDOW_RULE);
core/src/main/java/org/apache/calcite/rel/core/Match.java,192,public abstract Match copy(RelNode input, RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/core/Match.java,193,RexNode pattern, boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,194,Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,
core/src/main/java/org/apache/calcite/rel/core/Match.java,195,RexNode after, Map<String, ? extends SortedSet<String>> subsets,
core/src/main/java/org/apache/calcite/rel/core/Match.java,196,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,197,RexNode interval);
core/src/main/java/org/apache/calcite/rel/core/Match.java,201,&& traitSet == getTraitSet()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,202,return this;
core/src/main/java/org/apache/calcite/rel/core/Match.java,205,return copy(inputs.get(0), rowType, pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,206,patternDefinitions, measures, after, subsets, allRows,
core/src/main/java/org/apache/calcite/rel/core/Match.java,207,partitionKeys, orderKeys, interval);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,58,private LogicalMatch(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,80,return new LogicalMatch(cluster, traitSet, input, rowType, pattern,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,93,final RelTraitSet traitSet = getCluster().traitSetOf(Convention.NONE);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,94,return new LogicalMatch(getCluster(), traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,95,input,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,96,rowType,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,97,pattern, strictStart, strictEnd, patternDefinitions, measures,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,98,after, subsets, allRows, partitionKeys, orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,99,interval);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,for (int i = 0; i < targetSize; i++) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,add(String.valueOf(chars, 0, i * 2));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,467,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,476,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,477,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,494,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,495,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,496,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,497,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,498,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,499,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,502,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,30,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,111,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,112,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,165,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,166,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,167,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,168,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,170,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,173,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,76,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3304,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3311,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3313,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3314,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3315,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3316,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3317,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3318,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3320,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3321,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3322,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3323,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3324,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,351,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,353,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,432,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,433,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,434,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,435,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,450,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,452,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,274,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,299,values2.add(
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,300,SqlStdOperatorTable.AS.createCall(POS, value.left,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,301,new SqlIdentifier(value.right, POS)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,306,new SqlIdentifier("DUAL", POS), null, null,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,326,final List<SqlNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,327,list.add(query);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,328,list.add(new SqlIdentifier("t", POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,329,for (String fieldName : fieldNames) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,330,list.add(new SqlIdentifier(fieldName, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,332,query = SqlStdOperatorTable.AS.createCall(POS, list);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,521,private SqlCall as(SqlNode e, String alias) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,522,return SqlStdOperatorTable.AS.createCall(POS, e,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,523,new SqlIdentifier(alias, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,123,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,124,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,553,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,67,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,71,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,72,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,133,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,134,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,135,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,220,return new ContextImpl(DatabaseProduct.UNKNOWN, null, null, -1, -1, null,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,340,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,341,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,342,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,344,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,345,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,346,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,347,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,348,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,349,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,350,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,385,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,386,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,387,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,389,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,391,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,392,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,490,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,493,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,536,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,537,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,538,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,539,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,542,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,219,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,221,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,222,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,223,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,225,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,226,ret.append(Util.replace(getValue(), "'", "''"));
core/src/main/java/org/apache/calcite/util/NlsString.java,227,ret.append("'");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,ImmutableSortedSet<Measure> defaultMeasures, ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,906,tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,222,return latticeBuilder.column(table, baseColRef.c);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,227,return latticeBuilder.expression(derivedColRef.e, alias,
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,326,for (Lattice.Measure measure : bestMatch.defaultMeasures) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,327,builder.addMeasure(measure.copy(mapper(bestMatch, builder)));
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,329,for (Lattice.Measure measure : lattice.defaultMeasures) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,330,builder.addMeasure(measure.copy(mapper(lattice, builder)));
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,345,private java.util.function.Function<Lattice.Column, Lattice.Column> mapper(
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,346,final Lattice lattice, final Lattice.Builder builder) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,347,return (Lattice.Column c) -> {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,348,if (c instanceof Lattice.BaseColumn) {
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,349,Lattice.BaseColumn baseColumn = (Lattice.BaseColumn) c;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,350,Pair<Path, Integer> p = lattice.columnToPathOffset(baseColumn);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,351,return builder.pathOffsetToColumn(p.left, p.right);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,353,final Lattice.DerivedColumn derivedColumn = (Lattice.DerivedColumn) c;
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,354,return builder.expression(derivedColumn.e, derivedColumn.alias,
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,355,derivedColumn.tables);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,393,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,427,if (Predicate.of(t) == null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,441,if (Predicate.of(t) != null) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,407,return Lists.transform(nodes, MutableRels::toMutable);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,97,return rewriteSome(e, builder);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,142,private RexNode rewriteSome(RexSubQuery e, RelBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,165,.aggregate(builder.groupKey(),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,166,op.comparisonKind == SqlKind.GREATER_THAN
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,170,builder.count(false, "c"),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,173,.join(JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,23,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,35,this.inputs = ImmutableList.copyOf(inputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,51,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,57,return Expressions.call(target, method, translatedOperands);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,253,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,254,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,39,return shuttle.visit(this);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,312,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,103,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,81,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,86,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,87,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,499,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,536,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,547,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,147,private final boolean simplify;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,157,this.simplify = Hook.REL_BUILDER_SIMPLIFY.get(true);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1188,if (simplify) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1029,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1040,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1041,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,86,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,89,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,101,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,102,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,114,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,115,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,116,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,117,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,118,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,119,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,120,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,121,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,145,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,148,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,150,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,157,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,67,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,68,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,207,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,208,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,209,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,210,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,211,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,212,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,213,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,214,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,215,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,218,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,30,RelFactories.FilterFactory FILTER_FACTORY = EnumerableFilter::create;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,454,ret = factory.createFilter(ret, conditionExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,627,return factory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,633,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,656,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,706,return factory.createFilter(rel, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,286,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,294,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,295,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,72,factory.createFilter(newSemiJoin, filter.getCondition());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,487,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,488,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1037,return filter(ImmutableList.copyOf(predicates));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1055,final RelNode filter = filterFactory.createFilter(frame.rel, simplifiedPredicates);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,74,return new PigFilter(input.getCluster(), input.getTraitSet().replace(PigRel.CONVENTION),
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,75,input, condition);
core/src/main/java/org/apache/calcite/sql/dialect/OracleSqlDialect.java,36,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,977,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3312,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,190,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3245,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3246,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3247,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1815,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,41,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,404,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,405,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,406,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,33,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,43,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,59,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,ImmutableSet.of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,80,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,90,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,99,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,101,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,105,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,117,return SqlValidatorUtil.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,ImmutableList.of());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRelType.java,32,SEMIJOIN,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,246,case SEMIJOIN:
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,247,final MutableSemiJoin semiJoin = (MutableSemiJoin) node;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,248,relBuilder.push(fromMutable(semiJoin.getLeft(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,249,relBuilder.push(fromMutable(semiJoin.getRight(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,250,relBuilder.semiJoin(semiJoin.condition);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,251,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,17,package org.apache.calcite.rel.mutable;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,20,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,21,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,23,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,26,public class MutableSemiJoin extends MutableBiRel {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,27,public final RexNode condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,28,public final ImmutableIntList leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,29,public final ImmutableIntList rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,31,private MutableSemiJoin(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,32,RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,33,MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,34,MutableRel right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,35,RexNode condition,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,36,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,37,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,38,super(MutableRelType.SEMIJOIN, left.cluster, rowType, left, right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,39,this.condition = condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,40,this.leftKeys = leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,41,this.rightKeys = rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,54,public static MutableSemiJoin of(RelDataType rowType, MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,55,MutableRel right, RexNode condition, ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,56,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,57,return new MutableSemiJoin(rowType, left, right, condition, leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,58,rightKeys);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,62,return obj == this
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,63,|| obj instanceof MutableSemiJoin
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,68,&& right.equals(((MutableSemiJoin) obj).right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,72,return Objects.hash(left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,79,.append(")");
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,83,return MutableSemiJoin.of(rowType, left.clone(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,84,right.clone(), condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,90,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,92,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,94,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,96,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,309,if (list.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,321,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,322,selects.add(ANONYMOUS_ROW.createCall(exprList(context, tuple)));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,205,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,114,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,55,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,60,private static RelDataType keyToType(@Nonnull Object k) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,61,if (k instanceof RelDataType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,62,return (RelDataType) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,65,final Key key = (Key) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,343,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,141,RelOptUtil.permute(child.cluster.getTypeFactory(), rowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4056,&& targetRowType.getFieldCount() >= i
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1342,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1343,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1344,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,142,Mappings.bijection(posList)),
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets, input1 -> apply(mapping, input1)));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1491,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1501,RexNode node = registrar.extraNodes.get(groupField);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1505,fields.add(frame.fields.get(((RexInputRef) node).getIndex()));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,474,Map<Integer, Integer> mapNewInputToProjOutputs = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,589,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,601,postProjects.add(entry.getKey() + frame.corDefOutputs.size(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,602,entry.getValue());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,609,return register(rel, relBuilder.build(), combinedMap, corDefOutputs);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,64,operandExpression, toType, nullEqualToEmpty ? "" : null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,82,nullEqualToEmpty ? "" : null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSqlCastConverter.java,95,nullEqualToEmpty ? "" : null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,98,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,99,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,30,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,303,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,304,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,307,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,152,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,153,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,117,public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,118,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,119,return getNodeTypes(rel, SemiJoin.class, mq);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,88,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,89,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,90,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,37,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,191,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,194,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,195,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,197,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,198,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,199,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,180,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,203,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,204,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,207,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,35,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,366,if (rel instanceof SemiJoin) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,367,final SemiJoin semiJoin = (SemiJoin) rel;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,368,final MutableRel left = toMutable(semiJoin.getLeft());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,369,final MutableRel right = toMutable(semiJoin.getRight());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,370,return MutableSemiJoin.of(semiJoin.getRowType(), left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,371,semiJoin.getCondition(), semiJoin.getLeftKeys(), semiJoin.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,110,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,629,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,174,final DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,175,DateTimeUtils.parsePrecisionDateTimeLiteral(dateStr,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,176,Format.PER_THREAD.get().timestamp, DateTimeUtils.UTC_ZONE, -1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,174,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,175,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,176,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,177,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,182,enumerable = builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,186,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,187,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,188,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,189,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,504,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,91,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,234,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,235,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,236,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,237,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,238,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,239,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,242,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,243,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,244,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,245,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,246,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,257,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,259,: tableTypeName.toUpperCase(Locale.ROOT).replace(' ', '_');
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,266,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,267,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,646,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,79,private final Map<String, HepRelVertex> mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,496,String digest = vertex.getCurrentRel().getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,497,return mapDigestToVertex.get(digest) != null;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,825,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,826,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,892,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,893,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,894,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,896,String newDigest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,904,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,969,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,88,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,221,NullCollation.HIGH, RelDataTypeSystemImpl.DEFAULT, JethroDataSqlDialect.JethroInfo.EMPTY);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,242,return DatabaseProduct.DERBY;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1056,Context withIdentifierQuoteString(String identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1080,String identifierQuoteString, NullCollation nullCollation,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1102,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1112,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1122,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1132,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1142,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1149,public Context withIdentifierQuoteString(String identifierQuoteString) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1152,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1159,public Context withNullCollation(@Nonnull NullCollation nullCollation) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1162,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1172,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1182,identifierQuoteString, nullCollation, dataTypeSystem, jethroInfo);
core/src/main/java/org/apache/calcite/sql/dialect/MssqlSqlDialect.java,44,.withIdentifierQuoteString("["));
core/src/main/java/org/apache/calcite/sql/dialect/RedshiftSqlDialect.java,30,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/sql/dialect/VerticaSqlDialect.java,28,.withIdentifierQuoteString("\""));
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,252,side.split.put(aggCall.i, index);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,21,import org.apache.calcite.rel.RelCollations;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,43,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,final Set<Integer> interestingFields = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,83,interestingFields.addAll(aggregate.getGroupSet().asList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,84,for (AggregateCall aggregateCall : aggregate.getAggCallList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,85,interestingFields.addAll(aggregateCall.getArgList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,86,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,87,interestingFields.add(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,89,interestingFields.addAll(RelCollations.ordinals(aggregateCall.collation));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,260,if (rexNode.getType().getSqlTypeName() == SqlTypeName.DATE
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,261,|| rexNode.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,263,== SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,311,if (floorValueNode.getType().getSqlTypeName() == SqlTypeName.DATE
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,312,|| floorValueNode.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,314,== SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,331,extractColumnName(((RexCall) rexNode).getOperands().get(0), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,333,final SqlTypeName toTypeName = rexNode.getType().getSqlTypeName();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,334,if (toTypeName == SqlTypeName.DATE || toTypeName == SqlTypeName.TIMESTAMP
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,335,|| toTypeName == SqlTypeName.TIMESTAMP_WITH_LOCAL_TIME_ZONE) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,764,if (druidColumn.left == null || druidColumn.right != null) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1478,rewritingMapping.set(k, sourceIdx);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1511,for (int i = 0; i < queryAggregate.getAggCallList().size(); i++) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1513,rexBuilder.makeInputRef(result, queryAggregate.getGroupCount() + i));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,504,literal.getValueAs(BigDecimal.class).toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,507,literal.getValueAs(BigDecimal.class).toString(), POS);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,66,if (filter.isA(SqlKind.EQUALS)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,20,import org.apache.calcite.jdbc.CalciteSchema;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3071,private void checkRollUpInUsing(SqlIdentifier identifier, SqlNode leftOrRight) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3072,leftOrRight = stripAs(leftOrRight);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3074,if (leftOrRight instanceof SqlIdentifier) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3075,SqlIdentifier from = (SqlIdentifier) leftOrRight;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3078,String name = Util.last(identifier.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3080,if (table != null && table.isRolledUp(name)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3081,throw newValidationError(identifier, RESOURCE.rolledUpNotAllowed(name, "USING"));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3124,checkRollUpInUsing(id, left);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3125,checkRollUpInUsing(id, right);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3459,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3462,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3463,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3465,catalogReader.getConfig());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3479,String tableAlias = pair.left;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3482,Table table = findTable(tableAlias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3483,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3490,CalciteSchema.TableEntry entry = schema.getTable(tableName, caseSensitive);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3491,if (entry != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3492,return entry.getTable();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3496,for (CalciteSchema subSchema : schema.getSubSchemaMap().values()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3498,if (table != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3499,return table;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3503,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3509,private Table findTable(String alias) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3510,List<String> names = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3511,if (tableScope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3513,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3516,for (ScopeChild child : tableScope.children) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3517,if (catalogReader.nameMatcher().matches(child.name, alias)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3518,names = ((SqlIdentifier) child.namespace.getNode()).names;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3519,break;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3522,if (names == null || names.size() == 0) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3523,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3529,CalciteSchema.TableEntry entry =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3530,SqlValidatorUtil.getTableEntry(catalogReader, names);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3532,return entry == null ? null : entry.getTable();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,69,static String isItem(RexCall call) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,137,final String name = isItem(call);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,144,return strings.get(0).startsWith("$") ? strings.get(0).substring(1) : strings.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,467,private static class TypeFinder extends VisitorImpl<Void> {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,493,if (constantExpression.value instanceof Type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,494,types.add((Type) constantExpression.value);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,86,StringBuilder query = new StringBuilder();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,539,super(Double.MAX_VALUE, Math::max);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,577,RexNode a2 = simplify(a, UNKNOWN);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,513,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,514,final SqlValidatorImpl validator = (SqlValidatorImpl) cx.getValidator();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,515,validator.setValidatedNodeType(left, type);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,516,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,518,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,90,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,91,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,96,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,109,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,468,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,472,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,46,public class ProjectCorrelateTransposeRule  extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,49,new ProjectCorrelateTransposeRule(expr -> true,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,43,new ProjectSetOpTransposeRule(expr -> false,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,101,Project p = pushProject.createProjectRefsAndExprs(input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,newSetOpInputs.add(pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,106,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,107,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,109,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,608,getNewFieldForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,610,Pair.of(new RexInputRef(newField.i + j, newField.e),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,167,|| op.comparisonKind == SqlKind.GREATER_THAN_OR_EQUAL
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,169,: builder.max("m", builder.field(0)),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,174,return builder.call(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,175,builder.call(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,176,builder.field("q", "c"), builder.literal(0)),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,177,builder.literal(false),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,178,builder.call(SqlStdOperatorTable.IS_TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,179,builder.call(RelOptUtil.op(op.comparisonKind, null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,180,e.operands.get(0), builder.field("q", "m"))),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,181,builder.literal(true),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,182,builder.call(SqlStdOperatorTable.GREATER_THAN,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,183,builder.field("q", "c"), builder.field("q", "d")),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,184,builder.literal(null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,185,builder.call(RelOptUtil.op(op.comparisonKind, null),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,186,e.operands.get(0), builder.field("q", "m")));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,153,newFilterRel = filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,41,new ProjectJoinTransposeRule(expr -> true,
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,517,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,632,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,239,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,276,if (hasAmbiguousUnresolvedStar(namespace.getRowType(), field,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,277,columnName)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,495,if (hasAmbiguousUnresolvedStar(step.rowType, field0, name)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,547,private boolean hasAmbiguousUnresolvedStar(RelDataType rowType,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,548,RelDataTypeField field, String columnName) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,62,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,70,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,71,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,72,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,81,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,176,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,178,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,179,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,180,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,288,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,292,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,307,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,82,final List<RelNode> inputs = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,87,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,91,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,93,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,99,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,101,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,102,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,103,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,104,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,105,builder.push(LogicalUnion.create(newInputs, union.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,106,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,131,final List<RelNode> inputs = call.getChildRels(minus);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,133,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,136,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,144,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,145,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,146,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,147,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,149,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,150,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,151,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,152,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,153,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,154,minus.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,155,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,156,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,157,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,158,builder.push(LogicalMinus.create(newInputs, minus.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,159,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,192,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,193,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,78,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,79,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,81,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,82,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,85,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,87,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,90,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,145,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,146,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,148,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,153,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,154,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,17,package org.apache.calcite.materialize;
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,19,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,21,import java.util.List;
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,22,import java.util.Map;
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,30,public enum MapSqlStatisticProvider implements SqlStatisticProvider {
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,31,INSTANCE;
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,33,private static final Map<String, Double> CARDINALITY_MAP =
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,81,.build();
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,83,public double tableCardinality(List<String> qualifiedTableName) {
core/src/main/java/org/apache/calcite/materialize/MapSqlStatisticProvider.java,84,return CARDINALITY_MAP.get(qualifiedTableName.toString());
core/src/main/java/org/apache/calcite/materialize/SqlStatisticProvider.java,28,double tableCardinality(List<String> qualifiedTableName);
core/src/main/java/org/apache/calcite/materialize/Step.java,84,return source == target
core/src/main/java/org/apache/calcite/materialize/Step.java,85,? keys.get(0).source < keys.get(0).target // want PK on the right
core/src/main/java/org/apache/calcite/materialize/Step.java,87,< cardinality(statisticProvider, target());
core/src/main/java/org/apache/calcite/materialize/Step.java,94,return statisticProvider.tableCardinality(table.t.getQualifiedName());
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,170,filterArg, collation, type, name);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,154,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,155,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,169,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,170,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,171,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,323,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,325,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,340,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,341,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,342,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,343,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,344,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,227,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,228,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,21,import org.apache.calcite.materialize.MapSqlStatisticProvider;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,217,statisticProvider = MapSqlStatisticProvider.INSTANCE;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,50,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,513,final RexNode target = apply(e, ImmutableSet.of(),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,580,final RexNode target = apply(e, ImmutableSet.of(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2382,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2383,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2384,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2404,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2405,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2409,return factory.createFilter(corr, joinCond);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,473,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,474,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,475,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,476,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,477,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,478,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,479,RelCollations.EMPTY,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,480,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,481,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,482,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,483,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,485,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,486,LogicalAggregate.create(ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,487,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,564,ret = relBuilder.push(ret).project(exprs).build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,566,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,567,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,568,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,569,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,570,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,571,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,572,RelCollations.EMPTY,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,573,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,574,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,575,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,576,null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,578,ret = LogicalAggregate.create(ret, ImmutableBitSet.range(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,579,null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,777,ImmutableList.of(i), -1, RelCollations.EMPTY, 0, rel, null,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,72,this(aggFunction, distinct, false,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,91,boolean approximate, List<Integer> argList, int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,92,RelCollation collation, RelDataType type, String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,109,return create(aggFunction, distinct, false, argList, -1,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,117,return create(aggFunction, distinct, false, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,126,return create(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,145,return create(aggFunction, distinct, approximate, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,146,collation, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,153,return create(aggFunction, distinct, false, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,161,return create(aggFunction, distinct, approximate, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,169,return new AggregateCall(aggFunction, distinct, approximate, argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,250,return new AggregateCall(aggFunction, distinct, approximate,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,331,return new AggregateCall(aggFunction, distinct, approximate, args,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,332,filterArg, collation, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,368,return create(aggFunction, distinct, approximate, argList, filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,369,collation, newGroupKeyCount, input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/Window.java,318,return AggregateCall.create(op, aggCall.distinct,
core/src/main/java/org/apache/calcite/rel/core/Window.java,319,false, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/core/Window.java,320,RelCollations.EMPTY,
core/src/main/java/org/apache/calcite/rel/core/Window.java,359,boolean distinct) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,283,return AggregateCall.create(aggregation, distinct, false, operands,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,158,over.isDistinct());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,299,aggCall.isApproximate(), aggCall.getArgList(), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,341,aggCall.isApproximate(), newArgs, -1, aggCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,347,aggCall.isApproximate(), newArgs, -1, aggCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,412,AggregateCall.create(SqlStdOperatorTable.GROUPING, false, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,458,AggregateCall.create(aggregation, false, aggCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,669,aggCall.isApproximate(), newArgs, newFilterArg, aggCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,758,aggCall.isApproximate(), newArgs, -1, aggCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,147,aggregateCall.isApproximate(), ImmutableList.of(i++), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,148,aggregateCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,401,oldCall.isApproximate(), oldCall.getArgList(), oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,237,return AggregateCall.create(roll, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,238,aggregateCall.isApproximate(), ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,255,aggregateCall.isApproximate(), newArgs, -1, aggregateCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,175,origCall.isApproximate(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,176,ImmutableList.of(groupCount + ord.i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,177,origCall.collation,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,178,groupCount,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,179,input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,180,aggType,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,181,origCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,119,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,120,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,121,clonedOperands,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,122,((Window.RexWinAggCall) call).ordinal,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,123,((Window.RexWinAggCall) call).distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,344,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,356,final RexOver over = new RexOver(type, operator, exprs, window, distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,362,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,363,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,373,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,380,operator, exprs, window, distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,386,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,387,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,399,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,645,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,646,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,647,scale + exp.getType().getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,648,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1101,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1102,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1103,valueNullability);
core/src/main/java/org/apache/calcite/rex/RexOver.java,68,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,52,over.isDistinct());
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,44,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,122,ImmutableIntList.of(), -1, RelCollations.EMPTY,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,151,ImmutableList.of(ordinal), -1, aggregateCall.collation,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,267,ImmutableList.of(ordinal), -1, aggregateCall.collation,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,156,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,157,return null;
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,159,if (call.getKind() == SqlKind.WITHIN_GROUP) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1118,false, ImmutableList.of(), -1, RelCollations.EMPTY,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1121,false, args, -1, RelCollations.EMPTY, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1916,isDistinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4970,translateAgg(call, null, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4974,SqlNodeList orderList, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4980,translateAgg(call.operand(0), call.operand(1), orderList, outerCall);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4984,translateAgg(call.operand(0), filter, call.operand(1), outerCall);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5226,boolean distinct) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5289,distinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5330,distinct);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,771,return aggregateCall(aggFunction, distinct, false, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,778,return aggregateCall(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,785,return aggregateCall(aggFunction, distinct, false, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,793,return aggregateCall(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,807,return aggregateCall(aggFunction, false, false, null, ImmutableList.of(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,821,return aggregateCall(aggFunction, false, false, null, ImmutableList.of(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,827,boolean approximate, RexNode filter, ImmutableList<RexNode> orderKeys,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,829,return new AggCallImpl(aggFunction, distinct, approximate, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,830,operands, orderKeys);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,846,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,854,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,871,return aggregateCall(SqlStdOperatorTable.SUM, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,883,return aggregateCall(SqlStdOperatorTable.AVG, distinct, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,895,return aggregateCall(SqlStdOperatorTable.MIN, false, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,907,return aggregateCall(SqlStdOperatorTable.MAX, false, false, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1479,aggCall1.approximate, args, filterArg, collation,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2220,boolean approximate, RexNode filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2245,: new AggCallImpl(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2246,alias, operands, orderKeyList);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2256,: new AggCallImpl(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2257,alias, operands, orderKeys);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2263,: new AggCallImpl(aggFunction, distinct, approximate, condition,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2264,alias, operands, orderKeys);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2270,: new AggCallImpl(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2271,alias, operands, orderKeys);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2277,: new AggCallImpl(aggFunction, distinct, approximate, filter,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2278,alias, operands, orderKeys);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,307,protected Ord<RelDataType> getNewFieldForOldInput(int oldOrdinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,330,final int newOffset = calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,816,getNewFieldForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,817,iInput += newField.i;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,818,return new RexInputRef(iInput, removeDistinct(newField.e));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,242,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3017,final List<String> names = new AbstractList<String>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3018,public int size() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3019,return posList.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3022,public String get(int index) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3023,final int pos = posList.get(index);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3024,return fieldNames.get(pos);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,128,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,481,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,482,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,483,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,484,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,485,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,486,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,488,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,490,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,201,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,203,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,204,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,205,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,206,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,211,aggCallSqlNode = dialect.
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,212,rewriteSingleValueExpr(aggCallSqlNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,351,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,356,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,863,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,1058,Context withNullCollation(@Nonnull NullCollation nullCollation);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,551,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,556,private RexNode call(SqlOperator operator, List<RexNode> operandList) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,563,public RexNode call(SqlOperator operator,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,42,import java.util.AbstractList;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,84,List<String> fieldNames = new AbstractList<String>() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,86,return rowType.getFieldList().get(index).getName();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,90,return rowType.getFieldCount();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,94,return SqlValidatorUtil.uniquify(fieldNames, true);
core/src/main/java/org/apache/calcite/util/Bug.java,147,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1415,return this;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,585,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,625,if (!a.getType().isNullable()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,599,&& allHaveFilters) // filters get extracted
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,600,|| project.getProjects().get(aggCall.filterArg).isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,83,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,84,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,85,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,86,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,88,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,89,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,409,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,206,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,207,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,208,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,209,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,51,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,73,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,239,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,246,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,247,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,168,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2079,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2186,operand = Expressions.divide(operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2187,Expressions.constant(TimeUnit.DAY.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2197,return Expressions.modulo(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2198,operand, Expressions.constant(TimeUnit.MINUTE.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2200,operand = Expressions.modulo(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2201,operand, Expressions.constant(TimeUnit.MINUTE.multiplier.longValue()));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2267,return Expressions.modulo(operand, Expressions.constant(factor));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,666,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/SequencedAdderAggregateLambdaFactory.java,34,public class SequencedAdderAggregateLambdaFactory<TSource, TAccumulate, TResult, TKey>
core/src/main/java/org/apache/calcite/adapter/enumerable/SequencedAdderAggregateLambdaFactory.java,40,public SequencedAdderAggregateLambdaFactory(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,505,builder.newName("sourceSorters"));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,526,BuiltInMethod.ORDERED_AGGREGATE_LAMBDA_FACTORY.constructor,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,544,BuiltInMethod.SEQUENCED_ADDER_AGGREGATE_LAMBDA_FACTORY.constructor,
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,37,public class OrderedAggregateLambdaFactory<TSource, TKey, TSortKey,
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,38,TOrigAccumulate, TResult>
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,40,OrderedAggregateLambdaFactory.LazySource<TSource>, TResult, TKey> {
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,43,private final List<SourceSorter<TOrigAccumulate, TSource, TSortKey>> sourceSorters;
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,45,public OrderedAggregateLambdaFactory(
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,47,List<SourceSorter<TOrigAccumulate, TSource, TSortKey>> sourceSorters) {
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,49,this.sourceSorters = sourceSorters;
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,68,for (SourceSorter<TOrigAccumulate, TSource, TSortKey> acc : sourceSorters) {
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,69,acc.sortAndAccumulate(lazySource, accumulator);
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,79,for (SourceSorter<TOrigAccumulate, TSource, TSortKey> acc : sourceSorters) {
core/src/main/java/org/apache/calcite/adapter/enumerable/OrderedAggregateLambdaFactory.java,80,acc.sortAndAccumulate(lazySource, accumulator);
core/src/main/java/org/apache/calcite/adapter/enumerable/SourceSorter.java,34,public class SourceSorter<TAccumulate, TSource, TSortKey> {
core/src/main/java/org/apache/calcite/adapter/enumerable/SourceSorter.java,48,public void sortAndAccumulate(Iterable<TSource> sourceIterable,
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,21,import org.apache.calcite.adapter.enumerable.OrderedAggregateLambdaFactory;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,22,import org.apache.calcite.adapter.enumerable.SequencedAdderAggregateLambdaFactory;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,480,ORDERED_AGGREGATE_LAMBDA_FACTORY(OrderedAggregateLambdaFactory.class,
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,482,SEQUENCED_ADDER_AGGREGATE_LAMBDA_FACTORY(SequencedAdderAggregateLambdaFactory.class,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,83,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,84,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,103,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,104,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1217,name = SqlValidatorUtil.F_SUGGESTER.apply(name, j, j++);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchJson.java,76,if (v.stream().anyMatch(val -> val instanceof GroupValue)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,405,.simplifyOrs(finalResidualPredicates);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,55,import java.util.function.Function;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,231,return verify(e, unknownAs,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,232,simplifier -> simplifier.simplify(e, unknownAs));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1448,if (paranoid) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1449,final RexNode before = RexUtil.composeDisjunction(rexBuilder, terms);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1450,return verify(before, unknownAs,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1451,simplifier -> simplifier.simplifyOrs(terms, unknownAs));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1478,private RexNode verify(RexNode before, RexUnknownAs unknownAs,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1479,Function<RexSimplify, RexNode> simplifier) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1480,final RexNode simplified = simplifier.apply(withParanoid(false));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1481,if (!paranoid) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1482,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1498,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1539,return simplified;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1847,.simplifyOr(call);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1854,.simplifyOrs(terms);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,579,return simplifier.simplifyAnds(operands);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1661,new SqlBaseContextVariable("PI", ReturnTypes.DOUBLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1662,SqlFunctionCategory.NUMERIC);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,72,if (fields == null || fields.size() == 1 && "_MAP".equals(fields.get(0).getKey())) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchEnumerators.java,74,getter = mapGetter();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,192,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,193,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,194,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,195,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,196,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,197,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,198,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,200,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,218,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,276,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,277,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,297,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,298,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,302,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,303,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,304,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,305,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,335,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,355,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,356,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,358,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,359,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,360,type = toType(typeFactory, jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,362,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,364,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,394,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,395,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,397,return rexBuilder.makeNullLiteral(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,398,typeFactory.createSqlType(sqlTypeName));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,400,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,429,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,446,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,447,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,79,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,170,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,276,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,43,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,73,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,746,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,747,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,749,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,750,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,751,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,752,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,247,return typeFactory.createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,248,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,249,field -> toSql(typeFactory, field.getType())),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,250,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,252,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,253,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,254,typeFactory.createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,255,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,257,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,73,return new RelRecordType(key.kind, list.build());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,145,return canonize(kind, fieldNameList, typeList);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,295,type.getFieldNames());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,300,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,301,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,303,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,304,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,305,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,321,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,324,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,328,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,356,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,357,final RelDataType type = CACHE.getIfPresent(new Key(kind, names, types));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,363,return CACHE.getUnchecked(new Key(kind, names2, types2));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,662,Key(StructKind kind, List<String> names, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,669,return Objects.hash(kind, names, types);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,677,&& types.equals(((Key) obj).types);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,39,public RelRecordType(StructKind kind, List<RelDataTypeField> fields) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,46,this(StructKind.FULLY_QUALIFIED, fields);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,56,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,433,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,221,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,241,private final Deque<VolcanoRuleCall> ruleCallStack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,309,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,310,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1161,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1162,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1210,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1746,ruleCallStack.push(ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1748,ruleCallStack.pop();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,212,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,261,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,262,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,263,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,264,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,61,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,156,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1214,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1215,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1230,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1231,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1232,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1236,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1237,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1245,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1288,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1289,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1493,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1531,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,100,private static Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,101,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,102,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,103,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,104,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,194,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1034,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1035,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1036,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1037,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1038,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1039,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1053,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1054,new NlsString(value, charsetName, collation),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1055,typeFactory.createSqlType(SqlTypeName.CHAR),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1056,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,77,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,78,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,79,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,sb.append(operands.get(i));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,219,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,315,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,317,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,321,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,422,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,447,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,543,return list.get(index).digest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,98,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,99,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,100,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexOver.java,102,sb.append(operands.get(i));
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,204,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,208,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,209,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,214,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,215,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,223,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,224,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,228,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,229,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,236,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,237,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,249,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,250,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,260,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,261,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,265,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,266,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,83,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,207,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,212,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,132,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,138,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,145,public static <T> Enumerable<T> of(
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,157,public static <T> Enumerable<T> of(
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,290,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,292,LOGGER.debug("Failed to set query timeout.");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java,109,List<String> inputFields = fieldNames(getInput().getRowType());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchAggregate.java,111,implementor.addGroupBy(inputFields.get(group));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,85,List<String> opList = implementor.list;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,86,final Expression ops = block.append("ops", constantArrayList(opList, String.class));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,65,final List<Range<Long>> ranges =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,66,extractRanges(e, false);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,75,if (LOGGER.isDebugEnabled()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,76,LOGGER.debug("Inferred ranges on interval : " + condensedRanges);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,78,return toInterval(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,79,ImmutableList.<Range>copyOf(condensedRanges.asRanges()));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,189,switch (call.getKind()) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,153,columns = getKeyspace().getMaterializedView(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,155,columns = getKeyspace().getTable(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,200,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,202,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,228,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,230,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchemaFactory.java,42,int port = (int) map.get("port");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,602,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,644,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,132,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,380,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,370,if (operands.size() != 2 && predicate.getKind() == SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,371,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,372,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,81,operandJ(aggregateClass, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,aggregate -> aggregate.getGroupType() == Aggregate.Group.SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(joinClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,133,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,140,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,143,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,150,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,154,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,66,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,357,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,358,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,362,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,363,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,415,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,235,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,236,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,237,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,238,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,666,final SqlNode lowerBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,667,createSqlWindowBound(rexWindow.getLowerBound());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,668,final SqlNode upperBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,669,createSqlWindowBound(rexWindow.getUpperBound());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,682,return createOverCall(rexOver.getAggOperator(), nodeList, sqlWindow);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,305,return;
core/src/main/java/org/apache/calcite/runtime/CalciteException.java,61,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorException.java,59,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,142,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,147,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,148,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,152,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,154,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,159,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,266,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,67,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,90,final List<RelDataType> typeList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2055,final boolean needAlias = call.operandCount() > 2;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,794,final SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,795,final List<SqlNode> operandList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,796,for (int arg : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,797,operandList.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,800,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,801,final SqlNode[] operands = operandList.toArray(new SqlNode[0]);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,802,List<SqlNode> orderByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,803,for (RelFieldCollation field : aggCall.collation.getFieldCollations()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,804,addOrderItem(orderByList, field);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,806,SqlNodeList orderList = new SqlNodeList(orderByList, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,808,final SqlNode node =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,809,withOrder(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,810,SqlStdOperatorTable.SUM.createCall(qualifier, POS, operands),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,811,orderList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,815,return withOrder(op.createCall(qualifier, POS, operands), orderList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,821,private SqlNode withOrder(SqlCall call, SqlNodeList orderList) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,822,if (orderList == null || orderList.size() == 0) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,825,return SqlStdOperatorTable.WITHIN_GROUP.createCall(POS, call, orderList);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,617,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,801,boolean alreadySorted = collation.getFieldCollations().isEmpty();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,802,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,804,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,805,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,809,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,811,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,812,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,813,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,814,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,815,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,818,return alreadySorted && alreadySmaller;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,364,static DruidJsonFilter toDruidFilters(final RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,365,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,375,return toDruidFilters(Iterables.getOnlyElement(((RexCall) rexNode).getOperands()), rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,376,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,379,final DruidJsonFilter simpleFilter = toDruidFilters(Iterables
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,380,.getOnlyElement(((RexCall) rexNode).getOperands()), rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,389,final DruidJsonFilter druidFilter = toDruidFilters(e, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,482,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,483,.toDruidFilters(filter.getCondition(), filter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,727,private static DruidJsonFilter computeFilter(@Nullable Filter filterRel,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,728,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,735,return DruidJsonFilter.toDruidFilters(filter, inputRowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,979,final DruidJsonFilter jsonFilter = computeFilter(filter, this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1034,havingJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1035,.toDruidFilters(havingFilter.getCondition(), havingFilter.getInput().getRowType(), this);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1454,DruidJsonFilter druidFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1455,.toDruidFilters(filterNode, druidQuery.table.getRowType(), druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,164,DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,165,.toDruidFilters(e, filter.getInput().getRowType(), query);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,263,final DruidJsonFilter druidJsonFilter = DruidJsonFilter
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,264,.toDruidFilters(cond, query.getTopNode().getRowType(), query);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,214,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1953,case MATCH_RECOGNIZE:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1954,convertMatchRecognize(bb, (SqlCall) from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1955,return;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2119,protected void convertMatchRecognize(Blackboard bb, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2120,final SqlMatchRecognize matchRecognize = (SqlMatchRecognize) call;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4814,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4815,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4816,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,26,import java.net.URLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,30,import javax.net.ssl.HttpsURLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,40,URLConnection conn = new URL(url).openConnection();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,41,final HttpURLConnection httpConn = (HttpURLConnection) conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,46,if (httpConn instanceof HttpsURLConnection) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,47,HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,48,httpsConn.setSSLSocketFactory(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,49,TrustAllSslSocketFactory.createSSLSocketFactory());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,50,httpsConn.setHostnameVerifier((arg0, arg1) -> true);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,53,return httpConn;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2018,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2019,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2024,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2025,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2026,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2028,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2029,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2030,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2031,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2032,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2033,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2034,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2035,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2036,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2037,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2038,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2039,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2040,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2041,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2042,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2043,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2044,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2045,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2046,catalogReader.nameMatcher(), leftRowType, rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2047,conditionExp = convertUsing(leftNamespace, rightNamespace, columnList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2049,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2050,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2051,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2052,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2053,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2054,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2055,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2056,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2057,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2060,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2061,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2062,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2063,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2064,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2065,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2066,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2067,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2588,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2590,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2591,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2592,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2595,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2596,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2600,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2601,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2602,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2603,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2604,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2605,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2606,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2607,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2608,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2609,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2610,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2612,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2613,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2614,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,123,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,162,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,91,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,833,final int ref = lookupGroupExpr(groupAnalyzer, groupExpr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,65,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,849,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,850,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1056,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,47,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,204,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,206,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,208,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,209,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,211,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,214,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,601,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,602,case IN:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,603,return SqlStdOperatorTable.NOT_IN
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,604,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,605,case LIKE:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,606,return SqlStdOperatorTable.NOT_LIKE
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,607,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,608,case SIMILAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,609,return SqlStdOperatorTable.NOT_SIMILAR_TO
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,610,.createCall(POS, ((SqlCall) node).getOperandList());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,611,default:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,636,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,641,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,745,private SqlNode createLeftCall(SqlOperator op, List<SqlNode> nodeList) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,501,public abstract void switchTo(String stateName);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,281,SqlParser.ConfigBuilder configBuilder = SqlParser.configBuilder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,282,configBuilder.setUnquotedCasing(Casing.UNCHANGED);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,286,parsedQuery = (SqlSelect) SqlParser.create(query, configBuilder.build()).parseQuery();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,470,.build();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,469,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,738,.setCaseSensitive(config.caseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,742,parserConfig.setParserFactory(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,32,import java.util.Objects;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,82,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,230,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,231,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,232,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,233,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,234,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,235,private SqlConformance conformance = SqlConformanceEnum.DEFAULT;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,236,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,242,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,244,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,245,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,246,this.conformance = config.conformance();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,247,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,252,this.quotedCasing = Objects.requireNonNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,257,this.unquotedCasing = Objects.requireNonNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,258,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,262,this.quoting = Objects.requireNonNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,263,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,267,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,268,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,272,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,273,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,279,if (allowBangEqual != conformance.isBangEqualAllowed()) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,280,setConformance(
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,281,new SqlDelegatingConformance(conformance) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,291,this.conformance = conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,292,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,296,this.parserFactory = Objects.requireNonNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,297,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,301,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,302,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,303,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,304,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,305,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,311,return new ConfigImpl(identifierMaxLength, quotedCasing, unquotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,312,quoting, caseSensitive, conformance, parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,320,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,321,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,322,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,323,private final SqlConformance conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,324,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,325,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,326,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,327,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,329,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,330,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,331,SqlConformance conformance, SqlParserImplFactory parserFactory) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,332,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,333,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,334,this.conformance = Objects.requireNonNull(conformance);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,335,this.quotedCasing = Objects.requireNonNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,336,this.unquotedCasing = Objects.requireNonNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,337,this.quoting = Objects.requireNonNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,338,this.parserFactory = Objects.requireNonNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,341,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,342,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,345,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,346,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,349,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,350,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,353,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,354,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,357,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,358,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,361,public SqlConformance conformance() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,362,return conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,365,public boolean allowBangEqual() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,366,return conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,369,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,370,return parserFactory;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1264,for (int i = 0; i < groupCount; i++) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1272,projects.add(groupCount + i);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,247,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,256,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,127,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,131,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,138,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1099,final ImmutableList.Builder<RexNode> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1100,return project(builder.addAll(fields()).addAll(nodes).build());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1407,if (unique != null && unique) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1413,if (maxRowCount != null && maxRowCount <= 1D) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1421,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1422,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1430,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1432,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1443,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1444,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1445,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1446,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1447,registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1457,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1458,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1459,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1460,final List<Integer> args =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1461,registrar.registerExpressions(aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1462,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1463,: registrar.registerExpression(aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1464,if (aggCall1.distinct && !aggCall1.aggFunction.isQuantifierAllowed()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1465,throw new IllegalArgumentException("DISTINCT not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1467,if (aggCall1.filter != null && !aggCall1.aggFunction.allowsFilter()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1468,throw new IllegalArgumentException("FILTER not allowed");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1470,RelCollation collation =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1471,RelCollations.of(aggCall1.orderKeys
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1473,.map(orderKey ->
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1474,collation(orderKey, RelFieldCollation.Direction.ASCENDING,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1476,.collect(Collectors.toList()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1477,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1478,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1480,groupSet.cardinality(), r, null, aggCall1.alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1482,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1484,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2210,private class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,2288,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,571,if (rex instanceof RexSubQuery) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,572,subQuery = (RexSubQuery) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,573,sqlSubQuery =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,575,final List<RexNode> operands = subQuery.operands;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,576,SqlNode op0;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,577,if (operands.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,578,op0 = toSql(program, operands.get(0));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,580,final List<SqlNode> cols = toSql(program, operands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,581,op0 = new SqlNodeList(cols, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,583,return subQuery.getOperator().createCall(POS, op0, sqlSubQuery);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,585,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,586,final List<SqlNode> cols = toSql(program, call.operands);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,587,return call.getOperator().createCall(POS, cols.get(0),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,588,new SqlNodeList(cols.subList(1, cols.size()), POS));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,345,isNullOpperands.addAll(keyIsNulls);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,349,builder.or(isNullOpperands)));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1332,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1347,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,48,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,444,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,446,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,533,assert value == null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,507,if (simplified != null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,508,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,510,return call;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,867,safeOps.add(SqlKind.NOT_IN);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1473,terms.set(i, term);
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,63,assert kind == SqlKind.IN || kind == SqlKind.NOT_IN;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,123,GEOMETRY(PrecScale.NO_NO, true, ExtraSqlTypes.GEOMETRY, SqlTypeFamily.GEO);
core/src/main/java/org/apache/calcite/util/Util.java,2006,if (size < 15) {
core/src/main/java/org/apache/calcite/util/Util.java,2036,if (isDistinct(list)) {
core/src/main/java/org/apache/calcite/util/Util.java,2389,return Collector.of(ImmutableList::builder, ImmutableList.Builder::add,
core/src/main/java/org/apache/calcite/util/Util.java,2390,(t, u) -> {
core/src/main/java/org/apache/calcite/util/Util.java,2391,t.addAll(u.build());
core/src/main/java/org/apache/calcite/util/Util.java,2392,return t;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,118,case BETWEEN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,119,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,227,ImmutableList.Builder<Range<Long>> ranges =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,228,ImmutableList.builder();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,257,if (e.getKind() != SqlKind.IN && e.getKind() != SqlKind.NOT_IN) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,345,case IN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,346,case NOT_IN:
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeFilter.java,131,List<RexNode> disjunctions = RelOptUtil.disjunctions(condition);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,82,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,184,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,185,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,186,if (castFrom instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,187,&& castTo instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,188,&& nonMonotonicCasts.containsEntry(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,442,continue;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3894,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.rel.type.RelDataTypeSystem;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,30,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,31,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,44,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,49,import org.apache.calcite.sql.type.SqlTypeFactoryImpl;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,68,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,140,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,141,final List<Function> functions2 = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,254,final Predicate<Function> predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,285,final SqlTypeFactoryImpl typeFactory =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,286,new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,290,for (Function function : schema.getFunctions(name, true)) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,292,table.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,293,toOp(typeFactory, id, function));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,299,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,300,return toOp(typeFactory, name, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,308,private static SqlOperator toOp(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,309,SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,310,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,311,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,312,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,313,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,314,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,315,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,316,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,318,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,319,OperandTypes.family(typeFamilies, i ->
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,function.getParameters().get(i).isOptional());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,321,final List<RelDataType> paramTypes = toSql(typeFactory, argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,323,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,324,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,326,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,327,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,328,typeChecker, (AggregateFunction) function, false, false,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,329,Optionality.FORBIDDEN, typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,332,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,333,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,335,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,336,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,337,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,366,private static List<RelDataType> toSql(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,367,final RelDataTypeFactory typeFactory, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,368,return Lists.transform(types, type -> toSql(typeFactory, type));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,383,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,394,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,106,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,122,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,126,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,127,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,134,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,137,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,155,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,28,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,48,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,72,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,112,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,119,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,120,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,147,return paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,156,return Functions.generate(paramTypes.size(), i -> "arg" + i);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,511,SqlUtil.lookupRoutine(validator.getOperatorTable(), getNameAsId(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,409,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,410,SqlIdentifier funcName,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,411,List<RelDataType> argTypes,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,412,List<String> argNames,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,413,SqlSyntax sqlSyntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,414,SqlKind sqlKind,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,507,SqlSyntax syntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,508,final Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,520,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,583,final List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,584,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,597,private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,601,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,602,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.jdbc.JavaTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,20,import org.apache.calcite.linq4j.function.Experimental;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,21,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,23,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,25,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,39,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,40,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,54,public final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,63,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,64,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,68,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,72,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,73,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,74,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,75,argTypes.add(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,77,return toSql(argTypes);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,80,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,81,return Lists.transform(types, this::toSql);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,84,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,85,if (type instanceof RelDataTypeFactoryImpl.JavaType
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,87,== Object.class) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,88,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,89,typeFactory.createSqlType(SqlTypeName.ANY), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,91,return JavaTypeFactoryImpl.toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,95,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,96,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,97,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,98,parameter -> parameter.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,102,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,103,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,this(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,52,paramTypes, function, SqlFunctionCategory.USER_DEFINED_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,56,protected SqlUserDefinedFunction(SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,59,SqlOperandTypeChecker operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,60,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,63,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,64,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,paramTypes, category);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,43,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,45,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,46,paramTypes, function, SqlFunctionCategory.USER_DEFINED_TABLE_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Objects;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,69,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,Objects.requireNonNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,156,return Lists.transform(operator.getParamNames(), paramName -> {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3204,String clause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3384,SqlNode current, SqlValidatorScope scope, String optionalClause) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3409,SqlNode current, SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3452,SqlCall aggCall, SqlNode parent) {
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,276,public static SqlOperatorTable operatorTable(String className) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,280,ModelHandler.addFunctions(schema.plus(), null, ImmutableList.of(),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,281,className, "*", true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,147,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,148,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,215,try {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,216,final SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,217,return SqlLiteral.unchain(node).getValueAs(clazz);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,224,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,228,return SqlUtil.isLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,241,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,259,public <T> T getValueAs(Class<T> clazz) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,434,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,435,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,436,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,488,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,55,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,215,if (allowCast) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,216,if (node.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,217,SqlCall call = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,218,if (isLiteral(call.operand(0), false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,220,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,224,return false;
core/src/main/java/org/apache/calcite/sql/SqlWithinGroupOperator.java,41,null, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,70,GEO;
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,85,opTab.lookupOperatorOverloads(sqlFunction.getSqlIdentifier(),
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,87,for (SqlOperator operator2 : list) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,88,if (operator2.isAggregator() && !operator2.requiresOver()) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,91,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggVisitor.java,92,found(call);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,24,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,38,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,68,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,72,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,85,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,88,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,26,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,31,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,36,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,42,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,47,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,51,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,61,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,82,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,100,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,106,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,117,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,119,final RelDataType type = pair.left.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,final Object value;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,arguments.add(value);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,132,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final List<Object> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,142,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,147,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,150,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,155,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,157,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,164,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,168,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,171,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,172,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,173,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,175,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,176,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,188,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,189,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,190,Expressions.lambda(bb.toBlock(), Collections.emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,196,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2340,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2341,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2353,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,55,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,60,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,47,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,52,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,38,static final String ROWTIME_COLUMN_NAME = "ROWTIME";
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,65,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,70,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,44,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,63,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(source, cancelFlag, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,69,List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,75,CsvEnumerator(Source source, AtomicBoolean cancelFlag, boolean stream,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,79,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,93,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,94,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,95,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,111,static RelDataType deduceRowType(JavaTypeFactory typeFactory, Source source,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,112,List<CsvFieldType> fieldTypes, Boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,116,names.add(CsvSchemaFactory.ROWTIME_COLUMN_NAME);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,164,public static CSVReader openCsv(Source source) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,196,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,225,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,318,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,319,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,323,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,324,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[0]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,325,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,326,this.stream = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,329,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields, boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,330,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[0]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,331,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,344,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,345,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,346,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,347,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,353,final Object[] objects = new Object[fields.length + 1];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,355,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,356,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,357,objects[i + 1] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,364,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamReader.java,17,package org.apache.calcite.adapter.csv;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,19,import org.apache.calcite.adapter.csv.CsvFilterableTable;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,54,this.tables = ImmutableList.copyOf(tables);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,90,final Source baseSource = Sources.of(baseDirectory);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,91,File[] files = baseDirectory.listFiles((dir, name) -> {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,92,final String nameSansGz = trim(name, ".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,94,|| nameSansGz.endsWith(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,96,if (files == null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,97,System.out.println("directory " + baseDirectory + " not found");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,98,files = new File[0];
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,101,for (File file : files) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,102,Source source = Sources.of(file);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,103,Source sourceSansGz = source.trim(".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,104,final Source sourceSansJson = sourceSansGz.trimOrNull(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,105,if (sourceSansJson != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,110,final Source sourceSansCsv = sourceSansGz.trimOrNull(".csv");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,111,if (sourceSansCsv != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,112,addTable(builder, source, sourceSansCsv.relative(baseSource).path(),
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,113,null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,145,final Table table = new CsvFilterableTable(source, null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,37,public FileSchemaFactory() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,46,File directoryFile = baseDirectory;
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,48,if (baseDirectory != null && directory != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,50,if (!directoryFile.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,927,private static class CheckingUserDefinedFunctionVisitor extends RexVisitorImpl<Void> {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,404,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,405,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,534,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,537,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,538,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,549,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,385,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,388,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,395,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,405,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,750,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,752,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,766,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,779,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,795,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,830,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,834,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,840,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,847,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,858,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,862,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,866,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,67,literal -> ((SqlBinaryStringLiteral) literal).getBitString())),
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,54,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,79,literal -> ((SqlCharStringLiteral) literal).getNlsString())),
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,58,private static DruidJsonFilter toEqualityKindDruidFilter(RexNode rexNode, RelDataType rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,59,DruidQuery druidQuery) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,60,if (rexNode.getKind() != SqlKind.EQUALS && rexNode.getKind() != SqlKind.NOT_EQUALS) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,154,final String literalValue = DruidJsonFilter.toDruidLiteral(rexLiteral, rowType, druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,161,final Pair<String, ExtractionFunction> druidColumn = DruidQuery.toDruidColumn(refNode, rowType,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,162,druidQuery);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1112,throw new IllegalStateException("Can not plan Druid Query");
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1126,private JsonLimit computeSort(@Nullable Integer fetch, List<Integer> collationIndexes,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1127,List<Direction> collationDirections, ImmutableBitSet numericCollationIndexes,
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,190,result.add("  " + fieldName + DISTINCT_FIELD_SUFFIX + " = DISTINCT " + relAlias + '.'
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,191,+ fieldName + ";\n");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,24,import org.apache.calcite.plan.RelOptRuleOperand;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,32,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,59,CassandraFilterRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,60,CassandraProjectRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,61,CassandraSortRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,62,CassandraLimitRule.INSTANCE
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,91,protected final Convention out;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,93,CassandraConverterRule(Class<? extends RelNode> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,94,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,95,this(clazz, r -> true, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,98,<R extends RelNode> CassandraConverterRule(Class<R> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,99,Predicate<? super R> predicate,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,100,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,101,super(clazz, predicate, Convention.NONE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,102,CassandraRel.CONVENTION, RelFactories.LOGICAL_BUILDER, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,103,this.out = CassandraRel.CONVENTION;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,111,private static class CassandraFilterRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,117,private static final CassandraFilterRule INSTANCE = new CassandraFilterRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,119,private CassandraFilterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,120,super(operand(LogicalFilter.class, operand(CassandraTableScan.class, none())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,203,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,214,public RelNode convert(LogicalFilter filter, CassandraTableScan scan) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,232,private static class CassandraProjectRule extends CassandraConverterRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,233,private static final CassandraProjectRule INSTANCE = new CassandraProjectRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,235,private CassandraProjectRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,236,super(LogicalProject.class, "CassandraProjectRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,250,public RelNode convert(RelNode rel) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,263,private static class CassandraSortRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,265,private static final RelOptRuleOperand CASSANDRA_OP =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,266,operand(CassandraToEnumerableConverter.class,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,267,operandJ(CassandraFilter.class, null,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,269,CassandraFilter::isSinglePartition, any()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,271,private static final CassandraSortRule INSTANCE = new CassandraSortRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,273,private CassandraSortRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,274,super(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,275,operandJ(Sort.class, null,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,277,sort -> sort.offset == null && sort.fetch == null, CASSANDRA_OP),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,290,public boolean matches(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,357,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,371,private static class CassandraLimitRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,372,private static final CassandraLimitRule INSTANCE = new CassandraLimitRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,374,private CassandraLimitRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,375,super(operand(EnumerableLimit.class, operand(CassandraToEnumerableConverter.class, any())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,387,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,26,import java.util.function.Predicate;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,41,public CassandraToEnumerableConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,42,RelBuilderFactory relBuilderFactory) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,44,CassandraRel.CONVENTION, EnumerableConvention.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,45,relBuilderFactory, "CassandraToEnumerableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,41,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,89,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,97,public EnumerableToBindableConverterRule(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,98,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,99,super(EnumerableRel.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,100,EnumerableConvention.INSTANCE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,101,relBuilderFactory, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,23,import org.apache.calcite.rel.core.Calc;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,37,super(LogicalCalc.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,40,RelFactories.LOGICAL_BUILDER, "EnumerableCalcRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,43,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,37,public EnumerableCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,38,super(LogicalCorrelate.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,43,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,33,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,34,super(LogicalFilter.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,36,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,37,RelFactories.LOGICAL_BUILDER, "EnumerableFilterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,40,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,37,super(operand(EnumerableFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,40,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,41,public EnumerableInterpreterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,42,super(RelNode.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,43,BindableConvention.INSTANCE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,44,relBuilderFactory, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,43,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,33,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,34,super(LogicalProject.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,36,Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,37,RelFactories.LOGICAL_BUILDER, "EnumerableProjectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,40,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,34,super(operand(EnumerableProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,37,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,35,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,38,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,44,new EnumerableCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,50,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,53,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,56,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,59,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,62,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,65,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,68,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,71,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,74,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,77,new EnumerableTableModifyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,80,new EnumerableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,83,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,86,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,89,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,92,new EnumerableFilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,95,new EnumerableProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,98,new EnumerableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,101,new EnumerableTableFunctionScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,35,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,36,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,44,public EnumerableTableFunctionScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,45,super(LogicalTableFunctionScan.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,46,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,53,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,56,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,27,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,39,public EnumerableTableModifyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,40,super(LogicalTableModify.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,41,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,27,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,29,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,38,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,39,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,47,public EnumerableTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,49,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,public EnumerableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,38,super(LogicalValues.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,39,Convention.NONE, EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,61,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,81,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,95,return rules(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,return ImmutableList.of(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcToEnumerableConverterRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,102,new JdbcJoinRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,103,new JdbcCalcRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,104,new JdbcProjectRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,105,new JdbcFilterRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,new JdbcAggregateRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,107,new JdbcSortRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,new JdbcUnionRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,109,new JdbcIntersectRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,110,new JdbcMinusRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,111,new JdbcTableModificationRule(out, relBuilderFactory),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,112,new JdbcValuesRule(out, relBuilderFactory));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,117,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,121,JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,122,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,123,this(clazz, (Predicate<RelNode>) r -> true, in, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,124,RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,127,<R extends RelNode> JdbcConverterRule(Class<R> clazz,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,128,Predicate<? super R> predicate, RelTrait in, JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,129,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,130,super(clazz, predicate, in, out, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,131,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,136,<R extends RelNode> JdbcConverterRule(Class<R> clazz,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,137,com.google.common.base.Predicate<? super R> predicate,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,138,RelTrait in, JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,139,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,140,this(clazz, (Predicate<R>) predicate, in, out, relBuilderFactory,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,141,description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,148,public JdbcJoinRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,149,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,153,public JdbcJoinRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,154,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,155,super(Join.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,156,out, relBuilderFactory, "JdbcJoinRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,308,private JdbcCalcRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,309,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,310,super(Calc.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,311,out, relBuilderFactory, "JdbcCalcRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,384,public JdbcProjectRule(final JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,385,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,389,public JdbcProjectRule(final JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,390,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,391,super(Project.class, (Predicate<Project>) project ->
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,394,&& !userDefinedFunctionInProject(project),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,395,Convention.NONE, out, relBuilderFactory, "JdbcProjectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,409,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,467,public JdbcFilterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,468,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,472,public JdbcFilterRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,473,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,474,super(Filter.class,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,475,(Predicate<Filter>) r -> !userDefinedFunctionInFilter(r),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,476,Convention.NONE, out, relBuilderFactory, "JdbcFilterRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,485,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,525,public JdbcAggregateRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,526,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,530,public JdbcAggregateRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,531,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,532,super(Aggregate.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,533,out, relBuilderFactory, "JdbcAggregateRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,536,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,610,public JdbcSortRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,611,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,615,public JdbcSortRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,616,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,617,super(Sort.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,618,relBuilderFactory, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,621,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,681,public JdbcUnionRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,682,this(out, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,686,public JdbcUnionRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,687,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,688,super(Union.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,689,relBuilderFactory, "JdbcUnionRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,692,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,732,private JdbcIntersectRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,733,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,734,super(Intersect.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,735,out, relBuilderFactory, "JdbcIntersectRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,738,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,779,private JdbcMinusRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,780,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,781,super(Minus.class, (Predicate<RelNode>) r -> true, Convention.NONE, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,782,relBuilderFactory, "JdbcMinusRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,785,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,818,private JdbcTableModificationRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,819,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,820,super(TableModify.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,821,Convention.NONE, out, relBuilderFactory, "JdbcTableModificationRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,894,private JdbcValuesRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,895,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,896,super(Values.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,897,out, relBuilderFactory, "JdbcValuesRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,23,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,25,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,34,public JdbcToEnumerableConverterRule(JdbcConvention out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,35,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,36,super(RelNode.class, (Predicate<RelNode>) r -> true, out,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,37,EnumerableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,45,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,80,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableTableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableFilterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableProjectRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableSortRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableAggregateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,113,new BindableWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,142,public static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,150,super(operand(LogicalTableScan.class, none()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,267,public BindableFilterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,268,super(LogicalFilter.class,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,270,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,274,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,334,public BindableProjectRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,335,super(LogicalProject.class,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,337,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,341,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,392,public BindableSortRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,393,super(Sort.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,394,BindableConvention.INSTANCE, relBuilderFactory, "BindableSortRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,397,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,448,public BindableJoinRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,449,super(LogicalJoin.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,450,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,454,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,520,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,524,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,593,public BindableValuesRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,594,super(LogicalValues.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,595,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,671,public BindableAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,672,super(LogicalAggregate.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,673,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,677,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,736,public BindableWindowRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,737,super(LogicalWindow.class, (Predicate<RelNode>) r -> true,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,738,Convention.NONE, BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,742,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,26,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,42,public NoneToBindableConverterRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,44,BindableConvention.INSTANCE, relBuilderFactory,
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,449,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,646,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,142,FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,315,new TraitMatchingRule(converter, RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,114,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,105,new ExpandConversionRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,113,super(operand(AbstractConverter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,116,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,35,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,53,this(clazz, (Predicate<RelNode>) r -> true, in, out,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,78,super(convertOperand(clazz, predicate, in),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,79,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,83,this.inTrait = Objects.requireNonNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,84,this.outTrait = Objects.requireNonNull(out);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,87,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,101,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,136,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,33,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,36,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,42,this(converterRule, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,54,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,55,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,56,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,57,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,60,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,61,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,68,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,73,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,74,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,45,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,82,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,88,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,92,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,100,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,101,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,121,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,172,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,64,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,65,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,66,operandJ(inputClass, null, r -> !(r instanceof Project), any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,67,relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,72,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,63,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,64,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,66,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,72,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,65,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,70,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,74,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,80,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,85,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,208,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,57,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,65,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,66,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,67,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,70,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,64,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,70,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,89,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,90,operandJ(aggregateClass, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,92,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,97,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,96,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,105,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,118,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,38,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,26,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,63,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,70,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,107,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,44,public static final AggregateUnionAggregateRule AGG_ON_FIRST_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,51,public static final AggregateUnionAggregateRule AGG_ON_SECOND_INPUT =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,63,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,79,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,80,operandJ(aggregateClass, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,81,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,82,operand(firstUnionInputClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,83,operand(secondUnionInputClass, any()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,84,relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,99,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,75,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,76,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,56,public static final AggregateValuesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,66,operandJ(Aggregate.class, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,67,aggregate -> aggregate.getGroupCount() == 0,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,68,operandJ(Values.class, null,
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,69,values -> values.getTuples().isEmpty(), none())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,70,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,41,public static final CalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,54,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,55,operand(Calc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,56,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,24,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,40,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,57,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,58,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,59,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,60,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,51,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,41,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,49,this(consumerRelClass, coerceNames, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,64,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,66,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,67,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,76,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,78,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,100,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,67,import java.util.function.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,94,private static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,95,filter -> {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,96,try (ExtractFinder finder = ExtractFinder.THREAD_INSTANCES.get()) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,98,: "previous user did not clean up";
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,99,filter.getCondition().accept(finder);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,103,|| finder.opKinds.contains(SqlKind.CEIL);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,108,new FilterDateRangeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,175,super(operandJ(Filter.class, null, FILTER_PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,176,relBuilderFactory, "FilterDateRangeRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,67,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,70,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,71,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,72,builderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,76,RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,77,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,91,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,42,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,55,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,56,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,57,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,69,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,42,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,56,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,63,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,77,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,85,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,86,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,87,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,88,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,this.predicate = Objects.requireNonNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,97,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,98,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,99,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,100,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,109,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,110,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,111,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,112,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,142,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,300,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,303,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,305,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,322,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,325,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,326,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,329,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,337,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,22,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,34,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,51,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,53,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,57,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,58,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,77,this(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,78,filter -> !RexUtil.containsCorrelation(filter.getCondition()),
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,79,projectClass, project -> true,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,80,copyFilter, copyProject, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,102,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,103,operandJ(filterClass, null, filterPredicate,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,104,operandJ(projectClass, null, projectPredicate, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,105,copyFilter, copyProject, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,114,this(filterClass, filter -> !RexUtil.containsCorrelation(filter.getCondition()),
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,115,projectClass, project -> true,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,116,filterFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,117,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,118,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,126,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,127,this.copyFilter = copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,128,this.copyProject = copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,133,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,137,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,152,if (copyFilter) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,161,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,162,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,169,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,44,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,56,super(operand(Filter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,94,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,95,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,103,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,43,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,53,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,54,operand(LogicalTableFunctionScan.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,55,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,52,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,59,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,74,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,93,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,99,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,48,public static final FilterToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,59,super(operand(LogicalFilter.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,70,public static final IntersectToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,76,public IntersectToDistinctRule(Class<? extends Intersect> intersectClazz,
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,78,super(operand(intersectClazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,40,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,53,public static final JoinAssociateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,62,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,64,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,65,operand(RelSubset.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,66,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,71,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,61,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,71,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,143,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,151,final RelNode swapped = swap(join, this.swapOuter, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,42,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,53,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,106,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,115,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,122,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,129,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,137,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,145,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,148,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,157,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,159,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,165,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,168,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,170,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,188,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,197,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,199,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,202,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,209,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,211,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,213,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,230,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,237,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,244,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,253,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,259,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,267,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,286,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,290,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,352,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,360,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,362,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,388,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,69,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,71,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,76,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,78,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,80,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,92,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,98,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,102,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,106,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,this(clazz, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,119,public JoinToMultiJoinRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,122,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,123,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,124,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,125,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,130,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,63,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,69,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,74,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,295,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,296,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,299,sortedFactors.toArray(new Integer[0]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1640,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1641,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,23,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,45,public static final MaterializedViewFilterScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,51,.build();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,57,super(operand(Filter.class, operand(TableScan.class, null, none())),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,58,relBuilderFactory, "MaterializedViewFilterScanRule");
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,63,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,75,Collections.singletonList((RelNode) scan));
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,83,new HepPlanner(program, planner.getContext());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,72,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,81,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,67,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,68,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,75,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,76,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,83,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,84,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,85,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,86,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,87,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,96,this(operand, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,104,super(operand, description, false, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,48,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,operand(LogicalCalc.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,63,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,69,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,70,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,48,public static final ProjectCorrelateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,57,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,63,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,65,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,66,operand(Correlate.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,67,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,68,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,74,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,75,final Correlate corr = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,81,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,82,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,83,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,84,call.builder().literal(true),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,85,corr,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,86,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,87,call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,88,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,94,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,95,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,96,corr.getLeft(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,99,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,100,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,101,corr.getRight(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,105,Map<Integer, Integer> requiredColsMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,108,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,110,for (Integer col : corr.getRequiredColumns()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,116,RexBuilder rexBuilder = call.builder().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,118,CorrelationId correlationId = corr.getCluster().createCorrel();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,121,leftProjRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,125,rightProjRel = rightProjRel.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,127,new RexFieldAccessReplacer(corr.getCorrelationId(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,131,Correlate newCorrRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,132,corr.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,133,corr.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,134,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,135,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,138,corr.getJoinType());
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,142,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,143,pushProject.createNewProject(newCorrRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,public static final ProjectFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,64,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,40,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,49,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,61,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,66,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,73,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,83,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,85,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,88,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,90,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,96,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,97,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,101,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,102,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,109,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,111,List<RelDataTypeField> projJoinFieldList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,114,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,115,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,117,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,119,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,121,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,126,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,130,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,131,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,137,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,138,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,43,public static final ProjectRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,56,super(operandJ(Project.class, null, ProjectRemoveRule::isTrivial, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,57,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,42,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,51,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,65,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,66,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,67,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,76,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,77,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,85,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,86,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,87,origProj, null, setOp, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,88,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,90,List<RelNode> newSetOpInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,25,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,26,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,28,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,38,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,39,new ProjectSortTransposeRule(Project.class, Sort.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,private ProjectSortTransposeRule(Class<Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,Class<Sort> sortClass, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,47,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,48,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,49,operand(sortClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,50,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,54,protected ProjectSortTransposeRule(RelOptRuleOperand operand) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,55,this(operand, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,protected ProjectSortTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,61,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,68,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,69,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,70,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,72,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,73,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,74,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,75,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,76,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,77,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,78,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,79,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,80,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,81,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,82,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,50,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,57,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,72,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,92,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,45,public static final ProjectToCalcRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,56,super(operand(LogicalProject.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,61,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,78,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,93,public ProjectToWindowRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,94,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,95,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,114,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,115,operandJ(Calc.class, null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,116,calc -> RexOver.containsOver(calc.getProgram()), any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,117,relBuilderFactory, "ProjectToWindowRule");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,120,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,121,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,122,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,145,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,146,operandJ(Project.class, null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,147,project -> RexOver.containsOver(project.getProjects(), null),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,148,any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,149,relBuilderFactory, "ProjectToWindowRule:project");
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,154,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,50,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,60,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,61,operand(LogicalWindow.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,62,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,66,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,67,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,180,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,193,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,194,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,44,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,45,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,46,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,47,import static org.apache.calcite.plan.RelOptRule.operandJ;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,48,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,49,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,77,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,unordered(operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,80,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,81,final LogicalUnion union = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,86,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,builder.push(union).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,108,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,125,operand(LogicalMinus.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,126,unordered(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,127,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,130,final LogicalMinus minus = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,132,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,134,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,135,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,140,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,148,builder.push(minus).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,161,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,179,operand(LogicalIntersect.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,180,unordered(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,181,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,183,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,184,LogicalIntersect intersect = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,185,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,186,builder.push(intersect).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,187,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,207,new RemoveEmptySingleRule(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,208,(Predicate<Project>) project -> true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,222,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,235,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,249,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,251,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,252,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,254,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,276,new RemoveEmptySingleRule(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,277,(Predicate<Aggregate>) Aggregate::isNotGrandTotal,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,278,RelFactories.LOGICAL_BUILDER, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,292,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,293,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,294,operandJ(Values.class, null, Values::isEmpty, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,295,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,298,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,299,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,302,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,304,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,320,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,321,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,322,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,323,operandJ(Values.class, null, Values::isEmpty, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,326,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,327,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,330,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,332,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,343,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,350,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,351,operandJ(clazz, null, predicate,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,352,operandJ(Values.class, null, Values::isEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,353,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,361,this(clazz, (Predicate<R>) predicate::apply, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,362,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,365,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,70,public static final ReduceDecimalsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,79,super(operand(LogicalCalc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,85,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,124,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,129,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,222,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,271,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,293,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,297,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,303,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,309,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,314,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,725,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,823,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,834,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1014,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1063,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1114,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1151,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1156,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1186,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1206,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1213,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1246,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1251,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1256,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,114,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,122,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,130,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,134,protected final boolean matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,141,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,145,this(filterClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,150,super(filterClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,164,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,268,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,272,this(projectClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,277,super(projectClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,289,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,305,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,309,this(joinClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,314,super(joinClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,332,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,361,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,365,this(calcClass, true, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,370,super(calcClass, matchNullability, relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,392,matchNullability)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,465,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,466,boolean matchNullability, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,467,String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,468,super(operand(clazz, any()), relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,469,this.matchNullability = matchNullability;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,473,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,475,this(clazz, true, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,760,private final RexUnknownAs unknownAs;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,772,this.unknownAs = unknownAs;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,829,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,848,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,49,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,51,some(operand(LogicalFilter.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,52,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,62,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,49,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,60,some(operand(Join.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,67,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,80,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,81,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,82,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,83,List<RelDataTypeField> fields = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,112,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,154,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,173,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,177,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,181,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,182,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,186,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,37,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,61,public static final SemiJoinRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,65,public static final SemiJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,69,protected SemiJoinRule(Class<Project> projectClass, Class<Join> joinClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,70,Class<Aggregate> aggregateClass, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,71,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,72,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,73,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,74,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,76,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,77,operand(aggregateClass, any()))))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,78,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,81,protected SemiJoinRule(Class<Join> joinClass, Class<Aggregate> aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,82,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,83,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,85,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,87,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,155,super(projectClass, joinClass, aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,156,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,176,super(joinClass, aggregateClass, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,181,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,182,final RelNode left = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,183,final Aggregate aggregate = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,184,perform(call, null, join, left, aggregate);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,47,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,57,this(sortClass, joinClass, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,64,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,65,operand(joinClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,66,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,55,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,65,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,73,this(sortClass, projectClass, RelFactories.LOGICAL_BUILDER, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,81,this(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,82,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,84,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,90,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,95,super(operand);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,100,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,152,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,42,public static final SortRemoveConstantKeysRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,46,super(
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,47,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,48,RelFactories.LOGICAL_BUILDER, "SortRemoveConstantKeysRule");
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,public static final SortRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,44,super(operand(Sort.class, any()), relBuilderFactory, "SortRemoveRule");
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,68,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,71,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,74,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,84,public SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,85,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,86,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,87,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,494,public static class SubQueryProjectRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,495,public SubQueryProjectRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,496,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,497,operandJ(Project.class, null,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,498,RexUtil.SubQueryFinder::containsSubQuery, any()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,499,relBuilderFactory, "SubQueryRemoveRule:Project");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,502,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,503,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,504,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,505,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,506,RexUtil.SubQueryFinder.find(project.getProjects());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,507,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,508,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,509,LogicVisitor.find(RelOptUtil.Logic.TRUE_FALSE_UNKNOWN,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,510,project.getProjects(), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,511,builder.push(project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,512,final int fieldCount = builder.peek().getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,514,logic, builder, 1, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,515,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,516,builder.project(shuttle.apply(project.getProjects()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,517,project.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,518,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,524,public static class SubQueryFilterRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,525,public SubQueryFilterRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,526,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,527,operandJ(Filter.class, null, RexUtil.SubQueryFinder::containsSubQuery,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,528,any()), relBuilderFactory, "SubQueryRemoveRule:Filter");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,531,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,532,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,533,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,534,builder.push(filter.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,535,int count = 0;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,536,RexNode c = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,537,while (true) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,538,final RexSubQuery e = RexUtil.SubQueryFinder.find(c);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,539,if (e == null) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,540,assert count > 0;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,541,break;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,543,++count;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,544,final RelOptUtil.Logic logic =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,545,LogicVisitor.find(RelOptUtil.Logic.TRUE, ImmutableList.of(c), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,546,final Set<CorrelationId>  variablesSet =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,547,RelOptUtil.getVariablesUsed(e.rel);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,548,final RexNode target = apply(e, variablesSet, logic,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,549,builder, 1, builder.peek().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,550,final RexShuttle shuttle = new ReplaceSubQueryShuttle(e, target);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,551,c = c.accept(shuttle);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,553,builder.filter(c);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,554,builder.project(fields(builder, filter.getRowType().getFieldCount()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,555,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,561,public static class SubQueryJoinRemoveRule extends SubQueryRemoveRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,562,public SubQueryJoinRemoveRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,563,super(
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,564,operandJ(Join.class, null, RexUtil.SubQueryFinder::containsSubQuery,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,565,any()), relBuilderFactory, "SubQueryRemoveRule:Join");
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,568,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,569,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,570,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,571,final RexSubQuery e =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,572,RexUtil.SubQueryFinder.find(join.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,573,assert e != null;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,575,LogicVisitor.find(RelOptUtil.Logic.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,576,ImmutableList.of(join.getCondition()), e);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,577,builder.push(join.getLeft());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,578,builder.push(join.getRight());
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,579,final int fieldCount = join.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,581,logic, builder, 2, fieldCount);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,583,builder.join(join.getJoinType(), shuttle.apply(join.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,584,builder.project(fields(builder, join.getRowType().getFieldCount()));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,585,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,37,new TableScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,47,super(operand(LogicalTableScan.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,32,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,40,public UnionEliminatorRule(Class<? extends Union> clazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,42,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,public static final UnionMergeRule INTERSECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,49,public static final UnionMergeRule MINUS_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,56,public UnionMergeRule(Class<? extends SetOp> unionClazz, String description,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,59,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,60,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,61,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,62,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,66,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,68,this(unionClazz, null, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,50,public static final UnionPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,134,public ValuesReduceRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,135,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,136,super(operand, relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,137,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,29,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,44,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaProjectTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaFilterTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaAggregateTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaSortTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaUnionTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaJoinTransposeRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,66,new DeltaTableScanRule(RelFactories.LOGICAL_BUILDER),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,67,new DeltaTableScanToEmptyRule(RelFactories.LOGICAL_BUILDER));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,77,public DeltaProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,78,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,79,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,80,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,81,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,104,public DeltaFilterTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,105,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,106,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,public DeltaAggregateTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,134,any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,135,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,159,public DeltaSortTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,161,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,162,operand(Sort.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,163,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,186,public DeltaUnionTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,187,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,188,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,189,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,190,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,221,public DeltaTableScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,222,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,223,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,224,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,225,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,262,public DeltaTableScanToEmptyRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,263,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,264,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,265,operand(TableScan.class, none())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,266,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,296,this(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,304,public DeltaJoinTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,305,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,306,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,307,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,308,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,311,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,238,new FilterJoinRule.FilterIntoJoinRule(true, f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,241,new FilterProjectTransposeRule(Filter.class, Project.class, true,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,259,new FilterJoinRule.FilterIntoJoinRule(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,260,true, f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,263,new FilterJoinRule.JoinConditionPushRule(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,264,f,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1743,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1744,RemoveSingleAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1745,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1746,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1748,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1751,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1754,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1795,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1796,RemoveCorrelationForScalarProjectRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1797,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1799,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1802,operand(RelNode.class, any())))),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1803,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1806,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1814,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1829,RexNode joinCond = relBuilder.literal(true);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1831,|| (joinCond != relBuilder.literal(true))) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1853,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1919,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1933,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1944,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1959,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1961,Pair.of(relBuilder.literal(true), "nullIndicator")));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1983,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1987,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1992,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1993,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1994,RemoveCorrelationForScalarAggregateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1995,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1997,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2001,operand(RelNode.class, any()))))),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2002,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2005,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2016,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2066,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2107,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2130,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2131,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2132,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2180,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2181,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2189,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2253,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2254,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2255,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2256,Pair.of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2287,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2342,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2354,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2367,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2368,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2370,AdjustProjectForCountAggregateRule(boolean flavor,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2372,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2373,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2375,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2379,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2381,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2382,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2385,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2390,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2417,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2423,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2443,RexNode joinCond = relBuilder.literal(true);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2445,|| (joinCond != relBuilder.literal(true))) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2483,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2488,if (cm.mapCorToCorRel.get(correlate.getCorrelationId()) == correlate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2489,cm.mapCorToCorRel.put(correlate.getCorrelationId(), newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2493,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,30,import org.apache.calcite.rel.core.RelFactories;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,54,import org.apache.calcite.tools.RelBuilderFactory;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,82,public static final DruidFilterRule FILTER =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,83,new DruidFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,84,public static final DruidProjectRule PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,85,new DruidProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,86,public static final DruidAggregateRule AGGREGATE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,87,new DruidAggregateRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,88,public static final DruidAggregateProjectRule AGGREGATE_PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,89,new DruidAggregateProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,90,public static final DruidSortRule SORT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,91,new DruidSortRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,92,public static final DruidSortProjectTransposeRule SORT_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,93,new DruidSortProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,94,public static final DruidProjectSortTransposeRule PROJECT_SORT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,95,new DruidProjectSortTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,96,public static final DruidProjectFilterTransposeRule PROJECT_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,97,new DruidProjectFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,98,public static final DruidFilterProjectTransposeRule FILTER_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,99,new DruidFilterProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,100,public static final DruidAggregateFilterTransposeRule AGGREGATE_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,101,new DruidAggregateFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,102,public static final DruidFilterAggregateTransposeRule FILTER_AGGREGATE_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,103,new DruidFilterAggregateTransposeRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,105,new DruidPostAggregationProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,106,public static final DruidAggregateExtractProjectRule PROJECT_EXTRACT_RULE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,107,new DruidAggregateExtractProjectRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,109,new DruidHavingFilterRule(RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,130,public static class DruidFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,137,public DruidFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,138,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,139,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,142,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,247,public static class DruidHavingFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,249,public DruidHavingFilterRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,250,super(operand(Filter.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,251,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,277,public static class DruidProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,284,public DruidProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,285,super(operand(Project.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,286,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,289,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,372,public static class DruidPostAggregationProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,379,public DruidPostAggregationProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,380,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,381,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,382,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,383,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,384,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,387,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,427,public static class DruidAggregateRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,434,public DruidAggregateRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,435,super(operand(Aggregate.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,436,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,439,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,473,public static class DruidAggregateProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,480,public DruidAggregateProjectRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,481,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,482,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,483,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,484,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,485,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,488,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,714,public static class DruidSortProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,715,extends SortProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,722,public DruidSortProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,723,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,724,operand(Sort.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,725,operand(Project.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,726,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,735,public static class DruidProjectSortTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,743,public DruidProjectSortTransposeRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,744,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,745,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,746,operand(Sort.class, operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,747,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,755,public static class DruidSortRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,762,public DruidSortRule(RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,763,super(operand(Sort.class, operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,764,relBuilderFactory, null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,767,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,795,public static class DruidProjectFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,796,extends ProjectFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,803,public DruidProjectFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,804,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,805,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,806,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,807,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,808,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,819,public static class DruidFilterProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,820,extends FilterProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,827,public DruidFilterProjectTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,828,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,829,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,830,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,831,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,832,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,833,true, true, relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,842,public static class DruidAggregateFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,843,extends AggregateFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,850,public DruidAggregateFilterTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,851,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,852,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,853,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,854,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,855,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,856,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,865,public static class DruidFilterAggregateTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,866,extends FilterAggregateTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,873,public DruidFilterAggregateTransposeRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,874,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,875,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,876,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,877,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,878,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,879,relBuilderFactory);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,889,public static class DruidAggregateExtractProjectRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,890,extends AggregateExtractProjectRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,897,public DruidAggregateExtractProjectRule(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,898,RelBuilderFactory relBuilderFactory) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,899,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,900,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,901,operand(DruidQuery.class, none())),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,902,relBuilderFactory);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,24,import org.apache.calcite.plan.RelTrait;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,170,final Convention out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,172,ElasticsearchConverterRule(Class<? extends RelNode> clazz, RelTrait in, Convention out,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,173,String description) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,174,super(clazz, in, out, description);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,175,this.out = out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,184,private static final ElasticsearchSortRule INSTANCE =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,185,new ElasticsearchSortRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,187,private ElasticsearchSortRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,188,super(Sort.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,206,private static final ElasticsearchFilterRule INSTANCE = new ElasticsearchFilterRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,208,private ElasticsearchFilterRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,209,super(LogicalFilter.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,227,static final RelOptRule INSTANCE = new ElasticsearchAggregateRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,229,private ElasticsearchAggregateRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,230,super(LogicalAggregate.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,234,public RelNode convert(RelNode rel) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,258,private static final ElasticsearchProjectRule INSTANCE = new ElasticsearchProjectRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,260,private ElasticsearchProjectRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,261,super(LogicalProject.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,26,import java.util.function.Predicate;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,33,static final ConverterRule INSTANCE =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,34,new ElasticsearchToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,41,private ElasticsearchToEnumerableConverterRule(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,42,RelBuilderFactory relBuilderFactory) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,44,ElasticsearchRel.CONVENTION, EnumerableConvention.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverterRule.java,45,relBuilderFactory, "ElasticsearchToEnumerableConverterRule");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,25,import org.apache.calcite.tools.RelBuilderFactory;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,35,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,43,public CsvProjectTableScanRule(RelBuilderFactory relBuilderFactory) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,44,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,45,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,46,operand(CsvTableScan.class, none())),
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,47,relBuilderFactory,
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,45,import java.util.function.Predicate;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,147,private static final GeodeProjectRule INSTANCE = new GeodeProjectRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,149,private GeodeProjectRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,150,super(LogicalProject.class, "GeodeProjectRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,167,final RelTraitSet traitSet = project.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,171,convert(project.getInput(), out),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,183,private static final GeodeAggregateRule INSTANCE = new GeodeAggregateRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,185,GeodeAggregateRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,186,super(LogicalAggregate.class, "GeodeAggregateRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,191,final RelTraitSet traitSet = aggregate.getTraitSet().replace(out);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,207,private static class GeodeSortLimitRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,210,new GeodeSortLimitRule(
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,212,sort -> sort.offset == null);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,214,GeodeSortLimitRule(Predicate<Sort> predicate) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,215,super(operandJ(Sort.class, null, predicate, any()), "GeodeSortLimitRule");
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,237,private static class GeodeFilterRule extends RelOptRule {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,239,private static final GeodeFilterRule INSTANCE = new GeodeFilterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,241,private GeodeFilterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,242,super(operand(LogicalFilter.class, operand(GeodeTableScan.class, none())),
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,333,public void onMatch(RelOptRuleCall call) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,357,protected final Convention out;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,359,GeodeConverterRule(Class<? extends RelNode> clazz, String description) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,360,super(clazz, Convention.NONE, GeodeRel.CONVENTION, description);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,361,this.out = GeodeRel.CONVENTION;
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,30,public static final ConverterRule INSTANCE = new GeodeToEnumerableConverterRule();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,32,private GeodeToEnumerableConverterRule() {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeToEnumerableConverterRule.java,33,super(RelNode.class, GeodeRel.CONVENTION, EnumerableConvention.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,MongoConverterRule(Class<? extends RelNode> clazz, RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,Convention out, String description) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,264,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,266,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,267,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,271,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,287,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,289,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,290,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,294,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,310,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,312,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,313,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,317,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,500,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,502,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,503,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,507,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,26,import java.util.function.Predicate;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,public static final ConverterRule INSTANCE =
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,34,new MongoToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,41,public MongoToEnumerableConverterRule(RelBuilderFactory relBuilderFactory) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,42,super(RelNode.class, (Predicate<RelNode>) r -> true, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,43,EnumerableConvention.INSTANCE, relBuilderFactory,
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,54,private static final PigFilterRule INSTANCE = new PigFilterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,56,private PigFilterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,57,super(LogicalFilter.class, Convention.NONE, PigRel.CONVENTION, "PigFilterRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,60,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,73,private static final PigTableScanRule INSTANCE = new PigTableScanRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,75,private PigTableScanRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,76,super(LogicalTableScan.class, Convention.NONE, PigRel.CONVENTION, "PigTableScanRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,79,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,81,final RelTraitSet traitSet = scan.getTraitSet().replace(PigRel.CONVENTION);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,91,private static final PigProjectRule INSTANCE = new PigProjectRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,93,private PigProjectRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,94,super(LogicalProject.class, Convention.NONE, PigRel.CONVENTION, "PigProjectRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,97,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,110,private static final PigAggregateRule INSTANCE = new PigAggregateRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,112,private PigAggregateRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,113,super(LogicalAggregate.class, Convention.NONE, PigRel.CONVENTION, "PigAggregateRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,116,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,129,private static final PigJoinRule INSTANCE = new PigJoinRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,131,private PigJoinRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,132,super(LogicalJoin.class, Convention.NONE, PigRel.CONVENTION, "PigJoinRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,135,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,30,new PigToEnumerableConverterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,32,private PigToEnumerableConverterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,33,super(RelNode.class, PigRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,24,import org.apache.calcite.tools.RelBuilderFactory;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,26,import java.util.function.Predicate;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,new EnumerableToSparkConverterRule(RelFactories.LOGICAL_BUILDER);
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,public EnumerableToSparkConverterRule(RelBuilderFactory relBuilderFactory) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,43,super(RelNode.class, (Predicate<RelNode>) r -> true,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,44,EnumerableConvention.INSTANCE, SparkRel.CONVENTION, relBuilderFactory,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,48,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,49,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,50,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,51,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,25,import java.util.function.Predicate;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,36,super(RelNode.class, (Predicate<RelNode>) r -> true, out,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,37,SparkRel.CONVENTION, relBuilderFactory, "JdbcToSparkConverterRule");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,94,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,95,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,102,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,103,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,105,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,106,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,107,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,119,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,120,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,122,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,123,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,124,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,134,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,135,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,139,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,140,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,214,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,215,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,224,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,225,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,226,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,227,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,231,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,21,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,25,import org.apache.calcite.rel.core.RelFactories;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,57,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,81,RelFactories.LOGICAL_BUILDER, "proj on filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,84,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,RelFactories.LOGICAL_BUILDER, "filter on proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,91,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,92,operand(LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,93,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,RelFactories.LOGICAL_BUILDER, "filter");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,97,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,98,operand(LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,99,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,RelFactories.LOGICAL_BUILDER, "proj");
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,103,protected SplunkPushDownRule(RelOptRuleOperand rule, String id) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,104,this(rule, RelFactories.LOGICAL_BUILDER, id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,108,protected SplunkPushDownRule(RelOptRuleOperand rule,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,110,super(rule, relBuilderFactory, "SplunkPushDownRule: " + id);
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,115,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,299,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,34,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,300,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,301,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,335,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,122,final Result leftResult = visitChild(0, e.getLeft()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,123,final Result rightResult = visitChild(1, e.getRight()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,152,Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,153,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,165,final Builder builder = x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,173,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,176,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,178,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,180,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,182,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,183,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,186,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,193,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,222,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,255,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,256,parseCorrelTable(e, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,258,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,261,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,340,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,341,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,348,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,353,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,358,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,360,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,377,visitChild(0, modify.getInput()).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,386,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,398,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,430,final Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,159,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,379,final ImmutableMap.Builder<String, RelDataType> builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,380,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,574,implementor().visitChild(0, subQuery.rel).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,994,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1002,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1060,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1113,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1114,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1115,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1116,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1119,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1120,return maxClause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1199,ImmutableMap.of(neededAlias, neededType));
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,71,boolean deep, Resolved resolved) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,72,if (names.size() == 1
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,73,&& names.equals(withItem.name.names)) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,74,final SqlValidatorNamespace ns = validator.getNamespace(withItem);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,75,final Step path = Path.EMPTY.plus(ns.getRowType(), 0, names.get(0),
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,76,StructKind.FULLY_QUALIFIED);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,77,resolved.found(ns, false, null, path, null);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,78,return;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,80,super.resolve(names, nameMatcher, deep, resolved);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTableScan.java,66,planner.addRule(CassandraToEnumerableConverterRule.INSTANCE);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,34,new CassandraToEnumerableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,33,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,90,new EnumerableToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,new EnumerableInterpreterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,117,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,118,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,34,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,35,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,35,new NoneToBindableConverterRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/materialize/LatticeSuggester.java,33,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,34,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,206,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,207,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,275,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,276,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,277,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,278,ProjectRemoveRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,279,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,24,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,25,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,26,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,163,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,169,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,184,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,210,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,243,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,252,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,285,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,83,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,84,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,89,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,90,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,60,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,62,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,71,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,27,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,58,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,65,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,66,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,71,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,72,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,97,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,98,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,24,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,39,new AggregateRemoveRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,40,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,34,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,38,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,64,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,operandJ(Aggregate.class, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,66,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,67,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,71,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,operandJ(Aggregate.class, null, Aggregate::isSimple,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,74,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,75,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,82,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,85,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,86,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,87,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,89,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,90,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,94,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,45,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,46,LogicalAggregate.class, RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,52,new AggregateUnionAggregateRule(LogicalAggregate.class, LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,RelNode.class, LogicalAggregate.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,64,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,65,LogicalUnion.class, RelNode.class, RelNode.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,66,RelFactories.LOGICAL_BUILDER, "AggregateUnionAggregateRule");
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,57,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,57,new AggregateValuesRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,42,new CalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,41,new CalcRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,54,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,55,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,43,new FilterCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,57,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,64,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,35,new FilterMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,55,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,45,new FilterRemoveIsNotDistinctFromRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,44,new FilterTableFunctionTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,60,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,61,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,62,operandJ(TableScan.class, null, FilterTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,63,none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,64,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,68,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,69,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,75,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,76,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,77,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,78,operandJ(TableScan.class, null, FilterTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,79,none()))),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,80,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,82,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,83,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,49,new FilterToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,25,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,71,new IntersectToDistinctRule(LogicalIntersect.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,41,new JoinAddRedundantSemiJoinRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,42,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,54,new JoinAssociateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,56,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,59,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,74,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,20,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,21,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,43,new JoinExtractFilterRule(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,44,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,65,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,71,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,79,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,86,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,88,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,93,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,95,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,102,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,104,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,26,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,107,new JoinToMultiJoinRule(LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,41,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,42,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,43,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,48,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,49,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,50,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,31,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,46,new MaterializedViewFilterScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,73,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,49,new ProjectCalcMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCorrelateTransposeRule.java,50,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,new ProjectFilterTransposeRule(LogicalProject.class, LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,42,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,44,new ProjectRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,44,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,58,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,59,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,60,operandJ(TableScan.class, null, ProjectTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,61,none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,62,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,65,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,66,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,73,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,74,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,75,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,76,operandJ(TableScan.class, null, ProjectTableScanRule::test,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,78,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,83,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,46,new ProjectToCalcRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,79,new CalcToWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,82,new ProjectToLogicalProjectAndWindowRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,new ProjectWindowTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,71,new ReduceDecimalsRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,34,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,106,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,108,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,115,new ProjectReduceExpressionsRule(LogicalProject.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,116,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,124,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,131,new CalcReduceExpressionsRule(LogicalCalc.class, true,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,132,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,41,new SemiJoinFilterTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,50,new SemiJoinJoinTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,38,new SemiJoinRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,62,new ProjectToSemiJoinRule(Project.class, Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,63,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:project");
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,66,new JoinToSemiJoinRule(Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,67,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:join");
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,48,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,49,LogicalJoin.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,32,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,56,new SortProjectTransposeRule(Sort.class, LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,57,RelFactories.LOGICAL_BUILDER, null);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,43,new SortRemoveConstantKeysRule();
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveConstantKeysRule.java,45,private SortRemoveConstantKeysRule() {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,new SortRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,69,new SubQueryProjectRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,72,new SubQueryFilterRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,75,new SubQueryJoinRemoveRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,21,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,33,new UnionEliminatorRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,27,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,28,import org.apache.calcite.rel.logical.LogicalMinus;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,29,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,new UnionMergeRule(LogicalUnion.class, "UnionMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,47,new UnionMergeRule(LogicalIntersect.class, "IntersectMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,48,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,50,new UnionMergeRule(LogicalMinus.class, "MinusMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,51,new UnionPullUpConstantsRule(Union.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,25,import org.apache.calcite.rel.core.Values;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,77,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,78,operandJ(LogicalValues.class, null, Values::isNotEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,79,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,81,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,82,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,83,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,84,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,93,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,94,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,95,operandJ(LogicalValues.class, null, Values::isNotEmpty, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,96,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,98,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,99,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,100,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,101,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,111,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,112,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,113,operandJ(LogicalValues.class, null, Values::isNotEmpty,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,114,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,115,RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,117,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,118,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,119,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,120,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,121,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,41,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,47,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,50,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,54,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,60,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,61,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,123,SemiJoinRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,124,SemiJoinRule.JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,127,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,128,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,129,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,130,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,131,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,132,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,133,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,135,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,SortProjectTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,235,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,236,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,240,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,241,: LoptOptimizeJoinRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,21,import org.apache.calcite.rel.core.RelFactories;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,new CsvProjectTableScanRule(RelFactories.LOGICAL_BUILDER);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,81,planner.addRule(CsvProjectTableScanRule.INSTANCE);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,27,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,83,planner.removeRule(AggregateExpandDistinctAggregatesRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,92,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,93,FilterToCalcRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,182,private static String literalValue(RexLiteral literal) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,183,Object value = literal.getValue2();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,603,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,604,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,606,Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,607,format.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,55,import java.util.Locale;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,60,import java.util.TimeZone;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,78,final TimeZone utc = DateTimeUtils.UTC_ZONE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,80,new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,81,UTC_TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,82,TIMESTAMP_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,83,TIMESTAMP_FORMAT.setTimeZone(utc);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,47,private static final SimpleDateFormat DATE_FORMATTER = getDateFormatter();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,633,private static SimpleDateFormat getDateFormatter() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,634,final SimpleDateFormat dateFormatter = new SimpleDateFormat(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,635,TimeExtractionFunction.ISO_TIME_FORMAT,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,636,Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,637,dateFormatter.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidJsonFilter.java,638,return dateFormatter;
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,97,if (!TimeExtractionFunction.ISO_TIME_FORMAT.equals(format)) {
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,68,public static final String ISO_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,107,return new TimeExtractionFunction(ISO_TIME_FORMAT, null, timeZone, null);
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,148,return new TimeExtractionFunction(ISO_TIME_FORMAT, granularity, timeZone,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2205,scopes.put(node, parentScope);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,211,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1075,final Map<String, RelDataType> newAliases =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1083,needNew ? null : aliases);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,233,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,235,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1457,throw RESOURCE.cannotConvert(o.toString(), toType.toString()).ex();
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,36,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,39,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,42,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,79,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,88,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,90,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,103,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,254,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,261,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,277,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,278,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,281,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,282,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,283,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,310,defineImplementor(RAND, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,311,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,312,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,313,new ReflectiveCallNotNullImplementor(BuiltInMethod.RAND.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,316,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,317,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,318,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,319,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,322,defineImplementor(RAND_INTEGER, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,323,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,324,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,325,null,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,326,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,327,BuiltInMethod.RAND_INTEGER.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,328,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,331,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,332,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,333,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,334,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,352,map.put(PI, (translator, call, nullAs) -> Expressions.constant(Math.PI));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,355,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,356,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,357,defineImplementor(MINUS_DATE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,358,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,359,defineImplementor(EXTRACT, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,360,new ExtractImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,361,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,364,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,365,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,368,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,370,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,371,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,372,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,373,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,374,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,375,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,379,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,380,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,381,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,382,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,384,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,385,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,386,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,387,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,397,new MethodImplementor(BuiltInMethod.IS_EMPTY.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,398,defineImplementor(IS_EMPTY, NullPolicy.NONE, isEmptyImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,399,defineImplementor(IS_NOT_EMPTY, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,400,NotImplementor.of(isEmptyImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,402,new MethodImplementor(BuiltInMethod.IS_A_SET.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,403,defineImplementor(IS_A_SET, NullPolicy.NONE, isASetImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,404,defineImplementor(IS_NOT_A_SET, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,405,NotImplementor.of(isASetImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,417,new MethodImplementor(BuiltInMethod.SUBMULTISET_OF.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,418,defineImplementor(SUBMULTISET_OF, NullPolicy.NONE, subMultisetImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,419,defineImplementor(NOT_SUBMULTISET_OF,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,420,NullPolicy.NONE, NotImplementor.of(subMultisetImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,422,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,424,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,426,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,427,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,429,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,434,map.put(DEFAULT, (translator, call, nullAs) -> Expressions.constant(null));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,437,defineMethod(CURRENT_VALUE, BuiltInMethod.SEQUENCE_CURRENT_VALUE.method, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,438,defineMethod(NEXT_VALUE, BuiltInMethod.SEQUENCE_NEXT_VALUE.method, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,458,defineImplementor(IS_JSON_VALUE, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,460,defineImplementor(IS_JSON_OBJECT, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,462,defineImplementor(IS_JSON_ARRAY, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,464,defineImplementor(IS_JSON_SCALAR, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,466,defineImplementor(IS_NOT_JSON_VALUE, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,468,new MethodImplementor(BuiltInMethod.IS_JSON_VALUE.method)), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,469,defineImplementor(IS_NOT_JSON_OBJECT, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,471,new MethodImplementor(BuiltInMethod.IS_JSON_OBJECT.method)), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,472,defineImplementor(IS_NOT_JSON_ARRAY, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,474,new MethodImplementor(BuiltInMethod.IS_JSON_ARRAY.method)), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,475,defineImplementor(IS_NOT_JSON_SCALAR, NullPolicy.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,477,new MethodImplementor(BuiltInMethod.IS_JSON_SCALAR.method)), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,547,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,548,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,549,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,550,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,551,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,552,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,553,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,554,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,557,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,558,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,561,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,562,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,565,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,566,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,567,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,569,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,576,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,577,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,578,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,579,case SEMI_STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,580,return (translator, call, nullAs) -> implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,582,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,583,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,586,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,596,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,597,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,598,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,599,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,600,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,601,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,603,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,606,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,609,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,610,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,611,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,612,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,613,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,614,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,615,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,616,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,617,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,618,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,619,Expression hasFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,620,Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,621,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,622,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,623,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,624,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,625,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,626,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,630,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,638,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,639,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,640,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,641,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,642,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,643,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,645,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,648,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,651,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,652,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,653,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,654,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,655,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,656,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,657,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,658,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,659,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,660,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,661,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,663,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,664,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,665,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,666,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,667,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,668,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,672,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,676,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,677,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,678,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,679,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,680,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,681,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,682,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,683,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,684,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,685,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,686,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,690,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,691,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,692,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,693,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,694,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,695,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,696,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,697,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,701,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,702,return (translator, call, nullAs) -> {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,703,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,704,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,705,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,707,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,708,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,712,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,713,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,714,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,715,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,716,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,717,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,718,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,721,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,722,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,723,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,724,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,727,private void defineMethodReflective(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,728,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,729,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,730,operator, nullPolicy, new ReflectiveCallNotNullImplementor(method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,731,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,734,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,735,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,736,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,737,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,738,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,739,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,740,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,743,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,744,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,745,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,746,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,747,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,748,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,749,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,750,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,751,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,752,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,755,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,757,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,765,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,799,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,800,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,801,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,803,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,818,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,819,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,820,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,826,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,827,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,831,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,832,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,833,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,834,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,835,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,836,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,837,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,838,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,839,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,840,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,841,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,843,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,845,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,847,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,852,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,853,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,857,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,859,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,860,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,861,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,862,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,863,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,865,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,892,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,893,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,894,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,895,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,896,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,897,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,898,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,899,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,900,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,903,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,904,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,905,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,906,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,907,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,909,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,910,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,913,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,914,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,915,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,916,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,917,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,919,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,921,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,922,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,923,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,926,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,927,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,928,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,929,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,930,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,931,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,932,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,933,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,934,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,939,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,940,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,941,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,942,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,943,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,944,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,945,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,946,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,947,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,950,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,951,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,952,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,953,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,954,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,957,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,958,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,959,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,960,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,961,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,962,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,964,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,965,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,968,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,969,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,970,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,971,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,972,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,975,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,976,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,977,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,980,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,981,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,982,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,983,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,984,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,987,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,988,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,989,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,996,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,997,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,998,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1001,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1002,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1003,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1007,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1008,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1010,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1011,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1015,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1016,final RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1017,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1018,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1019,final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1020,List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1021,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1024,if (nullAs == NullAs.NOT_POSSIBLE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1025,List<Expression> nullHandled = translatedOperands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1026,for (int i = 0; i < translatedOperands.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1027,RexNode arg = call.getOperands().get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1028,Expression e = translatedOperands.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1029,if (!translator.isNullable(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1030,if (nullHandled == translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1031,nullHandled = new ArrayList<>(translatedOperands.subList(0, i));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1033,nullHandled.add(translator.handleNull(e, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1035,nullHandled.add(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1038,translatedOperands = nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1040,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1041,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1042,return translator.handleNull(result, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1100,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1110,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1111,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1112,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1114,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1115,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1116,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1875,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1876,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1877,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1879,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1880,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1890,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1891,translatedOperands.get(2),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1903,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1908,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1909,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1917,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1923,Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1939,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1940,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1941,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1965,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1968,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1972,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1973,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1974,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1975,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1984,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1985,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1994,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1997,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2001,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2002,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2003,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2004,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2008,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2013,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2037,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2038,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2039,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2044,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2045,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2046,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2047,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2064,return callBackupMethodAnyType(translator, call, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2067,final Type type0 = expressions.get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2068,final Type type1 = expressions.get(1).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2076,expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2080,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2081,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2083,Expressions.makeBinary(expressionType, expressions.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2119,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2122,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2126,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2127,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2128,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2129,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2130,final Expression operand = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2131,final UnaryExpression e = Expressions.makeUnary(expressionType, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2132,if (e.type.equals(operand.type)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2137,return Expressions.convert_(e, operand.type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2142,private static class ExtractImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2143,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2144,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2146,(TimeUnitRange) ((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2148,Expression operand = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2191,translatedOperands.get(0), operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2298,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2299,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2300,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2301,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2304,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2305,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2306,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2307,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2309,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2310,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2311,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2313,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2314,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2315,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2316,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2317,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2318,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2320,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2323,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2324,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2325,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2327,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2328,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2330,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2333,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2335,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2337,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2343,private static class CoalesceImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2344,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2345,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2346,return implementRecurse(translator, call.operands, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2350,List<RexNode> operands, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2351,if (operands.size() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2356,translator.translate(operands.get(0), nullAs),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2357,implementRecurse(translator, Util.skip(operands), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2364,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2365,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2367,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2368,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2369,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2372,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2373,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2376,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2378,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2382,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2386,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2388,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2393,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2394,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2395,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2396,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2397,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2398,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2399,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2404,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2407,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2409,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2411,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2412,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2417,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2418,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2419,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2420,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2421,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2423,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2429,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2430,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2431,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2432,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2433,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2434,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2435,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2440,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2441,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2442,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2443,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2444,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2445,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2447,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2448,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2453,final NullPolicy nullPolicy = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2454,return implementNullSemantics0(translator, call, nullAs, nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2455,false, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2461,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2463,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2465,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2475,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2476,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2477,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2478,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2479,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2480,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2481,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2482,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2483,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2484,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2524,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2525,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2526,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2527,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2529,IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2530,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2531,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2534,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2535,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2536,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2537,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2538,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2539,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2540,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2542,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2543,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2544,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2550,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2551,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2553,NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2557,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2561,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2562,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2563,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2564,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2566,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2573,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2574,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2575,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2577,Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2580,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,57,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,64,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,65,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,80,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,101,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,102,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,this.exprNullableMap = Objects.requireNonNull(exprNullableMap);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,this.parent = parent; // may be null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,164,list, Collections.emptyMap(), new RexBuilder(typeFactory), conformance,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,175,Collections.emptyMap(), new RexBuilder(typeFactory), conformance, null,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,176,null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,197,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,199,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,200,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,574,private Expression handleNullUnboxingIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,575,Expression input,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,576,RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,577,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,578,if (RexImpTable.NullAs.NOT_POSSIBLE == nullAs && input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,581,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,583,return handleNull(input, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,596,public Expression handleNull(Expression input, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,597,final Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,600,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,601,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,606,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,607,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,614,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,615,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,616,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,618,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,619,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,620,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,622,return unboxed;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,633,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,634,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,635,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,636,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,638,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,646,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,647,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,648,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,649,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,650,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,651,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,652,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,653,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,654,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,655,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,657,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,658,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,659,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,660,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,661,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,662,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,663,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,664,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,665,case FIELD_ACCESS: {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,666,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,667,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,668,int fieldIndex = fieldAccess.getField().getIndex();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,669,String fieldName = fieldAccess.getField().getName();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,670,switch (target.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,671,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,672,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,673,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,674,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,676,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,677,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,678,Expression y = getter.field(list, fieldIndex, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,679,Expression input = list.append("corInp" + fieldIndex + "_", y); // safe to share
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,680,return handleNullUnboxingIfNecessary(input, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,681,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,682,RexNode rxIndex = builder.makeLiteral(fieldIndex, typeFactory.createType(int.class), true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,683,RexNode rxName = builder.makeLiteral(fieldName, typeFactory.createType(String.class), true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,684,RexCall accessCall = (RexCall) builder.makeCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,685,fieldAccess.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,686,SqlStdOperatorTable.STRUCT_ACCESS,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,687,ImmutableList.of(target, rxIndex, rxName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,688,return translateCall(accessCall, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,691,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,692,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,693,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,695,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,714,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,715,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,716,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,717,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,718,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,719,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,721,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,725,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,726,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,727,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,728,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,730,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,732,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,733,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,734,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,756,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,Collections.emptyMap(), new RexBuilder(typeFactory), conformance,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,null, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1122,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1123,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1124,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1125,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1126,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1127,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1129,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1130,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1131,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1132,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1133,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1134,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1135,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1136,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1137,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1138,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1139,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1140,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1142,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1143,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1144,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1145,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1147,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1148,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1149,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1150,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1151,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1152,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1153,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1154,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1155,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1157,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1158,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1159,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1175,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1176,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1178,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1179,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1188,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1189,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1190,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1191,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1192,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1195,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1200,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1201,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1208,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1209,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1211,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1212,nullable, builder, conformance, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1220,block, ImmutableMap.of(), builder, conformance, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1229,Collections.emptyMap(), builder, conformance, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1232,private RexToLixTranslator withConformance(SqlConformance conformance) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1233,if (conformance == this.conformance) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1234,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1236,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1237,Collections.emptyMap(), builder, conformance, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1240,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1241,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1242,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1243,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1244,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1247,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1250,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1251,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1252,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1253,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1255,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1326,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1328,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1330,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,542,final Map<List<RelTrait>, RelTraitSet> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,547,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,554,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,54,^ type.hashCode();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,185,return Iterables.transform(nodes, SqlNode::getParserPosition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,fieldCounts.add(elementType.getFieldCount());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,inputTypes.add(FlatProductInputType.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,final Expression lambda =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.call(BuiltInMethod.FLAT_PRODUCT.method,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,110,this(host, DEFAULT_CASSANDRA_PORT, keyspace, null, null, parentSchema, name);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,145,this.hook = Hook.TRIMMED.add(node -> {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,95,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,530,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2796,public boolean isAggregate(SqlNode selectNode) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,38,import org.apache.calcite.rel.rules.ProjectSortTransposeRule;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,736,extends ProjectSortTransposeRule {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,391,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,418,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,440,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,441,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,886,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,39,RelFactories.LOGICAL_BUILDER, expr -> false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,60,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,preserveExprCondition, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,69,PushProjector.ExprCondition preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,70,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,Project origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,80,Filter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,85,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,88,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,89,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,92,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,101,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,102,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,103,origProj, origFilter, rel, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,104,RelNode topProject = pushProjector.convertProject(null);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,810,relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2395,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2618,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2619,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2620,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3548,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3549,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3550,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3564,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3574,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3578,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/core/Match.java,229,private static class AggregateFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,258,for (RexNode rex : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,259,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,302,private static class PatternVarFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,315,for (RexNode node : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,316,node.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,327,for (RexNode rex : rexNodeList) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,328,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,34,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,111,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,112,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,265,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,266,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,267,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,134,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,212,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,478,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,199,private static class ExtractFinder extends RexVisitorImpl
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,136,final List<RexNode> newBottomList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,138,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,456,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,39,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,365,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,366,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,367,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,368,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,369,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,370,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,175,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,176,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,177,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,209,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,210,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,230,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,231,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,113,topChildExprs = ImmutableList.copyOf(RexUtil.apply(mapping, topChildExprs));
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,32,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,80,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,117,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,125,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,128,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,129,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,142,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,145,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,146,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,149,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,150,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,153,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,157,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,167,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,171,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,49,predicates.pulledUpPredicates.forEach(p -> p.accept(variableCollector));
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,30,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,127,final List<Comparable> values = new ArrayList<>(call.operands.size());
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,128,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexInterpreter.java,129,values.add(operand.accept(this));
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,114,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,115,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,160,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,161,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,162,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,163,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,892,for (RexNode o : call.getOperands()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,893,if (!o.accept(this)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,894,return false;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,897,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1254,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1256,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1257,return Iterables.transform(nodes, e -> e.accept(shuttle));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1558,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1559,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2056,RexVisitor<Void> visitor =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2057,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2059,occurrences.add(ref.getTableRef());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2060,return super.visitTableInputRef(ref);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2063,for (RexNode e : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2064,e.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2216,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2217,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,373,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,462,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,463,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,465,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,570,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,571,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,573,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,335,private static Pair<List<RexNode>, List<RexNode>> splitProjects(final RexBuilder rexBuilder,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,336,final RelNode input, List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,337,final RelOptUtil.InputReferencedVisitor visitor = new RelOptUtil.InputReferencedVisitor();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,338,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,339,node.accept(visitor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,353,final List<RexNode> aboveNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,354,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,355,aboveNodes.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,356,node.accept(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,357,new RexShuttle() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,359,final int index = positions.indexOf(ref.getIndex());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,360,return rexBuilder.makeInputRef(belowTypes.get(index), index);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,46,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,156,List<String> visitList(List<RexNode> list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,157,final List<String> strings = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,158,for (RexNode node: list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,159,strings.add(node.accept(this));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,161,return strings;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,39,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,46,import java.util.stream.Collectors;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,139,.collect(Collectors.toList());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,140,return rexBuilder.makeCall(SqlStdOperatorTable.NOT_LIKE, operands);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,245,List<Expression> operands = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,246,for (RexNode node : call.getOperands()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,247,final Expression nodeExpr = node.accept(this);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/PredicateAnalyzer.java,248,operands.add(nodeExpr);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,114,final List<String> strings = visitList(call.operands);
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,133,List<String> visitList(List<RexNode> list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,134,final List<String> strings = new ArrayList<>();
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,135,for (RexNode node : list) {
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,136,strings.add(node.accept(this));
geode/src/main/java/org/apache/calcite/adapter/geode/rel/GeodeRules.java,138,return strings;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,52,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,238,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,239,final List<String> strings = new ArrayList<>();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,240,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,241,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,243,return strings;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1572,executor.reduce(rexBuilder, ImmutableList.of(e), reducedValues);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,151,return set.getOrCreateSubset(getCluster(), traitSet1);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,971,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,972,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,973,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,974,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,977,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,978,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,979,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,980,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,988,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,989,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1396,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1397,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1398,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1399,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1320,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1650,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,221,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,326,this.relBuilder = config.getRelBuilderFactory().create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2414,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2415,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AbstractJoinExtractFilterRule.java,41,public abstract class AbstractJoinExtractFilterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,78,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExtractProjectRule.java,51,public class AggregateExtractProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,58,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,64,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,56,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,60,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,92,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,38,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,36,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,173,public static class FilterDateRangeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,47,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,39,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,50,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,40,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,40,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,45,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,69,public class IntersectToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,49,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,52,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,58,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,65,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,68,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,44,public class MaterializedViewFilterScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,71,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,45,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,41,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,37,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,42,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,75,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,47,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,69,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,45,public abstract class SemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,45,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,54,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,34,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,67,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,33,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,42,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,48,public class UnionPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,66,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,97,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,152,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,179,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,214,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,255,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,292,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,36,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,61,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,568,final List<RexNode> removableCasts = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,570,predicates.constantMap, constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,571,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,572,return changed;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,579,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,580,final List<RexNode> reducedExprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,581,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,582,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,583,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,585,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,586,new RexReplacer(simplify, unknownAs, removableCasts, reducedExprs,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,587,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,588,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,592,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,661,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,662,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,665,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,839,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,845,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,852,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,992,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,993,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1007,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1008,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1009,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1010,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1012,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1013,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1014,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1015,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1016,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1024,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1025,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1027,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1028,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1029,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1031,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1032,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1034,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1035,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1036,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1037,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1038,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1039,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1041,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,1042,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,65,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,68,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,137,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,138,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,139,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,124,ImmutableList.of(RelCollations.of(RexUtil.apply(map, fc))));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1239,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,835,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,331,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,225,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,70,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,44,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,45,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,46,values.getTuples());
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,86,() -> RelMdCollation.values(mq, rowType, tuples));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,255,call.transformTo(call.builder().push(sort).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,342,this(clazz, (Predicate<R>) project -> true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,366,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,367,call.transformTo(call.builder().push(single).empty().build());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,125,Preconditions.checkArgument(updateColumnList == null);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,68,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,71,final ImmutableList.Builder<RelFieldCollation> builder =
core/src/main/java/org/apache/calcite/rel/RelCollations.java,72,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,73,final Set<Integer> set = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,74,for (RelFieldCollation fieldCollation : fieldCollations) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,75,if (set.add(fieldCollation.getFieldIndex())) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,76,builder.add(fieldCollation);
core/src/main/java/org/apache/calcite/rel/RelCollations.java,79,return new RelCollationImpl(builder.build());
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,70,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,72,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,78,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,80,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,415,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,244,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,258,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,277,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,263,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,270,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,298,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,303,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,446,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,451,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,29,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,215,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1654,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1657,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1658,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1660,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,118,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,125,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,138,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,145,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,198,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,205,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,225,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,232,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,39,&& rel.equals(((MutableScan) obj).rel);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,43,return rel.hashCode();
core/src/main/java/org/apache/calcite/util/Sources.java,90,this.url = null;
core/src/main/java/org/apache/calcite/util/Sources.java,113,return (url != null ? url : file).toString();
core/src/main/java/org/apache/calcite/util/Sources.java,117,if (url == null) {
core/src/main/java/org/apache/calcite/util/Sources.java,118,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Sources.java,171,if (url != null) {
core/src/main/java/org/apache/calcite/util/Sources.java,197,if (url != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,184,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,187,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,188,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,190,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,191,printScale = true;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2286,int y = m / 12;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2287,y0 += y;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2288,m0 += m - y * 12;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,552,final int updateCount;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,568,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java,61,return rowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/Convention.java,47,boolean canConvertConvention(Convention toConvention);
core/src/main/java/org/apache/calcite/plan/Convention.java,62,boolean useAbstractConvertersForConversion(RelTraitSet fromTraits,
core/src/main/java/org/apache/calcite/plan/Convention.java,63,RelTraitSet toTraits);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,147,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,153,VolcanoPlanner planner, RelOptCluster cluster, RelSubset subset, boolean subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,156,for (RelSubset other : subsets) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,161,|| (subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,162,&& !subset.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,|| (!subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,165,&& !other.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,166,other.getTraitSet(), subset.getTraitSet()))) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,171,subset.getTraitSet().difference(other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,173,boolean addAbstractConverter = true;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,174,int numTraitNeedConvert = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,176,for (RelTrait curOtherTrait : difference) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,177,RelTraitDef traitDef = curOtherTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,178,RelTrait curRelTrait = subset.getTraitSet().getTrait(traitDef);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,182,if (curRelTrait == null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,183,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,184,break;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,187,boolean canConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,188,boolean needConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,189,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,192,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,193,cluster.getPlanner(), curRelTrait, curOtherTrait, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,194,needConvert = !curRelTrait.satisfies(curOtherTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,197,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,198,cluster.getPlanner(), curOtherTrait, curRelTrait, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,199,needConvert = !curOtherTrait.satisfies(curRelTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,202,if (!canConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,203,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,207,if (needConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,208,numTraitNeedConvert++;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,212,if (addAbstractConverter && numTraitNeedConvert > 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,213,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,214,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,215,new AbstractConverter(cluster, subset, null, other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,216,planner.register(converter, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,218,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,219,new AbstractConverter(cluster, other, null, subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,220,planner.register(converter, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,227,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,228,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,233,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,234,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,236,addAbstractConverters(planner, cluster, subset, true);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,242,addAbstractConverters(planner, cluster, subset, false);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,322,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,323,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,324,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,325,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,94,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,104,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,544,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,126,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,190,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,205,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,207,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,208,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,210,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,214,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,215,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,218,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,222,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,225,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,226,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,227,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,231,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,233,return rex;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,410,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,442,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,448,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,450,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,445,routines = filterRoutinesByTypePrecedence(sqlSyntax, routines, argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,506,private static Iterator<SqlOperator> filterRoutinesByParameterType(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,528,final Map<Integer, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,529,for (Ord<String> argName : Ord.zip(argNames)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,530,final int i = function.getParamNames().indexOf(argName.e);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,531,if (i < 0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,532,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,534,map.put(i, argName.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,536,permutedArgTypes = Functions.generate(paramTypes.size(), a0 -> {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,537,if (map.containsKey(a0)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,538,return argTypes.get(map.get(a0));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,540,return null;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,568,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,579,final RelDataType bestMatch = bestMatch(sqlFunctions, argType.i, precList);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,587,final RelDataType paramType = paramTypes.get(argType.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,RelDataTypePrecedenceList precList) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,605,final RelDataType paramType = paramTypes.get(i);
core/src/main/java/org/apache/calcite/schema/Schemas.java,227,return table.scan(root, ImmutableList.of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,235,return table.scan(root, ImmutableList.of(),
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,235,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,239,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,260,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,262,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,268,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,335,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,339,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,340,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,341,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,345,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,346,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,347,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,348,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,355,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,385,Preconditions.checkArgument(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,426,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,432,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,64,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,65,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,68,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,69,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,111,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,114,RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,115,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,119,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,123,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,127,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,131,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,135,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,139,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,142,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,143,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,148,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,149,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,152,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,156,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,165,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,169,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,173,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,177,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,181,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,189,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,199,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,200,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,204,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,205,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,209,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,213,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,217,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,222,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,225,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,229,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,233,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,236,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,237,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,242,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,245,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,246,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,249,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,254,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,255,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,768,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,771,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,772,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,773,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,775,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,383,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,386,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4807,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4808,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4828,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4829,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1856,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1859,if (aggCall.getKind() == SqlKind.ROW_NUMBER) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1860,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1861,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1862,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1870,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1871,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1872,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1873,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1913,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1914,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1915,window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1917,RexNode overNode = rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1919,return overNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5218,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5225,SqlWindow window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5231,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5286,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5287,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5327,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5328,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,152,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,186,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,160,boolean.class, boolean.class),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3205,Function2<TSource, TInner, TResult> resultSelector) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3232,int c = leftKey.compareTo(rightKey);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3261,int c = leftKey.compareTo(leftKey2);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3281,int c = rightKey.compareTo(rightKey2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1129,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1130,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,71,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,76,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1421,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1432,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1438,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,315,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,316,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,318,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,319,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,320,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,321,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,322,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,309,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,310,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,311,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,312,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,313,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,314,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,900,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,903,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,905,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,895,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,734,return s.replaceAll("\r\n", "\n");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,82,+ expr.replaceAll("\"", "") + "\"}");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,159,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,160,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,400,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1945,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1946,call(operand, type, TimeUnit.DAY));
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,131,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,132,case CAST:
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,135,default:
core/src/main/java/org/apache/calcite/rex/RexAnalyzer.java,136,return super.visitCall(call);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,38,(Predicate<Calc>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,35,(Predicate<LogicalFilter>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,35,(Predicate<LogicalProject>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,269,(Predicate<LogicalFilter>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,336,(Predicate<LogicalProject>) RelOptUtil::containsMultisetOrWindowedAgg,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,71,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,135,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,143,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,149,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,154,RelOptUtil::containsMultisetOrWindowedAgg;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3063,public static boolean containsMultisetOrWindowedAgg(Calc calc) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3064,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3066,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3071,public static boolean containsMultisetOrWindowedAgg(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3072,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3074,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3079,public static boolean containsMultisetOrWindowedAgg(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3080,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3082,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,115,return new MysqlSqlDialect(c);
core/src/main/java/org/apache/calcite/sql/SqlDialectFactoryImpl.java,133,return new PostgresqlSqlDialect(c);
core/src/main/java/org/apache/calcite/sql/dialect/PostgresqlSqlDialect.java,40,private static final RelDataTypeSystem POSTGRESQL_TYPE_SYSTEM =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,70,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,74,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,249,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,250,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,459,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,460,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,461,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,462,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,463,+ "' is not unique; classes: " + x);
