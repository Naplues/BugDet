File,Line_number,SRC
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,189,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,271,doRFC2254Encoding(dn), username
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,66,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,67,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,75,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,76,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,101,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,204,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,207,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,208,destroyed = true;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,238,localAndXATransaction.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,22,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,25,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,171,log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,177,log.info("Endpoint failed to process message. Reason: " + e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,258,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,224,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,225,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,228,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,116,serverSessionPool.closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,169,session.run();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,265,int activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,286,protected int closeIdleSessions() {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,172,MessageAvailableConsumer consumer = (MessageAvailableConsumer)client.getConsumer(destination, request.getHeader(WebClient.selectorName));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,175,if (message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,178,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,179,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,181,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,187,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,188,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,192,message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,197,continuation = ContinuationSupport.getContinuation(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,199,if (continuation.isExpired()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,200,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,201,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,204,continuation.setTimeout(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,205,continuation.suspend();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,208,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,209,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,211,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,215,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,218,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,220,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,256,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,263,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,316,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,317,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,319,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,320,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,321,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,323,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,324,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,326,return answer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,351,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,352,Message message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,353,continuation.setAttribute("message", message);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,63,return configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,66,public void setConfiguration(WebConsoleConfiguration configuration) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,67,this.configuration = configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,78,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,79,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,80,if (brokers.size() == 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,81,throw new IOException("No broker could be found in the JMX.");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,ObjectName name = brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,84,return name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,90,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,94,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,95,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,99,public String getBrokerName() throws Exception,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,100,MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,136,if (this.configuration.getJmxUser() != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,137,env.put("jmx.remote.credentials", new String[] {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,138,this.configuration.getJmxUser(),
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,139,this.configuration.getJmxPassword() });
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,144,for (JMXServiceURL url : jmxUrls) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,145,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,146,JMXConnector connector = JMXConnectorFactory.connect(url, env);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,147,connector.connect();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,148,MBeanServerConnection connection = connector
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,149,.getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,151,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,152,if (brokers.size() > 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,153,LOG.info("Connected via JMX to the broker at " + url);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,154,return connector;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,158,exception = e;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,161,if (exception != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,162,if (exception instanceof RuntimeException) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,163,throw (RuntimeException) exception;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,165,throw new RuntimeException(exception);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,168,throw new IllegalStateException("No broker is found at any of the "
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,169,+ jmxUrls.size() + " configured urls");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,197,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,198,ObjectName name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,199,if (this.brokerName == null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,206,Set<ObjectName> brokers = connection.queryNames(name, null);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,210,public void purgeQueue(ActiveMQDestination destination) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,211,QueueViewMBean queue = getQueue(destination.getPhysicalName());
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,212,queue.purge();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,215,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,216,throw new IllegalStateException("not supported");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,221,protected <T> Collection<T> getManagedObjects(ObjectName[] names,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,222,Class<T> type) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,223,MBeanServerConnection connection;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,224,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,225,connection = getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,227,throw new RuntimeException(e);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,230,List<T> answer = new ArrayList<T>();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,231,if (connection != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,232,for (int i = 0; i < names.length; i++) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,233,ObjectName name = names[i];
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,234,T value = (T) MBeanServerInvocationHandler.newProxyInstance(
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,235,connection, name, type, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,236,if (value != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,237,answer.add(value);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,241,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,250,public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception {
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,218,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,219,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,220,Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,221,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,222,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,223,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,224,String dn = name.toString();
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.annotation.PreDestroy;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,24,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,27,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,39,import org.apache.camel.util.ObjectHelper;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,60,public class PooledConnectionFactory implements ConnectionFactory, Service {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,60,private String readTimeoutParameter = "readTimeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,65,private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();
assembly/src/release/example/src/ProducerTool.java,169,if (transacted) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,207,return brokers;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,70,private String readTimeoutParameter = "timeout";
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,connection.close();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,163,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,172,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,174,return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,59,this.pool.incrementReferenceCount();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,125,Set<ObjectName> queryResult = queryNames(query, null);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,51,return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,46,private long firstUsed = lastUsed;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,148,expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,159,if (hasExpired) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,167,|| expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,35,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,43,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,44,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,45,return connection;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,60,public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,112,return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
activemq-xmpp/src/main/java/org/apache/activemq/transport/xmpp/XmppTransport.java,54,import org.jabber.etherx.streams.Features;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,22,import java.util.Enumeration;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,25,import java.util.Properties;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,60,private Set<Principal> principals = new HashSet<Principal>();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,111,user = ((NameCallback)callbacks[0]).getName();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,112,char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,private ConnectionConsumer consumer;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,130,consumer = connection.createDurableConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,138,consumer = connection.createConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,184,throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,20,import java.util.UUID;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,28,import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,51,if (object instanceof DestinationFacade) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,53,if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,54,throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,57,if (!request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,58,throw new UnsupportedOperationException("Possible CSRF attack");
activemq-console/src/main/java/org/apache/activemq/console/command/BstatCommand.java,67,queryTokens.add("--vuew");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,398,sendShutdown.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,132,bridge.start();
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,109,final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,110,if (event.failed.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,112,listener.onServiceRemove(event);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,74,if (info.getDestination().isTemporary() || broker == null || broker.getTempDataStore()==null ) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,79,private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,96,if (!isFull() && matched.isEmpty()  && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,493,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,498,md.setDestination(node.getRegionDestination().getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,499,dispatchedCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,502,if (singleDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,503,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,504,destination = node.getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,506,if (destination != node.getRegionDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,507,singleDestination = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,512,md.setTransmitCallback(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,514,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,515,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,516,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,517,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,523,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,524,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,525,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,501,connectionInfo.setTransportContext(stompTransport.getPeerCertificates());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,34,public X509Certificate[] getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,29,import org.apache.activemq.transport.tcp.SslTransport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,99,public X509Certificate[] getPeerCertificates() {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,103,LOG.debug("Peer Identity has been verified\n");
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,77,SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,20,import java.security.cert.X509Certificate;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,83,public X509Certificate[] getPeerCertificates() {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,84,return null;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,134,private volatile int receiveCounter;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,20,import org.apache.activemq.broker.*;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,21,import org.apache.activemq.broker.jmx.ManagedTransportConnector;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,89,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,59,public SslTransportServer(
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,60,SslTransportFactory transportFactory,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,61,URI location,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,62,SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,397,throw new ExceededMaximumConnectionsException("Exceeded the maximum " +
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,405,options.put("maxInactivityDurationInitalDelay",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,407,options.put("minmumWireFormatVersion",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,425,Transport configuredTransport =
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,443,public int getSoTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,444,return soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,447,public void setSoTimeout(int soTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,448,this.soTimeout = soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,451,public int getSocketBufferSize() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,452,return socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,455,public void setSocketBufferSize(int socketBufferSize) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,456,this.socketBufferSize = socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,459,public int getConnectionTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,460,return connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,463,public void setConnectionTimeout(int connectionTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,464,this.connectionTimeout = connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportServer.java,37,import org.apache.activemq.transport.reliable.Replayer;
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,73,out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,88,subscriptionRecoveryPolicy = new NoSubscriptionRecoveryPolicy();
kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java,110,Sequence sequence = getHead();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,26,import org.apache.activemq.transport.tcp.TimeStampStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,555,checkConnected();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,558,connected.set(false);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,94,cs.removeTransactionState(info.getTransactionId());
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,335,tx.free(child.getPage());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,50,public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,51,addDestination(context, info.getDestination(),true);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,52,super.addDestinationInfo(context, info);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,56,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,64,return super.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,76,throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to create: " + destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,87,final SecurityContext securityContext = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,88,if (securityContext == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,89,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,91,Set<?> allowedACLs = null;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,92,if (!destination.isTemporary()) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,93,allowedACLs = authorizationMap.getAdminACLs(destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,95,allowedACLs = authorizationMap.getTempDestinationAdminACLs();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,98,if (!securityContext.isBrokerContext() && allowedACLs != null && !securityContext.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,105,public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,107,final SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,108,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,109,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,118,if (!subject.isBrokerContext() && allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,119,throw new SecurityException("User " + subject.getUserName() + " is not authorized to read from: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,121,subject.getAuthorizedReadDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,150,SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,151,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,152,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,154,if (!subject.isBrokerContext() && info.getDestination() != null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,162,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,163,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,165,subject.getAuthorizedWriteDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,173,SecurityContext subject = producerExchange.getConnectionContext().getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,174,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,175,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,177,if (!subject.isBrokerContext() && !subject.getAuthorizedWriteDests().contains(messageSend.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,186,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,187,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,189,subject.getAuthorizedWriteDests().put(messageSend.getDestination(), messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,843,synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,844,deliveredMessages.remove(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,847,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1066,MessageAck ack = new MessageAck(md,MessageAck.INDIVIDUAL_ACK_TYPE,1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,996,session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,320,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,321,setupStaticDestinations();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,323,LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") was interrupted during establishment.");
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,53,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,54,super(broker,usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,55,this.pending = new StoreDurableSubscriberCursor(broker,context.getClientId(), info.getSubscriptionName(), info.getPrefetchSize(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,82,TopicMessageStore store = (TopicMessageStore)destination.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,84,this.enqueueCounter+=store.getMessageCount(subscriptionKey.getClientId(),subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,101,public void activate(SystemUsage memoryManager, ConnectionContext context,
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,102,ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,116,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,117,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,130,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,131,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,208,synchronized(pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,291,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,108,sub.activate(usageManager, context, info);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,235,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,238,response.setStatus(HttpServletResponse.SC_OK);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,37,return load(classDesc.getName(), cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,56,try {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Class.forName(className, false, cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,60,if (clazz != null) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,61,return clazz;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,63,return Class.forName(className, false, FALLBACK_CLASS_LOADER);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1933,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1934,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1935,if (s.isInUse(destination)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2206,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2207,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2208,s.close(command.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2211,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2212,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2213,s.setPrefetchSize(command.getConsumerId(), command.getPrefetch());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,189,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,194,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,401,throw new JMSException(
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,57,timer.purge();//remove cancelled TimerTasks
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,59,return new HttpClientTransport(textWireFormat, location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,44,return new HttpsClientTransport(asTextWireFormat(wf), location);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,542,if (!started.get()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,44,protected Connection connection;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,45,protected boolean stopping;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,137,if (connection != null && !connection.isClosed()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,139,connection.rollback();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,141,LOG.warn("Exception while rollbacking the connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,143,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,144,connection.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,146,LOG.debug("Exception while closing connection on shutdown", ignored);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,151,LOG.warn("Exception while checking close status of connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,30,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,33,this.blobTransferPolicy = transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,35,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,40,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,45,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,29,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,75,private final List<ObjectName> registeredMBeanNames = new CopyOnWriteArrayList<ObjectName>();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,125,for (Iterator<ObjectName> iter = registeredMBeanNames.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,126,ObjectName name = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,308,this.registeredMBeanNames.add(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,327,if (beanServer != null && beanServer.isRegistered(name) && this.registeredMBeanNames.remove(name)) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,328,beanServer.unregisterMBean(name);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,205,if (destination == info.getDestination()) {
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,20,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,33,import org.springframework.core.io.ClassPathResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,34,import org.springframework.core.io.FileSystemResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,36,import org.springframework.core.io.UrlResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,37,import org.springframework.util.ResourceUtils;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,168,this.messageAuthorizationPolicy = connector.getMessageAuthorizationPolicy();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,950,LOG.warn("cannot create async transport stopper thread.. not waiting for stop to complete, reason:", t);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,961,protected void doStop() throws Exception, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,962,LOG.debug("Stopping connection: " + transport.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,974,LOG.trace("Exception caught stopping", ignore);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,980,LOG.debug("Could not stop transport: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1011,LOG.debug("Cleaning up connection resources: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1021,LOG.debug("Connection Stopped: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,295,: taskRunnerFactory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,52,super(connector, transport, broker, factory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnector.java,52,return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), managementContext, connectorName);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,48,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,128,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,317,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,319,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,320,return;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,322,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,323,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,324,connected = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,330,if (connectedTransport.get() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,331,transportToStop = connectedTransport.getAndSet(null);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,333,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,335,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,336,sleepMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,338,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,33,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,160,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,294,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,295,ServiceStopper ss = new ServiceStopper();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,297,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,298,return;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,300,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,301,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,302,connected=false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,304,for (Iterator<FanoutTransportHandler> iter = transports.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,305,FanoutTransportHandler th = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,306,if (th.transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,307,ss.stop(th.transport);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,311,LOG.debug("Stopped: " + this);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,312,ss.throwFirstException();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,314,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,536,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,19,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,20,import java.util.concurrent.ScheduledThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,21,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,44,this("ActiveMQ Task", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,85,execute(runnable, "ActiveMQ Task");
kahadb/src/main/java/org/apache/kahadb/util/Sequence.java,55,return first == last ? "" + first : first + "-" + last;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,90,Object value = method.invoke(target, new Object[] {});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,197,setter.invoke(target, new Object[] {value});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,200,setter.invoke(target, new Object[] {convert(value, setter.getParameterTypes()[0])});
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,17,package org.apache.activemq.util;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,19,import java.beans.PropertyEditorSupport;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,22,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,25,public class StringArrayEditor extends PropertyEditorSupport {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,27,public void setAsText(String text) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,28,if (text == null || text.length() == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,29,setValue(null);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,31,StringTokenizer stok = new StringTokenizer(text, ",");
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,32,final List<String> list = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,34,while (stok.hasMoreTokens()) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,35,list.add(stok.nextToken());
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,38,Object array = list.toArray(new String[list.size()]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,40,setValue(array);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,44,public String getAsText() {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,45,Object[] objects = (Object[]) getValue();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,46,if (objects == null || objects.length == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,47,return null;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,50,StringBuffer result = new StringBuffer(String.valueOf(objects[0]));
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,51,for (int i = 1; i < objects.length; i++) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,52,result.append(",").append(objects[i]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,55,return result.toString();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,21,import java.lang.reflect.Array;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,30,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,880,systemUsage.getMemoryUsage().setLimit(1024 * 1024 * 64); // Default
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,795,checkClosed();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,38,protected boolean batchResetNeeded = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,57,clear();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,52,public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,55,private boolean stopped;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,153,enqueueCounter++;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,790,void readPage(long pageId, byte[] data) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1636,LOG.warn("Async task tunner failed to wakeup ", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,449,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1205,protected void waitStarted() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1206,startedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1210,protected void clearDownSubscriptions() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1211,subscriptionMapByLocalId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1212,subscriptionMapByRemoteId.clear();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,930,return storeSize.get();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,194,protected AtomicLong storeSize = new AtomicLong(0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,968,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,328,backups.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,339,if (transportToStop != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,340,transportToStop.stop();
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,285,throw new IOException("BTree corrupted: Cylce detected.");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,200,if (uri.getQuery() != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,201,return false;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,203,String ssp = stripPrefix(uri.getRawSchemeSpecificPart().trim(), "(").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,204,ssp = stripPrefix(ssp, "//").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,205,try {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,206,new URI(ssp);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,208,return false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,325,for (BackupTransport t : backups) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,326,t.setDisposed(true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,960,sessionTaskRunner = new TaskRunnerFactory("ActiveMQ Session Task", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000, isUseDedicatedTaskRunner());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,38,if (rc == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,39,return null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,41,return OpenTypeSupport.convert(rc);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,968,pageInMessages(false);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,189,headers.put(name, value);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,27,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,68,if (!brokerURL.getScheme().equals("ssl")) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,69,return super.createTransport();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,73,SslTransportFactory sslFactory = new SslTransportFactory();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,74,SslContext ctx = new SslContext(keyManager, trustManager, secureRandom);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,75,SslContext.setCurrentSslContext(ctx);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,76,return sslFactory.doConnect(brokerURL);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,346,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,347,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,362,void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,273,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,274,next.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,264,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,275,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,284,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,285,getNext().fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,70,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,378,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,379,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,385,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,386,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,480,if (advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,481,broker.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,75,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,151,destination.setAdvisdoryForFastProducers(isAdvisdoryForFastProducers());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,628,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,629,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,635,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,636,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,501,public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,505,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,51,private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,194,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,201,consumers.add(subscription);
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,114,if (attempt > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,153,throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,161,oldMessages = messageEvictionStrategy.evictMessages(list);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,162,for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,163,ref.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,168,messagesToEvict = oldMessages.length;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,169,for (int i = 0; i < messagesToEvict; i++) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,170,MessageReference oldMessage = oldMessages[i];
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,171,discard(oldMessage);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,280,destination.getDestinationStatistics().getInflight().subtract(ack.getMessageCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,386,if (enableAudit && audit==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,394,return getDispatchedQueueSize()  >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,465,private void dispatchMatched() throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,400,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,842,public void dumpTables(Connection c) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,843,printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,858,ResultSetMetaData metaData = set.getMetaData();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,336,ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,337,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,338,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,339,fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,349,ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,350,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,351,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,352,fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,145,boolean inProgressClearRequiredFlag;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,668,inProgressClearRequiredFlag = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,674,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,676,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,689,inProgressClearRequiredFlag = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DatabaseLocker.java,41,boolean keepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,155,public boolean keepAlive() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,606,LOG.error("Failed to get database when trying keepalive: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,615,LOG.info("No longer able to keep the exclusive lock so giving up being a master");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,91,+ "( ID " + longDataType + " NOT NULL, TIME " + longDataType
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,29,private BrokerService broker;
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,51,LOG.info("Stopping the broker due to IO exception, " + exception, exception);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,230,int intialParen = ssp.indexOf("(");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,231,if (intialParen == 0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,232,rc.host = ssp.substring(0, intialParen);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,238,p = ssp.lastIndexOf(")");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,239,componentString = ssp.substring(intialParen + 1, p);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,382,public int indexOfParenthesisMatch(String str) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,383,int result = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,385,return result;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,21,import org.apache.activemq.util.HexSupport;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,40,void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,50,void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,54,void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,152,adapter.doRemoveMessage(c, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,285,TransactionContext c = persistenceAdapter.getTransactionContext();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,286,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,289,JDBCPersistenceAdapter.log("JDBC Failure: ", e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,290,throw IOExceptionSupport.create("Failed to get store sequenceId for messageId: " + messageId +", on: " + destination + ". Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,292,c.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,294,return result;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,220,transactionStore = new MemoryTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,115,+ "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, ?)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,372,+ " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,383,+ " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,21,import java.io.OutputStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,55,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,199,long expiration, byte priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,311,public void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,315,s = c.getConnection().prepareStatement(this.statements.getRemoveMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,320,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,386,String subscriptionName, long seq, long prio) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,395,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,747,public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,748,String clientId, String subscriberName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,752,s = c.getConnection().prepareStatement(this.statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,753,s.setString(1, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,754,s.setString(2, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,755,s.setString(3, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,757,if (!rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,758,return null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,760,return getBinaryData(rs, 1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,886,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,887,PreparedStatement s = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,888,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,889,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,890,s = c.getConnection().prepareStatement(this.statements.getLastProducerSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,891,s.setString(1, id.toString());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,892,rs = s.executeQuery();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,893,long seq = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,894,if (rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,895,seq = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,897,return seq;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,899,close(rs);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,900,close(s);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,47,ConcurrentHashMap<Object, Tx> inflightTransactions = new ConcurrentHashMap<Object, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,48,ConcurrentHashMap<TransactionId, Tx> preparedTransactions = new ConcurrentHashMap<TransactionId, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,49,final PersistenceAdapter persistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,54,private final ArrayList<AddMessageCommand> messages = new ArrayList<AddMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,56,private final ArrayList<RemoveMessageCommand> acks = new ArrayList<RemoveMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,155,return new ProxyTopicMessageStore(messageStore) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,182,public void prepare(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,232,public void rollback(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,214,if (tx == null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,215,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,216,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,218,return;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,22,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,23,import java.util.concurrent.Future;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,221,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,222,tx.commit();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,223,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,224,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,163,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,79,requestTimeout = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,112,String point = "activemq:"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,114,+ "?requestTimeout=" + requestTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,116,String body = (String)client.getProducerTemplate().requestBody(point, text);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,119,writeMessageResponse(response.getWriter(), answer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,121,IOException ex = new IOException();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,122,ex.initCause(e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,123,throw ex;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,129,long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,174,message = (Message)request.getAttribute("message");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,258,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,259,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,261,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,265,writer.print(object.toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,275,String clientId = request.getParameter("clientId");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,276,if (clientId != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,277,synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,278,LOG.debug("Getting local client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,279,WebClient client = clients.get(clientId);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,280,if (client == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,281,LOG.debug("Creating new client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,282,client = new WebClient();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,283,clients.put(clientId, client);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,285,return client;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,289,return WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,357,continuation.resume();
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,27,import org.apache.activemq.ActiveMQConnection;
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,28,import org.apache.commons.pool.ObjectPoolFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,380,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,381,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,383,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,387,writer.print(object.toString());
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,115,super.addSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,130,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,131,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,133,subscriptionRecoveryPolicy.recover(context, this, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,141,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,142,consumers.add(sub);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,45,if (keyPassword == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,48,if (keyStoreType != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,51,if (secureRandomCertficateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,54,if (keyCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,57,if (trustCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,60,if (protocol != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,306,dispatched.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,144,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,150,topic.deactivate(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,154,for (final MessageReference node : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,156,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,157,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,158,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(count.intValue() + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,160,redeliveredMessages.put(node.getMessageId(), Integer.valueOf(1));
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,163,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,164,pending.addMessageFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,167,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,170,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,171,dispatched.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,173,if (!keepDurableSubsActive && pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,174,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,249,synchronized (pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,263,synchronized(dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,23,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,59,protected final List<MessageReference> dispatched = new CopyOnWriteArrayList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,69,private final Object dispatchLock = new Object();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,214,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1044,getRegionSubscriptions(consumerInfo.getDestination().isTopic());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1104,private final Collection<Subscription> getRegionSubscriptions(boolean isTopic) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1105,RegionBroker region = (RegionBroker) brokerService.getRegionBroker();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1107,(isTopic ? region.getTopicRegion() : region.getQueueRegion());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1108,return abstractRegion.getSubscriptions().values();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,146,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,48,if (matchesSomeConsumer(message, dest)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,54,private boolean matchesSomeConsumer(Message message, Destination dest) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/SelectorAwareVirtualTopicInterceptor.java,60,for (Subscription sub: subs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,50,return new ActiveMQQueue(prefix + original.getPhysicalName() + postfix);
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,54,if( lockCounter>0 ) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,59,if (System.getProperty(getVmLockKey()) != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,60,throw new IOException("File '" + file + "' could not be locked as lock is already held for this jvm.");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,62,if (lock == null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,63,readFile = new RandomAccessFile(file, "rw");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,64,IOException reason = null;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,65,try {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,68,reason = IOExceptionSupport.create("File '" + file + "' could not be locked.",e);
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,70,if (lock != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,71,lockCounter++;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,72,System.setProperty(getVmLockKey(), new Date().toString());
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,75,closeReadFile();
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,76,if (reason != null) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,77,throw reason;
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,79,throw new IOException("File '" + file + "' could not be locked.");
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,93,if( lockCounter!=0 ) {
kahadb/src/main/java/org/apache/kahadb/util/LockFile.java,108,if( deleteOnUnlock ) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,38,public class JmDNS
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,59,protected boolean closed = false;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,181,public JmDNS() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,184,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,199,public JmDNS(InetAddress addr) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,201,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,217,private void init(InetAddress address, String name) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,257,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,268,private void openMulticastSocket(HostInfo hostInfo) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,293,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,374,public InetAddress getInterface() throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,412,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,462,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,500,public void addServiceTypeListener(ServiceTypeListener listener) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,597,public void registerService(ServiceInfo info) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,612,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,648,new Canceler(info, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,651,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,655,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,687,Object lock = new Object();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,688,new Canceler(list, lock).start();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,691,synchronized (lock) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,692,if (!closed) {
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,693,lock.wait();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,741,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,763,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,781,do
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,817,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,825,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,923,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,940,private void handleResponse(DNSIncoming msg) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,962,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,968,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,997,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1019,private void handleQuery(DNSIncoming in, InetAddress addr, int port) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1032,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1042,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1062,DNSOutgoing addAnswer(DNSIncoming in, InetAddress addr, int port, DNSOutgoing out, DNSRecord rec) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1068,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1089,private void send(DNSOutgoing out) throws IOException
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1096,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1112,class SocketListener implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1116,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1128,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1148,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1175,private class RecordReaper extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1234,private class Prober extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1270,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1280,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1315,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1370,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1403,private class Announcer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1463,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1517,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1543,private class Renewer extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1603,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1657,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1683,private class Responder extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1717,|| q.type == DNSConstants.TYPE_TXT
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1718,|| q.type == DNSConstants.TYPE_A
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1719,|| q.type == DNSConstants.TYPE_AAAA
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1721,|| services.containsKey(q.name.toLowerCase()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1754,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1794,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1805,case DNSConstants.TYPE_A:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1809,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1812,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1814,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1816,case DNSConstants.TYPE_AAAA:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1819,DNSRecord answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1822,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1824,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1826,case DNSConstants.TYPE_PTR:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1833,ServiceInfo info = (ServiceInfo) serviceIterator.next();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1838,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1841,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1843,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1846,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1848,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1849,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1850,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1858,answers.add(new DNSRecord.Pointer("_services._mdns._udp.local.", DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, (String) serviceTypeIterator.next()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1861,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1865,case DNSConstants.TYPE_TXT:
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1867,ServiceInfo info = (ServiceInfo) services.get(q.name.toLowerCase());
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1870,DNSRecord answer = localHost.getDNS4AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1873,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1875,answer = localHost.getDNS6AddressRecord();
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1878,answers.add(answer);
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1880,answers.add(new DNSRecord.Pointer(info.type, DNSConstants.TYPE_PTR, DNSConstants.CLASS_IN, DNSConstants.DNS_TTL, info.getQualifiedName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1881,answers.add(new DNSRecord.Service(info.getQualifiedName(), DNSConstants.TYPE_SRV, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.priority, info.weight, info.port, localHost.getName()));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1882,answers.add(new DNSRecord.Text(info.getQualifiedName(), DNSConstants.TYPE_TXT, DNSConstants.CLASS_IN | DNSConstants.CLASS_UNIQUE, DNSConstants.DNS_TTL, info.text));
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1884,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1886,default :
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1889,break;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1948,private class TypeResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1962,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1977,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,1984,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2008,private class ServiceResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2028,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2041,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2052,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2059,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2083,private class ServiceInfoResolver extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2105,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2127,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2135,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2155,private class Canceler extends TimerTask
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2207,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2234,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2239,closed=true;
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2257,private class Shutdown implements Runnable
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2298,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2433,else
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2444,try
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2482,private static class ServiceCollector implements ServiceListener
activemq-jmdns_1.0/src/main/java/org/apache/activemq/jmdns/JmDNS.java,2564,else
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,69,String key = (String)entry.getKey();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,70,String value = (String)entry.getValue();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,72,if (key.startsWith("java.naming.queue")) {
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,73,String key1 = key.substring("java.naming.queue.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,74,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,75,environment1.put("queue." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,77,String key1 = key.substring("java.naming.topic.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,78,key1 = key1.replace('.', '/');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,79,environment1.put("topic." + key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,81,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,82,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,84,String key1 = key.substring("java.naming.".length());
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,85,environment1.put(key1, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,90,value = value.replace(';', ',');
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,91,environment1.put(Context.PROVIDER_URL, value);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,93,environment1.put(key, value);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,85,public ConnectionConsumer createConnectionConsumer(Destination destination, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,87,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,89,.createConnectionConsumer(destination, selector, serverSessionPool, maxMessages);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,92,public ConnectionConsumer createConnectionConsumer(Topic topic, String s,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,94,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,98,public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,100,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,124,public ConnectionConsumer createConnectionConsumer(Queue queue, String selector,
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,126,throws JMSException {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,133,return (QueueSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,137,return (TopicSession)createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,141,return pool.createSession(transacted, ackMode);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,166,return (ActiveMQSession)getConnection().createSession(key.isTransacted(), key.getAckMode());
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,46,import javax.jms.Session;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,165,return getInternalSession().createTemporaryQueue();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,169,return getInternalSession().createTemporaryTopic();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,277,if (messages.isRecoveryRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,162,if (keepDurableSubsActive&& pending.isTransient()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractPendingMessageCursor.java,66,audit=null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,67,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,72,statement = connection.prepareStatement(sql);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,73,statement.execute();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,113,if (null != statement) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,115,statement.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,119,statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,156,PreparedStatement statement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,159,statement = connection.prepareStatement(statements.getLockUpdateStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,160,statement.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,161,int rows = statement.executeUpdate();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,168,if (statement != null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,170,statement.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,81,nonPersistent.stop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,82,nonPersistent.gc();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,392,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,405,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,417,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,435,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,444,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,455,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,481,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,504,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,671,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,687,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,697,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,711,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,881,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,908,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,20,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,21,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,22,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,23,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,25,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,26,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,27,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,28,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,29,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerStore.java,30,import java.util.Map.Entry;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,60,public void doStop() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,61,if (isStarting()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,62,setPendingStop(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,63,return;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,65,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,66,unregisterMBean(byClientIdName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,67,unregisterMBean(byAddressName);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,68,byClientIdName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,69,byAddressName = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,71,super.doStop();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreQueueCursor.java,158,pendingCount = persistent.size() + nonPersistent.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,103,if(!isSlowConsumer()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,104,setSlowConsumer(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,105,for (Destination dest: destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,106,dest.slowConsumer(getContext(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,187,prefetchExtension = 0;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,238,+ getPendingQueueSize() + ", dispatched=" + dispatchCounter + ", inflight=" + dispatched.size() + ", prefetchExtension=" + this.prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,264,for (Iterator iter = dispatched.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,265,MessageReference node = (MessageReference) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,60,protected int prefetchExtension;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,94,final long dispatchCounterBeforePull;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,95,synchronized(this) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,96,prefetchExtension++;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,97,dispatchCounterBeforePull = dispatchCounter;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,101,for (Destination dest : destinations) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,102,dest.iterate();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,104,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,108,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,110,if (pull.getTimeout() == -1) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,112,add(QueueMessageReference.NULL_MESSAGE);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,113,dispatchPending();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,115,if (pull.getTimeout() > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,116,scheduler.executeAfterDelay(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,118,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,119,pullTimeout(dispatchCounterBeforePull);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,134,synchronized (pendingLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,135,if (dispatchCounterBeforePull == dispatchCounter) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,154,pending.addMessageLast(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,207,assertAckMatchesDispatched(ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,256,if (ack.getLastMessageId().equals(messageId)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,259,prefetchExtension = Math.max(0, prefetchExtension - index);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,262,prefetchExtension = Math.max(prefetchExtension, index);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,311,prefetchExtension = Math.max(prefetchExtension, index + 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,372,prefetchExtension = Math.max(0, prefetchExtension
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,373,- (index + 1));
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,390,if (callDispatchMatched && destination != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,412,protected void assertAckMatchesDispatched(MessageAck ack) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,471,return dispatched.size() - prefetchExtension >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,478,return (dispatched.size() - prefetchExtension) <= (info.getPrefetchSize() * .4);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,485,return (dispatched.size() - prefetchExtension) >= (info.getPrefetchSize() * .9);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,490,return info.getPrefetchSize() + prefetchExtension - dispatched.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,550,for (MessageReference r : dispatched) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,551,if( r.getRegionDestination() == destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,632,prefetchExtension = Math.max(0, prefetchExtension - 1);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,660,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,698,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,700,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,702,return md;
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,704,MessageDispatch md = new MessageDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,705,md.setConsumerId(info.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,709,return md;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,121,getConnection().setClientID(clientID);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,97,public synchronized void run() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,266,DestinationView view = null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,267,removeAndRemember(topics, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,268,removeAndRemember(queues, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,269,removeAndRemember(temporaryQueues, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,270,removeAndRemember(temporaryTopics, key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,292,private void removeAndRemember(Map<ObjectName, DestinationView> map, ObjectName key, DestinationView view) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,423,LOG.info(configuration.getBrokerName() + " bridge to " + remoteBrokerName + " stopped");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,93,if (peer.async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,95,peer.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,97,transportListener = peer.transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,112,dispatch(peer, transportListener, command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,115,public void dispatch(VMTransport transport, TransportListener transportListener, Object command) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,120,transport.receiveCounter++;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,121,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,126,public void start() throws Exception {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,133,Object command;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,136,dispatch(this, transportListener, command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,214,if (command != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,220,return !mq.isEmpty();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,329,protected void wakeup() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,330,if (async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,336,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,337,taskRunner.wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,339,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,368,throw new IOException("Not supported");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,63,private volatile int receiveCounter;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,27,import org.apache.activemq.thread.TaskRunnerFactory;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,28,import org.apache.activemq.thread.Valve;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,34,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,50,protected boolean disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,55,protected LinkedBlockingQueue<Object> messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,56,protected boolean started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,59,private TaskRunner taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,60,private final Object lazyInitMutext = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,61,private final Valve enqueueValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,75,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,83,TransportListener transportListener=null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,86,peer.enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,88,if (peer.disposed || peer.stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,92,if (peer.started) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,94,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,100,peer.getMessageQueue().put(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,109,peer.enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,116,if( transportListener!=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,117,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,118,transportListener.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,127,if (transportListener == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,128,throw new IOException("TransportListener not set.");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,130,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,131,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,132,if (messageQueue != null && !async) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,134,while ((command = messageQueue.poll()) != null && !stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,135,receiveCounter++;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,139,started = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,140,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,142,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,146,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,147,stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,152,stopping.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,155,if( enqueueValve.isOn() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,164,TaskRunner tr = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,165,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,166,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,167,if (!disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,168,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,169,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,170,if (taskRunner != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,171,tr = taskRunner;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,172,taskRunner = null;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,176,stopping.set(false);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,177,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,179,if (tr != null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,180,tr.shutdown(1000);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,193,final TransportListener tl;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,194,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,196,enqueueValve.increment();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,197,tl = transportListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,198,if (!started || disposed || tl == null || stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,199,if( stopping.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,202,getMessageQueue().clear();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,204,return false;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,209,enqueueValve.decrement();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,212,LinkedBlockingQueue<Object> mq = getMessageQueue();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,215,if( command == DISCONNECT ) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,216,tl.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,218,tl.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,228,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,231,this.transportListener = commandListener;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,232,wakeup();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,237,throw new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,241,private LinkedBlockingQueue<Object> getMessageQueue() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,242,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,243,if (messageQueue == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,244,messageQueue = new LinkedBlockingQueue<Object>(this.asyncQueueDepth);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,246,return messageQueue;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,331,synchronized (lazyInitMutext) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,332,if (taskRunner == null) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,348,public boolean isDisposed() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,349,return disposed;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,352,public boolean isConnected() {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,353,return started;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,356,public void reconnect(URI uri) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,357,throw new IOException("Not supported");
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,367,public void updateURIs(boolean reblance,URI[] uris) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,55,outputStream.write(0);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompConnection.java,64,outputStream.write(0);
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,108,if (jmsDestination == null) {
activemq-web/src/main/java/org/apache/activemq/web/DestinationFacade.java,133,return new String[]{"GET", "POST"};
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1042,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,112,protected final Map<MessageId, Runnable> messagesWaitingForSpace = Collections
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,113,.synchronizedMap(new LinkedHashMap<MessageId, Runnable>());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1623,if (optimizedDispatch || isSlave()) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,47,public abstract class ActiveMQDestination extends JNDIBaseStorable implements DataStructure, Destination, Externalizable, Comparable {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2153,protected void startDestinationsInPersistenceStore(Broker broker) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2154,Set destinations = destinationFactory.getDestinations();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2155,if (destinations != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2156,Iterator iter = destinations.iterator();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2157,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2158,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2159,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2160,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2161,adminConnectionContext = context;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2162,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2164,while (iter.hasNext()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2165,ActiveMQDestination destination = (ActiveMQDestination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2166,broker.addDestination(adminConnectionContext, destination,false);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,51,public JDBCMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQDestination destination, ActiveMQMessageAudit audit) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,45,public JDBCTopicMessageStore(JDBCPersistenceAdapter persistenceAdapter, JDBCAdapter adapter, WireFormat wireFormat, ActiveMQTopic topic, ActiveMQMessageAudit audit) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,285,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,302,answer = tempQueueRegion.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,305,answer = tempTopicRegion.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,452,demandConsumerDispatched++;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,453,if (demandConsumerDispatched > (demandConsumerInfo.getPrefetchSize() * .75)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,454,remoteBroker.oneway(new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, demandConsumerDispatched));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,455,demandConsumerDispatched = 0;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,589,LOG.debug(configuration.getBrokerName() + " bridging sub on " + localBroker + " from " + remoteBrokerName + " : " + info);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1326,break;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,20,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,21,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,22,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,23,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,24,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,25,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,26,import java.util.Properties;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,27,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,28,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,29,import java.util.concurrent.CountDownLatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,30,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,31,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,32,import java.util.concurrent.atomic.AtomicInteger;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,33,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,34,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,36,import javax.transaction.xa.XAResource;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,21,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/BackupTransport.java,22,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,20,import java.io.BufferedReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,22,import java.io.FileReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,24,import java.io.InputStreamReader;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,25,import java.io.InterruptedIOException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,26,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,27,import java.net.MalformedURLException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,28,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,29,import java.net.URL;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,30,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,31,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,32,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,33,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,34,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,35,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,36,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,37,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,38,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,39,import java.util.concurrent.atomic.AtomicReference;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,815,BackupTransport bt = backups.remove(0);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1028,List<URI> add = new ArrayList<URI>();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1030,Set<URI> set = new HashSet<URI>();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1033,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1034,set.add(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1037,for (URI uri : set) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1038,if (copy.remove(uri) == false) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1039,add.add(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1043,this.updated.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1044,this.updated.addAll(add);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1045,for (URI uri : copy) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1046,this.uris.remove(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1048,add(rebalance, add.toArray(new URI[add.size()]));
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,20,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,21,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,22,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,23,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,24,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,25,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,26,import java.util.regex.Pattern;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,27,import javax.management.ObjectName;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,207,brokerInfo.setBrokerURL(getServer().getConnectURI().toString());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,256,URI theConnectURI = getConnectUri();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,229,try {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,230,enqueueValve.turnOff();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,234,enqueueValve.turnOn();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1103,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1115,result = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1116,LOG.error("Failed to verify URI " + newURI + " already known: " + e);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,124,context = new VelocityContext();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,125,List keys = Arrays.asList(context.getKeys());
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,128,.iterator(); iterator.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,129,Map.Entry kv = (Map.Entry) iterator.next();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,130,String name = (String) kv.getKey();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,131,String value = (String) kv.getValue();
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,133,if (!keys.contains(name)) {
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,134,context.put(name, value);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,174,curr = manager.getNextLocation(curr);
activemq-console/src/main/java/org/apache/activemq/console/command/store/amq/AMQJournalTool.java,192,Location location = entry.getLocation();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,65,return broker.getBrokerId().toString();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,69,return broker.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,95,return broker.getDestinationStatistics().getEnqueues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,99,return broker.getDestinationStatistics().getDequeues().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,103,return broker.getDestinationStatistics().getConsumers().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,107,return broker.getDestinationStatistics().getMessages().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,111,return broker.getDestinationStatistics().getMessagesCached().getCount();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,153,broker.getDestinationStatistics().reset();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,157,broker.getDestinationStatistics().setEnabled(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,161,broker.getDestinationStatistics().setEnabled(false);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,165,return broker.getDestinationStatistics().isEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,181,return broker.getTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,185,return broker.getQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,189,return broker.getTemporaryTopics();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,193,return broker.getTemporaryQueues();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,197,return broker.getTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,201,return broker.getDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,205,return broker.getQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,209,return broker.getTemporaryTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,213,return broker.getTemporaryQueueSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,217,return broker.getInactiveDurableTopicSubscribers();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,254,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,259,1000);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,265,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,276,Subscription subscription = broker.addConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,277,broker.removeConsumer(context, info);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,289,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,291,broker.removeSubscription(context, info);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,26,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,28,import org.apache.activemq.command.ActiveMQBytesMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,29,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,30,import org.apache.activemq.command.ActiveMQMessage;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,31,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,32,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,33,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,34,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,35,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,43,if (cause.getMessage().contains(noSpaceMessage)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,19,import java.io.DataInput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,20,import java.io.DataInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,21,import java.io.DataOutput;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,22,import java.io.DataOutputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,23,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,24,import java.util.HashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,26,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,100,if (contentLength != null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,429,ServerSocket result = new ServerSocket(port);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,430,result.setReuseAddress(true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,431,return result;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,309,response = command.visit(this);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,297,dispatchAsync(ce);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,315,if (responseRequired) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,613,ConsumerId consumerId = (ConsumerId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,621,ProducerId producerId = (ProducerId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,720,SessionId sessionId = (SessionId) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,729,DestinationInfo di = (DestinationInfo) iter.next();
activemq-console/src/main/java/org/apache/activemq/console/filter/MessagesQueryFilter.java,80,CompositeData[] messages = (CompositeData[]) jmxConnection.invoke(destName, "browse", new Object[] {}, new String[] {});
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2145,LOG.info("Ignoring IO exception, " + exception, exception);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,20,import java.util.AbstractList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,278,store.recover(new MessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,280,public boolean recoverMessage(Message message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,283,if (message.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,284,if (broker.isExpired(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,285,messageExpired(createConnectionContext(), createMessageReference(message));
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,288,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,290,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,292,if (hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,293,message.setRegionDestination(Queue.this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,294,messagesLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,295,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,296,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,297,messages.addMessageLast(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,302,messagesLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,304,destinationStatistics.getMessages().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,305,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,307,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,310,public boolean recoverMessageReference(MessageId messageReference) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,311,throw new RuntimeException("Should not be called.");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,314,public boolean hasSpace() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,315,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,318,public boolean isDuplicate(MessageId id) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,319,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,323,int messageCount = store.getMessageCount();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,20,import java.net.InetSocketAddress;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,21,import java.net.URI;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,28,import org.eclipse.jetty.server.bio.SocketConnector;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,30,import org.eclipse.jetty.server.session.SessionHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,31,import org.eclipse.jetty.servlet.ServletHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,33,import org.eclipse.jetty.servlet.ServletMapping;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,53,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,57,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,58,connector
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,62,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,63,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,64,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,66,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,67,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,69,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,70,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,73,holder.setName("WSStomp");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,74,holder.setClassName(StompServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,75,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,76,holder
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,79,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,80,mapping.setServletName("WSStomp");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,81,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,82,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,83,mapping
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,467,broker.acknowledge(consumerExchange, ack);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,824,if (stopping.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1287,jmsEx = JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,62,DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,63,if (filter.matches(lastImage.getMessage().getDestination())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/LastImageSubscriptionRecoveryPolicy.java,64,result.add(lastImage.getMessage());
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,59,private DataStructure marshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,60,private DataStructure unmarshallCache[] = new DataStructure[MARSHAL_CACHE_SIZE];
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2187,if (text.equals("shutdown")) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,41,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,42,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,43,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,44,import org.apache.activemq.command.CommandTypes;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,45,import org.apache.activemq.command.ConnectionControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,46,import org.apache.activemq.command.ConnectionError;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,47,import org.apache.activemq.command.ConnectionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,48,import org.apache.activemq.command.ConnectionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,49,import org.apache.activemq.command.ConsumerControl;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,50,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,51,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,52,import org.apache.activemq.command.ControlCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,53,import org.apache.activemq.command.DataArrayResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,54,import org.apache.activemq.command.DestinationInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,55,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,56,import org.apache.activemq.command.FlushCommand;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,57,import org.apache.activemq.command.IntegerResponse;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,58,import org.apache.activemq.command.KeepAliveInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,59,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,60,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,61,import org.apache.activemq.command.MessageDispatch;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,62,import org.apache.activemq.command.MessageDispatchNotification;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,63,import org.apache.activemq.command.MessagePull;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,64,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,65,import org.apache.activemq.command.ProducerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,66,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,67,import org.apache.activemq.command.RemoveSubscriptionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,68,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,69,import org.apache.activemq.command.SessionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,70,import org.apache.activemq.command.SessionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,71,import org.apache.activemq.command.ShutdownInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,72,import org.apache.activemq.command.TransactionId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,73,import org.apache.activemq.command.TransactionInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,74,import org.apache.activemq.command.WireFormatInfo;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,165,TaskRunnerFactory taskRunnerFactory) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,612,for (Iterator iter = session.getConsumerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,620,for (Iterator iter = session.getProducerIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,672,this.faultTolerantConnection=info.isFaultTolerant();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,719,for (Iterator iter = cs.getSessionIds().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,989,for (Iterator<Command> iter = dispatchQueue.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1146,return this.faultTolerantConnection;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1178,LOG.info((passive?"Passive":"Active")+" Slave Broker " + info.getBrokerName() + " is attached");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1375,TransportConnectionState state) {
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,58,LOG.warn("could not generate unique stub", ioe);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,223,return new HashMap<ActiveMQDestination, Destination>(destinations);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,131,Map<ActiveMQDestination, Destination> answer = getQueueRegion().getDestinationMap();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,277,server = null;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,109,if (connector instanceof ManagedTransportConnector) {
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,110,ManagedTransportConnector managedTransportConnector = (ManagedTransportConnector) connector;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,55,private LinkedList<MessageReference> memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,202,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,211,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,249,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,258,memoryList.addFirst(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,321,if (memoryList.remove(node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,400,LinkedList<MessageReference> tmpList = new LinkedList<MessageReference>(this.memoryList);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,401,this.memoryList = new LinkedList<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,402,while (!tmpList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,403,MessageReference node = tmpList.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,407,memoryList.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,417,while (!memoryList.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,418,MessageReference node = memoryList.removeFirst();
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,128,if (correlationID != null) {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,324,return consumer;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,337,public String toString() {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,338,return "PooledSession { " + session + " }";
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,136,+ messageSend.getMessageId().getProducerSequenceId() + "] less than last stored: "  + lastSendSequenceNumber);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1285,result.setConnectionContext(context);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1282,if (context.isReconnect()) {
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,39,private long lastSendSequenceNumber = -1;
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,132,if (lastSendSequenceNumber > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,133,if (messageSend.getMessageId().getProducerSequenceId() <= lastSendSequenceNumber) {
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,135,LOG.debug("suppressing duplicate message send [" + messageSend.getMessageId() + "] with producerSequenceId ["
activemq-core/src/main/java/org/apache/activemq/broker/ProducerBrokerExchange.java,143,lastSendSequenceNumber = l;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,28,private static final ClassLoader FALLBACK_CLASS_LOADER = ClassLoadingAwareObjectInputStream.class.getClassLoader();
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,35,protected Class resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,40,protected Class resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,48,return Proxy.getProxyClass(cinterfaces[0].getClassLoader(), cinterfaces);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,55,throws ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,59,final Class clazz = (Class) primClasses.get(className);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1951,public List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSessionExecutor.java,210,List getUnconsumedMessages() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,110,private static final IdGenerator CONNECTION_ID_GENERATOR = new IdGenerator();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,656,ServiceSupport.dispose(this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,673,if (executor != null){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,677,LOG.error("Error shutting down thread pool " + e,e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1255,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1256,LOG.debug(getConsumerId() + " ignoring (auto acking) duplicate: " + md.getMessage());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1258,MessageAck ack = new MessageAck(md, MessageAck.STANDARD_ACK_TYPE, 1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1275,LOG.warn("acking duplicate delivery as poison, redelivery must be pending to another"
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1277,+ failoverRedeliveryWaitPeriod + ". Message: " + md);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,671,LOG.debug("Setting up new connection id: " + info.getConnectionId() + ", address: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/command/ConnectionInfo.java,40,private boolean failoverReconnect;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,524,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,531,latch.await(1,TimeUnit.SECONDS);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,29,import org.eclipse.jetty.server.bio.SocketConnector;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,30,import org.eclipse.jetty.server.handler.ContextHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,31,import org.eclipse.jetty.server.session.SessionHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,32,import org.eclipse.jetty.servlet.ServletHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,33,import org.eclipse.jetty.servlet.ServletHolder;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,34,import org.eclipse.jetty.servlet.ServletMapping;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,79,connector = new SocketConnector();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,84,server.setConnectors(new Connector[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,85,connector
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,88,ContextHandler contextHandler = new ContextHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,89,contextHandler.setContextPath("/");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,90,contextHandler.setServer(server);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,91,server.setHandler(contextHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,93,SessionHandler sessionHandler = new SessionHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,94,contextHandler.setHandler(sessionHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,96,ServletHandler servletHandler = new ServletHandler();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,97,sessionHandler.setHandler(servletHandler);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,99,ServletHolder holder = new ServletHolder();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,100,holder.setName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,101,holder.setClassName(HttpTunnelServlet.class.getName());
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,102,servletHandler.setServlets(new ServletHolder[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,103,holder
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,106,ServletMapping mapping = new ServletMapping();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,107,mapping.setServletName("httpTunnel");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,108,mapping.setPathSpec("/*");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,109,servletHandler.setServletMappings(new ServletMapping[] {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,110,mapping
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,41,sslConnector.setKeystore(keyStore);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,42,sslConnector.setPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,46,sslConnector.setKeyPassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,49,sslConnector.setKeystoreType(keyStoreType);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,52,sslConnector.setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,55,sslConnector.setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,58,sslConnector.setSslTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,61,sslConnector.setProtocol(protocol);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompServlet.java,54,protected WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,39,class StompSocket extends TransportSupport implements WebSocket, StompTransport {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,40,Outbound outbound;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,44,public void onConnect(Outbound outbound) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,45,this.outbound=outbound;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,48,public void onMessage(byte frame, byte[] data,int offset, int length) {}
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,50,public void onMessage(byte frame, String data) {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,58,public void onDisconnect() {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,29,import org.eclipse.jetty.server.handler.ContextHandler;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/WSTransportServer.java,61,ContextHandler contextHandler = new ContextHandler();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,759,if (!checkpointThread.isAlive()) {
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,37,public abstract Object unmarshalText(String text);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,39,public abstract Object unmarshalText(Reader reader);
activemq-optional/src/main/java/org/apache/activemq/transport/util/TextWireFormat.java,41,public abstract String marshalText(Object command);
activemq-optional/src/main/java/org/apache/activemq/transport/xstream/XStreamWireFormat.java,58,public String marshalText(Object command) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,327,connection.setExceptionListener(exceptionListener);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,359,Map map = URISupport.parseQuery(this.brokerURL.getQuery());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,360,if (buildFromMap(IntrospectionSupport.extractProperties(map, "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,372,if (buildFromMap(IntrospectionSupport.extractProperties(data.getParameters(), "jms."))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,916,this.exceptionListener = exceptionListener;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,919,public int getAuditDepth() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,920,return auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,923,public void setAuditDepth(int auditDepth) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,924,this.auditDepth = auditDepth;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,927,public int getAuditMaximumProducerNumber() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,928,return auditMaximumProducerNumber;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,931,public void setAuditMaximumProducerNumber(int auditMaximumProducerNumber) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnectionFactory.java,932,this.auditMaximumProducerNumber = auditMaximumProducerNumber;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,27,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,108,if (uri != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,317,public static String createQueryString(Map options) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,322,for (Iterator iter = options.keySet().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,328,String key = (String)iter.next();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,348,public static URI createRemainingURI(URI originalURI, Map params) throws URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,717,if (!message.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,523,LOG.error("Failed to start ActiveMQ JMS Message Broker. Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,25,import org.apache.activemq.command.Endpoint;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,26,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,28,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,43,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,44,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,50,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,53,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,54,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,55,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,56,BrokerId remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,60,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,61,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,62,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,64,from.setBrokerInfo(remoteBrokerInfo);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,66,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,67,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,68,LOG.info("Disconnecting loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,70,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,73,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,74,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,79,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,80,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getFromBrokerId(info)));
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,86,protected BrokerId getFromBrokerId(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,87,BrokerId answer = null;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,88,Endpoint from = command.getFrom();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,89,if (from == null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,90,LOG.warn("Incoming command does not have a from endpoint: " + command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,92,answer = from.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,94,if (answer != null) {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,95,return answer;
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,97,throw new IOException("No broker ID is available for endpoint: " + from + " from command: "
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,98,+ command);
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,110,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/CompositeDemandForwardingBridge.java,111,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,21,import org.apache.activemq.command.BrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,22,import org.apache.activemq.command.BrokerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,23,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,24,import org.apache.activemq.command.ConsumerInfo;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,25,import org.apache.activemq.command.NetworkBridgeFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,27,import org.apache.activemq.util.ServiceSupport;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,41,protected final BrokerId remoteBrokerPath[] = new BrokerId[] {null};
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,42,protected Object brokerInfoMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,43,protected BrokerId remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,50,protected void serviceRemoteBrokerInfo(Command command) throws IOException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,51,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,52,BrokerInfo remoteBrokerInfo = (BrokerInfo)command;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,53,remoteBrokerId = remoteBrokerInfo.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,54,remoteBrokerPath[0] = remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,55,remoteBrokerName = remoteBrokerInfo.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,56,if (localBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,57,if (localBrokerId.equals(remoteBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,58,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,59,LOG.trace(configuration.getBrokerName() + " disconnecting remote loop back connection: " + remoteBrokerName);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,61,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,64,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,65,LOG.trace("counting down remoteBrokerNameKnownLatch with: " + command);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,67,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,71,protected void addRemoteBrokerToBrokerPath(ConsumerInfo info) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,72,info.setBrokerPath(appendToBrokerPath(info.getBrokerPath(), getRemoteBrokerPath()));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,75,protected void serviceLocalBrokerInfo(Command command) throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,76,synchronized (brokerInfoMutex) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,77,localBrokerId = ((BrokerInfo)command).getBrokerId();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,78,localBrokerPath[0] = localBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,79,localBrokerIdKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,80,if (remoteBrokerId != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,81,if (remoteBrokerId.equals(localBrokerId)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,82,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,83,LOG.trace(configuration.getBrokerName() + " disconnecting local loop back connection.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,85,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,86,ServiceSupport.dispose(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,96,protected BrokerId[] getRemoteBrokerPath() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridge.java,97,return remoteBrokerPath;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,77,import org.apache.activemq.transport.TransportListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,122,protected CountDownLatch remoteBrokerNameKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,123,protected CountDownLatch localBrokerIdKnownLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,291,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,332,LOG.trace(configuration.getBrokerName() + " starting remote Bridge, localBroker=" + localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,376,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,377,triggerLocalStartBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,424,remoteBrokerNameKnownLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1207,localBrokerIdKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1217,protected abstract void serviceLocalBrokerInfo(Command command) throws InterruptedException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1219,protected abstract void addRemoteBrokerToBrokerPath(ConsumerInfo info) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1221,protected abstract void serviceRemoteBrokerInfo(Command command) throws IOException;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1223,protected abstract BrokerId[] getRemoteBrokerPath();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,94,if ( localURI.equals(uri) || (connectionFilter != null && !connectionFilter.connectTo(uri))) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,159,return converter.createTempQueue(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,161,return converter.createTempTopic(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,618,public ActiveMQDestination createTempQueue(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,621,rc = new ActiveMQTempQueue(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,623,tempDestinations.put(name, rc);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,625,return rc;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,628,public ActiveMQDestination createTempTopic(String name) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,629,ActiveMQDestination rc = tempDestinations.get(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,630,if( rc == null ) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,631,rc = new ActiveMQTempTopic(connectionId, tempDestinationGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,124,protected final AtomicBoolean remoteInterupted = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,169,remoteBroker.setTransportListener(new TransportListener() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,180,public void transportInterupted() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,183,if (remoteInterupted.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,184,LOG.info("Outbound transport to " + remoteBrokerName + " interrupted.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,185,if (localBridgeStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,186,clearDownSubscriptions();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,187,synchronized (DemandForwardingBridgeSupport.this) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,188,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,189,localBroker.oneway(localConnectionInfo.createRemoveCommand());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,191,LOG.debug("local broker is now disposed", td);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,193,LOG.warn("Caught exception from local start", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,197,localBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,198,remoteBridgeStarted.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,199,startedLatch = new CountDownLatch(2);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,200,localStartedLatch = new CountDownLatch(1);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,204,public void transportResumed() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,205,if (remoteInterupted.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,209,if (!lastConnectSucceeded.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,210,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,211,LOG.debug("Previous connection was never fully established. Sleeping for second to avoid busy loop.");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,212,Thread.sleep(1000);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,214,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,217,lastConnectSucceeded.set(false);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,218,try {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,219,startLocalBridge();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,220,remoteBridgeStarted.set(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,221,startedLatch.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,222,LOG.info("Outbound transport to " + remoteBrokerName + " resumed");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,224,LOG.error("Caught exception  from local start in resume transport", e);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,273,Thread.currentThread().setName("StartRemotelBridge: localBroker=" + localBroker);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,774,if (!remoteInterupted.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,775,stop();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,90,if( bridges.containsKey(uri) ) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,91,LOG.debug("Discovery agent generated a duplicate onServiceAdd event for: "+uri );
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,92,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,133,bridges.put(uri, bridge);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,162,NetworkBridge bridge = bridges.remove(uri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,163,if (bridge == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,164,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,167,ServiceSupport.dispose(bridge);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,96,private long timeout = -1;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,99,private int maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,100,private int startupMaxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,225,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,226,LOG.warn("Transport (" + transport.getRemoteAddress() + ") failed to " + connectedTransportURI
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,227,+ " , attempting to automatically reconnect due to: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,228,LOG.debug("Transport failed with the following exception:", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,299,LOG.debug("Started.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,318,LOG.debug("Stopped.");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,811,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,848,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,852,LOG.debug("Connection established");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,874,LOG.debug("transport resumed by transport listener not set");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,900,int reconnectAttempts = 0;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,901,if (firstConnection) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,902,if (this.startupMaxReconnectAttempts != 0) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,903,reconnectAttempts = this.startupMaxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,906,if (reconnectAttempts == 0) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,907,reconnectAttempts = this.maxReconnectAttempts;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,909,if (reconnectAttempts > 0 && ++connectFailures >= reconnectAttempts) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,910,LOG.error("Failed to connect to transport after: " + connectFailures + " attempt(s)");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,925,if (transportListener != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,926,if (connectionFailure instanceof IOException) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,927,transportListener.onException((IOException) connectionFailure);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,929,transportListener.onException(IOExceptionSupport.create(connectionFailure));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,932,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,26,private final Object writeMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,33,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,39,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,45,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/MutexTransport.java,51,synchronized (writeMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,140,stompTransport.sendToActiveMQ(command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,253,sendToActiveMQ(message, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,322,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,351,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,382,sendToActiveMQ(tx, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,452,sendToActiveMQ(info, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,464,sendToActiveMQ(sub.getConsumerInfo().createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,556,sendToActiveMQ(connectionInfo.createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,557,sendToActiveMQ(new ShutdownInfo(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,622,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,632,sendToActiveMQ(new DestinationInfo(connectionId, DestinationInfo.ADD_OPERATION_TYPE, rc), null);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,23,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,27,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,68,protected final Valve dispatchValve = new Valve(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,221,size--;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,223,batchList.remove(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,92,public void remove(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,94,PendingNode node = this.map.remove(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PendingList.java,28,public void remove(MessageReference message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,64,public void remove(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/PrioritizedPendingList.java,66,PendingNode node = this.map.remove(message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,79,protocolConverter.getStompTransport().sendToActiveMQ(ack);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,57,final Command command = (Command)o;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,70,protocolConverter.onStompCommand((StompFrame)command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,80,if (l!=null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,90,if (n!=null) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,20,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,40,private String stampProperty = "BrokerPath";
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,43,public String getStampProperty() {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,44,return stampProperty;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,47,public void setStampProperty(String stampProperty) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,48,this.stampProperty = stampProperty;
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,51,public void preProcessDispatch(MessageDispatch messageDispatch) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,52,try {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,53,String brokerStamp = (String)messageDispatch.getMessage().getProperty(getStampProperty());
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,54,if (brokerStamp == null) {
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,55,brokerStamp = getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,57,brokerStamp += "," + getBrokerName();
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,59,messageDispatch.getMessage().setProperty(getStampProperty(), brokerStamp);
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,61,LOG.warn("Setting broker property failed " + ioe, ioe);
activemq-core/src/main/java/org/apache/activemq/broker/util/TraceBrokerPathPlugin.java,63,super.preProcessDispatch(messageDispatch);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,23,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,71,private final static ConcurrentHashMap<TransactionId, List<TransactionContext>> ENDED_XA_TRANSACTION_CONTEXTS = new ConcurrentHashMap<TransactionId, List<TransactionContext>>();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,431,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,432,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,433,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,434,LOG.debug("firing afterCommit callbacks on XA_RDONLY from prepare: " + xid);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,436,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,437,ctx.afterCommit();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,476,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,477,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,478,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,479,ctx.afterRollback();
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,515,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.remove(x);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,516,if (l != null && !l.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,517,for (TransactionContext ctx : l) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,652,List<TransactionContext> l = ENDED_XA_TRANSACTION_CONTEXTS.get(transactionId);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,653,if (l == null) {
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,654,l = new ArrayList<TransactionContext>(3);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,655,ENDED_XA_TRANSACTION_CONTEXTS.put(transactionId, l);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,656,l.add(this);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,658,l.add(this);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1043,Collection<Subscription> currentSubs =
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1063,+ ", sub: " + candidateInfo + " is duplicated by network subscription with equal or higher network priority: "
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1075,+ ", which has a higher priority, new sub: " + candidateInfo + ", networkComsumerIds: "
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,341,if (answer == null && "text/xml".equals(request.getContentType())) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServletSupport.java,359,return request.getHeader(WebClient.selectorName);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,505,LOG.trace("Waiting for transport to reconnect..: " + command);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,509,LOG.info("Failover timed out after " + (end - start) + "ms");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,516,LOG.debug("Interupted: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,816,Transport t = bt.getTransport();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,817,URI uri = bt.getUri();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,818,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,819,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,820,if (started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,821,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,823,reconnectDelay = initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,824,failedConnectTransportURI = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,825,connectedTransportURI = uri;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,826,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,827,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,828,connectFailures = 0;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,829,LOG.info("Successfully reconnected to backup " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,830,return false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,832,LOG.debug("Backup transport failed", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,838,while (iter.hasNext() && connectedTransport.get() == null && !disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,839,URI uri = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,840,Transport t = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,843,SslContext.setCurrentSslContext(brokerSslContext);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,844,t = TransportFactory.compositeConnect(uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,845,t.setTransportListener(myTransportListener);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,846,t.start();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,849,restoreTransport(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,855,connectedTransport.set(t);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,886,LOG.debug("Connect fail to: " + uri + ", reason: " + e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,887,if (t != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,889,t.stop();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,891,LOG.debug("Stop of failed transport: " + t + " failed with reason: " + ee);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,467,private boolean isShutdownCommand(Command command) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,468,return (command != null && (command.isShutdownInfo() || command instanceof RemoveInfo));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,479,if (isShutdownCommand(command) && connectedTransport.get() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,485,if (command instanceof RemoveInfo || command.isMessageAck()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,489,Response response = new Response();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,490,response.setCorrelationId(command.getCommandId());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,491,myTransportListener.onCommand(response);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,21,import java.io.FileNotFoundException;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,117,private boolean updateURIsSupported=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,118,private boolean reconnectSupported=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,122,private boolean rebalanceUpdateURIs=true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,132,boolean doReconnect = !disposed;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,172,if (!initialized) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,176,if(command.isConnectionControl()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,613,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,625,for (int i = 0; i < u.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,626,uris.remove(u[i]);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,634,if (contains(newURI)==false) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,723,Map tmpMap = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,727,for (Iterator<Command> iter2 = tmpMap.values().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,728,Command command = iter2.next();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,761,final boolean doReconnect() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,762,Exception failure = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,763,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,768,String fileURL = getUpdateURIsURL();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,769,if (fileURL != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,770,BufferedReader in = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,771,String newUris = null;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,772,StringBuffer buffer = new StringBuffer();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,774,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,775,in = new BufferedReader(getURLStream(fileURL));
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,776,while (true) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,777,String line = in.readLine();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,778,if (line == null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,779,break;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,781,buffer.append(line);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,783,newUris = buffer.toString();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,785,LOG.error("Failed to read updateURIsURL: " + fileURL, ioe);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,787,if (in != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,788,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,789,in.close();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,796,processNewTransports(isRebalanceUpdateURIs(), newUris);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,842,LOG.debug("Attempting connect to: " + uri);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,938,LOG.debug("Waiting " + reconnectDelay + " ms before attempting connection. ");
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,939,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,940,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,941,sleepMutex.wait(reconnectDelay);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,943,Thread.currentThread().interrupt();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,971,for (Iterator<URI> iter = connectList.iterator(); iter.hasNext() && backups.size() < backupPoolSize;) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1006,add(true, new URI[] { uri });
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1014,this.reconnectSupported=value;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1022,this.updateURIsSupported=value;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1031,for (int i = 0; i < updatedURIs.length; i++) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1032,URI uri = updatedURIs[i];
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1104,for (URI uri:uris) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1105,if (newURI.getPort()==uri.getPort()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1106,InetAddress newAddr = InetAddress.getByName(newURI.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1107,InetAddress addr = InetAddress.getByName(uri.getHost());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1108,if (addr.equals(newAddr)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1109,result = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,1110,break;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,61,Map options = compositData.getParameters();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransportFactory.java,70,public FailoverTransport createTransport(Map parameters) throws IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,40,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,271,List consumers = client.getConsumers();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,302,response.getWriter().println(m);
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,249,+ " syncCount: "
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,291,+ " syncCount: "
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,30,public static final Timer CLOCK_DAEMON = new Timer("KahaDB Scheduler", true);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,37,TimerTask timerTask = new SchedulerTimerTask(task);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,38,CLOCK_DAEMON.scheduleAtFixedRate(timerTask, period, period);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,43,TimerTask ticket = TIMER_TASKS.remove(task);
kahadb/src/main/java/org/apache/kahadb/util/Scheduler.java,51,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,28,public final class Scheduler extends ServiceSupport {
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,30,private Timer timer;
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,38,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,39,timer.scheduleAtFixedRate(timerTask, period, period);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,54,TimerTask ticket = timerTasks.remove(task);
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,62,TimerTask timerTask = new SchedulerTimerTask(task);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,21,import java.util.HashMap;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,23,import java.util.Map;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,41,private Map<SessionKey, SessionPool> cache;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,53,this(connection, new HashMap<SessionKey, SessionPool>(), poolFactory);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,84,public ConnectionPool(ActiveMQConnection connection, Map<SessionKey, SessionPool> cache, ObjectPoolFactory poolFactory) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,92,try {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,93,connection.start();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,95,started.set(false);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,96,throw(e);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,107,SessionPool pool = cache.get(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,109,pool = createSessionPool(key);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,110,cache.put(key, pool);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,165,if (hasFailed
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,80,OutputStream stream = blob.setBinaryStream(data.length);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,81,stream.write(data);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,82,stream.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,83,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,87,s.setBlob(1, blob);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,231,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,276,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,405,discard(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,450,protected void discard(MessageReference message) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,451,message.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,453,LOG.debug("Discarding message " + message);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,238,this.initialized = true;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,140,if (ack.getFirstMessageId() == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,141,ack.setFirstMessageId(id);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompSubscription.java,153,count++;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,425,sendToActiveMQ(consumerInfo, createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,263,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,40,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,747,process(data, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,754,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,757,this.indexLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,763,if (after != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,764,after.run();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,803,process(data, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,820,void process(JournalCommand<?> data, final Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,839,process(command, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,922,protected void process(KahaCommitCommand command, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,491,public void isFull(ConnectionContext context, Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Destination.java,205,void isFull(ConnectionContext context, Usage usage);
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationFilter.java,230,public void isFull(ConnectionContext context, Usage usage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,896,List<BaseDestination> list = new ArrayList<BaseDestination>();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,900,if (d instanceof BaseDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,901,BaseDestination bd = (BaseDestination) d;
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,902,bd.markForGC(timeStamp);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,903,if (bd.canGC()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,904,list.add(bd);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,909,if (list.isEmpty() == false) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,914,for (BaseDestination dest : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,915,dest.getLog().info(
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,917,+ " ms - removing ...");
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQDestination.java,131,throw new JMSException("Could no disambiguate on queue|Topic-name totransform pollymorphic destination into a ActiveMQ destination: " + dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,66,protected final Object destinationsMutex = new Object();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,97,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,107,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,119,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,186,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,216,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,222,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,247,LOG
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,248,.warn("A duplicate subscription was detected. Clients may be misbehaving. Later warnings you may see about subscription removal are a consequence of this.");
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,282,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,283,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,284,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,315,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,331,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,332,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,333,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,396,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,412,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,443,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,457,for (Iterator<Subscription> iter = subscriptions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,458,Subscription sub = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,461,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,462,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,463,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,485,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,486,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,487,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,502,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,503,for (Iterator iter = destinationMap.get(info.getDestination()).iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,504,Destination dest = (Destination) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,80,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,81,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,82,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,142,synchronized (destinationsMutex) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,143,for (Iterator<Destination> iter = destinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,144,Destination dest = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,146,if (dest instanceof Topic){
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,147,Topic topic = (Topic)dest;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,148,topic.deleteSubscription(context, key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,200,for (Iterator<DurableTopicSubscription> iterator = durableSubscriptions.values().iterator(); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,201,DurableTopicSubscription sub = iterator.next();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,283,Page next;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,284,if (current.getType() == Page.PAGE_PART_TYPE) {
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,285,next = load(current.getNext(), null);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,287,next = allocate();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,290,next.txId = current.txId;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,293,int oldPos = pos;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,294,pos = 0;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,296,current.makePagePart(next.getPageId(), getWriteTransactionId());
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,297,current.write(this);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,300,byte[] data = new byte[pageSize];
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,301,System.arraycopy(buf, 0, data, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,302,Transaction.this.write(current, data);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,305,pos = 0;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,307,skip(Page.PAGE_HEADER_SIZE);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,309,System.arraycopy(buf, pageSize, buf, pos, oldPos - pageSize);
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,310,pos += oldPos - pageSize;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,311,current = next;
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,43,public synchronized Destination intercept(Destination destination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,44,Set virtualDestinations = destinationMap.get(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualDestinationInterceptor.java,46,for (Iterator iter = virtualDestinations.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,354,if (lc == Byte.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,355,if (rc == Short.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,356,lv = Short.valueOf(((Number)lv).shortValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,358,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,360,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,362,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,364,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,366,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,369,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,370,lv = Integer.valueOf(((Number)lv).intValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,372,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,374,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,376,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,378,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,381,if (rc == Long.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,382,lv = Long.valueOf(((Number)lv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,384,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,386,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,388,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,391,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,392,rv = Long.valueOf(((Number)rv).longValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,394,lv = new Float(((Number)lv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,396,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,398,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,401,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,402,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,404,rv = new Float(((Number)rv).floatValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,406,lv = new Double(((Number)lv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,408,return Boolean.FALSE;
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,411,if (rc == Integer.class) {
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,412,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,414,rv = new Double(((Number)rv).doubleValue());
activemq-core/src/main/java/org/apache/activemq/filter/ComparisonExpression.java,416,rv = new Float(((Number)rv).doubleValue());
activemq-fileserver/src/main/java/org/apache/activemq/util/RestFilter.java,182,out.close();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1064,+ existingSub.getConsumerInfo()  + ", networkComsumerIds: " + existingSub.getConsumerInfo().getNetworkConsumerIds());
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,85,boolean containsKey(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,93,V get(K key);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,99,boolean containsValue(K o);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,106,void putAll(Map<K, V> map);
activemq-core/src/main/java/org/apache/activemq/kaha/MapContainer.java,140,V remove(K key);
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,48,private String name;
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,324,private void addChild(T child) {
activemq-core/src/main/java/org/apache/activemq/usage/Usage.java,331,private void removeChild(T child) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,416,if (!memoryList.isEmpty()) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,160,return "[PageWrite:"+page.getPageId()+"]";
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,797,if( enablePageCaching ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,798,pageCache.remove(pageId);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,892,void removeFromCache(Page page) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,894,pageCache.remove(page.getPageId());
kahadb/src/main/java/org/apache/kahadb/util/LinkedNode.java,200,throw new IllegalArgumentException("This node is already linked to a node");
kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java,207,Sequence rc = new Sequence(sequence.first, sequence.first+count);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,896,stop();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,520,metadata.producerSequenceIdTracker.rollback(new MessageId(keys.messageId));
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,126,result = id.substring(0, index + 1);
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,90,if (session != null) {
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,627,new RuntimeException(e);
activemq-core/src/main/java/org/apache/activemq/broker/region/AbstractRegion.java,79,if (broker == null) {
activemq-core/src/main/java/org/apache/activemq/util/BitArray.java,137,dataOut.writeByte((int)bits);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,301,WRITE_CHECK_TIMER.scheduleAtFixedRate(writeCheckerTask, initialDelayTime,writeCheckTime);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,302,READ_CHECK_TIMER.scheduleAtFixedRate(readCheckerTask, initialDelayTime,readCheckTime);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,319,WRITE_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,320,READ_CHECK_TIMER.cancel();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,86,List messages = JmxMBeansUtil.createMessageQueryFilter(createJmxConnection(), queueName).query(queryAddObjects);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,87,purgeMessages(queueName, messages);
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,115,public void purgeMessages(ObjectName queue, List messages) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,116,Object[] param = new Object[1];
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,117,for (Iterator i = messages.iterator(); i.hasNext();) {
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,118,CompositeData msg = (CompositeData)i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,119,param[0] = "" + msg.get("JMSMessageID");
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,120,context.printInfo("Removing message: " + param[0] + " from queue: " + queue.getKeyProperty("Destination"));
activemq-console/src/main/java/org/apache/activemq/console/command/PurgeCommand.java,121,createJmxConnection().invoke(queue, "removeMessage", param, new String[] {
activemq-core/src/main/java/org/apache/activemq/broker/region/DestinationStatistics.java,62,addStatistic("expired", expired);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,22,import java.lang.reflect.Constructor;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,30,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,37,import sun.management.ConnectorAddressLink;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,57,public static String getJVM() {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,58,return System.getProperty("java.vm.specification.vendor");
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,61,public static boolean isSunJVM() {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,62,return getJVM().equals("Sun Microsystems Inc.");
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,92,Class monitoredHostClass = Class.forName("sun.jvmstat.monitor.MonitoredHost", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,93,Method getMonitoredHostMethod = monitoredHostClass.getMethod("getMonitoredHost", String.class);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,94,Object host = getMonitoredHostMethod.invoke(null, (String)null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,96,Method activeVmsMethod = host.getClass().getMethod("activeVms", null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,97,Set vms = (Set)activeVmsMethod.invoke(host, null);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,98,for (Object vmid: vms) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,99,int pid = ((Integer) vmid).intValue();
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,101,Class vmIdentifierClass = Class.forName("sun.jvmstat.monitor.VmIdentifier", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,102,Constructor vmIdentifierConstructor = vmIdentifierClass.getConstructor(String.class);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,103,Object vmIdentifier = vmIdentifierConstructor.newInstance(vmid.toString());
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,104,Method getMonitoredVmMethod = host.getClass().getMethod("getMonitoredVm", vmIdentifierClass);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,105,Object mvm = getMonitoredVmMethod.invoke(host, vmIdentifier);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,107,Class monitoredVmUtilClass = Class.forName("sun.jvmstat.monitor.MonitoredVmUtil", true, loader);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,108,Method commandLineMethod = monitoredVmUtilClass.getMethod("commandLine", Class.forName("sun.jvmstat.monitor.MonitoredVm", true, loader));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,109,String name = (String)commandLineMethod.invoke(null, mvm);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,110,if (name.contains("run.jar start")) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,111,connectingPid = pid;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,112,jmxUrl = ConnectorAddressLink.importFrom(pid);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,113,break;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,120,context.print("Connecting to pid: " + connectingPid);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,122,context.print("Connecting to JMX URL: " + jmxUrl);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,160,this.jmxUser = jmxUser;
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,176,this.jmxPassword = jmxPassword;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/DestinationView.java,202,answer.add(OpenTypeSupport.convert(message));
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1049,suppress = hasLowerPriority(sub, candidate.getLocalInfo());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,86,protected BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,181,protected Journal journal;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,182,protected Metadata metadata = new Metadata();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,225,private void loadPageFile() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,226,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,227,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,228,final PageFile pageFile = getPageFile();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,271,private void startCheckpoint() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,306,public void open() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,307,if( opened.compareAndSet(false, true) ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,309,loadPageFile();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,310,startCheckpoint();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,316,if( lockFile == null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,322,while (true) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,327,LOG.info("Database "+lockFileName+" is locked... waiting " + (getDatabaseLockedWaitDelay() / 1000) + " seconds for the database to be unlocked. Reason: " + e);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,353,open();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,354,store(new KahaTraceCommand().setMessage("LOADED " + new Date()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,362,public void close() throws IOException, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,363,if( opened.compareAndSet(true, false)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,364,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,365,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,366,pageFile.tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,367,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,368,checkpointUpdate(tx, true);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,371,pageFile.unload();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,372,metadata = new Metadata();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,374,this.indexLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,376,journal.close();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,378,lockFile.unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,379,lockFile=null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,433,long start = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,434,Location producerAuditPosition = recoverProducerAudit();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,435,Location lastIndoubtPosition = getRecoveryPosition();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,437,Location recoveryPosition = minimum(producerAuditPosition, lastIndoubtPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,439,if (recoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,440,int redoCounter = 0;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,441,LOG.info("Recovering from the journal ...");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,442,while (recoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,443,JournalCommand<?> message = load(recoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,444,metadata.lastUpdate = recoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,445,process(message, recoveryPosition, lastIndoubtPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,446,redoCounter++;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,447,recoveryPosition = journal.getNextLocation(recoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,449,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,450,LOG.info("Recovery replayed " + redoCounter + " operations from the journal in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,464,private Location minimum(Location producerAuditPosition,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,466,Location min = null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,467,if (producerAuditPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,468,min = producerAuditPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,469,if (lastIndoubtPosition != null && lastIndoubtPosition.compareTo(producerAuditPosition) < 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,470,min = lastIndoubtPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,473,min = lastIndoubtPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,475,return min;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,478,private Location recoverProducerAudit() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,479,if (metadata.producerSequenceIdTrackerLocation != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,480,KahaProducerAuditCommand audit = (KahaProducerAuditCommand) load(metadata.producerSequenceIdTrackerLocation);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,481,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,482,ObjectInputStream objectIn = new ObjectInputStream(audit.getAudit().newInput());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,483,metadata.producerSequenceIdTracker = (ActiveMQMessageAuditNoSync) objectIn.readObject();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,485,IOException ioe = new IOException("Failed to read producerAudit: " + cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,486,ioe.initCause(cfe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,487,throw ioe;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,489,return journal.getNextLocation(metadata.producerSequenceIdTrackerLocation);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,492,return journal.getNextLocation(null);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,510,protected void matched(Location key, Long value) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,511,matches.add(value);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,530,LOG.info("Rolled back " + undoCounter + " messages from the index in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,632,LOG.info("Detected missing/corrupt journal files.  Dropped " + undoCounter + " messages from the index in " + ((end - start) / 1000.0f) + " seconds.");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,636,private Location nextRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,637,private Location lastRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,639,public void incrementalRecover() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,640,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,642,if( nextRecoveryPosition == null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,643,if( lastRecoveryPosition==null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,644,nextRecoveryPosition = getRecoveryPosition();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,646,nextRecoveryPosition = journal.getNextLocation(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,649,while (nextRecoveryPosition != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,650,lastRecoveryPosition = nextRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,651,metadata.lastUpdate = lastRecoveryPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,652,JournalCommand<?> message = load(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,653,process(message, lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,654,nextRecoveryPosition = journal.getNextLocation(lastRecoveryPosition);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,685,long start;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,686,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,689,if( !opened.get() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,690,return;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,700,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,701,if( LOG_SLOW_ACCESS_TIME>0 && end-start > LOG_SLOW_ACCESS_TIME) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,702,LOG.info("Slow KahaDB access: cleanup took "+(end-start));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,707,public void checkpoint(Callback closure) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,708,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,735,if (before != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,736,before.run();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,748,long end = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,749,if( LOG_SLOW_ACCESS_TIME>0 && end-start > LOG_SLOW_ACCESS_TIME) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,750,LOG.info("Slow KahaDB access: Journal append took: "+(start2-start)+" ms, Index update took "+(end-start2)+" ms");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,753,this.indexLock.writeLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,755,metadata.lastUpdate = location;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,770,throw ioe;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,975,private final HashSet<Integer> journalFilesBeingReplicated = new HashSet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1135,if( journalFilesBeingReplicated!=null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1136,gcCandidateSet.removeAll(journalFilesBeingReplicated);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1146,while( !gcCandidateSet.isEmpty() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1147,Integer last = gcCandidateSet.last();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1148,if( last >= firstTxLocation.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1149,gcCandidateSet.remove(last);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1151,break;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1158,if( gcCandidateSet.isEmpty() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1159,break;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1166,if( first==null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1167,SortedSet<Integer> subset = gcCandidateSet.headSet(second.getDataFileId()+1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1168,if( !subset.isEmpty() && subset.last() == second.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1169,subset.remove(second.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1171,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1173,SortedSet<Integer> subset = gcCandidateSet.tailSet(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1174,if( !subset.isEmpty() && subset.first() == first.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1175,subset.remove(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1177,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1179,SortedSet<Integer> subset = gcCandidateSet.subSet(first.getDataFileId(), second.getDataFileId()+1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1180,if( !subset.isEmpty() && subset.first() == first.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1181,subset.remove(first.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1183,if( !subset.isEmpty() && subset.last() == second.getDataFileId() ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1184,subset.remove(second.getDataFileId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1186,return !subset.isEmpty();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1191,for (Location l : keys) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1193,if( last != fileId ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1194,gcCandidateSet.remove(fileId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1226,LOG.debug("Cleanup removing the data files: "+gcCandidateSet);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1227,journal.removeDataFiles(gcCandidateSet);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1244,return journalFilesBeingReplicated;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1252,private final HashMap<String, StoredDestination> storedDestinations = new HashMap<String, StoredDestination>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1738,return pageFile;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1741,public Journal getJournal() throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1745,return journal;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1788,public void setBrokerService(BrokerService brokerService) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1789,this.brokerService = brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,877,starting = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,902,starting = false;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,903,if (pendingStop) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,904,LOG.debug("Calling the delayed stop()");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,911,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,912,pendingStop = true;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,913,if (starting) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,914,LOG.debug("stop() called in the middle of start(). Delaying...");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,915,return;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,942,+ "': ", e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1255,private void doAsyncSendPacket(Command command) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1256,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1257,this.transport.oneway(command);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1259,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1319,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1320,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1322,if (response != null && response.isException()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1323,ExceptionResponse er = (ExceptionResponse)response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1324,if (er.getException() instanceof JMSException) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1325,throw (JMSException)er.getException();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1327,throw JMSExceptionSupport.create(er.getException());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1330,return response;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1332,throw JMSExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1816,LOG.debug("Async client internal exception occurred with no exception listener registered: "
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1848,onAsyncException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1849,if (!closing.get() && !closed.get()) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1850,executor.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1851,public void run() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1852,transportFailed(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1853,ServiceSupport.dispose(ActiveMQConnection.this.transport);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1854,brokerInfoReceived.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1855,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1856,cleanup();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1858,LOG.warn("Exception during connection cleanup, " + e, e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1860,for (Iterator<TransportListener> iter = transportListeners
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1861,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1862,TransportListener listener = iter.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1863,listener.onException(error);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1881,connectionConsumer.clearMessagesInProgress();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2276,public IOException getFirstFailureError() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2277,return firstFailureError;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2280,protected void waitForTransportInterruptionProcessingToComplete() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2281,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2282,if (cdl != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2291,protected void transportInterruptionProcessingComplete() {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2292,CountDownLatch cdl = this.transportInterruptionProcessingComplete;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2293,if (cdl != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2294,cdl.countDown();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2295,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2296,signalInterruptionProcessingComplete();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,28,import java.util.LinkedList;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,71,import org.apache.activemq.security.SecurityContext;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,75,import org.apache.activemq.thread.Scheduler;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,355,LinkedList<BrowserDispatch> browserDispatches = new LinkedList<BrowserDispatch>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,401,pagedInMessagesLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,402,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,403,BrowserDispatch browserDispatch = new BrowserDispatch(browserSubscription);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,404,browserDispatches.addLast(browserDispatch);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,406,pagedInMessagesLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1335,BrowserDispatch getNextBrowserDispatch() {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1336,pagedInMessagesLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1337,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1338,if (browserDispatches.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1339,return null;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1341,return browserDispatches.removeFirst();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1343,pagedInMessagesLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1402,BrowserDispatch pendingBrowserDispatch = getNextBrowserDispatch();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1983,public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,949,ActiveMQDestination[] dests = excludedDestinations;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,25,import javax.management.ObjectName;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,26,import javax.management.QueryExp;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,115,ObjectName query = new ObjectName("org.apache.activemq:BrokerName=" + brokerName + ",Type=Connection,*");
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,124,+ ",Type=Connection,ConnectorName=" + connectorName + ",*");
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,233,if (context.isFaultTolerant() || context.isNetworkConnection()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,235,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,236,removeConnection(oldContext, info, new Exception("remove stale client"));
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,238,LOG.warn("Failed to remove stale connection ",e);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,760,long expiration=message.getExpiration();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,779,try{
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,780,if(node!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,781,Message message=node.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,782,if(message!=null && node.getRegionDestination()!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,783,DeadLetterStrategy deadLetterStrategy=node
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,784,.getRegionDestination().getDeadLetterStrategy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,785,if(deadLetterStrategy!=null){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,786,if(deadLetterStrategy.isSendToDeadLetterQueue(message)){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,788,message = message.copy();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,789,stampAsExpired(message);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,790,message.setExpiration(0);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,791,if(!message.isPersistent()){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,792,message.setPersistent(true);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,793,message.setProperty("originalDeliveryMode",
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,800,ActiveMQDestination deadLetterDestination=deadLetterStrategy
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,803,if (context.getBroker()==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,804,context.setBroker(getRoot());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,806,BrokerSupport.resendNoCopy(context,message,
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,807,deadLetterDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,810,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,817,LOG.warn("Caught an exception sending to DLQ: "+node,e);
kahadb/src/main/java/org/apache/kahadb/index/HashIndex.java,348,LOG.debug("Resizing done.  New bins start at: "+metadata.binPageId);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,169,diskBound = current;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,170,current = null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,178,return current == null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,182,return diskBound == null && current == null;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,485,private long toOffset(long pageId) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,840,write.setCurrent(value.page, value.current);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,845,if( canStartWriteBatch() ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,937,private void writeBatch() throws IOException {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,939,CountDownLatch checkpointLatch;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,940,ArrayList<PageWrite> batch;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,941,synchronized( writes ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,951,if (write.diskBound == null) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,962,try {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,963,if (enableRecoveryFile) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,970,Checksum checksum = new Adler32();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,971,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,972,try {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,973,checksum.update(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,975,throw IOExceptionSupport.create(
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,981,if (recoveryPageCount > recoveryFileMaxPageCount) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,982,int t = Math.max(recoveryFileMinPageCount, batch.size());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,983,recoveryFile.setLength(recoveryFileSizeForPages(t));
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,987,recoveryFile.seek(0);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,989,recoveryFile.writeLong(nextTxid.get());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,993,recoveryFile.writeLong(checksum.getValue());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,995,recoveryFile.writeInt(batch.size());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,998,recoveryFile.seek(RECOVERY_FILE_HEADER_SIZE);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1000,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1001,recoveryFile.writeLong(w.page.getPageId());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1002,recoveryFile.write(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1005,if (enableDiskSyncs) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1007,recoveryFile.getFD().sync();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1010,recoveryPageCount = batch.size();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1013,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1014,writeFile.seek(toOffset(w.page.getPageId()));
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1015,writeFile.write(w.diskBound, 0, pageSize);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1016,w.done();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1020,if (enableDiskSyncs) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1021,writeFile.getFD().sync();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1025,synchronized (writes) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1026,for (PageWrite w : batch) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1029,if (w.isDone()) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1030,writes.remove(w.page.getPageId());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1035,if( checkpointLatch!=null ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1036,checkpointLatch.countDown();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,19,import java.io.DataInputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,20,import java.io.EOFException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,21,import java.io.IOException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,22,import java.io.InputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,23,import java.io.OutputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,24,import java.util.HashMap;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,25,import java.util.Iterator;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,26,import java.util.NoSuchElementException;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,29,import org.apache.kahadb.util.ByteSequence;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,30,import org.apache.kahadb.util.DataByteArrayInputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,31,import org.apache.kahadb.util.DataByteArrayOutputStream;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,32,import org.apache.kahadb.util.Marshaller;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,33,import org.apache.kahadb.util.Sequence;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,34,import org.apache.kahadb.util.SequenceSet;
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,94,private HashMap<Long, PageWrite> writes=new HashMap<Long, PageWrite>();
kahadb/src/main/java/org/apache/kahadb/page/Transaction.java,686,writes.put(key, new PageWrite(page, data));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,460,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,475,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,40,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,462,messageCache.put(send.getMessageId(), send.copy());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,33,import java.util.concurrent.CopyOnWriteArraySet;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,457,if (exclusiveConsumer == null
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,670,if (store != null && message.isPersistent()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1153,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1218,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1607,final void messageSent(final ConnectionContext context, final Message msg) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1703,if (!pagedInMessages.containsKey(ref.getMessageId())) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,196,PList result = this.persistentLists.get(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,197,if (result == null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,198,final PList pl = new PList(this);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,199,pl.setName(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,200,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,201,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,202,pl.setRootId(tx.allocate().getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,203,pl.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,204,metaData.storedSchedulers.put(tx, name, pl);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,207,result = pl;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,208,this.persistentLists.put(name, pl);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,210,final PList load = result;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,211,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,212,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,213,load.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,217,return result;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,220,synchronized public boolean removePList(final String name) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,222,final PList pl = this.persistentLists.remove(name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,223,result = pl != null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,224,if (result) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,225,getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,226,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,227,metaData.storedSchedulers.remove(tx, name);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,228,pl.destroy(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1092,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,196,return token != null && token.length() == 1 && token.charAt(0) == '*';
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,360,return super.isFull() || (systemUsage != null && systemUsage.getTempUsage().isFull());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,173,this.store.incrementJournalCount(tx, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,206,this.store.incrementJournalCount(tx, location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,414,this.store.decrementJournalCount(tx, entry.getLocation());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,25,import java.util.HashSet;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,29,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,43,import org.apache.kahadb.util.IntegerMarshaller;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,48,public class PListStore extends ServiceSupport {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,76,BTreeIndex<Integer, Integer> journalRC;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,81,this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, tx.allocate().getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,88,this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,89,this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,90,this.journalRC.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,105,this.journalRC = new BTreeIndex<Integer, Integer>(pageFile, is.readLong());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,106,this.journalRC.setKeyMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,107,this.journalRC.setValueMarshaller(IntegerMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,112,os.writeLong(this.journalRC.getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,303,synchronized void incrementJournalCount(Transaction tx, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,304,int logId = location.getDataFileId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,305,Integer val = this.metaData.journalRC.get(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,306,int refCount = val != null ? val.intValue() + 1 : 1;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,307,this.metaData.journalRC.put(tx, logId, refCount);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,311,synchronized void decrementJournalCount(Transaction tx, Location location) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,312,int logId = location.getDataFileId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,313,if (logId != Location.NOT_SET) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,314,int refCount = this.metaData.journalRC.get(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,315,refCount--;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,316,if (refCount <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,317,this.metaData.journalRC.remove(tx, logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,318,Set<Integer> set = new HashSet<Integer>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,319,set.add(logId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,320,this.journal.removeDataFiles(set);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,322,this.metaData.journalRC.put(tx, logId, refCount);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,53,throws SQLException, JMSException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,59,s = c.prepareStatement(statements.getAddMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,60,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,61,s.setString(2, destinationName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,62,s.setString(3, messageID);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,63,s.setString(4, " ");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,66,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,71,s = c.prepareStatement(statements.getFindMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,72,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,75,throw new JMSException("Failed to broker message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,86,s = c.prepareStatement(statements.getUpdateMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,88,s.setLong(2, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,91,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,93,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,94,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,97,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,98,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,104,public byte[] doGetMessage(TransactionContext c, long seq) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,110,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,130,throw (SQLException)new SQLException("BLOB could not be updated: " + e).initCause(e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,132,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,133,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,136,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,137,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,670,private static void close(PreparedStatement s) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,677,private static void close(ResultSet rs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,193,Integer count = redeliveredMessages.get(node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,194,if (count != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,195,md.setRedeliveryCounter(count.intValue());
activemq-core/src/main/java/org/apache/activemq/broker/region/NullMessageReference.java,117,throw new RuntimeException("not implemented");
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,35,private final PendingList batchList;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,107,public final void reset() {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,293,Message message = (Message) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,294,last = message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,297,message.setRegionDestination(regionDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,298,message.setMemoryUsage(this.getSystemUsage().getMemoryUsage());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,300,message.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,301,return message;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/TopicStorePrefetch.java,90,LOG.error("Failed to get message count", e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,85,adapter.doAddMessage(c,sequenceId, messageId, destination, data, message.getExpiration(), message.getPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,59,private String deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,345,return deleteOldMessagesStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,565,public void setDeleteOldMessagesStatement(String deleteOldMessagesStatment) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,566,this.deleteOldMessagesStatement = deleteOldMessagesStatment;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/AxionJDBCAdapter.java,57,statements.setDeleteOldMessagesStatement("DELETE FROM " + statements.getFullMessageTableName() + " WHERE ( EXPIRATION<>0 AND EXPIRATION<?)");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,639,s.setLong(1, System.currentTimeMillis());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,641,LOG.debug("Deleted " + i + " old message(s).");
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/SchedulerBroker.java,147,Object cronValue = messageSend.getProperty(ScheduledMessage.AMQ_SCHEDULED_REPEAT);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,135,LOG.warn("Network bridge between: " + localURI + " and: " + uri + " was correctly stopped before it was correctly started.");
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,146,return;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,92,outbound.sendMessage(WebSocket.SENTINEL_FRAME, command.toString());
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,21,import java.util.concurrent.SynchronousQueue;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,22,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,23,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,24,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,31,import java.util.concurrent.ExecutorService;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,32,import java.util.concurrent.Future;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,33,import java.util.concurrent.FutureTask;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,34,import java.util.concurrent.LinkedBlockingQueue;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,35,import java.util.concurrent.Semaphore;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,36,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,37,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,38,import java.util.concurrent.TimeUnit;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,183,this.queueExecutor = new ThreadPoolExecutor(1, asyncExecutorMaxThreads, 0L, TimeUnit.MILLISECONDS,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,191,this.topicExecutor = new ThreadPoolExecutor(1, asyncExecutorMaxThreads, 0L, TimeUnit.MILLISECONDS,
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1068,interface StoreTask {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1099,void aquireLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1112,void releaseLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1135,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1173,void aquireLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1187,void releaseLocks() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1231,releaseLocks();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportFactory.java,63,UdpTransport transport = (UdpTransport) createTransport(location, wf);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,109,if (transactional) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,73,private final String shutdownMutex = "shutdownMutex";
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1623,protected void stopAllConnectors(ServiceStopper stopper) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2052,protected void startAllConnectors() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2285,ioExceptionHandler.setBrokerService(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,91,+ " while trying to handle this excpetion: "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,490,TransactionContext answer = new TransactionContext(getDataSource());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,619,LOG.warn("Failure occured while stopping broker");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,49,public TransactionContext(DataSource dataSource) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,50,this.dataSource = dataSource;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/TransactionContext.java,63,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,25,public class DefaultIOExceptionHandler implements IOExceptionHandler {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,52,new Thread() {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,57,LOG.warn("Failure occured while stopping broker", e);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2184,protected synchronized Scheduler getScheduler() {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,180,this.taskRunnerFactory= new TaskRunnerFactory("AMQPersistenceAdaptor Task", getJournalThreadPriority(),
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,181,true, 1000, isUseDedicatedTaskRunner());
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,204,if (brokerService != null) {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQPersistenceAdapter.java,205,this.scheduler = this.brokerService.getBroker().getScheduler();
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/TxCommand.java,70,return command != null && command.getDataStructureType() == CommandTypes.MESSAGE_ACK;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,100,connectUri = URISupport.removeQuery(connectUri);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,101,connectUri = URISupport.applyParameters(connectUri, parameters);
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,92,new Thread(runnable, name).start();
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,99,Thread thread = new Thread(runnable, name);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransport.java,78,uri = URISupport.applyParameters(uri, parameters);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,143,result = true;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,134,for (URI component : data.getComponents()) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,135,parameters.putAll(component.getQuery() == null ? emptyMap() : parseQuery(stripPrefix(component.getQuery(), "?")));
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,148,if (newQuery.length()!=0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,149,newQuery.append('&');
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,151,newQuery.append(param.getKey()).append('=').append(param.getValue());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,947,final DestinationFilter filter = DestinationFilter.parseFilter(destination);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,952,DestinationFilter exclusionFilter = filter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,954,if (exclusionFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,955,DestinationFilter newFilter = DestinationFilter.parseFilter(match);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,956,if (!(newFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,957,exclusionFilter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,958,match = destination;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,961,if (match != null && exclusionFilter.matches(match) && dests[i].getDestinationType() == destination.getDestinationType()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,969,DestinationFilter inclusionFilter = filter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,971,if (inclusionFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,972,DestinationFilter newFilter = DestinationFilter.parseFilter(match);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,973,if (!(newFilter instanceof org.apache.activemq.filter.SimpleDestinationFilter)) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,974,inclusionFilter = newFilter;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,975,match = destination;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,978,if (match != null && inclusionFilter.matches(match) && dests[i].getDestinationType() == destination.getDestinationType()) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,36,if (cronEntry != null && cronEntry.length() > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,37,List<String> list = tokenize(cronEntry);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,38,List<CronEntry> entries = buildCronEntries(list);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,39,Calendar working = Calendar.getInstance();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,40,working.setTimeInMillis(currentTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,42,CronEntry minutes = entries.get(MINUTES);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,43,CronEntry hours = entries.get(HOURS);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,44,CronEntry dayOfMonth = entries.get(DAY_OF_MONTH);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,45,CronEntry month = entries.get(MONTH);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,48,int currentMinutes = working.get(Calendar.MINUTE);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,49,if (!isCurrent(minutes, currentMinutes)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,50,int nextMinutes = getNext(minutes, currentMinutes);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,51,working.add(Calendar.MINUTE, nextMinutes);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,52,result = working.getTimeInMillis();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,54,int currentHours = working.get(Calendar.HOUR_OF_DAY);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,55,if (!isCurrent(hours, currentHours)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,56,int nextHour = getNext(hours, currentHours);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,57,working.add(Calendar.HOUR_OF_DAY, nextHour);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,58,result = working.getTimeInMillis();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,60,int currentDayOfWeek = working.get(Calendar.DAY_OF_WEEK) - 1;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,62,int nextDay = getNext(dayOfWeek, currentDayOfWeek);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,63,working.add(Calendar.DAY_OF_WEEK, nextDay);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,64,result = working.getTimeInMillis();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,66,int currentMonth = working.get(Calendar.MONTH) + 1;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,67,if (!isCurrent(month, currentMonth)) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,68,int nextMonth = getNext(month, currentMonth);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,69,working.add(Calendar.MONTH, nextMonth);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,70,result = working.getTimeInMillis();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,72,int currentDayOfMonth = working.get(Calendar.DAY_OF_MONTH);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,75,working.add(Calendar.DAY_OF_MONTH, nextDay);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,76,result = working.getTimeInMillis();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,79,if (result == 0) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,81,result = currentTime + 60 * 1000;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,82,result = result / 1000 * 1000;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,85,return result;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,88,static List<String> tokenize(String cron) throws IllegalArgumentException {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,89,StringTokenizer tokenize = new StringTokenizer(cron);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,90,List<String> result = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,91,while (tokenize.hasMoreTokens()) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,92,result.add(tokenize.nextToken());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,94,if (result.size() != NUMBER_TOKENS) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,96,+ "): " + cron);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,98,return result;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,109,static void validate(CronEntry entry) throws MessageFormatException {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,111,List<Integer> list = calculateValues(entry);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,119,List<Integer> list = calculateValues(entry);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,120,Collections.sort(list);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,140,List<Integer> list = calculateValues(entry);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,141,boolean result = list.contains(new Integer(current));
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,145,protected static List<Integer> calculateValues(CronEntry entry) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,582,Object value = getObjectProperty(name);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,583,if (value == null) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,584,if (name.equals("JMSXUserID")) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,585,value = getUserID();
activemq-core/src/main/java/org/apache/activemq/ActiveMQQueueSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/ActiveMQTopicSession.java,301,return next.equals(arg0);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,498,String path = getDirectory() != null ? getDirectory().toString() : "DIRECTORY_NOT_SET";
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1096,String subscriptionKey = command.getSubscriptionKey();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1107,String subscriptionKey = command.getSubscriptionKey();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,37,Message rc = ((Queue)destination).getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,101,Message rc = queue.getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,103,rc = rc.copy();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,104,rc.getMessage().setRedeliveryCounter(0);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,108,return queue.moveMessageTo(context, rc, originalDestination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,432,LOG.debug("remove sub: " + sub + ", lastDeliveredSeqId: " + lastDeiveredSequenceId + ", dequeues: "
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1051,public Message getMessage(String id) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1055,QueueMessageReference r = this.pagedInMessages.get(msgId);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1056,if (r != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1057,return r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1067,MessageReference r = messages.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1068,r.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1069,messages.rollback(r.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1070,if (msgId.equals(r.getMessageId())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1071,Message m = r.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1072,if (m != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1073,return m;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1075,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1263,public boolean moveMessageTo(ConnectionContext context, Message m, ActiveMQDestination dest) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1264,QueueMessageReference r = createMessageReference(m);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1265,BrokerSupport.resend(context, m, dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1266,removeMessage(context, r);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1269,messages.rollback(r.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1310,Set<MessageReference> set = new CopyOnWriteArraySet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1319,List<MessageReference> list = new ArrayList<MessageReference>(set);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1320,for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1321,IndirectMessageReference r = (IndirectMessageReference) ref;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1322,if (filter.evaluate(context, r)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1324,moveMessageTo(context, ref.getMessage(), dest);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1325,set.remove(r);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,107,LOG.debug(""+(now-lastRunTime)+" ms elapsed since last write check.");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,135,LOG.trace("No message sent since last write check, sending a KeepAliveInfo");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,153,LOG.trace("Message sent since last write check, resetting flag");
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,33,import org.osgi.service.command.CommandSession;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,35,import java.lang.reflect.Field;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,36,import java.lang.reflect.Type;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,37,import java.util.ArrayList;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,38,import java.util.HashMap;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,39,import java.util.Iterator;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,40,import java.util.List;
activemq-karaf/src/main/java/org/apache/activemq/karaf/commands/ActiveMQCommand.java,41,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransportFactory.java,40,return createTransport(failoverTransport, compositeData);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransportFactory.java,51,public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/DiscoveryTransportFactory.java,54,Map<String, String> parameters = new HashMap<String, String>(compositeData.getParameters());
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransportFactory.java,67,DiscoveryTransport discoveryTransport = DiscoveryTransportFactory.createTransport(fanoutTransport, compositeData);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1644,private List<QueueMessageReference> doPageIn(boolean force) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1838,doDispatch(doPageIn(force));
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,140,LOG.warn("path isn't a valid local location for TcpTransport to use", e);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,156,if (text != null && text.length() > 63) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,157,text = text.substring(0, 45) + "..." + text.substring(text.length() - 12);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,158,HashMap<String, Object> overrideFields = new HashMap<String, Object>();
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,159,overrideFields.put("text", text);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,160,return super.toString(overrideFields);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1262,LOG.debug(getConsumerId() + " tracking transacted redlivery of duplicate: " + md.getMessage());
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,163,recvCount.notify();
activemq-tooling/maven-activemq-perf-plugin/src/main/java/org/apache/activemq/tool/JmsConsumerClient.java,172,recvCount.wait();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,62,private final AtomicBoolean stopping = new AtomicBoolean();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,78,if (disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,79,return;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,81,super.stop();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,82,if (connectionCount.decrementAndGet() == 0 && disposeOnDisconnect) {
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransportServer.java,83,VMTransportServer.this.stop();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,266,Message message = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,267,message = (Message)request.getAttribute("message");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,272,MessageAvailableConsumer consumer = (MessageAvailableConsumer)request.getAttribute("consumer");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,966,KahaTransactionInfo createTransactionInfo(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,967,if (txid == null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,968,return null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,970,KahaTransactionInfo rc = new KahaTransactionInfo();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,972,if (txid.isLocalTransaction()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,973,LocalTransactionId t = (LocalTransactionId) txid;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,974,KahaLocalTransactionId kahaTxId = new KahaLocalTransactionId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,975,kahaTxId.setConnectionId(t.getConnectionId().getValue());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,976,kahaTxId.setTransacitonId(t.getValue());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,977,rc.setLocalTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,979,XATransactionId t = (XATransactionId) txid;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,980,KahaXATransactionId kahaTxId = new KahaXATransactionId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,981,kahaTxId.setBranchQualifier(new Buffer(t.getBranchQualifier()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,982,kahaTxId.setGlobalTransactionId(new Buffer(t.getGlobalTransactionId()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,983,kahaTxId.setFormatId(t.getFormatId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,984,rc.setXaTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,986,return rc;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,405,private Location getFirstInProgressTxLocation() {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,46,CronEntry dayOfWeek = entries.get(DAY_OF_MONTH);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/CronParser.java,74,int nextDay = getNext(dayOfMonth, currentMonth);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1869,broker = new UserIDBroker(broker);
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,111,isSSL = (managedTransportConnector.getServer() instanceof SslTransportServer);
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,113,isSSL = false;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,120,super.removeConnection(context, info, error);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,129,return true;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,133,principals.add(new UserPrincipal(user));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,135,for (Enumeration enumeration = groups.keys(); enumeration.hasMoreElements();) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,136,String name = (String)enumeration.nextElement();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,137,String[] userList = ((String)groups.getProperty(name) + "").split(",");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,138,for (int i = 0; i < userList.length; i++) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,139,if (user.equals(userList[i])) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,140,principals.add(new GroupPrincipal(name));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,141,break;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,146,subject.getPrincipals().addAll(principals);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,151,LOG.debug("commit");
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,153,return true;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,42,static {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,44,String[] additionalPath = new String[] {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,47,synchronized (PropertyEditorManager.class) {
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,48,String[] existingSearchPath = PropertyEditorManager.getEditorSearchPath();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,49,String[] newSearchPath = (String[]) Array.newInstance(String.class,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,50,existingSearchPath.length + additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,51,System.arraycopy(existingSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,52,newSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,53,existingSearchPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,54,System.arraycopy(additionalPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,55,newSearchPath, existingSearchPath.length,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,56,additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,57,PropertyEditorManager.setEditorSearchPath(newSearchPath);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,58,PropertyEditorManager.registerEditor(String[].class, StringArrayEditor.class);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1140,Location firstTxLocation = metadata.lastUpdate;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1142,firstTxLocation = metadata.firstInProgressTransactionLocation;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/OpenTypeSupport.java,305,rc.put(BODY_PREVIEW, new byte[] {});
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,154,private BrokerId	duplexRemoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1188,BrokerId	remoteBrokerId = info.getBrokerId();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1189,setDuplexRemoteBrokerId(remoteBrokerId);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1191,for (Iterator<TransportConnection> iter = connections.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1192,TransportConnection c = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1193,if ((c != this) && (remoteBrokerId.equals(c.getDuplexRemoteBrokerId()))) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1194,LOG.warn("An existing duplex active connection already exists for this broker (" + remoteBrokerId + "). Stopping it.");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1195,c.stop();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1198,Properties properties = MarshallingSupport.stringToProperties(info.getNetworkProperties());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1199,Map<String, String> props = createMap(properties);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1200,NetworkBridgeConfiguration config = new NetworkBridgeConfiguration();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1201,IntrospectionSupport.setProperties(config, props, "");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1202,config.setBrokerName(broker.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1216,LOG.info("Created Duplex Bridge back to " + info.getBrokerName());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1219,LOG.warn("Duplex Bridge back to " + info.getBrokerName() + " was correctly stopped before it was correctly started.");
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1222,LOG.error("Creating duplex network bridge", e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1415,protected synchronized void setDuplexRemoteBrokerId(BrokerId remoteBrokerId) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1416,this.duplexRemoteBrokerId = remoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1419,protected synchronized BrokerId getDuplexRemoteBrokerId() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1420,return this.duplexRemoteBrokerId;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,285,protected void startLocalBridge() throws Exception {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,296,localClientId = "NC_" + remoteBrokerName + "_inbound_" + configuration.getBrokerName();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,308,localBroker.oneway(localConnectionInfo);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,354,remoteConnectionInfo.setClientId("NC_" + configuration.getBrokerName() + "_outbound");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,848,public ActiveMQDestination[] getStaticallyIncludedDestinations() {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,235,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,236,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,237,if (name == null) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,238,name = discoveryAgent.toString();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,239,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,241,return name;
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,277,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,279,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,280,if (name == null) {
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,281,name = this.getClass().getName() + " [" + ldapURI.toString() + "]";
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,282,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/LdapNetworkConnector.java,284,return name;
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,144,public String getName() {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,145,String name = super.getName();
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,146,if(name == null) {
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,147,name = remoteTransport.toString();
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,148,super.setName(name);
activemq-core/src/main/java/org/apache/activemq/network/MulticastNetworkConnector.java,150,return name;
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,42,private String name = null;
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,226,if(this.name == null) {
activemq-core/src/main/java/org/apache/activemq/network/NetworkBridgeConfiguration.java,227,this.name = "localhost";
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,213,LOG.info("Network Connector " + getName() + " Started");
activemq-core/src/main/java/org/apache/activemq/network/NetworkConnector.java,217,LOG.info("Network Connector " + getName() + " Stopped");
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,236,throw new InactivityIOException("Channel was inactive for too long: "+next.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,457,Map.Entry<Long, List<JobLocation>> first = getNextToSchedule();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,458,if (first != null) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,459,List<JobLocation> list = new ArrayList<JobLocation>(first.getValue());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,460,final long executionTime = first.getKey();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,461,long nextExecutionTime = 0;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,462,if (executionTime <= currentTime) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,464,for (final JobLocation job : list) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,465,int repeat = job.getRepeat();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,466,nextExecutionTime = calculateNextExecutionTime(job, currentTime, repeat);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,467,long waitTime = nextExecutionTime - currentTime;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,468,this.scheduleTime.setWaitTime(waitTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,469,if (job.isCron() == false) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,470,fireJob(job);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,471,if (repeat != 0) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,472,repeat--;
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,473,job.setRepeat(repeat);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,476,removeFromIndex(executionTime, job.getJobId());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,478,storeJob(job, nextExecutionTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,482,if (repeat == 0) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,488,if (nextExecutionTime > currentTime) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,492,removeFromIndex(executionTime, job.getJobId());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,494,storeJob(job, nextExecutionTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,504,String jobId = ID_GENERATOR.generateId();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,505,ByteSequence payload = getPayload(job.getLocation());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,506,schedule(jobId, payload, "", job.getDelay(), job.getPeriod(), job.getRepeat());
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,507,waitTime = job.getDelay() != 0 ? job.getDelay() : job.getPeriod();
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,508,this.scheduleTime.setWaitTime(waitTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,515,remove(executionTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,517,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,518,LOG.debug("Not yet time to execute the job, waiting " + (executionTime - currentTime) + " ms");
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,520,this.scheduleTime.setWaitTime(executionTime - currentTime);
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,91,public void schedule(final String jobId, final ByteSequence payload, final long delay) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,99,public void schedule(final String jobId, final ByteSequence payload, final String cronEntry) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/scheduler/JobSchedulerImpl.java,108,public void schedule(final String jobId, final ByteSequence payload, final String cronEntry, final long delay,
activemq-core/src/main/java/org/apache/activemq/TransactionContext.java,91,return transactionId != null && transactionId.isXATransaction();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,173,if (cacheEnabled && hasSpace()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,174,recoverMessage(node.getMessage(),true);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,175,lastCachedId = node.getMessageId();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,178,cacheEnabled=false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,182,+ " current node seqId: " + node.getMessageId().getBrokerSequenceId());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,185,if (lastCachedId != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,186,setBatch(lastCachedId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,488,for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx); iterator
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,490,&& listener.hasSpace();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,496,if (counter >= maxReturned || listener.hasSpace() == false) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,532,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,544,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1976,lastDefaultKey = nextPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1980,lastHighKey = nextPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1983,lastLowKey = nextPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1987,lastDefaultKey = nextPosition;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,272,checkpointThread = new Thread("ActiveMQ Journal Checkpoint Worker") {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,274,public void run() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,275,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,276,long lastCleanup = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,277,long lastCheckpoint = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,280,long sleepTime = Math.min(checkpointInterval, 500);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,281,while (opened.get()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,282,Thread.sleep(sleepTime);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,283,long now = System.currentTimeMillis();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,284,if( now - lastCleanup >= cleanupInterval ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,285,checkpointCleanup(true);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,286,lastCleanup = now;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,287,lastCheckpoint = now;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,289,checkpointCleanup(false);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,290,lastCheckpoint = now;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,296,LOG.error("Checkpoint failed", ioe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,297,brokerService.handleIOException(ioe);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,302,checkpointThread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,303,checkpointThread.start();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,377,checkpointThread.join();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,760,LOG.info("KahaDB: Recovering checkpoint thread after exception");
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,682,public Map<Integer, DataFile> getFileMap() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1132,final TreeSet<Integer> gcCandidateSet = new TreeSet<Integer>(journal.getFileMap().keySet());
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTempDestination.java,51,connection.deleteTempDestination(this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,201,LOG.debug(getName() + "P roducer Flow Control Timeout Task is stopping");
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,672,result = store.asyncAddQueueMessage(context, message);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,61,if (!this.storeHasMessages&&useCache) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,62,cacheEnabled=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,211,if (size==0 && isStarted() && useCache && hasSpace() && isStoreEmpty()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,212,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,213,LOG.debug(regionDestination.getActiveMQDestination().getPhysicalName() + " enabling cache on last remove");
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,215,cacheEnabled=true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/FilePendingMessageCursor.java,71,this.useCache = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/VMPendingMessageCursor.java,40,this.useCache = false;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,728,for (Iterator iter = cs.getTempDesinations().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionState.java,122,public List<DestinationInfo> getTempDesinations() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,297,for (Iterator iter2 = connectionState.getTempDesinations().iterator(); iter2.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1017,if (brokerInfo != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1018,broker.removeBroker(this, brokerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1230,broker.addBroker(this, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,95,private final CopyOnWriteArrayList<BrokerInfo> brokerInfos = new CopyOnWriteArrayList<BrokerInfo>();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,617,brokerInfos.add(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,624,brokerInfos.remove(info);
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,632,result = brokerInfos.toArray(result);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,232,if (configuration.isDuplex() && duplexInitiatingConnection == null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,234,remoteBrokerNameKnownLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,242,NetworkBridgeListener l = this.networkBridgeListener;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,243,if (l != null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,244,l.onStart(this);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,134,if (connectedTransport.get() == null && !disposed) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,628,reconnect(rebalance);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,648,Transport transport = this.connectedTransport.getAndSet(null);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,649,if (transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,650,try {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,651,transport.stop();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,653,LOG.debug("Caught an exception stopping existing transport", e);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,688,LOG.debug("urlList connectionList:" + l);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,803,if (connectedTransport.get() != null || disposed || connectionFailure != null) {
activemq-core/src/main/java/org/apache/activemq/util/osgi/Activator.java,202,return bundle.loadClass(Activator.class.getName())==Activator.class;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,257,String publishableConnectString = theConnectURI.toString();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,260,if (theConnectURI.getRawQuery() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,261,publishableConnectString = publishableConnectString.substring(0, publishableConnectString
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,262,.indexOf(theConnectURI.getRawQuery()) - 1);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,459,if (getBrokerService().getDefaultSocketURI() != null) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,460,url = getBrokerService().getDefaultSocketURI().toString();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,162,private URI defaultSocketURI;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1313,public URI getDefaultSocketURI() {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1316,if (this.defaultSocketURI==null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1318,URI result = null;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1320,result = tc.getConnectUri();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1325,this.defaultSocketURI=result;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1330,return this.defaultSocketURI;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2081,if (getDefaultSocketURI() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2082,connector.setBrokerURL(getDefaultSocketURI().toString());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,586,if (!cs.getSessionIds().contains(info.getSessionId())) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,255,private String getPublishableConnectString() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,387,if (brokerService.getDefaultSocketURI() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,388,self += brokerService.getDefaultSocketURI().toString();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,389,self += ",";
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,391,if (rebalance == false) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,392,connectedBrokers += self;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,394,if (this.broker.getPeerBrokerInfos() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,395,for (BrokerInfo info : this.broker.getPeerBrokerInfos()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,396,if (isMatchesClusterFilter(info.getBrokerName())) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,397,connectedBrokers += info.getBrokerURL();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,398,connectedBrokers += ",";
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,402,if (rebalance) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,403,connectedBrokers += self;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1240,return store(new KahaProducerAuditCommand().setAudit(new Buffer(baos.toByteArray())));
kahadb/src/main/java/org/apache/kahadb/journal/DataFileAppender.java,426,wb.latch.countDown();
kahadb/src/main/java/org/apache/kahadb/journal/DataFileAppender.java,430,nextWriteBatch.latch.countDown();
kahadb/src/main/java/org/apache/kahadb/journal/DataFileAppender.java,431,nextWriteBatch.exception.set(e);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,1705,message.setJMSDestination(destination);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,356,if (!memoryUsage.notifyCallbackWhenNotFull(sendMessagesWaitingForSpaceTask)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,358,sendMessagesWaitingForSpaceTask.run();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,23,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,24,import java.util.List;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,25,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,290,if (message == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,293,if (continuation.isExpired()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,210,if (prefetch == ActiveMQPrefetchPolicy.DEFAULT_DURABLE_TOPIC_PREFETCH){
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,471,if (producerExchange.isMutable() || producerExchange.getRegion() == null) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,28,import java.util.concurrent.SynchronousQueue;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,29,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,30,import java.util.concurrent.ThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,95,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,254,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,270,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,394,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,436,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,637,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,664,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1268,static {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1269,ASYNC_TASKS = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1270,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1271,Thread thread = new Thread(runnable, "NetworkBridge");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1272,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1273,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,41,private final static Log LOG = LogFactory.getLog(SimpleDiscoveryAgent.class);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,42,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,113,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,120,LOG.debug("Failure occured soon after the discovery event was generated.  It will be clasified as a connection failure: "+event);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,135,LOG.debug("Waiting "+event.reconnectDelay+" ms before attepting to reconnect.");
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,218,static {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,219,ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,220,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,221,Thread thread = new Thread(runnable, "Simple Discovery Agent: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,222,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,223,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,47,private static final TaskRunnerFactory TASK_RUNNER_FACTORY = new TaskRunnerFactory("VMTransport", Thread.NORM_PRIORITY, true, 1000, false);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,333,taskRunner = TASK_RUNNER_FACTORY.createTaskRunner(this, "VMTransport: " + toString());
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,614,if (contains(u[i])==false) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,615,uris.add(i, u[i]);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionView.java,247,public long getDispachedCounter() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/SubscriptionViewMBean.java,116,long getDispachedCounter();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,44,private static final ThreadPoolExecutor ASYNC_TASKS;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,329,static {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,330,ASYNC_TASKS =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,331,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,332,Thread thread = new Thread(runnable, "InactivityMonitor Async Task: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,333,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,334,return thread;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,57,private static final ThreadPoolExecutor SOCKET_CLOSE;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,518,SOCKET_CLOSE.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,615,static {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,616,SOCKET_CLOSE =   new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,617,public Thread newThread(Runnable runnable) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,618,Thread thread = new Thread(runnable, "TcpSocketClose: "+runnable);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,619,thread.setPriority(Thread.MAX_PRIORITY);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,620,thread.setDaemon(true);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,621,return thread;
kahadb/src/main/java/org/apache/kahadb/journal/Journal.java,120,private Timer timer = new Timer("KahaDB Scheduler", true);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,93,private long initialReconnectDelay = 10;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,453,int size = writes.size();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,454,long start = System.currentTimeMillis();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,455,checkpointLatch.await();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,456,long end = System.currentTimeMillis();
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,457,if( end-start > 100 ) {
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,458,LOG.warn("KahaDB PageFile flush: " + size + " queued writes, latch wait took "+(end-start));
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PriorityNetworkDispatchPolicy.java,50,for (Subscription candidate: duplicateFreeSubs) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PriorityNetworkDispatchPolicy.java,53,duplicateFreeSubs.remove(candidate);
activemq-core/src/main/java/org/apache/activemq/security/SimpleAuthenticationBroker.java,95,super.addConnection(context, info);
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,29,import java.util.ArrayList;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,30,import java.util.Arrays;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,31,import java.util.Collection;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,32,import java.util.Iterator;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,33,import java.util.LinkedHashMap;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,34,import java.util.Map;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,35,import java.util.Properties;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,36,import java.util.TreeMap;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,109,private LRUCache<Long, Page> pageCache;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,304,pageCache = new LRUCache<Long, Page>(pageCacheSize, pageCacheSize, 0.75f, true);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,717,final SubscriptionInfo info = lookupSubscription(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,731,try {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,732,String selector = info.getSelector();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,733,BooleanExpression selectorExpression = null;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,734,if (selector != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,735,selectorExpression = SelectorParser.parse(selector);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,738,.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,739,Entry<Long, MessageKeys> entry = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,740,if (selectorExpression != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,741,MessageEvaluationContext ctx = new MessageEvaluationContext();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,742,ctx.setMessageReference(loadMessage(entry.getValue().location));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,743,if (selectorExpression.matches(ctx)) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,744,counter++;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,747,counter++;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,750,sd.orderIndex.resetCursorPosition();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,752,throw IOExceptionSupport.create(e);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,723,Long cursorPos = sd.subscriptionAcks.get(tx, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,770,Long cursorPos = sd.subscriptionAcks.get(tx, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1103,sd.subscriptionAcks.put(tx, subscriptionKey, ackLocation);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1109,Long prev = sd.subscriptionAcks.remove(tx, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1110,if( prev!=null ) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1297,BTreeIndex<String, Long> subscriptionAcks;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1312,value.subscriptionAcks = new BTreeIndex<String, Long>(pageFile, dataIn.readLong());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1424,rc.subscriptionAcks = new BTreeIndex<String, Long>(pageFile, tx.allocate());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1451,rc.subscriptionAcks.setValueMarshaller(LongMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1466,if (lastAckedMessageId != NOT_ACKED) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1467,rc.orderIndex.nextMessageId = lastAckedMessageId+1;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1877,class MessageOrderIndex{
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,102,private long reconnectDelay = this.initialReconnectDelay;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,810,if (!useExponentialBackOff) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,19,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,21,import java.util.LinkedHashMap;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,22,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,56,super.start();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,900,if (loadedStore.ackPositions.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,97,static final int VERSION = 2;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,162,if (version > 1) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,163,os.writeInt(version);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,252,pageFile.flush();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,982,if (sd.subscriptions != null && sd.ackPositions.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1043,addAckLocation(sd, sequence, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1104,addAckLocation(sd, ackLocation, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1299,TreeMap<Long, HashSet<String>> ackPositions;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1305,StoredDestination value = new StoredDestination();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1332,if (metadata.version >= 2) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1333,dataOut.writeLong(value.orderIndex.lowPriorityIndex.getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1334,dataOut.writeLong(value.orderIndex.highPriorityIndex.getPageId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1454,rc.ackPositions = new TreeMap<Long, HashSet<String>>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1457,for (Iterator<Entry<String, Long>> iterator = rc.subscriptionAcks.iterator(tx); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1458,Entry<String, Long> entry = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1464,if (!rc.ackPositions.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1465,Long lastAckedMessageId = rc.ackPositions.lastKey();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1481,private void addAckLocation(StoredDestination sd, Long messageSequence, String subscriptionKey) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1482,HashSet<String> hs = sd.ackPositions.get(messageSequence);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1485,sd.ackPositions.put(messageSequence, hs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1500,HashSet<String> hs = sd.ackPositions.get(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1505,sd.ackPositions.remove(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1903,if (metadata.version >= 2) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1904,lowPriorityIndex.setKeyMarshaller(LongMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1905,lowPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1906,lowPriorityIndex.load(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1908,highPriorityIndex.setKeyMarshaller(LongMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1909,highPriorityIndex.setValueMarshaller(MessageKeysMarshaller.INSTANCE);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1910,highPriorityIndex.load(tx);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,261,public void setMaxBatchSize(int maxBatchSize) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,262,for (PendingMessageCursor storePrefetch : storePrefetches) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,263,storePrefetch.setMaxBatchSize(maxBatchSize);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/StoreDurableSubscriberCursor.java,265,super.setMaxBatchSize(maxBatchSize);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,796,s.setMaxRows(maxReturned * 2);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,34,void setPrioritizedMessages(boolean prioritizedMessages);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,62,void doSetSubscriberEntry(TransactionContext c, SubscriptionInfo subscriptionInfo, boolean retroactive) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,72,void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,82,int doGetDurableSubscriberMessageCount(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,299,adapter.setPrioritizedMessages(prioritizedMessages);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,336,getAdapter().doDeleteOldMessages(c);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,148,adapter.doSetSubscriberEntry(c, subscriptionInfo, retroactive);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,202,result = adapter.doGetDurableSubscriberMessageCount(c, destination, clientId, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,20,import java.io.PrintStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,21,import java.sql.Connection;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,24,import java.sql.ResultSetMetaData;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,32,import javax.jms.Message;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,449,if (isPrioritizedMessages()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,450,s = c.getConnection().prepareStatement(this.statements.getFindDurableSubMessagesByPriorityStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,452,s = c.getConnection().prepareStatement(this.statements.getFindDurableSubMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,485,String clientId, String subscriptionName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,634,public void doDeleteOldMessages(TransactionContext c) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,730,public boolean isPrioritizedMessages() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,731,return prioritizedMessages;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,734,public void setPrioritizedMessages(boolean prioritizedMessages) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,735,this.prioritizedMessages = prioritizedMessages;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,791,if (isPrioritizedMessages()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,50,private boolean active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,64,return active;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,68,return !active || super.isFull();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,91,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,104,if (!active) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,105,this.active = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,142,active = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,201,if (!active && !keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,214,if (active || keepDurableSubsActive) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,226,return active;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,42,private Map<String, AtomicLong> subscriberLastMessageMap = new ConcurrentHashMap<String, AtomicLong>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,43,private Map<String, AtomicLong> subscriberLastPriorityMap = new ConcurrentHashMap<String, AtomicLong>();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,53,long[] res = adapter.getStoreSequenceId(c, destination, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,54,adapter.doSetLastAck(c, destination, clientId, subscriptionName, res[0], res[1]);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,92,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,93,AtomicLong last = subscriberLastMessageMap.get(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,94,AtomicLong priority = subscriberLastPriorityMap.get(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,95,if (last == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,98,subscriberLastMessageMap.put(subcriberId, last);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,100,subscriberLastMessageMap.put(subcriberId, priority);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,102,final AtomicLong finalLast = last;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,103,final AtomicLong finalPriority = priority;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,105,adapter.doRecoverNextMessages(c, destination, clientId, subscriptionName, last.get(), priority.get(), maxReturned, new JDBCMessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,112,finalLast.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,113,finalPriority.set(msg.getPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,129,subscriberLastMessageMap.put(subcriberId, finalLast);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,130,subscriberLastPriorityMap.put(subcriberId, finalPriority);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,135,String subcriberId = getSubscriptionKey(clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,136,subscriberLastMessageMap.remove(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,137,subscriberLastPriorityMap.remove(subcriberId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,51,private String updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,223,public String getUpdateLastAckOfDurableSubStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,224,if (updateLastAckOfDurableSubStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,228,return updateLastAckOfDurableSubStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,245,+ " ORDER BY M.ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,255,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > ?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,266,+ " AND M.CONTAINER=D.CONTAINER AND "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,336,public String getDeleteOldMessagesStatement() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,337,if (deleteOldMessagesStatement == null) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,629,public void setUpdateLastAckOfDurableSubStatement(String updateLastAckOfDurableSub) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,630,this.updateLastAckOfDurableSubStatement = updateLastAckOfDurableSub;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,385,public void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,390,s = c.getConnection().prepareStatement(this.statements.getUpdateLastAckOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,407,s.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,458,s.setLong(4, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,459,if (isPrioritizedMessages()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,460,s.setLong(5, priority);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,461,s.setLong(6, priority);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,490,s = c.getConnection().prepareStatement(this.statements.getDurableSubscriberMessageCountStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,521,long priority = Byte.MAX_VALUE - 1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,536,s.setString(1, info.getDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,537,s.setString(2, info.getClientId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,538,s.setString(3, info.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,539,s.setString(4, info.getSelector());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,540,s.setLong(5, lastMessageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,541,s.setString(6, info.getSubscribedDestination().getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,542,s.setLong(7, priority);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,543,if (s.executeUpdate() != 1) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,544,throw new IOException("Could not create durable subscription for: " + info.getClientId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,637,LOG.debug("Executing SQL: " + this.statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,638,s = c.getConnection().prepareStatement(this.statements.getDeleteOldMessagesStatement());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,565,LOG.debug(configuration.getBrokerName() + " Ignoring sub  from " + remoteBrokerName + ", restricted to " + networkTTL + " network hops only : " + info);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,714,LOG.debug("bridging " + configuration.getBrokerName() + " -> " + remoteBrokerName + ", consumer: " + md.getConsumerId() + ", brokerPath: " + Arrays.toString(message.getBrokerPath()) + ", message: " + message);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,24,import java.util.Map;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,53,private final Map<String, BlockingQueueTransport> clients = new HashMap<String, BlockingQueueTransport>();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,155,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,156,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,157,if (answer == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,158,LOG.warn("The clientID header specified is invalid. Client sesion has not yet been established for it: " + clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,159,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,161,return answer;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,166,String clientID = request.getHeader("clientID");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,174,synchronized (this) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,175,BlockingQueueTransport answer = clients.get(clientID);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,176,if (answer != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,179,return null;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,182,answer = createTransportChannel();
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,183,clients.put(clientID, answer);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,186,while (!answer.isConnected()) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,187,try {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,188,Thread.sleep(100);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,192,return answer;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,210,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,218,+ getFullAckTableName() + " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,225,updateLastAckOfDurableSubStatement = "UPDATE " + getFullAckTableName() + " SET LAST_ACKED_ID=?, PRIORITY=?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,226,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,267,+ "((M.ID > ? AND M.PRIORITY = ?) OR M.PRIORITY < ?)"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,309,+ " WHERE D.CONTAINER=? AND D.CLIENT_ID=? AND D.SUB_NAME=?"
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,396,s.setLong(2, prio);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,397,s.setString(3, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,398,s.setString(4, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,399,s.setString(5, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,403,throw new SQLException("Failed add a message");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,661,rs.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,662,s.close();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,133,DurableTopicSubscription sub = durableSubscriptions.get(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,187,if (sub.getConsumerInfo().isDurable()) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,188,view = new DurableSubscriptionView(this, context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,190,if (sub instanceof TopicSubscription) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,191,view = new TopicSubscriptionView(context.getClientId(), (TopicSubscription)sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,193,view = new SubscriptionView(context.getClientId(), sub);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,196,registerSubscription(objectName, sub.getConsumerInfo(), key, view);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,234,unregisterSubscription(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,340,protected void unregisterSubscription(ObjectName key) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,343,inactiveDurableTopicSubscribers.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,358,SubscriptionInfo info = new SubscriptionInfo();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,359,info.setClientId(subscriptionKey.getClientId());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,360,info.setSubscriptionName(subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,361,info.setDestination(new ActiveMQTopic(view.getDestinationName()));
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedRegionBroker.java,362,addInactiveSubscription(subscriptionKey, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,141,durableSubscriptions.remove(key);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,152,super.removeConsumer(context, sub.getConsumerInfo());
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,811,LOG.debug("Expired message with no DLQ strategy in place");
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,207,localHostName = java.net.InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,595,brokerName = java.net.InetAddress.getLocalHost().getHostName().toLowerCase();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,403,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,336,result = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransport.java,343,String localName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,19,import java.net.InetAddress;
activemq-core/src/main/java/org/apache/activemq/util/IdGenerator.java,52,hostName = InetAddress.getLocalHost().getHostName();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,793,if (context.isInTransaction()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,794,store.removeMessage(context, ack);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,796,store.removeAsyncMessage(context, ack);
activemq-core/src/main/java/org/apache/activemq/transport/peer/PeerTransportFactory.java,94,TransportConnector c = service.addConnector("tcp://localhost:0");
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBTransactionStore.java,277,if (txid.isXATransaction() || theStore.isConcurrentStoreAndDispatchTransactions()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,631,doAcknowledge(context, subscriptionKey, messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,634,doAcknowledge(context, subscriptionKey, messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,1217,this.topicStore.doAcknowledge(context, key, this.message.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1652,+ pagedInMessages.size() + ", enqueueSize: " + destinationStatistics.getEnqueues().getCount());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1040,removeAckLocation(tx, sd, subscriptionKey, prev);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1157,for (StoredDestination sd : storedDestinations.values()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1163,sd.locationIndex.visit(tx, new BTreeVisitor<Location, Long>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1219,LOG.debug("not removing data file: " + candidate
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1504,HashSet<String> firstSet = sd.ackPositions.values().iterator().next();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1510,if (hs == firstSet) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1513,ArrayList<Entry<Long, MessageKeys>> deletes = new ArrayList<Entry<Long, MessageKeys>>();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1514,sd.orderIndex.getDeleteList(tx, deletes, sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1517,for (Entry<Long, MessageKeys> entry : deletes) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1518,sd.locationIndex.remove(tx, entry.getValue().location);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1519,sd.messageIdIndex.remove(tx,entry.getValue().messageId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1520,sd.orderIndex.remove(tx,entry.getKey());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2021,for (Iterator<Entry<Long, MessageKeys>> iterator = index.iterator(tx); iterator.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2022,Entry<Long, MessageKeys> entry = iterator.next();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2027,deletes.add(entry);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2030,break;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,82,import org.apache.activemq.security.SecurityContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,95,import org.apache.activemq.util.DefaultIOExceptionHandler;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,96,import org.apache.activemq.util.IOExceptionHandler;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,97,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,98,import org.apache.activemq.util.IOHelper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,99,import org.apache.activemq.util.JMXSupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,100,import org.apache.activemq.util.ServiceStopper;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,101,import org.apache.activemq.util.URISupport;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2005,ConnectionContext adminConnectionContext = getBroker().getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2006,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2007,adminConnectionContext = createAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2008,getBroker().setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2010,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2019,protected ConnectionContext createAdminConnectionContext() throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2020,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2021,context.setBroker(getBroker());
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2022,context.setSecurityContext(SecurityContext.BROKER_SECURITY_CONTEXT);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2023,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,29,import org.apache.activemq.broker.Broker;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,298,public static ConnectionContext getConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,299,ConnectionContext adminConnectionContext = broker.getAdminConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,300,if (adminConnectionContext == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,301,adminConnectionContext = createAdminConnectionContext(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,302,broker.setAdminConnectionContext(adminConnectionContext);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,304,return adminConnectionContext;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,313,protected static ConnectionContext createAdminConnectionContext(Broker broker) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,314,ConnectionContext context = new ConnectionContext();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,315,context.setBroker(broker);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,316,return context;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,61,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,67,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,73,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,79,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,85,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,91,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,107,ConnectionContext context = BrokerView.getConnectionContext(broker.getContextBroker());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,103,LOG.debug("Activating " + this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,110,prefetch += prefetch/2;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,505,topicStore.acknowledge(context, key.getClientId(), key.getSubscriptionName(), node.getMessageId());
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,77,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/ProxyTopicMessageStore.java,78,delegate.acknowledge(context, clientId, subscriptionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/TopicMessageStore.java,42,void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException;
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,82,public void acknowledge(final ConnectionContext context, final String clientId, final String subscriptionName, final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQTopicMessageStore.java,143,topicReferenceStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,86,void doRecoverNextMessages(TransactionContext c, ActiveMQDestination destination, long nextSeq, int maxReturned, JDBCMessageRecoveryListener listener) throws Exception;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,88,long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriberName) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,47,protected AtomicLong lastStoreSequenceId = new AtomicLong(-1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,147,long seq = getStoreSequenceIdForMessageId(ack.getLastMessageId());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,228,adapter.doRecoverNextMessages(c, destination, lastStoreSequenceId.get(), maxReturned, new JDBCMessageRecoveryListener() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,235,lastStoreSequenceId.set(sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,262,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,263,LOG.debug(destination.getPhysicalName() + " resetBatch, existing last seqId: " + lastStoreSequenceId.get());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,265,lastStoreSequenceId.set(-1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,271,long storeSequenceId = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,273,storeSequenceId = getStoreSequenceIdForMessageId(messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,277,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,278,LOG.debug(destination.getPhysicalName() + " setBatch: new sequenceId: " + storeSequenceId + ",existing last seqId: " + lastStoreSequenceId.get());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,280,lastStoreSequenceId.set(storeSequenceId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,283,private long getStoreSequenceIdForMessageId(MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,284,long result = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,287,result = adapter.getStoreSequenceId(c, destination, messageId)[0];
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,49,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,96,long lastAcked = adapter.doGetLastAckedDurableSubscriberMessageId(c, destination, clientId, subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,97,last = new AtomicLong(lastAcked);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,99,priority = new AtomicLong(Byte.MAX_VALUE - 1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,310,+ " AND M.CONTAINER=D.CONTAINER AND M.ID > D.LAST_ACKED_ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,339,+ " WHERE ( EXPIRATION<>0 AND EXPIRATION<?) OR ID < "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,340,+ "( SELECT min(" + getFullAckTableName() + ".LAST_ACKED_ID) "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,341,+ "FROM " + getFullAckTableName() + " WHERE "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,343,+ ".CONTAINER)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,394,+ " WHERE CONTAINER=? ORDER BY PRIORITY DESC, ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,404,lastAckedDurableSubscriberMessageStatement = "SELECT MAX(LAST_ACKED_ID) FROM "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,406,+ " WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,647,public long doGetLastAckedDurableSubscriberMessageId(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,651,long result = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,659,result = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,787,int maxReturned, JDBCMessageRecoveryListener listener) throws Exception {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,798,if (!isPrioritizedMessages()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,799,s.setLong(2, nextSeq);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,85,final MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,141,longTermStore.acknowledge(context, clientId, subscritionName, messageId);
activemq-core/src/main/java/org/apache/activemq/store/journal/JournalTopicMessageStore.java,180,subscriptionKey.subscriptionName, identity);
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicMessageStore.java,82,MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadaptor/KahaTopicReferenceStore.java,227,String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TempKahaDBStore.java,280,public void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTopicMessageStore.java,69,public synchronized void acknowledge(ConnectionContext context, String clientId, String subscriptionName, MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,44,ActiveMQDestination queueConsumers = getQueueConsumersWildcard(message.getDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/virtual/VirtualTopicInterceptor.java,45,send(context, message, queueConsumers);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,765,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,771,MessageOrderCursor moc = new MessageOrderCursor(cursorPos + 1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,772,for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx, moc); iterator
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,780,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2023,if (entry.getKey().compareTo(sequenceId) <= 0) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,718,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,728,MessageOrderCursor moc = new MessageOrderCursor(cursorPos + 1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,737,for (Iterator<Entry<Long, MessageKeys>> iterator = sd.orderIndex.iterator(tx, moc); iterator
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,758,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,787,indexLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,795,moc = new MessageOrderCursor(pos+1);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,818,indexLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2010,getDeleteList(tx, deletes, defaultPriorityIndex, sequenceId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2011,if (highPriorityIndex != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2014,if (lowPriorityIndex != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2073,Long lastKey;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,114,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,120,LOG.debug("POST client=" + client + " session=" + request.getSession().getId() + " info=" + request.getPathInfo() + " contentType=" + request.getContentType());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,154,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,155,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,156,Map<MessageAvailableConsumer, String> consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,163,consumerDestinationMap.put(consumer, destinationName);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,168,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,169,Map consumerDestinationMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,174,consumerDestinationMap.remove(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,236,WebClient client = WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,238,LOG.debug("GET client=" + client + " session=" + request.getSession().getId() + " uri=" + request.getRequestURI() + " query=" + request.getQueryString());
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,256,protected void doMessages(WebClient client, HttpServletRequest request, HttpServletResponse response) throws JMSException, IOException {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,311,Listener listener = getListener(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,320,response.setContentType("text/xml");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,321,response.setHeader("Cache-Control", "no-cache");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,326,Map<MessageAvailableConsumer, String> consumerIdMap = getConsumerIdMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,327,Map<MessageAvailableConsumer, String> consumerDestinationNameMap = getConsumerDestinationNameMap(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,392,protected Listener getListener(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,393,HttpSession session = request.getSession();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,394,Listener listener = (Listener)session.getAttribute("mls.listener");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,395,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,396,listener = new Listener(WebClient.getWebClient(request));
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,397,session.setAttribute("mls.listener", listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,399,return listener;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,402,protected Map<MessageAvailableConsumer, String> getConsumerIdMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,404,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerIdMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,405,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,406,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,407,session.setAttribute("mls.consumerIdMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,409,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,412,protected Map<MessageAvailableConsumer, String> getConsumerDestinationNameMap(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,413,HttpSession session = request.getSession(true);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,414,Map<MessageAvailableConsumer, String> map = (Map<MessageAvailableConsumer, String>)session.getAttribute("mls.consumerDestinationNameMap");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,415,if (map == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,416,map = new HashMap<MessageAvailableConsumer, String>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,417,session.setAttribute("mls.consumerDestinationNameMap", map);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,419,return map;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,422,protected boolean isRicoAjax(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,423,String rico = request.getParameter("rico");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,424,return rico != null && rico.equals("true");
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,447,private class Listener implements MessageAvailableListener {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,448,WebClient client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,449,long lastAccess;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,450,Continuation continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,452,Listener(WebClient client) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,453,this.client = client;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,456,public void access() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,457,lastAccess = System.currentTimeMillis();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,460,public synchronized void setContinuation(Continuation continuation) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,461,this.continuation = continuation;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,464,public synchronized void onMessageAvailable(MessageConsumer consumer) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,465,if (LOG.isDebugEnabled()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,466,LOG.debug("message for " + consumer + "continuation=" + continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,468,if (continuation != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,469,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,470,Message message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,471,continuation.setAttribute("message", message);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,472,continuation.setAttribute("consumer", consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,474,LOG.error("Error receiving message " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,476,continuation.resume();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,478,new Thread() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,479,public void run() {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,480,client.closeConsumers();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,552,rc.add(r);
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,555,destination.getDestinationStatistics().getDispatched().subtract(dispatched.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,556,destination.getDestinationStatistics().getInflight().subtract(dispatched.size());
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,557,dispatched.clear();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,245,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,249,broker.addDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),true);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,253,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQTopic(name),
activemq-core/src/main/java/org/apache/activemq/broker/jmx/BrokerView.java,258,broker.removeDestination(getConnectionContext(broker.getContextBroker()), new ActiveMQQueue(name),
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,195,private boolean schedulerSupport = true;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1210,if (journal.getFileMap().containsKey(referencedFileId) && !gcCandidateSet.contains(referencedFileId)) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,61,private Map<TransactionId, Transaction> xaTransactions = new LinkedHashMap<TransactionId, Transaction>();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,128,for (Iterator<Transaction> iter = xaTransactions.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,149,Transaction transaction = null;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,155,transaction = new XATransaction(transactionStore, (XATransactionId)xid, this);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,40,public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker) {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQTextMessage.java,122,this.text=null;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,235,if (TRANSPORTLOG.isInfoEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,236,TRANSPORTLOG.info("Transport failed: " + e, e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,159,peer.transportListener.onException(new TransportDisposedIOException("Peer (" + peer.toString() + ") disposed."));
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,338,LOG.debug("Recovering page file...");
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1110,writeFile.seek(e.getKey());
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,1111,e.getValue();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,58,import org.apache.activemq.command.ActiveMQDestination;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,59,import org.apache.activemq.command.ConsumerId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,60,import org.apache.activemq.command.ExceptionResponse;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,61,import org.apache.activemq.command.Message;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,62,import org.apache.activemq.command.MessageAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,63,import org.apache.activemq.command.MessageDispatchNotification;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,64,import org.apache.activemq.command.MessageId;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,65,import org.apache.activemq.command.ProducerAck;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,66,import org.apache.activemq.command.ProducerInfo;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,67,import org.apache.activemq.command.Response;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1793,s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1794,target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1795,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,68,result = exclusiveConsumer == null
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,69,|| exclusiveConsumer == subscription;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,70,if (result) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,71,QueueMessageReference node = (QueueMessageReference) m;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,73,String groupId = node.getGroupID();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,74,int sequence = node.getGroupSequence();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,75,if (groupId != null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,76,MessageGroupMap messageGroupOwners = ((Queue) node
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,77,.getRegionDestination()).getMessageGroupOwners();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,81,if (sequence == 1) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,82,assignGroup(subscription, messageGroupOwners, node,groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,87,ConsumerId groupOwner;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,89,groupOwner = messageGroupOwners.get(groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,90,if (groupOwner == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,91,assignGroup(subscription, messageGroupOwners, node,groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,93,if (groupOwner.equals(subscription.getConsumerInfo().getConsumerId())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,95,if (sequence < 0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,96,messageGroupOwners.removeGroup(groupId);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,99,result = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,109,protected void assignGroup(Subscription subs,MessageGroupMap messageGroupOwners, MessageReference n, String groupId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,110,messageGroupOwners.put(groupId, subs.getConsumerInfo().getConsumerId());
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,111,Message message = n.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,112,if (message instanceof ActiveMQMessage) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,113,ActiveMQMessage activeMessage = (ActiveMQMessage)message;
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,114,try {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,115,activeMessage.setBooleanProperty("JMSXGroupFirstForConsumer", true, false);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueDispatchSelector.java,117,LOG.warn("Failed to set boolean header: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,111,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,112,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,113,destroy(tx);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,161,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,162,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,163,addLast(tx, id, bs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,168,void addLast(Transaction tx, String id, ByteSequence bs) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,169,Location location = this.store.write(bs, false);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,183,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,184,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,185,addFirst(tx, id, bs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,190,void addFirst(Transaction tx, String id, ByteSequence bs) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,191,Location location = this.store.write(bs, false);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,212,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,213,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,214,result.set(remove(tx, id));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,222,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,223,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,224,result.set(remove(tx, position));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,232,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,233,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,234,result.set(doRemove(tx, entry.getEntry()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,243,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,244,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,245,ref.set(get(tx, position));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,258,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,259,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,260,ref.set(getFirst(tx));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,263,if (ref.get() != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,264,ByteSequence bs = this.store.getPayload(ref.get().getLocation());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,265,result = new PListEntry(ref.get(), bs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,273,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,274,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,275,ref.set(getLast(tx));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,278,if (ref.get() != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,279,ByteSequence bs = this.store.getPayload(ref.get().getLocation());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,280,result = new PListEntry(ref.get(), bs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,290,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,291,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,292,ref.set(getNext(tx, nextId));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,295,if (ref.get() != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,296,ByteSequence bs = this.store.getPayload(ref.get().getLocation());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,297,result = new PListEntry(ref.get(), bs);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,306,this.store.getPageFile().tx().execute(new Transaction.Closure<IOException>() {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,307,public void execute(Transaction tx) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,308,ref.set(loadEntry(tx, entry.getEntry().getPage().getPageId()));
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,311,if (ref.get() != null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,313,result = new PListEntry(ref.get(), entry.getByteSequence());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,393,boolean doRemove(Transaction tx, EntryLocation entry) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PListStore.java,191,public PList getPList(final String name) throws Exception {
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQBytesMessage.java,788,Deflater deflater = new Deflater(Deflater.BEST_SPEED);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,2308,this.schedulerDirectoryFile = new File(IOHelper.getDefaultDataDirectory(),"scheduler");
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,66,transactionStore.commit(getTransactionId(), false, preCommitTask,postCommitTask);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,67,waitPostCommitDone(postCommitTask);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,73,transactionStore.commit(getTransactionId(), true, preCommitTask,postCommitTask);
activemq-core/src/main/java/org/apache/activemq/transaction/XATransaction.java,74,waitPostCommitDone(postCommitTask);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,659,public void transportInterrupted() {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,660,for (ConnectionState connectionState : connectionStates.values()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,236,stateTracker.transportInterrupted();
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerService.java,59,if (start) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,176,if ( log.isInfoEnabled() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,179,log.debug("Endpoint failed to process message.", e);
activemq-core/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,71,transactionStore.commit(getTransactionId(), false,preCommitTask, postCommitTask);
activemq-core/src/main/java/org/apache/activemq/transaction/LocalTransaction.java,72,this.waitPostCommitDone(postCommitTask);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,216,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,218,redeliveryPolicy().setBackOffMultiplier(value.shortValue());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,316,public void setRedeliveryBackOffMultiplier(Short value) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,172,onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOTransport.java,183,contentLength = -1;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,94,private static final Log LOG = LogFactory.getLog(DemandForwardingBridge.class);
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,66,private long readCheckTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,67,private long writeCheckTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,68,private long initialDelayTime;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,275,if (localWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,276,return;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,278,if (remoteWireFormatInfo == null) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,279,return;
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,282,if (!ignoreRemoteWireFormat) {
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,283,readCheckTime = Math.min(localWireFormatInfo.getMaxInactivityDuration(), remoteWireFormatInfo.getMaxInactivityDuration());
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,284,initialDelayTime = Math.min(localWireFormatInfo.getMaxInactivityDurationInitalDelay(), remoteWireFormatInfo.getMaxInactivityDurationInitalDelay());
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,286,readCheckTime = localWireFormatInfo.getMaxInactivityDuration();
activemq-core/src/main/java/org/apache/activemq/transport/InactivityMonitor.java,287,initialDelayTime = localWireFormatInfo.getMaxInactivityDurationInitalDelay();
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,114,private String getOption(Map options, String key, String def) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,115,String rc = (String) options.remove(key);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,116,if( rc == null ) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,117,rc = def;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportFactory.java,119,return rc;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,109,protected Map<String, Object> transportOptions;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,390,public void setTransportOption(Map<String, Object> transportOptions) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,391,this.transportOptions = transportOptions;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpEmbeddedTunnelServlet.java,46,transportConnector = new HttpTransportServer(new URI(url));
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,42,return new HttpTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,63,HttpClientTransport httpTransport = (HttpClientTransport) super.compositeConfigure(transport, format, options);
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,64,transport = httpTransport;
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,65,if( httpTransport.isTrace() ) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportServer.java,45,public HttpTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,177,response.sendError(HttpServletResponse.SC_BAD_REQUEST, "A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,178,LOG.warn("A session for clientID '" + clientID + "' has allready been established");
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTunnelServlet.java,184,listener.onAccept(answer);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,36,return new HttpsTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,40,return new HttpsTransportServer(location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,35,public HttpsTransportServer(URI uri) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,36,super(uri);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,74,private Map<MessageId,Message> messageCache = new LinkedHashMap<MessageId,Message>(){
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,75,protected boolean removeEldestEntry(Map.Entry<MessageId,Message> eldest) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,78,currentCacheSize -= eldest.getValue().getSize();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,131,if (trackMessages && command != null && command.isMessage()) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,132,Message message = (Message) command;
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,133,if (message.getTransactionId()==null) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,134,currentCacheSize = currentCacheSize +  message.getSize();
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,159,for (Message msg:messageCache.values()) {
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,161,LOG.debug("message: " + msg.getMessageId());
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,53,if (broker.isExpired(n)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,54,queue.messageExpired(context, this, node);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,56,LOG.debug("ignoring ack " + ack + ", for already expired message: " + n);
activemq-core/src/main/java/org/apache/activemq/broker/region/QueueSubscription.java,58,return;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,249,connection.addSession(this);
activemq-core/src/main/java/org/apache/activemq/command/ActiveMQMessage.java,285,result.addAll(new Vector<String>(JMS_PROPERTY_SETERS.keySet()));
activemq-core/src/main/java/org/apache/activemq/store/amq/AMQMessageStore.java,162,messages.put(message.getMessageId(), data);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,108,private boolean concurrentStoreAndDispatchTopics = true;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,85,return e;
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,89,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,90,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,91,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,92,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,93,return destinationViewMBean;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,147,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,148,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,149,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,208,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,107,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,108,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,211,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,87,return -1;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,cf = createConnectionFactory(getInfo());
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,98,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,109,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,113,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,114,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,117,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,35,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,73,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,77,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,223,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,233,physicalConnection.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,125,String clientId = activationSpec.getClientId();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,40,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,25,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,239,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,240,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,241,response.setContentType(type);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,serverSessionPool.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,108,return stale || !session.isRunning();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,165,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,199,log.debug("Run finished");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,activeSessions.remove(ss);
