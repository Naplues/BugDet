File,Line_number,SRC
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,197,username
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,294,doRFC2254Encoding(dn), username
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,56,ObjectName[] queues = broker.getTopics();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,57,return getManagedObjects(queues, TopicViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,65,ObjectName[] queues = broker.getDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,66,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,74,ObjectName[] queues = broker.getInactiveDurableTopicSubscribers();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,75,return getManagedObjects(queues, DurableSubscriptionViewMBean.class);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionFactory.java,101,throw new JMSException(e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,204,cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,207,physicalConnection.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,208,destroyed = true;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,238,localAndXATransaction.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,22,import javax.jms.Connection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,24,import javax.jms.XAConnection;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,25,import javax.jms.XASession;
activemq-ra/src/main/java/org/apache/activemq/ra/LocalAndXATransaction.java,33,private final TransactionContext transactionContext;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,171,log.debug("JMS Session is no longer running (maybe due to loss of connection?), marking ServerSesison as stale");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,177,log.debug("Endpoint failed to process message.", e);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,179,log.info("Endpoint failed to process message. Reason: " + e.getMessage());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,258,return "ServerSessionImpl:" + serverSessionId;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,224,for (Iterator i = l.iterator(); i.hasNext();) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,225,dispatchToSession((MessageDispatch)i.next());
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,228,LOG.error("Error redispatching unconsumed messages from stale session", t);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,116,serverSessionPool.closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,169,session.run();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,265,int activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,281,activeCount = closeIdleSessions();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,286,protected int closeIdleSessions() {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,183,MessageAvailableConsumer consumer = (MessageAvailableConsumer)client.getConsumer(destination, request.getHeader(WebClient.selectorName));
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,186,if (message != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,189,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,190,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,192,long timeout = getReadTimeout(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,198,Continuation continuation = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,199,Listener listener = null;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,203,message = consumer.receive(10);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,208,continuation = ContinuationSupport.getContinuation(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,210,if (continuation.isExpired()) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,211,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,212,return;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,215,continuation.setTimeout(timeout);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,216,continuation.suspend();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,219,listener = (Listener)consumer.getAvailableListener();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,220,if (listener == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,221,listener = new Listener(consumer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,222,consumer.setAvailableListener(listener);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,226,listener.setContinuation(continuation);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,229,writeResponse(request, response, message);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,231,throw new ServletException("Could not post JMS message: " + e, e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,267,TextMessage textMsg = (TextMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,274,ObjectMessage objectMsg = (ObjectMessage)message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,327,protected long getReadTimeout(HttpServletRequest request) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,328,long answer = defaultReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,330,String name = request.getParameter(readTimeoutParameter);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,331,if (name != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,332,answer = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,334,if (answer < 0 || answer > maximumReadTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,335,answer = maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,337,return answer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,362,try {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,363,Message message = consumer.receiveNoWait();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,364,continuation.setAttribute("message", message);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,63,return configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,66,public void setConfiguration(WebConsoleConfiguration configuration) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,67,this.configuration = configuration;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,78,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,79,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,80,if (brokers.size() == 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,81,throw new IOException("No broker could be found in the JMX.");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,83,ObjectName name = brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,84,return name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,90,Set brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,94,ObjectName name = (ObjectName)brokers.iterator().next();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,95,BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler.newProxyInstance(connection, name, BrokerViewMBean.class, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,99,public String getBrokerName() throws Exception,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,100,MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,136,if (this.configuration.getJmxUser() != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,137,env.put("jmx.remote.credentials", new String[] {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,138,this.configuration.getJmxUser(),
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,139,this.configuration.getJmxPassword() });
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,144,for (JMXServiceURL url : jmxUrls) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,145,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,146,JMXConnector connector = JMXConnectorFactory.connect(url, env);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,147,connector.connect();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,148,MBeanServerConnection connection = connector
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,149,.getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,151,Set<ObjectName> brokers = findBrokers(connection);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,152,if (brokers.size() > 0) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,153,LOG.info("Connected via JMX to the broker at " + url);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,154,return connector;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,158,exception = e;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,161,if (exception != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,162,if (exception instanceof RuntimeException) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,163,throw (RuntimeException) exception;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,165,throw new RuntimeException(exception);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,168,throw new IllegalStateException("No broker is found at any of the "
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,169,+ jmxUrls.size() + " configured urls");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,197,throws IOException, MalformedObjectNameException {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,198,ObjectName name;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,199,if (this.brokerName == null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,206,Set<ObjectName> brokers = connection.queryNames(name, null);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,210,public void purgeQueue(ActiveMQDestination destination) throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,211,QueueViewMBean queue = getQueue(destination.getPhysicalName());
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,212,queue.purge();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,215,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,216,throw new IllegalStateException("not supported");
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,221,protected <T> Collection<T> getManagedObjects(ObjectName[] names,
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,222,Class<T> type) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,223,MBeanServerConnection connection;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,224,try {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,225,connection = getMBeanServerConnection();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,227,throw new RuntimeException(e);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,230,List<T> answer = new ArrayList<T>();
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,231,if (connection != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,232,for (int i = 0; i < names.length; i++) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,233,ObjectName name = names[i];
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,234,T value = (T) MBeanServerInvocationHandler.newProxyInstance(
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,235,connection, name, type, true);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,236,if (value != null) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,237,answer.add(value);
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,241,return answer;
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,250,public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception {
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQComponent.java,70,answer.setConnectionFactory(new ActiveMQConnectionFactory(brokerURL));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,234,NameParser parser = context.getNameParser("");
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,235,Name contextName = parser.parse(context.getNameInNamespace());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,236,Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,237,Name entryName = parser.parse(result.getName());
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,238,Name name = contextName.addAll(baseName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,239,name = name.addAll(entryName);
activemq-jaas/src/main/java/org/apache/activemq/jaas/LDAPLoginModule.java,240,String dn = name.toString();
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,23,import javax.annotation.PreDestroy;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,24,import javax.jms.Connection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,25,import javax.jms.ConnectionFactory;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,27,import org.apache.activemq.EnhancedConnection;
activemq-camel/src/main/java/org/apache/activemq/camel/component/CamelEndpointLoader.java,39,import org.apache.camel.util.ObjectHelper;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnectionFactory.java,61,public class PooledConnectionFactory implements ConnectionFactory, Service {
activemq-console/src/main/java/org/apache/activemq/console/command/CreateCommand.java,280,res.append("${ACTIVEMQ_HOME}/bin/activemq \"$*\"");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,226,throw new RuntimeException("Endpoint after delivery notification failure", e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,60,private String readTimeoutParameter = "readTimeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,65,private HashMap<String, WebClient> clients = new HashMap<String, WebClient>();
assembly/src/release/example/src/ProducerTool.java,169,if (transacted) {
activemq-web/src/main/java/org/apache/activemq/web/RemoteJMXBrokerFacade.java,207,return brokers;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,23,import org.eclipse.jetty.continuation.ContinuationSupport;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,28,import org.apache.activemq.MessageAvailableListener;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,30,import java.util.LinkedList;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,38,private long maximumReadTimeout;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,39,private AjaxWebClient client;
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,42,private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>();
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,69,LOG.debug( "message is " + message );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,70,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,71,if( continuation.isSuspended() ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,72,LOG.debug( "Resuming suspended continuation " + continuation );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,73,continuation.setAttribute("undelivered_message", new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,76,LOG.debug( "Message available, but continuation is already resumed.  Buffer for next time." );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,77,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,93,bufferMessageForDelivery( message, consumer );
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,100,public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,101,if( message != null ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,102,synchronized( undeliveredMessages ) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxListener.java,103,undeliveredMessages.addLast( new UndeliveredAjaxMessage( message, consumer ) );
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,361,for (Iterator<UndeliveredAjaxMessage> it = undeliveredMessages.iterator(); it.hasNext(); ) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,73,private String readTimeoutParameter = "timeout";
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,78,private HashMap<String,AjaxWebClient> ajaxWebClients = new HashMap<String,AjaxWebClient>();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,277,message = (Message)undelivered_message.getMessage();
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,364,Message msg = (Message)undelivered.getMessage();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,236,Connection connection = null;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,238,connection = makeConnection();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,239,if (connection instanceof XAConnection) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,240,XASession session = ((XAConnection)connection).createXASession();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,241,XAResource xaResource = session.getXAResource();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,242,return new XAResource[] {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,243,xaResource
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,246,return new XAResource[] {};
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,250,try {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,251,connection.close();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,186,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,195,return true;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,197,return false;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,67,this.pool.incrementReferenceCount();
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,71,out.print(refreshRate);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,25,import javax.management.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,29,import org.apache.activemq.broker.jmx.*;
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,125,Set<ObjectName> queryResult = queryNames(query, null);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionKey.java,51,return equals((ConnectionKey)that);
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,47,private long firstUsed = lastUsed;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,157,expiredCheck();
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,182,if (hasExpired) {
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,188,if (hasFailed
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,190,|| expiryTimeout > 0 && System.currentTimeMillis() > firstUsed + expiryTimeout) {
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,39,private LinkedList<Session> sessions = new LinkedList<Session>();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,47,connection = getConnectionFactory().createConnection();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,48,connection.start();
activemq-web/src/main/java/org/apache/activemq/web/SessionPool.java,49,return connection;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,60,public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception {
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,112,return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection)));
activemq-xmpp/src/main/java/org/apache/activemq/transport/xmpp/XmppTransport.java,54,import org.jabber.etherx.streams.Features;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,22,import java.util.Enumeration;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,25,import java.util.Properties;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,53,private static String usersFile;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,54,private static String groupsFile;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,55,private static Properties users;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,56,private static Properties groups;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,57,private static long usersReloadTime = 0;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,58,private static long groupsReloadTime = 0;
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,60,private Set<Principal> principals = new HashSet<Principal>();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,70,debug = "true".equalsIgnoreCase((String)options.get("debug"));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,72,reload = "true".equalsIgnoreCase((String)options.get("reload"));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,76,baseDir = new File((String)options.get("baseDir"));
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,80,usersFile = (String) options.get(USER_FILE) + "";
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,83,if (reload || users == null || uf.lastModified() > usersReloadTime) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,87,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,88,users = new Properties();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,89,java.io.FileInputStream in = new java.io.FileInputStream(uf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,90,users.load(in);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,91,in.close();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,92,usersReloadTime = System.currentTimeMillis();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,94,LOG.warn("Unable to load user properties file " + uf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,98,groupsFile = (String) options.get(GROUP_FILE) + "";
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,100,if (reload || groups == null || gf.lastModified() > groupsReloadTime) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,104,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,105,groups = new Properties();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,106,java.io.FileInputStream in = new java.io.FileInputStream(gf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,107,groups.load(in);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,108,in.close();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,109,groupsReloadTime = System.currentTimeMillis();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,111,LOG.warn("Unable to load group properties file " + gf);
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,140,user = ((NameCallback)callbacks[0]).getName();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,141,char[] tmpPassword = ((PasswordCallback)callbacks[1]).getPassword();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,170,for (Enumeration<?> enumeration = groups.keys(); enumeration.hasMoreElements();) {
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,171,String name = (String)enumeration.nextElement();
activemq-jaas/src/main/java/org/apache/activemq/jaas/PropertiesLoginModule.java,172,String[] userList = ((String)groups.getProperty(name) + "").split(",");
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,76,private ConnectionConsumer consumer;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,130,consumer = connection.createDurableConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,138,consumer = connection.createConnectionConsumer(
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,184,throw new NotSupportedException("That type of ActicationSpec not supported: " + activationSpec.getClass());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,20,import java.util.UUID;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,28,import org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping;
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,51,if (object instanceof DestinationFacade) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,53,if (!Arrays.asList(((DestinationFacade)object).getSupportedHttpMethods()).contains(request.getMethod())) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,54,throw new UnsupportedOperationException("Unsupported method " + request.getMethod() + " for path " + request.getRequestURI());
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,57,if (!request.getSession().getAttribute("secret").equals(request.getParameter("secret"))) {
activemq-web-console/src/main/java/org/apache/activemq/web/handler/BindingBeanNameUrlHandlerMapping.java,58,throw new UnsupportedOperationException("Possible CSRF attack");
activemq-console/src/main/java/org/apache/activemq/console/command/BstatCommand.java,68,queryTokens.add("--vuew");
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,325,sendShutdown.countDown();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,93,synchronized (bridges) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,94,if( bridges.containsKey(uri) ) {
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,96,return;
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,142,bridge.start();
activemq-core/src/main/java/org/apache/activemq/network/DiscoveryNetworkConnector.java,172,synchronized (bridges) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,109,final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent)devent;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,110,if (event.failed.compareAndSet(false, true)) {
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,112,listener.onServiceRemove(event);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,74,if (info.getDestination().isTemporary() || broker == null || broker.getTempDataStore()==null ) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,106,if( lastRunTime != 0 && LOG.isDebugEnabled() ) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,107,LOG.debug(this + " "+(now-lastRunTime)+" ms elapsed since last write check.");
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,138,if (!commandSent.get() && useKeepAlive && monitorStarted.get() && !ASYNC_TASKS.isTerminating()) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,142,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,143,public void run() {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,144,if (monitorStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,145,try {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,148,if (sendLock.writeLock().tryLock()) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,149,KeepAliveInfo info = new KeepAliveInfo();
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,150,info.setResponseRequired(keepAliveResponseRequired);
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,151,doOnewaySend(info);
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,154,onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,156,if (sendLock.writeLock().isHeldByCurrentThread()) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,157,sendLock.writeLock().unlock();
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,181,if (!commandReceived.get() && monitorStarted.get() && !ASYNC_TASKS.isTerminating()) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,185,ASYNC_TASKS.execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,186,public void run() {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,187,onException(new InactivityIOException("Channel was inactive for too (>" + readCheckTime + ") long: "+next.getRemoteAddress()));
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,254,if( failed.get() ) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,255,throw new InactivityIOException("Cannot send, channel has already failed: "+next.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,358,synchronized( AbstractInactivityMonitor.class ) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,362,if(CHECKER_COUNTER==0) {
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,363,WRITE_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,364,READ_CHECK_TIMER.cancel();
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQWASInitialContextFactory.java,73,if (key.startsWith("java.naming.queue")) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,133,LOG.debug("Activating " + this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,166,LOG.debug("Deactivating keepActive=" + keepDurableSubsActive + ", " + this);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,81,long offline = sub.getOfflineTimestamp();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,80,private BrokerService brokerService;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,96,if (!isFull() && matched.isEmpty()  && !isSlave()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,499,node.incrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,504,md.setDestination(node.getRegionDestination().getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,505,dispatchedCounter.incrementAndGet();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,508,if (singleDestination) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,509,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,510,destination = node.getRegionDestination();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,512,if (destination != node.getRegionDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,513,singleDestination = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,518,md.setTransmitCallback(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,520,public void run() {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,521,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,522,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,523,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,529,node.getRegionDestination().getDestinationStatistics().getDispatched().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,530,node.getRegionDestination().getDestinationStatistics().getInflight().increment();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,531,node.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,46,SSLContext context;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,48,protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,49,return new TcpTransportServer(this, location, serverSocketFactory) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,50,protected Transport createTransport(Socket socket, WireFormat format) throws IOException {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,51,NIOSSLTransport transport = new NIOSSLTransport(format, socket);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,52,if (context != null) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,53,transport.setSslContext(context);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,55,return transport;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,62,if (SslContext.getCurrentSslContext() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,63,try {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,64,context = SslContext.getCurrentSslContext().getSSLContext();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,66,throw new IOException(e);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,78,if (transport instanceof SslTransport)  {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,79,SslTransport sslTransport = (SslTransport)transport.narrow(SslTransport.class);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,82,NIOSSLTransport sslTransport = (NIOSSLTransport)transport.narrow(NIOSSLTransport.class);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,108,return new SslTransport(wf, (SSLSocketFactory)socketFactory, location, localLocation, false);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,119,if( SslContext.getCurrentSslContext()!=null ) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,37,SSLContext context;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,41,return new TcpTransportServer(this, location, serverSocketFactory) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,47,return transport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,59,if (SslContext.getCurrentSslContext() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,88,currentBuffer = ByteBuffer.allocate(sslSession.getApplicationBufferSize());
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,138,if (status == SSLEngineResult.Status.OK && handshakeStatus != SSLEngineResult.HandshakeStatus.NEED_UNWRAP) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,139,plain.clear();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,141,plain.compact();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,170,nextFrameSize = plain.getInt();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,171,if (wireFormat instanceof OpenWireFormat) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,172,long maxFrameSize = ((OpenWireFormat) wireFormat).getMaxFrameSize();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,173,if (nextFrameSize > maxFrameSize) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,177,currentBuffer = ByteBuffer.allocate(nextFrameSize + 4);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,178,currentBuffer.putInt(nextFrameSize);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,179,if (currentBuffer.hasRemaining()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,189,if (currentBuffer.hasRemaining()) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,190,return;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,192,currentBuffer.flip();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,193,Object command = wireFormat.unmarshal(new DataInputStream(new NIOInputStream(currentBuffer)));
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,194,doConsume((Command) command);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,195,nextFrameSize = -1;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,605,connectionInfo.setTransportContext(stompTransport.getPeerCertificates());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,19,import org.apache.activemq.transport.nio.NIOSSLTransport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,20,import org.apache.activemq.wireformat.WireFormat;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransport.java,22,import javax.net.SocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransport.java,34,public X509Certificate[] getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,20,import java.security.cert.X509Certificate;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,29,import org.apache.activemq.transport.tcp.SslTransport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,44,private static final Logger LOG = LoggerFactory.getLogger(StompTransportFilter.class);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,101,public X509Certificate[] getPeerCertificates() {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,102,if (next instanceof SslTransport) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,103,X509Certificate[] peerCerts = ((SslTransport) next).getPeerCertificates();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,104,if (trace && peerCerts != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,105,LOG.debug("Peer Identity has been verified\n");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,107,return peerCerts;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompTransportFilter.java,109,return null;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportFactory.java,66,SslTransportServer server = new SslTransportServer(this, location, (SSLServerSocketFactory)serverSocketFactory);
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,20,import java.security.cert.X509Certificate;
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,88,public X509Certificate[] getPeerCertificates() {
activemq-optional/src/main/java/org/apache/activemq/transport/ws/StompSocket.java,89,return null;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,150,if (command.getClass() == KeepAliveInfo.class) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,151,KeepAliveInfo info = (KeepAliveInfo) command;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,152,if (info.isResponseRequired()) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,154,try {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,155,info.setResponseRequired(false);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,156,oneway(info);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,158,onException(e);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,164,transportListener.onCommand(command);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,528,void configureInactivityMonitor(short heartBeat) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,531,int heartBeatMS = heartBeat * 1000;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,532,MQTTInactivityMonitor monitor = getMQTTTransport().getInactivityMonitor();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,534,monitor.setReadCheckTime(heartBeatMS);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,535,monitor.setInitialDelayTime(heartBeatMS);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,542,LOG.debug(getClientId() + " MQTT Connection using heart beat of  " + heartBeat + " secs");
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,571,clientId = "";
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,137,private volatile int receiveCounter;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,28,import java.util.concurrent.locks.ReentrantReadWriteLock;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,46,private static long DEFAULT_CHECK_TIME_MILLS = 30000;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,51,private final AtomicBoolean commandSent = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,52,private final AtomicBoolean inSend = new AtomicBoolean(false);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,59,private final ReentrantReadWriteLock sendLock = new ReentrantReadWriteLock();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,135,;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,153,sendLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,160,sendLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,176,this.sendLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,177,inSend.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,181,commandSent.set(true);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,182,inSend.set(false);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,183,this.sendLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,241,if (monitorStarted.get()) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTInactivityMonitor.java,295,ThreadPoolExecutor exec = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 10, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), factory);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,30,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,41,import org.fusesource.mqtt.codec.*;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,155,default:
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,242,SUBACK result = new SUBACK();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,266,if (destination == null) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,267,throw new MQTTProtocolException("Invalid Destination.");
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,480,ActiveMQTextMessage msg = (ActiveMQTextMessage) message.copy();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,481,String messageText = msg.getText();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,482,if (messageText != null) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTWireFormat.java,41,private boolean encodingEnabled = false;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,20,import org.apache.activemq.broker.*;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,21,import org.apache.activemq.broker.jmx.ManagedTransportConnector;
activemq-core/src/main/java/org/apache/activemq/security/JaasDualAuthenticationBroker.java,89,isSSL = (transportConnector.getServer() instanceof SslTransportServer);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,24,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,25,import org.apache.activemq.transport.tcp.TcpTransport;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,33,import javax.net.ServerSocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,34,import javax.net.SocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,35,import javax.net.ssl.SSLContext;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,36,import javax.net.ssl.SSLSocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,37,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,38,import java.net.Socket;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,39,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,40,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,41,import java.net.UnknownHostException;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransportFactory.java,42,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,26,import javax.net.ServerSocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,27,import javax.net.SocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,28,import javax.net.ssl.SSLContext;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,29,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,30,import java.net.Socket;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,31,import java.net.URI;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,32,import java.net.URISyntaxException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompNIOSSLTransportFactory.java,33,import java.net.UnknownHostException;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,59,public SslTransportServer(
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,60,SslTransportFactory transportFactory,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,61,URI location,
activemq-core/src/main/java/org/apache/activemq/transport/tcp/SslTransportServer.java,62,SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,392,throw new ExceededMaximumConnectionsException("Exceeded the maximum " +
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,400,options.put("maxInactivityDurationInitalDelay",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,402,options.put("minmumWireFormatVersion",
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,420,Transport configuredTransport =
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,438,public int getSoTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,439,return soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,442,public void setSoTimeout(int soTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,443,this.soTimeout = soTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,446,public int getSocketBufferSize() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,447,return socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,450,public void setSocketBufferSize(int socketBufferSize) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,451,this.socketBufferSize = socketBufferSize;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,454,public int getConnectionTimeout() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,455,return connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,458,public void setConnectionTimeout(int connectionTimeout) {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransportServer.java,459,this.connectionTimeout = connectionTimeout;
activemq-core/src/main/java/org/apache/activemq/transport/udp/UdpTransportServer.java,37,import org.apache.activemq.transport.reliable.Replayer;
activemq-web/src/main/java/org/apache/activemq/web/PortfolioPublishServlet.java,73,out.println("<body>Published <b>" + count + "</b> of " + total + " price messages.  Refresh = " + refreshRate + "s");
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,38,public class NIOSSLTransport extends NIOTransport  {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,76,sslEngine = sslContext.createSSLEngine();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,81,sslEngine.setNeedClientAuth(needClientAuth);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,82,sslEngine.setWantClientAuth(wantClientAuth);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,104,protected void finishHandshake() throws Exception  {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,105,if (handshakeInProgress) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,106,handshakeInProgress = false;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,107,nextFrameSize = -1;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,110,selection = SelectorManager.getInstance().register(channel, new SelectorManager.Listener() {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,111,public void onSelect(SelectorSelection selection) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,112,serviceRead();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,115,public void onError(SelectorSelection selection, Throwable error) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,116,if (error instanceof IOException) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,117,onException((IOException) error);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,119,onException(IOExceptionSupport.create(error));
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,135,while(true) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,150,if (readCount== -1) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,174,throw new IOException("Frame size of " + (nextFrameSize / (1024 * 1024)) + " MB larger than max allowed " + (maxFrameSize / (1024 * 1024)) + " MB");
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,206,if (inputBuffer.position() == 0 ||
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,207,status == SSLEngineResult.Status.BUFFER_UNDERFLOW) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,220,res.getHandshakeStatus() == SSLEngineResult.HandshakeStatus.NEED_UNWRAP &&
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,221,res.bytesProduced() == 0);
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,224,finishHandshake();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,248,case NEED_UNWRAP:
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,249,secureRead(ByteBuffer.allocate(sslSession.getApplicationBufferSize()));
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,250,break;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,251,case NEED_TASK:
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,252,Runnable task;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,253,while ((task = sslEngine.getDelegatedTask()) != null) {
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,256,break;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,257,case NEED_WRAP:
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,258,((NIOOutputStream)buffOut).write(ByteBuffer.allocate(0));
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,259,break;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,260,case FINISHED:
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,261,case NOT_HANDSHAKING:
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,262,finishHandshake();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,263,return;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,86,subscriptionRecoveryPolicy = new NoSubscriptionRecoveryPolicy();
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,328,if (this.entries.size() == 1) {
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,329,getContainingList().storeNode(tx, this, true);
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,331,getContainingList().storeNode(tx, this, false);
kahadb/src/main/java/org/apache/kahadb/util/SequenceSet.java,110,Sequence sequence = getHead();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,19,import org.apache.activemq.transport.tcp.TcpTransport;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,20,import org.apache.activemq.util.ByteArrayOutputStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,21,import org.apache.activemq.util.DataByteArrayInputStream;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOOutputStream.java,26,import org.apache.activemq.transport.tcp.TimeStampStream;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,671,checkConnected();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,672,sendToActiveMQ(connectionInfo.createRemoveCommand(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,673,sendToActiveMQ(new ShutdownInfo(), createResponseHandler(command));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,674,connected.set(false);
activemq-core/src/main/java/org/apache/activemq/state/ConnectionStateTracker.java,101,cs.removeTransactionState(info.getTransactionId());
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,335,tx.free(child.getPage());
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,312,try {
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,313,if (this.entries.size() == 1) {
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,314,getContainingList().storeNode(tx, this, true);
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,316,getContainingList().storeNode(tx, this, false);
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,319,split(tx, ADD_FIRST);
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,345,if (this.entries.size() == 1) {
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,346,getContainingList().storeNode(tx, this, true);
kahadb/src/main/java/org/apache/kahadb/index/ListNode.java,348,getContainingList().storeNode(tx, this, false);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,50,public void addDestinationInfo(ConnectionContext context, DestinationInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,51,addDestination(context, info.getDestination(),true);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,52,super.addDestinationInfo(context, info);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,56,public Destination addDestination(ConnectionContext context, ActiveMQDestination destination,boolean create) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,64,return super.addDestination(context, destination,create);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,76,throw new SecurityException("User " + securityContext.getUserName() + " is not authorized to create: " + destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,87,final SecurityContext securityContext = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,88,if (securityContext == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,89,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,91,Set<?> allowedACLs = null;
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,92,if (!destination.isTemporary()) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,93,allowedACLs = authorizationMap.getAdminACLs(destination);
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,95,allowedACLs = authorizationMap.getTempDestinationAdminACLs();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,98,if (!securityContext.isBrokerContext() && allowedACLs != null && !securityContext.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,105,public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,107,final SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,108,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,109,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,118,if (!subject.isBrokerContext() && allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,119,throw new SecurityException("User " + subject.getUserName() + " is not authorized to read from: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,121,subject.getAuthorizedReadDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,150,SecurityContext subject = context.getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,151,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,152,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,154,if (!subject.isBrokerContext() && info.getDestination() != null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,162,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,163,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,165,subject.getAuthorizedWriteDests().put(info.getDestination(), info.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,173,SecurityContext subject = producerExchange.getConnectionContext().getSecurityContext();
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,174,if (subject == null) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,175,throw new SecurityException("User is not authenticated.");
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,177,if (!subject.isBrokerContext() && !subject.getAuthorizedWriteDests().contains(messageSend.getDestination())) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,186,if (allowedACLs != null && !subject.isInOneOf(allowedACLs)) {
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,187,throw new SecurityException("User " + subject.getUserName() + " is not authorized to write to: " + messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/security/AuthorizationBroker.java,189,subject.getAuthorizedWriteDests().put(messageSend.getDestination(), messageSend.getDestination());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,876,synchronized (deliveredMessages) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,877,deliveredMessages.remove(md);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,880,ackLater(md, MessageAck.DELIVERED_ACK_TYPE);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1111,MessageAck ack = new MessageAck(md,MessageAck.INDIVIDUAL_ACK_TYPE,1);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,1041,session.sendAck(ack);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,248,if (!disposed.get()) {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,249,setupStaticDestinations();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,251,LOG.warn("Network connection between " + localBroker + " and " + remoteBroker + "(" + remoteBrokerName + ") was interrupted during establishment.");
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,20,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,57,throws JMSException {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,58,super(broker,usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,59,this.pending = new StoreDurableSubscriberCursor(broker,context.getClientId(), info.getSubscriptionName(), info.getPrefetchSize(), this);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,104,return;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,109,Topic topic = (Topic)destination;
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,114,this.enqueueCounter+=pending.size();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,116,TopicMessageStore store = (TopicMessageStore)destination.getMessageStore();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,118,this.enqueueCounter+=store.getMessageCount(subscriptionKey.getClientId(),subscriptionKey.getSubscriptionName());
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,120,JMSException jmsEx = new JMSException("Failed to retrieve enqueueCount from store "+ e);
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,128,public void activate(SystemUsage memoryManager, ConnectionContext context,
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,129,ConsumerInfo info) throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,136,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,137,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,152,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,153,Topic topic = (Topic) iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,174,for (Iterator<Destination> iter = durableDestinations.values().iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,175,Topic topic = (Topic)iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,246,synchronized(pending) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,274,return "DurableTopicSubscription-" + getSubscriptionKey() + ", id=" + info.getConsumerId() + ", active=" + isActive() + ", destinations=" + durableDestinations.size() + ", total=" + enqueueCounter + ", pending="
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,275,+ getPendingQueueSize() + ", dispatched=" + dispatchCounter + ", inflight=" + dispatched.size() + ", prefetchExtension=" + getPrefetchExtension();
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,300,synchronized  (dispatchLock) {
activemq-core/src/main/java/org/apache/activemq/broker/region/DurableTopicSubscription.java,320,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,19,import java.util.*;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicRegion.java,150,sub.activate(usageManager, context, info);
activemq-core/src/main/java/org/apache/activemq/openwire/OpenWireFormat.java,43,public static final int DEFAULT_MAX_FRAME_SIZE = 100 * 1024 * 1024; //100 MB
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,246,response.setStatus(HttpServletResponse.SC_NO_CONTENT);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,249,response.setStatus(HttpServletResponse.SC_OK);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,43,return load(classDesc.getName(), cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,57,return Proxy.getProxyClass(FALLBACK_CLASS_LOADER, cinterfaces);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,65,private Class<?> load(String className, ClassLoader cl) throws ClassNotFoundException {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,66,try {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,67,return Class.forName(className, false, cl);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,69,final Class<?> clazz = (Class<?>) primClasses.get(className);
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,70,if (clazz != null) {
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,71,return clazz;
activemq-core/src/main/java/org/apache/activemq/util/ClassLoadingAwareObjectInputStream.java,73,return Class.forName(className, false, FALLBACK_CLASS_LOADER);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1963,for (Iterator<TransportListener> iter = transportListeners
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1964,.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2038,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2039,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2040,if (s.isInUse(destination)) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2306,if (false && "close".equals(text)){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2307,LOG.error("Broker " + getBrokerInfo() + "shutdown connection");
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2308,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2309,close();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2328,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2329,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2330,s.close(command.getConsumerId());
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2333,for (Iterator<ActiveMQSession> i = this.sessions.iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2334,ActiveMQSession s = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,2335,s.setPrefetchSize(command.getConsumerId(), command.getPrefetch());
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,191,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,196,throw new InvalidDestinationException(
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,417,throw new JMSException(
activemq-core/src/main/java/org/apache/activemq/thread/Scheduler.java,57,timer.purge();//remove cancelled TimerTasks
activemq-optional/src/main/java/org/apache/activemq/transport/http/HttpTransportFactory.java,72,return new HttpClientTransport(textWireFormat, location);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,57,return new HttpsClientTransport(asTextWireFormat(wf), location);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,590,if (!started.get()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,711,command.setTransactionInfo(transactionIdTransformer.transform(ack.getTransactionId()));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,45,protected PreparedStatement lockCreateStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,46,protected PreparedStatement lockUpdateStatement;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,47,protected Connection connection;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,48,protected boolean stopping;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,153,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,154,if (connection != null && !connection.isClosed()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,156,connection.rollback();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,158,LOG.warn("Exception while rollbacking the connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,160,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,161,connection.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,163,LOG.debug("Exception while closing connection on shutdown", ignored);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,165,lockCreateStatement = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,169,LOG.warn("Exception while checking close status of connection on shutdown", sqle);
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,30,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobDownloader.java,33,this.blobTransferPolicy = transferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,35,private BlobTransferPolicy blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,40,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/blob/BlobUploader.java,45,this.blobTransferPolicy = blobTransferPolicy;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,35,import java.util.concurrent.CopyOnWriteArrayList;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,68,private final List<ObjectName> registeredMBeanNames = new CopyOnWriteArrayList<ObjectName>();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,119,for (Iterator<ObjectName> iter = registeredMBeanNames.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,120,ObjectName name = iter.next();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,309,this.registeredMBeanNames.add(name);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,313,public Set<ObjectName>  queryNames(ObjectName name, QueryExp query) throws Exception{
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,328,if (beanServer != null && beanServer.isRegistered(name) && this.registeredMBeanNames.remove(name)) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,329,beanServer.unregisterMBean(name);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageProducer.java,251,if (destination == info.getDestination()) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1791,long maxJournalFileSize;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1793,if (usage.getTempUsage().getStore() != null) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1794,maxJournalFileSize = usage.getTempUsage().getStore().getJournalMaxFileLength();
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1796,maxJournalFileSize = org.apache.kahadb.journal.Journal.DEFAULT_MAX_FILE_LENGTH;
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1799,if (storeLimit < maxJournalFileSize) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1800,LOG.error("Temporary Store limit is " + storeLimit / (1024 * 1024) +
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,1802,maxJournalFileSize / (1024 * 1024) + " mb, " +
activemq-core/src/main/java/org/apache/activemq/xbean/BrokerFactoryBean.java,23,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/xbean/BrokerFactoryBean.java,24,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,20,import java.io.File;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,23,import java.util.Map;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,30,import org.slf4j.Logger;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,31,import org.slf4j.LoggerFactory;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,39,import org.springframework.core.io.ClassPathResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,40,import org.springframework.core.io.FileSystemResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,42,import org.springframework.core.io.UrlResource;
activemq-core/src/main/java/org/apache/activemq/xbean/XBeanBrokerFactory.java,43,import org.springframework.util.ResourceUtils;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,55,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,130,TaskRunnerFactory taskRunnerFactory) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,133,this.messageAuthorizationPolicy = connector.getMessageAuthorizationPolicy();
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,956,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,967,LOG.warn("cannot create stopAsync :", t);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,992,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1006,LOG.warn("cannot create async transport stopper thread.. not waiting for stop to complete, reason:", t);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1017,protected void doStop() throws Exception, InterruptedException {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1018,LOG.debug("Stopping connection: " + transport.getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1030,LOG.trace("Exception caught stopping", ignore);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1036,LOG.debug("Could not stop transport: " + e, e);
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1067,LOG.debug("Cleaning up connection resources: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,1074,LOG.debug("Connection Stopped: " + getRemoteAddress());
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,35,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,223,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnector.java,314,: taskRunnerFactory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnection.java,54,super(connector, transport, broker, factory);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagedTransportConnector.java,52,return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() ? null : getTaskRunnerFactory(), managementContext, connectorName);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,47,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,129,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,344,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,345,if (LOG.isDebugEnabled()) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,346,LOG.debug("Stopped " + this);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,348,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,349,return;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,351,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,352,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,353,connected = false;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,359,if (connectedTransport.get() != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,360,transportToStop = connectedTransport.getAndSet(null);
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,362,reconnectMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,364,synchronized (sleepMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,365,sleepMutex.notifyAll();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,367,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,33,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,160,reconnectTask = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(new Task() {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,294,synchronized (reconnectMutex) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,295,ServiceStopper ss = new ServiceStopper();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,297,if (!started) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,298,return;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,300,started = false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,301,disposed = true;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,302,connected=false;
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,304,for (Iterator<FanoutTransportHandler> iter = transports.iterator(); iter.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,305,FanoutTransportHandler th = iter.next();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,306,if (th.transport != null) {
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,307,ss.stop(th.transport);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,311,LOG.debug("Stopped: " + this);
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,312,ss.throwFirstException();
activemq-core/src/main/java/org/apache/activemq/transport/fanout/FanoutTransport.java,314,reconnectTask.shutdown();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,49,protected boolean handshakeInProgress = false;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,254,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(task);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,40,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,539,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,545,LOG.debug("Caught exception closing socket", e);
activemq-core/src/main/java/org/apache/activemq/transport/tcp/TcpTransport.java,564,LOG.debug("Caught exception closing socket",e);
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,29,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,281,taskRunner = result = DefaultThreadPools.getDefaultTaskRunnerFactory().createTaskRunner(this, "VMTransport: " + toString());
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,47,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,70,private final TaskRunnerFactory asyncTaskRunner = DefaultThreadPools.getDefaultTaskRunnerFactory();
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,19,import java.util.concurrent.Executor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,20,import java.util.concurrent.ScheduledThreadPoolExecutor;
activemq-core/src/main/java/org/apache/activemq/thread/DefaultThreadPools.java,21,import java.util.concurrent.ThreadFactory;
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,49,this("ActiveMQ Task", Thread.NORM_PRIORITY, true, 1000);
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,93,execute(runnable, "ActiveMQ Task");
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,24,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/discovery/simple/SimpleDiscoveryAgent.java,113,DefaultThreadPools.getDefaultTaskRunnerFactory().execute(new Runnable() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,296,demandConsumerInfo.setDispatchAsync(configuration.isDispatchAsync());
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,65,if (isStarted()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,66,this.size = getStoreSize();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1325,addAckLocationForRetroactiveSub(tx, sd, ackLocation, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1904,private void addAckLocationForRetroactiveSub(Transaction tx, StoredDestination sd, Long messageSequence, String subscriptionKey) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1905,SequenceSet sequences = sd.ackPositions.get(tx, subscriptionKey);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1906,if (sequences == null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1907,sequences = new SequenceSet();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1908,sequences.add(messageSequence);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1909,sd.ackPositions.add(tx, subscriptionKey, sequences);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1911,sequences.add(messageSequence);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1912,sd.ackPositions.put(tx, subscriptionKey, sequences);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1915,Long count = sd.messageReferences.get(messageSequence);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1916,if (count == null) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1917,count = Long.valueOf(0L);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1919,count = count.longValue() + 1;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,1920,sd.messageReferences.put(messageSequence, count);
kahadb/src/main/java/org/apache/kahadb/util/Sequence.java,55,return first == last ? "" + first : first + "-" + last;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,59,PropertyEditorManager.registerEditor(String[].class, StringArrayEditor.class);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,94,Object value = method.invoke(target, new Object[] {});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,201,setter.invoke(target, new Object[] {value});
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,204,setter.invoke(target, new Object[] {convert(value, setter.getParameterTypes()[0])});
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,17,package org.apache.activemq.util;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,19,import java.beans.PropertyEditorSupport;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,21,import java.util.List;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,22,import java.util.StringTokenizer;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,25,public class StringArrayEditor extends PropertyEditorSupport {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,27,public void setAsText(String text) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,28,if (text == null || text.length() == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,29,setValue(null);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,31,StringTokenizer stok = new StringTokenizer(text, ",");
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,32,final List<String> list = new ArrayList<String>();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,34,while (stok.hasMoreTokens()) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,35,list.add(stok.nextToken());
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,38,Object array = list.toArray(new String[list.size()]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,40,setValue(array);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,44,public String getAsText() {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,45,Object[] objects = (Object[]) getValue();
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,46,if (objects == null || objects.length == 0) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,47,return null;
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,50,StringBuffer result = new StringBuffer(String.valueOf(objects[0]));
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,51,for (int i = 1; i < objects.length; i++) {
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,52,result.append(",").append(objects[i]);
activemq-core/src/main/java/org/apache/activemq/util/StringArrayEditor.java,55,return result.toString();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,21,import java.lang.reflect.Array;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,30,import java.util.Set;
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,48,String[] existingSearchPath = PropertyEditorManager.getEditorSearchPath();
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,49,String[] newSearchPath = (String[]) Array.newInstance(String.class,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,50,existingSearchPath.length + additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,51,System.arraycopy(existingSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,52,newSearchPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,53,existingSearchPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,54,System.arraycopy(additionalPath, 0,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,55,newSearchPath, existingSearchPath.length,
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,56,additionalPath.length);
activemq-core/src/main/java/org/apache/activemq/util/IntrospectionSupport.java,58,PropertyEditorManager.setEditorSearchPath(newSearchPath);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,936,systemUsage.getMemoryUsage().setLimit(1024 * 1024 * 64); // Default
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,939,systemUsage.getTempUsage().setLimit(1024L * 1024 * 1000 * 50); // 50
activemq-core/src/main/java/org/apache/activemq/broker/BrokerService.java,941,systemUsage.getStoreUsage().setLimit(1024L * 1024 * 1000 * 100); // 100
activemq-core/src/main/java/org/apache/activemq/ActiveMQSession.java,813,checkClosed();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,37,protected boolean batchResetNeeded = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,56,clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,57,super.start();
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,20,import org.apache.activemq.command.Command;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,21,import org.apache.activemq.openwire.OpenWireFormat;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,22,import org.apache.activemq.thread.DefaultThreadPools;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,23,import org.apache.activemq.util.IOExceptionSupport;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,24,import org.apache.activemq.util.ServiceStopper;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,25,import org.apache.activemq.wireformat.WireFormat;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,27,import javax.net.SocketFactory;
activemq-core/src/main/java/org/apache/activemq/transport/nio/NIOSSLTransport.java,28,import javax.net.ssl.*;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,23,import java.util.concurrent.ConcurrentLinkedQueue;
activemq-pool/src/main/java/org/apache/activemq/pool/ConnectionPool.java,42,private ConcurrentLinkedQueue<PooledSession> loanedSessions = new ConcurrentLinkedQueue<PooledSession>();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,57,public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,61,private boolean stopped;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,62,private final CopyOnWriteArrayList<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,63,private final CopyOnWriteArrayList<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>();
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,154,result.addTempDestEventListener(new PooledSessionEventListener() {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,157,public void onTemporaryQueueCreate(TemporaryQueue tempQueue) {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,158,connTempQueues.add(tempQueue);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,162,public void onTemporaryTopicCreate(TemporaryTopic tempTopic) {
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,163,connTempTopics.add(tempTopic);
activemq-pool/src/main/java/org/apache/activemq/pool/PooledConnection.java,167,return (Session) result;
activemq-pool/src/main/java/org/apache/activemq/pool/PooledSession.java,81,this.tempDestEventListeners.add(listener);
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,257,resetSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/AbstractStoreCursor.java,308,+ ",storeHasMessages=" + this.storeHasMessages + ",size=" + this.size + ",cacheEnabled=" + isCacheEnabled();
activemq-core/src/main/java/org/apache/activemq/broker/region/PrefetchSubscription.java,148,enqueueCounter++;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,62,public static final int MAX_ROWS = 10000;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,19,import java.io.*;
kahadb/src/main/java/org/apache/kahadb/page/PageFile.java,865,void readPage(long pageId, byte[] data) throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1708,LOG.warn("Async task tunner failed to wakeup ", e);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1894,if (!fullConsumers.contains(s) && !s.isFull()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1897,s.add(node);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1898,target = s;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1899,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1904,fullConsumers.add(s);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1905,if (LOG.isTraceEnabled()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1906,LOG.trace("Sub full " + s);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,379,waitStarted();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1182,protected void waitStarted() throws InterruptedException {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1183,startedLatch.await();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1186,protected void clearDownSubscriptions() {
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1187,subscriptionMapByLocalId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1188,subscriptionMapByRemoteId.clear();
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,1209,waitStarted();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/plist/PList.java,204,return iterator.hasNext();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,25,import java.security.KeyStore;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,42,import org.apache.commons.logging.Log;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,43,import org.apache.commons.logging.LogFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,63,private static final Log LOG = LogFactory.getLog(ActiveMQSslConnectionFactory.class);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,139,return trustStoreManagers;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,143,KeyManagerFactory kmf =
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,144,KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,157,return keystoreManagers;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,178,InputStream ins = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,179,try {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,180,URL url = new URL(urlOrResource);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,181,ins = url.openStream();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,183,catch (MalformedURLException ignore) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,184,ins = null;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,188,if (ins == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,189,ins = getClass().getClassLoader().getResourceAsStream(urlOrResource);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,192,if (ins == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,196,return ins;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,77,private Timer clientCleanupTimer = new Timer();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,68,import org.apache.kahadb.util.ByteSequence;
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBStore.java,988,return storeSize.get();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,210,protected AtomicLong storeSize = new AtomicLong(0);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MessageDatabase.java,2173,manager.setSizeAccumulator(storeSize);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,891,if (ackCounter >= (info.getPrefetchSize() * .65) || (optimizeAcknowledgeTimeOut > 0 && System.currentTimeMillis() >= (optimizeAckTimestamp + optimizeAcknowledgeTimeOut))) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,979,if ((0.5 * info.getPrefetchSize()) <= (deliveredCounter - additionalWindowSize)) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,357,backups.clear();
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,368,if (transportToStop != null) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,369,transportToStop.stop();
kahadb/src/main/java/org/apache/kahadb/index/BTreeNode.java,285,throw new IOException("BTree corrupted: Cylce detected.");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,208,if (uri.getQuery() != null) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,209,return false;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,211,String ssp = stripPrefix(uri.getRawSchemeSpecificPart().trim(), "(").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,212,ssp = stripPrefix(ssp, "//").trim();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,213,try {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,214,new URI(ssp);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,216,return false;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1288,public void syncSendPacket(Command command, final AsyncCallback onComplete) throws JMSException {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1324,if (exception instanceof SecurityException){
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,1367,if (er.getException() instanceof SecurityException){
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,302,if (e instanceof java.lang.SecurityException) {
activemq-core/src/main/java/org/apache/activemq/broker/TransportConnection.java,304,delayedStop(2000, "Failed with SecurityException: " + e.getLocalizedMessage(), e);
activemq-core/src/main/java/org/apache/activemq/transport/AbstractInactivityMonitor.java,183,LOG.debug("No message received since last read check for " + toString() + "! Throwing InactivityIOException.");
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,574,String accepts = headers.get(Stomp.Headers.Connect.ACCEPT_VERSION);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,576,if (accepts == null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,577,accepts = Stomp.DEFAULT_VERSION;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,584,acceptsVersions.retainAll(Arrays.asList(Stomp.SUPPORTED_PROTOCOL_VERSIONS));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,585,if (acceptsVersions.isEmpty()) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,586,throw new ProtocolException("Invalid Protocol version[" + accepts +"], supported versions are: " +
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,587,Arrays.toString(Stomp.SUPPORTED_PROTOCOL_VERSIONS), true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,589,this.version = Collections.max(acceptsVersions);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,657,if (version.equals(Stomp.V1_1)) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,658,StompWireFormat format = stompTransport.getWireFormat();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,659,if (format != null) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,660,format.setEncodingEnabled(true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,57,if (transport.getWireFormat() instanceof StompWireFormat) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,58,DataByteArrayInputStream data = new DataByteArrayInputStream(currentCommand.toByteArray());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,59,action = ((StompWireFormat)transport.getWireFormat()).parseAction(data);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,60,headers = ((StompWireFormat)transport.getWireFormat()).parseHeaders(data);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompCodec.java,63,contentLength = ((StompWireFormat)transport.getWireFormat()).parseContentLength(contentLengthHeader);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,48,private boolean encodingEnabled = false;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,239,if (this.encodingEnabled) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,307,public boolean isEncodingEnabled() {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,308,return this.encodingEnabled;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,311,public void setEncodingEnabled(boolean value) {
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,312,this.encodingEnabled = value;
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,354,for (BackupTransport t : backups) {
activemq-core/src/main/java/org/apache/activemq/transport/failover/FailoverTransport.java,355,t.setDisposed(true);
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,978,sessionTaskRunner = new TaskRunnerFactory("ActiveMQ Session Task", ThreadPriorities.INBOUND_CLIENT_SESSION, false, 1000, isUseDedicatedTaskRunner());
activemq-core/src/main/java/org/apache/activemq/thread/TaskRunnerFactory.java,106,ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer.MAX_VALUE, 30, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,39,QueueMessageReference ref = ((Queue)destination).getMessage(messageId);
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,40,Message rc = ref.getMessage();
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,41,if (rc == null) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,42,return null;
activemq-core/src/main/java/org/apache/activemq/broker/jmx/QueueView.java,44,return OpenTypeSupport.convert(rc);
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1024,pageInMessages(false);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/StompWireFormat.java,211,headers.put(name, value);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,583,HashSet<String> acceptsVersions = new HashSet<String>(Arrays.asList(accepts.split(Stomp.COMMA)));
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,592,configureInactivityMonitor(heartBeat);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,22,import java.io.FileInputStream;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,37,import org.apache.activemq.broker.BrokerService;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,40,import org.apache.activemq.transport.tcp.SslTransportFactory;
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,108,if (!brokerURL.getScheme().equals("ssl")) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,109,return super.createTransport();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,113,if (keyManager == null || trustManager == null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,114,trustManager = createTrustManager();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,118,SslTransportFactory sslFactory = new SslTransportFactory();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,119,SslContext ctx = new SslContext(keyManager, trustManager, secureRandom);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,120,SslContext.setCurrentSslContext(ctx);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,121,return sslFactory.doConnect(brokerURL);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,131,InputStream tsStream = getUrlOrResourceAsStream(trustStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,133,trustedCertStore.load(tsStream, trustStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,134,TrustManagerFactory tmf  =
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,135,TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,137,tmf.init(trustedCertStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,138,trustStoreManagers = tmf.getTrustManagers();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,148,byte[] sslCert = loadClientCredential(keyStore);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,151,if (sslCert != null && sslCert.length > 0) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,152,ByteArrayInputStream bin = new ByteArrayInputStream(sslCert);
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,153,ks.load(bin, keyStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,154,kmf.init(ks, keyStorePassword.toCharArray());
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,155,keystoreManagers = kmf.getKeyManagers();
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,209,public void setTrustStore(String trustStore) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQSslConnectionFactory.java,237,public void setKeyStore(String keyStore) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,576,kahaTxId.setTransacitonId(t.getValue());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,577,rc.setLocalTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/KahaDBPersistenceAdapter.java,584,rc.setXaTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,92,rc.setXaTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,36,kahaTxId.setTransacitonId(t.getValue());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,37,rc.setLocalTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,56,rc.setXaTransacitonId(kahaTxId);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,62,if (transactionInfo.hasLocalTransacitonId()) {
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,63,KahaLocalTransactionId tx = transactionInfo.getLocalTransacitonId();
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,66,rc.setValue(tx.getTransacitonId());
activemq-core/src/main/java/org/apache/activemq/store/kahadb/TransactionIdConversion.java,69,KahaXATransactionId tx = transactionInfo.getXaTransacitonId();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,349,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,350,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/Broker.java,365,void fastProducer(ConnectionContext context,ProducerInfo producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,274,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/BrokerFilter.java,275,next.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/EmptyBroker.java,266,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/ErrorBroker.java,276,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,285,public void fastProducer(ConnectionContext context,ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/MutableBrokerFilter.java,286,getNext().fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,78,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,409,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,410,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,416,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,417,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,511,if (advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/BaseDestination.java,512,broker.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,77,private boolean advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,162,destination.setAdvisdoryForFastProducers(isAdvisdoryForFastProducers());
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,664,public boolean isAdvisdoryForFastProducers() {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,665,return advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,671,public void setAdvisdoryForFastProducers(boolean advisdoryForFastProducers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/policy/PolicyEntry.java,672,this.advisdoryForFastProducers = advisdoryForFastProducers;
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,513,public void fastProducer(ConnectionContext context, ProducerInfo producerInfo) {
activemq-core/src/main/java/org/apache/activemq/broker/util/LoggingBrokerPlugin.java,517,super.fastProducer(context, producerInfo);
activemq-core/src/main/java/org/apache/activemq/jndi/ActiveMQInitialContextFactory.java,51,private static final String[] DEFAULT_CONNECTION_FACTORY_NAMES = {"ConnectionFactory", "QueueConnectionFactory", "TopicConnectionFactory"};
activemq-core/src/main/java/org/apache/activemq/broker/region/RegionBroker.java,184,((TopicRegion)topicRegion).setKeepDurableSubsActive(keepDurableSubsActive);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,216,consumers.add(subscription);
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,99,while (started.get() && message != null && ++attempt <= maxRetries) {
activemq-core/src/main/java/org/apache/activemq/network/jms/DestinationBridge.java,103,if (attempt > 0) {
activemq-core/src/main/java/org/apache/activemq/broker/jmx/ManagementContext.java,430,registrySocket = new ServerSocket(port);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,141,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,142,if(dsub.isActive()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,143,synchronized (consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,144,boolean hasSubscription = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,146,if(consumers.size()==0) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,147,hasSubscription = false;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,149,for(Subscription currentSub : consumers) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,150,if(currentSub.getConsumerInfo().isDurable()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,151,DurableTopicSubscription dcurrentSub = (DurableTopicSubscription) currentSub;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,152,if(dcurrentSub.getSubscriptionKey().equals(dsub.getSubscriptionKey())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,153,hasSubscription = true;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,154,break;
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,161,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,169,throws Exception {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,102,if ( info.getPrefetchSize() > 1 && matched.size() > info.getPrefetchSize() ) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,104,if(!isSlowConsumer()) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,164,oldMessages = messageEvictionStrategy.evictMessages(list);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,165,for (MessageReference ref : list) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,166,ref.decrementReferenceCount();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,171,messagesToEvict = oldMessages.length;
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,172,for (int i = 0; i < messagesToEvict; i++) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,173,MessageReference oldMessage = oldMessages[i];
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,174,discard(oldMessage);
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,283,destination.getDestinationStatistics().getInflight().subtract(ack.getMessageCount());
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,392,if (enableAudit && audit==null) {
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,400,return getDispatchedQueueSize()  >= info.getPrefetchSize();
activemq-core/src/main/java/org/apache/activemq/broker/region/TopicSubscription.java,471,private void dispatchMatched() throws IOException {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1895,if (dispatchSelector.canSelect(s, node) && assignMessageGroup(s, (QueueMessageReference)node)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1910,if (!node.isDropped() && !((QueueMessageReference) node).isAcked() &&
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1911,(!node.isDropped() || s.getConsumerInfo().isBrowser())) {
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1225,Set<MessageReference> set = new HashSet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1290,Set<MessageReference> set = new HashSet<MessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/region/Queue.java,1381,Set<QueueMessageReference> set = new HashSet<QueueMessageReference>();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,33,import org.apache.activemq.broker.region.Queue;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,448,ActiveMQDestination actualDest = translator.convertDestination(this, destination, true);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,454,ConsumerId id = new ConsumerId(sessionId, consumerIdGenerator.getNextSequenceId());
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,500,sendReceipt(command);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,501,sendToActiveMQ(consumerInfo, null);
activemq-core/src/main/java/org/apache/activemq/network/DemandForwardingBridgeSupport.java,44,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,994,public void dumpTables(Connection c) throws SQLException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,995,printQuery(c, "Select * from ACTIVEMQ_MSGS", System.out);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1010,ResultSetMetaData metaData = set.getMetaData();
activemq-core/src/main/java/org/apache/activemq/transport/vm/VMTransport.java,109,synchronized (started) {
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,31,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,339,ActiveMQTopic topic = AdvisorySupport.getSlowConsumerAdvisoryTopic(destination.getActiveMQDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,340,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,341,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_CONSUMER_ID, subs.getConsumerInfo().getConsumerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,342,fireAdvisory(context, topic, subs.getConsumerInfo(), null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,352,ActiveMQTopic topic = AdvisorySupport.getFastProducerAdvisoryTopic(producerInfo.getDestination());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,353,ActiveMQMessage advisoryMessage = new ActiveMQMessage();
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,354,advisoryMessage.setStringProperty(AdvisorySupport.MSG_PROPERTY_PRODUCER_ID, producerInfo.getProducerId().toString());
activemq-core/src/main/java/org/apache/activemq/advisory/AdvisoryBroker.java,355,fireAdvisory(context, topic, producerInfo, null, advisoryMessage);
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,145,boolean inProgressClearRequiredFlag;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,688,inProgressClearRequiredFlag = true;
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,694,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,696,if (inProgressClearRequiredFlag) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQMessageConsumer.java,709,inProgressClearRequiredFlag = false;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DatabaseLocker.java,41,boolean keepAlive();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/DefaultDatabaseLocker.java,173,public boolean keepAlive() {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,625,LOG.error("Failed to get database when trying keepalive: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,634,LOG.info("No longer able to keep the exclusive lock so giving up being a master");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,97,+ "( ID " + longDataType + " NOT NULL, TIME " + longDataType
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,35,private BrokerService broker;
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,97,while (isPersistenceAdapterDown()) {
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,103,LOG.warn("Failure occurred while restarting broker connectors", e);
activemq-core/src/main/java/org/apache/activemq/util/DefaultIOExceptionHandler.java,122,LOG.info("Stopping the broker due to IO exception, " + exception, exception);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,63,private DirContext context;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,67,if (context != null) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,27,import java.util.concurrent.*;
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,655,for (Iterator<ActiveMQTempDestination> i = this.activeTempDestinations.values().iterator(); i.hasNext();) {
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,656,ActiveMQTempDestination c = i.next();
activemq-core/src/main/java/org/apache/activemq/ActiveMQConnection.java,657,c.delete();
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,237,int intialParen = ssp.indexOf("(");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,238,if (intialParen == 0) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,239,rc.host = ssp.substring(0, intialParen);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,245,p = ssp.lastIndexOf(")");
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,246,componentString = ssp.substring(intialParen + 1, p);
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,388,public int indexOfParenthesisMatch(String str) {
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,389,int result = -1;
activemq-core/src/main/java/org/apache/activemq/util/URISupport.java,391,return result;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,21,import org.apache.activemq.command.*;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,23,import org.apache.activemq.util.*;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,27,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,28,import java.io.*;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,29,import java.util.*;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,30,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/transport/stomp/ProtocolConverter.java,31,import java.util.concurrent.atomic.AtomicBoolean;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,68,return context;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,71,try {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,72,Hashtable<String, String> env = new Hashtable<String, String>();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,73,env.put(Context.INITIAL_CONTEXT_FACTORY, initialContextFactory);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,74,if (connectionUsername != null || !"".equals(connectionUsername)) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,75,env.put(Context.SECURITY_PRINCIPAL, connectionUsername);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,77,if (connectionPassword != null || !"".equals(connectionPassword)) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,78,env.put(Context.SECURITY_CREDENTIALS, connectionPassword);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,80,env.put(Context.SECURITY_PROTOCOL, connectionProtocol);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,81,env.put(Context.PROVIDER_URL, connectionURL);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,82,env.put(Context.SECURITY_AUTHENTICATION, authentication);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,83,context = new InitialDirContext(env);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,42,public class CachedLDAPAuthorizationMap extends DefaultAuthorizationMap implements NamespaceChangeListener,
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,43,ObjectChangeListener, InitializingBean {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,55,private String baseDn = "ou=system";
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,56,private int cnsLength = 5;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,86,if (refreshInterval == -1) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,90,LOG.debug("Listening for: " + "'ou=Destination,ou=ActiveMQ," + baseDn + "'");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,91,eventContext.addNamingListener("ou=Destination,ou=ActiveMQ," + baseDn, "cn=*", constraints, this);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,94,LOG.error(e.toString());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,97,return context;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,100,HashMap<ActiveMQDestination, AuthorizationEntry> entries = new HashMap<ActiveMQDestination, AuthorizationEntry>();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,103,public void query() throws Exception {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,104,try {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,105,context = open();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,107,LOG.error(e.toString());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,113,NamingEnumeration<?> results = context.search("ou=Destination,ou=ActiveMQ," + baseDn, "(|(cn=admin)(cn=write)(cn=read))", constraints);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,114,while (results.hasMore()) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,115,SearchResult result = (SearchResult) results.next();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,116,AuthorizationEntry entry = getEntry(result.getNameInNamespace());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,117,applyACL(entry, result);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,128,protected AuthorizationEntry getEntry(String name) {;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,129,String[] cns = name.split(",");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,132,if (cns.length == cnsLength && cns[1].equals("ou=Temp")) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,133,TempDestinationAuthorizationEntry tempEntry = getTempDestinationAuthorizationEntry();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,134,if (tempEntry == null) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,135,tempEntry = new TempDestinationAuthorizationEntry();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,136,setTempDestinationAuthorizationEntry(tempEntry);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,138,return tempEntry;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,142,if (cns.length != (cnsLength + 1)) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,143,LOG.warn("Policy not applied! Wrong cn for authorization entry " + name);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,146,ActiveMQDestination dest = formatDestination(cns[1], cns[2]);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,148,if (dest != null) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,149,AuthorizationEntry entry = entries.get(dest);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,151,entry = new AuthorizationEntry();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,152,entry.setDestination(dest);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,153,entries.put(dest, entry);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,155,return entry;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,157,return null;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,161,protected ActiveMQDestination formatDestination(String destinationName, String destinationType) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,162,ActiveMQDestination dest = null;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,163,if (destinationType.equalsIgnoreCase("ou=queue")) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,164,dest = new ActiveMQQueue(formatDestinationName(destinationName));
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,166,dest = new ActiveMQTopic(formatDestinationName(destinationName));
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,168,LOG.warn("Policy not applied! Unknown destination type " + destinationType);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,170,return dest;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,173,protected void applyACL(AuthorizationEntry entry, SearchResult result) throws NamingException {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,175,Attribute cn = result.getAttributes().get("cn");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,176,Attribute member = result.getAttributes().get("member");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,177,NamingEnumeration<?> memberEnum = member.getAll();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,178,HashSet<Object> members = new HashSet<Object>();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,179,while (memberEnum.hasMoreElements()) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,180,String elem = (String) memberEnum.nextElement();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,181,members.add(new GroupPrincipal(elem.replaceAll("cn=", "")));
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,185,if (cn.get().equals("admin")) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,186,entry.setAdminACLs(members);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,188,entry.setWriteACLs(members);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,190,entry.setReadACLs(members);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,192,LOG.warn("Policy not applied! Unknown privilege " + result.getName());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,196,protected String formatDestinationName(String cn) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,197,return cn.replaceFirst("cn=", "").replaceAll(ANY_DESCENDANT, ">");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,200,protected boolean isPriviledge(Binding binding) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,201,String name = binding.getName();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,202,if (name.startsWith("cn=admin") || name.startsWith("cn=write") || name.startsWith("cn=read")) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,203,return true;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,205,return false;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,210,protected Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,211,if (refreshInterval != -1 && System.currentTimeMillis() >= lastUpdated + refreshInterval) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,220,LOG.error("Error updating authorization map", e);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,228,public void objectAdded(NamingEvent namingEvent) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,230,SearchResult result = (SearchResult)namingEvent.getNewBinding();
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,231,if (!isPriviledge(result)) return;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,232,AuthorizationEntry entry = getEntry(result.getName());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,233,if (entry != null) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,234,try {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,235,applyACL(entry, result);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,236,if (!(entry instanceof TempDestinationAuthorizationEntry)) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,237,put(entry.getDestination(), entry);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,240,LOG.warn("Unable to add entry", ne);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,246,public void objectRemoved(NamingEvent namingEvent) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,249,if (!isPriviledge(result)) return;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,250,AuthorizationEntry entry = getEntry(result.getName());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,251,String[] cns = result.getName().split(",");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,252,if (!isPriviledge(result)) return;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,253,if (cns[0].equalsIgnoreCase("cn=admin")) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,254,entry.setAdminACLs(new HashSet<Object>());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,256,entry.setWriteACLs(new HashSet<Object>());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,258,entry.setReadACLs(new HashSet<Object>());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,260,LOG.warn("Policy not removed! Unknown privilege " + result.getName());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,265,public void objectRenamed(NamingEvent namingEvent) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,270,String[] oldCns = oldBinding.getName().split(",");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,271,ActiveMQDestination oldDest = formatDestination(oldCns[0], oldCns[1]);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,273,String[] newCns = newBinding.getName().split(",");
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,274,ActiveMQDestination newDest = formatDestination(newCns[0], newCns[1]);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,276,if (oldDest != null && newDest != null) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,277,AuthorizationEntry entry = entries.remove(oldDest);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,278,if (entry != null) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,279,entry.setDestination(newDest);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,280,put(newDest, entry);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,281,remove(oldDest, entry);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,283,LOG.warn("No authorization entry for " + oldDest);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,289,public void objectChanged(NamingEvent namingEvent) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,291,objectRemoved(namingEvent);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,292,objectAdded(namingEvent);
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,297,LOG.error("Caught Unexpected Exception", namingExceptionEvent.getException());
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,349,public String getBaseDn() {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,350,return baseDn;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,353,public void setBaseDn(String baseDn) {
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,354,this.baseDn = baseDn;
activemq-core/src/main/java/org/apache/activemq/security/CachedLDAPAuthorizationMap.java,355,cnsLength = baseDn.split(",").length + 4;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,745,int priorityIterator = 0;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,140,if (destination instanceof Queue) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,141,Synchronization sync = new PreparedDestinationCompletion((Queue) destination, command.isMessage());
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,143,transaction.removeSynchronization(sync);
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,144,transaction.addSynchronization(sync);
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,149,final Queue queue;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,151,public PreparedDestinationCompletion(final Queue queue, boolean messageSend) {
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,152,this.queue = queue;
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,159,return System.identityHashCode(queue) +
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,166,queue.equals(((PreparedDestinationCompletion) other).queue) &&
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,173,queue.clearPendingMessages();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,175,LOG.debug("cleared pending from afterRollback : " + queue);
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,183,queue.clearPendingMessages();
activemq-core/src/main/java/org/apache/activemq/broker/TransactionBroker.java,185,LOG.debug("cleared pending from afterCommit : " + queue);
activemq-core/src/main/java/org/apache/activemq/command/MessageId.java,155,copy.dataLocator = dataLocator;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,22,import org.apache.activemq.util.HexSupport;
activemq-core/src/main/java/org/apache/activemq/command/XATransactionId.java,56,s.append("XID:[globalId=");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,38,void doAddMessage(TransactionContext c, long sequence, MessageId messageID, ActiveMQDestination destination, byte[] data, long expiration, byte priority) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,48,void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,52,void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long seq, long prio) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCAdapter.java,95,void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId, String subscriptionName, long re, long re1) throws SQLException, IOException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,123,adapter.doAddMessage(c,sequenceId, messageId, destination, data, message.getExpiration(),
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,124,this.isPrioritizedMessages() ? message.getPriority() : 0);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,131,onAdd(messageId, sequenceId, message.getPriority());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,190,long seq = getStoreSequenceIdForMessageId(ack.getLastMessageId())[0];
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,195,adapter.doRemoveMessage(c, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,318,long[] storedValues = getStoreSequenceIdForMessageId(messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,331,private long[] getStoreSequenceIdForMessageId(MessageId messageId) throws IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,332,long[] result = new long[]{-1, Byte.MAX_VALUE -1};
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,333,TransactionContext c = persistenceAdapter.getTransactionContext();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,334,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,335,result = adapter.getStoreSequenceId(c, destination, messageId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,337,JDBCPersistenceAdapter.log("JDBC Failure: ", e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,338,throw IOExceptionSupport.create("Failed to get store sequenceId for messageId: " + messageId +", on: " + destination + ". Reason: " + e, e);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,340,c.close();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCMessageStore.java,342,return result;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCPersistenceAdapter.java,240,transactionStore = new MemoryTransactionStore(this);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,78,adapter.doSetLastAckWithPriority(c, destination, clientId, subscriptionName, res[0], res[1]);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,80,adapter.doSetLastAck(c, destination, clientId, subscriptionName, res[0], res[1]);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,93,private long[] getCachedStoreSequenceId(TransactionContext transactionContext, ActiveMQDestination destination, MessageId messageId) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,257,LOG.trace(key + " existing last recovered: " + lastRecovered);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/JDBCTopicMessageStore.java,294,subscriberLastRecoveredMap.remove(getSubscriptionKey(clientId, subscriptionName));
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,134,+ "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, ?)";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,417,+ " WHERE CONTAINER=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,428,+ " WHERE CONTAINER=? AND ID > ? ORDER BY ID";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/Statements.java,481,+ " SET LAST_ACKED_ID = ? WHERE CONTAINER=? AND CLIENT_ID=? AND SUB_NAME=?";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,21,import java.io.OutputStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,28,import javax.jms.JMSException;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,29,import javax.sql.rowset.serial.SerialBlob;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,57,long expiration, byte priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,59,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,77,s = c.getConnection().prepareStatement(statements.getFindMessageByIdStatement(),
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,78,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_UPDATABLE);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,82,throw new IOException("Failed select blob for message: " + messageID + " in container.");
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/BlobJDBCAdapter.java,93,cleanupExclusiveLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,20,import java.io.PrintStream;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,21,import java.sql.Connection;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,24,import java.sql.ResultSetMetaData;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,207,long expiration, byte priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,329,public void doRemoveMessage(TransactionContext c, long seq) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,334,s = c.getConnection().prepareStatement(this.statements.getRemoveMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,339,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,409,public void doSetLastAckWithPriority(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,410,String subscriptionName, long seq, long prio) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,415,s = c.getConnection().prepareStatement(this.statements.getUpdateLastPriorityAckRowOfDurableSubStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,420,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,424,s.setLong(5, prio);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,428,throw new SQLException("Failed update last ack with priority: " + prio + ", for sub: " + subscriptionName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,439,public void doSetLastAck(TransactionContext c, ActiveMQDestination destination, String clientId,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,440,String subscriptionName, long seq, long priority) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,445,s = c.getConnection().prepareStatement(this.statements.getUpdateDurableLastAckStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,450,s.setLong(1, seq);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,891,public byte[] doGetNextDurableSubscriberMessageStatement(TransactionContext c, ActiveMQDestination destination,
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,892,String clientId, String subscriberName) throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,897,s = c.getConnection().prepareStatement(this.statements.getNextDurableSubscriberMessageStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,898,s.setString(1, destination.getQualifiedName());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,899,s.setString(2, clientId);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,900,s.setString(3, subscriberName);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,902,if (!rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,903,return null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,905,return getBinaryData(rs, 1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1038,throws SQLException, IOException {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1039,PreparedStatement s = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1040,ResultSet rs = null;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1041,cleanupExclusiveLock.readLock().lock();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1042,try {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1043,s = c.getConnection().prepareStatement(this.statements.getLastProducerSequenceIdStatement());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1044,s.setString(1, id.toString());
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1045,rs = s.executeQuery();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1046,long seq = -1;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1047,if (rs.next()) {
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1048,seq = rs.getLong(1);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1050,return seq;
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1052,cleanupExclusiveLock.readLock().unlock();
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1053,close(rs);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/DefaultJDBCAdapter.java,1054,close(s);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,51,String addMessageStatement = "INSERT INTO "
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,53,+ "(ID, MSGID_PROD, MSGID_SEQ, CONTAINER, EXPIRATION, PRIORITY, MSG) VALUES (?, ?, ?, ?, ?, ?, empty_blob())";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,54,statements.setAddMessageStatement(addMessageStatement);
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,56,String findMessageByIdStatement = "SELECT MSG FROM " +
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,57,statements.getFullMessageTableName() + " WHERE ID=? FOR UPDATE";
activemq-core/src/main/java/org/apache/activemq/store/jdbc/adapter/OracleBlobJDBCAdapter.java,58,statements.setFindMessageByIdStatement(findMessageByIdStatement);
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,48,ConcurrentHashMap<Object, Tx> inflightTransactions = new ConcurrentHashMap<Object, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,49,ConcurrentHashMap<TransactionId, Tx> preparedTransactions = new ConcurrentHashMap<TransactionId, Tx>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,50,final PersistenceAdapter persistenceAdapter;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,55,private final ArrayList<AddMessageCommand> messages = new ArrayList<AddMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,57,private final ArrayList<RemoveMessageCommand> acks = new ArrayList<RemoveMessageCommand>();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,167,return new ProxyTopicMessageStore(messageStore) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,212,public void prepare(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,258,public void rollback(TransactionId txid) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,336,final void acknowledge(final TopicMessageStore destination, final String clientId, final String subscriptionName,
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,240,if (tx == null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,241,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,242,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,244,return;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,19,import java.io.IOException;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,20,import java.util.ArrayList;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,21,import java.util.Iterator;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,22,import java.util.concurrent.ConcurrentHashMap;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,23,import java.util.concurrent.Future;
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,247,synchronized (this) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,248,tx.commit();
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,249,if (postCommit != null) {
activemq-core/src/main/java/org/apache/activemq/store/memory/MemoryTransactionStore.java,250,postCommit.run();
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,195,ActiveMQDestination fallback = ActiveMQDestination.getUnresolvableDestinationTransformer().transform(name);
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,200,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-core/src/main/java/org/apache/activemq/transport/stomp/LegacyFrameTranslator.java,204,throw new ProtocolException("Illegal destination name: [" + name + "] -- ActiveMQ STOMP destinations "
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,137,if(map.values().contains(message)) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,138,return true;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,140,return false;
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,155,for(MessageReference messageReference : pendingList) {
activemq-core/src/main/java/org/apache/activemq/broker/region/cursors/OrderedPendingList.java,156,addMessageLast(messageReference);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,39,import org.slf4j.Logger;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,40,import org.slf4j.LoggerFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,79,requestTimeout = asLong(name);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,123,String point = "activemq:"
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,125,+ "?requestTimeout=" + requestTimeout;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,127,String body = (String)client.getProducerTemplate().requestBody(point, text);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,130,writeMessageResponse(response.getWriter(), answer);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,132,IOException ex = new IOException();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,133,ex.initCause(e);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,134,throw ex;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,140,long timeToLive = getSendTimeToLive(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,185,message = (Message)request.getAttribute("message");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,269,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,270,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,272,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,276,writer.print(object.toString());
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,286,String clientId = request.getParameter("clientId");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,287,if (clientId != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,288,synchronized(this) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,289,LOG.debug("Getting local client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,290,WebClient client = clients.get(clientId);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,291,if (client == null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,292,LOG.debug("Creating new client [" + clientId + "]");
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,293,client = new WebClient();
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,294,clients.put(clientId, client);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,296,return client;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,300,return WebClient.getWebClient(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,368,continuation.resume();
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,27,import org.apache.activemq.ActiveMQConnection;
activemq-pool/src/main/java/org/apache/activemq/pool/XaConnectionPool.java,28,import org.apache.commons.pool.ObjectPoolFactory;
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,419,if (txt.startsWith("<?")) {
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,420,txt = txt.substring(txt.indexOf("?>") + 2);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,422,writer.print(txt);
activemq-web/src/main/java/org/apache/activemq/web/MessageListenerServlet.java,426,writer.print(object.toString());
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,345,if (getJmxServiceUrl() != null) {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,346,context.printException(new IllegalArgumentException("JMX URL already specified."));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,347,tokens.clear();
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,349,try {
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,350,this.setJmxServiceUrl(new JMXServiceURL(jmxUrl));
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,352,context.printException(e);
activemq-console/src/main/java/org/apache/activemq/console/command/AbstractJmxCommand.java,353,tokens.clear();
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,113,super.addSubscription(context, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,125,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,126,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,128,subscriptionRecoveryPolicy.recover(context, this, sub);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,135,sub.add(context, this);
activemq-core/src/main/java/org/apache/activemq/broker/region/Topic.java,136,consumers.add(sub);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,221,getMatchingPersistenceAdapter(destination).removeQueueMessageStore(destination);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,225,getMatchingPersistenceAdapter(destination).removeTopicMessageStore(destination);
activemq-core/src/main/java/org/apache/activemq/store/kahadb/MultiKahaDBPersistenceAdapter.java,283,registerAdapter(adapter, adapter.getDestinations().toArray(new ActiveMQDestination[]{})[0]);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,461,ByteSequence byteSequence = message.getContent();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,462,if (message.isCompressed()) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,463,Inflater inflater = new Inflater();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,464,inflater.setInput(byteSequence.data, byteSequence.offset, byteSequence.length);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,465,byte[] data = new byte[4096];
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,466,int read;
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,467,ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,468,while ((read = inflater.inflate(data, 0, data.length)) != 0) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,469,bytesOut.write(data, 0, read);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,471,byteSequence = bytesOut.toByteSequence();
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,475,if (byteSequence.getLength() > 4) {
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,476,byte[] content = new byte[byteSequence.getLength() - 4];
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,477,System.arraycopy(byteSequence.data, 4, content, 0, content.length);
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,478,result.payload(new Buffer(content));
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,483,result.payload(new Buffer(msg.getText().getBytes("UTF-8")));
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,623,String result = name.replace('>', '#');
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,624,result = result.replace('*', '+');
activemq-core/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java,625,result = result.replace('.', '/');
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,23,import java.util.Map;
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,29,import org.apache.activemq.util.IntrospectionSupport;
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportFactory.java,46,HttpsTransportServer result = new HttpsTransportServer(location, this);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,35,public HttpsTransportServer(URI uri, HttpsTransportFactory factory) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,42,if(auth != null){
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,43,sslConnector.setMode(auth);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,46,sslConnector.getSslContextFactory().setKeyStore(keyStore);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,47,sslConnector.getSslContextFactory().setKeyStorePassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,50,if (keyPassword == null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,51,sslConnector.getSslContextFactory().setKeyStorePassword(keyStorePassword);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,53,if (keyStoreType != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,54,sslConnector.getSslContextFactory().setKeyStoreType(keyStoreType);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,56,if (secureRandomCertficateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,57,sslConnector.getSslContextFactory().setSecureRandomAlgorithm(secureRandomCertficateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,59,if (keyCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,60,sslConnector.getSslContextFactory().setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,62,if (trustCertificateAlgorithm != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,63,sslConnector.getSslContextFactory().setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm);
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,65,if (protocol != null) {
activemq-optional/src/main/java/org/apache/activemq/transport/https/HttpsTransportServer.java,66,sslConnector.getSslContextFactory().setProtocol(protocol);
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,85,return e;
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,108,byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,109,int len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,110,while (len >= 0) {
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,111,out.write(buffer, 0, len);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,112,len = in.read(buffer);
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,114,in.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,115,out.close();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,119,MAX_DIR_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumDirNameLength","200")).intValue();
activemq-fileserver/src/main/java/org/apache/activemq/util/IOHelper.java,120,MAX_FILE_NAME_LENGTH = Integer.valueOf(System.getProperty("MaximumFileNameLength","64")).intValue();
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,91,try {
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,92,java.io.FileInputStream in = new java.io.FileInputStream(usersFile);
activemq-jaas/src/main/java/org/apache/activemq/jaas/TextFileCertificateLoginModule.java,94,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,67,InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,68,if (in != null) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,69,ByteArrayOutputStream out = new ByteArrayOutputStream();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,70,byte[] buf = new byte[4096];
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,71,int len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,72,while (len >= 0) {
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,73,out.write(buf, 0, len);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,74,len = in.read(buf);
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,76,in.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,77,out.close();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,78,data = out.toByteArray();
activemq-web/src/main/java/org/apache/activemq/web/AjaxServlet.java,79,jsCache.put(resource, data);
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,90,DestinationViewMBean destinationViewMBean = iter.next();
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,91,if (name.equals(destinationViewMBean.getName())) {
activemq-web/src/main/java/org/apache/activemq/web/BrokerFacadeSupport.java,92,return destinationViewMBean;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,147,while (endpointWorkers.size() > 0) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,148,ActiveMQEndpointActivationKey key = endpointWorkers.keySet().iterator().next();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,149,endpointDeactivation(key.getMessageEndpointFactory(), key.getActivationSpec());
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,208,ActiveMQEndpointWorker worker = endpointWorkers.remove(key);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,111,app.runTaskClass(tokens);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,112,System.exit(0);
activemq-console/src/main/java/org/apache/activemq/console/Main.java,215,public void runTaskClass(List<String> tokens) throws Throwable {
activemq-console/src/main/java/org/apache/activemq/console/command/ShellCommand.java,94,return -1;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionRequestInfo.java,65,public void configure(ActiveMQConnectionFactory factory) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,45,protected ActiveMQConnectionFactory createConnectionFactory(ActiveMQConnectionRequestInfo connectionRequestInfo) {
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,46,ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,47,connectionRequestInfo.configure(factory);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,60,public ActiveMQConnection makeConnection(ActiveMQConnectionRequestInfo connectionRequestInfo) throws JMSException{
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQConnectionSupport.java,61,return makeConnection(connectionRequestInfo, createConnectionFactory(connectionRequestInfo));
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,121,cf = createConnectionFactory(getInfo());
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,41,private BrokerService brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,43,public LocalBrokerFacade(BrokerService brokerService) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,44,this.brokerService = brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,47,public BrokerService getBrokerService() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,48,return brokerService;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,50,public String getBrokerName() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,51,return brokerService.getBrokerName();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,53,public Broker getBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,54,return brokerService.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,56,public ManagementContext getManagementContext() {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,57,return brokerService.getManagementContext();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,59,public BrokerViewMBean getBrokerAdmin() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,60,return brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,62,public ManagedRegionBroker getManagedBroker() throws Exception {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,63,BrokerView adminView = brokerService.getAdminView();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,64,if (adminView == null) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,65,return null;
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,67,return adminView.getBroker();
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,71,Set destinations = getManagedBroker().getQueueRegion().getDestinations(destination);
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,72,for (Iterator i = destinations.iterator(); i.hasNext();) {
activemq-web/src/main/java/org/apache/activemq/web/LocalBrokerFacade.java,73,Destination dest = (Destination) i.next();
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,20,import java.util.Enumeration;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,21,import java.util.HashSet;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,22,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,23,import java.util.Properties;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,24,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,25,import java.util.StringTokenizer;
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,99,private final Set queryViews = new HashSet(10);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,110,List addMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), queryAddObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,114,List subMBeans = JmxMBeansUtil.queryMBeans(createJmxConnection(), querySubObjects, queryViews);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,115,addMBeans.removeAll(subMBeans);
activemq-console/src/main/java/org/apache/activemq/console/command/QueryCommand.java,118,context.printMBean(JmxMBeansUtil.filterMBeansView(addMBeans, queryViews));
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,19,import java.util.ArrayList;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,20,import java.util.Collection;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,21,import java.util.HashMap;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,22,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,23,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,24,import java.util.Map;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,25,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,105,newData = data.getClass().newInstance();
activemq-console/src/main/java/org/apache/activemq/console/filter/PropertiesViewFilter.java,108,newData = new HashMap<Object, Object>();
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,19,import java.util.Iterator;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,20,import java.util.List;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,21,import java.util.Set;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,23,import javax.management.ObjectName;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,25,import javax.management.remote.JMXServiceURL;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,27,import org.apache.activemq.console.filter.GroupPropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,28,import org.apache.activemq.console.filter.MBeansAttributeQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,29,import org.apache.activemq.console.filter.MBeansObjectNameQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,30,import org.apache.activemq.console.filter.MBeansRegExQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,31,import org.apache.activemq.console.filter.MapTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,32,import org.apache.activemq.console.filter.MessagesQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,33,import org.apache.activemq.console.filter.PropertiesViewFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,34,import org.apache.activemq.console.filter.QueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,35,import org.apache.activemq.console.filter.StubQueryFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,36,import org.apache.activemq.console.filter.WildcardToMsgSelectorTransformFilter;
activemq-console/src/main/java/org/apache/activemq/console/util/JmxMBeansUtil.java,37,import org.apache.activemq.console.filter.WildcardToRegExTransformFilter;
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,235,throw new ResourceException("Could cleanup the ActiveMQ connection: " + e, e);
activemq-camel/src/main/java/org/apache/activemq/camel/component/ActiveMQConfiguration.java,26,import org.springframework.jms.connection.SingleConnectionFactory;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,33,import org.apache.activemq.ActiveMQQueueSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,35,import org.apache.activemq.ActiveMQTopicSession;
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,73,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, true, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,77,return new ServerSessionImpl(this, (ActiveMQSession)session, activeMQAsfEndpointWorker.workManager, endpoint, false, batchSize);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,223,List l = session.getUnconsumedMessages();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQManagedConnection.java,233,physicalConnection.cleanup();
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQResourceAdapter.java,125,String clientId = activationSpec.getClientId();
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,19,import java.util.Enumeration;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,20,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,21,import java.util.Map;
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,40,public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/MessageQuery.java,41,super(brokerFacade, sessionPool);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,24,import org.springframework.beans.factory.DisposableBean;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,31,private SessionPool sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,33,private Session session;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,37,public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,39,this.sessionPool = sessionPool;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,40,this.session = sessionPool.borrowSession();
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,48,sessionPool.returnSession(session);
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,49,session = null;
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,65,queue = session.createQueue(getValidDestination());
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,82,public Session getSession() {
activemq-web/src/main/java/org/apache/activemq/web/QueueBrowseQuery.java,83,return session;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,20,import java.io.IOException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,21,import java.io.PrintWriter;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,22,import java.util.HashMap;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,24,import javax.jms.Destination;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,25,import javax.jms.JMSException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,26,import javax.jms.Message;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,27,import javax.jms.MessageConsumer;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,28,import javax.jms.ObjectMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,29,import javax.jms.TextMessage;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,30,import javax.servlet.ServletConfig;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,31,import javax.servlet.ServletException;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,32,import javax.servlet.http.HttpServletRequest;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,33,import javax.servlet.http.HttpServletResponse;
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,250,String type = getContentType(request);
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,251,if (type != null) {
activemq-web/src/main/java/org/apache/activemq/web/MessageServlet.java,252,response.setContentType(type);
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,59,private int serverSessionId = getNextLogId();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,60,private final Logger log = LoggerFactory.getLogger(ServerSessionImpl.class.getName() + ":" + serverSessionId);
activemq-ra/src/main/java/org/apache/activemq/ra/ActiveMQEndpointWorker.java,255,serverSessionPool.close();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,108,return stale || !session.isRunning();
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,162,log.debug("Running");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,165,log.debug("run loop start");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,168,if ( session.isRunning() ) {
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionImpl.java,199,log.debug("Run finished");
activemq-ra/src/main/java/org/apache/activemq/ra/ServerSessionPoolImpl.java,192,activeSessions.remove(ss);
