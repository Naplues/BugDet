File,Line_number,SRC
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3687,SqlNode selectItem = selectItems.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,67,final List<AbstractConverter> abstractConverters = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,349,planner.checkForSatisfiedConverters(set, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1137,void checkForSatisfiedConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1138,RelSet set,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1139,RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1140,int i = 0;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1141,while (i < set.abstractConverters.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1142,AbstractConverter converter = set.abstractConverters.get(i);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1144,changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1145,rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1146,converter.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1147,if (converted == null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1150,if (!isRegistered(converted)) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1624,set.abstractConverters.add((AbstractConverter) rel);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,66,final RexExecutorImpl executor;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,71,RexExecutorImpl executor,
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,253,final RexExecutable exec =
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,61,private String compile(RexBuilder rexBuilder, List<RexNode> constExps,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,104,public RexExecutable getExecutable(RexBuilder rexBuilder, List<RexNode> exps,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,109,RelOptUtil.pushPastProject(topProject.getProjects(), bottomProject);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,53,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexWindow.java,55,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,998,final ImmutableBitSet groupSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1022,final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1058,final RelNode r = frame.rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,41,import org.apache.calcite.rex.RexLiteral;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1010,boolean allowAbstractConverters) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1060,RelTraitSet stepTraits =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1063,rel = getSubset(converted, stepTraits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1131,RelNode changeTraitsUsingConverters(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1132,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1133,RelTraitSet toTraits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1134,return changeTraitsUsingConverters(rel, toTraits, false);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,121,if (flatGroupSets.isEmpty()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2749,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2751,aggConverter.getAggCalls()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2752,false);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,99,public Result visitChild(int i, RelNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,468,final String lowerName = name.toLowerCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,469,if (lowerName.startsWith("expr$")) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,471,ordinalMap.put(lowerName, node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,121,protected final Map<String, SqlNode> ordinalMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,127,public abstract Result visitChild(int i, RelNode e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,440,return new Result(node, clauses, alias4, rel.getRowType(), aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,450,return new Result(node, clauses, alias5, rel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,451,ImmutableMap.of(alias4, rel.getRowType()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,884,final SqlNode mappedSqlNode =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,885,ordinalMap.get(field.getName().toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,886,if (mappedSqlNode != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,887,return mappedSqlNode;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1002,&& neededAlias != null
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1003,&& (aliases.size() != 1 || !aliases.containsKey(neededAlias))) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1011,return new Builder(rel, clauseList, select, newContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1067,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1069,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1081,return node;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1083,return asSelect();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1117,Context context, Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1118,this.rel = rel;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1119,this.clauses = clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1120,this.select = select;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1121,this.context = context;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1174,return SqlImplementor.this.result(select, clauses, rel, aliases);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,313,if (!inputRels.contains(previous)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3114,convertQueryRecursive(call.getSource(), false, targetRowType).project();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,496,match.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,145,buf.append(", ");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleMatch.java,149,buf.append("]");
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,23,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,37,import org.apache.calcite.sql.type.SqlTypeUtil;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,39,import org.apache.calcite.sql.validate.SqlValidator;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,40,import org.apache.calcite.sql.validate.SqlValidatorScope;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,41,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,44,import java.util.List;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,124,private List<RelDataType> collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,125,SqlValidator validator,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,126,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,127,SqlCall call) {
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,128,List<RelDataType> argTypes =
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,129,SqlTypeUtil.deriveAndCollectTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,130,validator, scope, call.getOperandList());
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,131,return ImmutableNullableList.of(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,132,argTypes.get(VALUE_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,133,argTypes.get(LOWER_OPERAND),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,134,argTypes.get(UPPER_OPERAND));
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,139,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,143,collectOperandTypes(
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,144,callBinding.getValidator(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,145,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/fun/SqlBetweenOperator.java,146,callBinding.getCall()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,23,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,542,newFilterArg = filters.get(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,546,newFilterArg =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,547,filters.get(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,550,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,560,remap(fullGroupSet, aggregate.getGroupSet()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,961,final Clause maxClause = maxClause();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,962,boolean needNew = false;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,965,Set<Clause> nonWrapSet = ImmutableSet.of(Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,966,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,969,needNew = true;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1016,public Clause maxClause() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,219,return inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,220,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,221,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,262,private RelDataType inferTypeFromOperands(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,263,RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,264,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,270,thenTypes.add(argTypes.get(j));
core/src/main/java/org/apache/calcite/runtime/Hook.java,85,QUERY_PLAN;
core/src/main/java/org/apache/calcite/rel/core/Project.java,242,&& false) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,243,pw.item("type", rowType);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,280,int trivialCount = 0;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,284,if (level != SqlExplainLevel.DIGEST_ATTRIBUTES) {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,285,trivialCount = countTrivial(projects);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,302,pw.item(prefix + outFields.get(i).getName(), projects.get(i));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,25,import org.apache.calcite.schema.Table;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,40,final Table table = relOptTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,41,if (!EnumerableTableScan.canHandle(table)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,42,return null;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,253,&& table instanceof QueryableTable) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,264,throw new AssertionError();
core/src/main/java/org/apache/calcite/util/BitString.java,195,assert bytes != null;
core/src/main/java/org/apache/calcite/util/BitString.java,196,int bitCount = bytes.length * 8;
core/src/main/java/org/apache/calcite/util/BitString.java,199,for (int i = 7; i >= 0; --i) {
core/src/main/java/org/apache/calcite/util/BitString.java,200,sb.append(((b & 1) == 0) ? '0' : '1');
core/src/main/java/org/apache/calcite/util/BitString.java,201,b >>= 1;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1409,final RelDataType source = ((RexCall) node).getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1411,final RelDataType target = node.getType();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,643,ImmutableList.Builder<SqlNode> orderNodes = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,646,orderNodes.add(toSql(program, rfc));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,650,new SqlNodeList(orderNodes.build(), POS);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,633,final int scale = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,634,BigDecimal divider = endUnit.multiplier.scaleByPowerOfTen(-scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,637,if (scale > 0) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,638,RelDataType decimalType =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,643,value = encodeIntervalOrDecimal(value, decimalType, false);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,859,assert o instanceof TimeString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,860,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,861,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,862,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,864,o = ((TimeString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,865,break;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,867,assert o instanceof TimestampString;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,868,p = type.getPrecision();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,869,if (p == RelDataType.PRECISION_NOT_SPECIFIED) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,870,p = 0;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,872,o = ((TimestampString) o).round(p);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,873,break;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,59,import java.io.PrintWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,60,import java.io.StringWriter;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,267,StringWriter stringWriter = new StringWriter(query.length());
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,268,PrintWriter printWriter = new PrintWriter(stringWriter);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,271,query = stringWriter.toString();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,64,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,139,final SqlNodeList selectList =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,140,new SqlNodeList(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,141,Collections.singletonList(SqlIdentifier.star(SqlParserPos.ZERO)),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,142,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,146,final SqlPrettyWriter writer = new SqlPrettyWriter(jdbcSchema.dialect);
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,75,SqlWriter.FrameTypeEnum.SIMPLE);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,198,final SqlWriter.Frame joinFrame =
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,199,writer.startList(SqlWriter.FrameTypeEnum.JOIN);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,204,String natural = "";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,205,if (join.isNatural()) {
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,206,natural = "NATURAL ";
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,213,writer.sep(natural + "CROSS JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,216,writer.sep(natural + "FULL JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,219,writer.sep(natural + "INNER JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,222,writer.sep(natural + "LEFT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,225,writer.sep(natural + "RIGHT JOIN");
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,253,writer.endList(joinFrame);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,328,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,330,unparseListClause(writer, pattern.orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,331,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,114,return toSqlString(null).getSql();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,134,if (dialect == null) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,137,SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,138,writer.setAlwaysUseParentheses(forceParens);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,139,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,140,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,141,unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,19,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,108,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,110,: writer.startList("", "");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,111,commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,112,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,119,for (SqlNode node : list) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,120,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,121,node.unparse(writer, 2, 3);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,125,void andOrList(SqlWriter writer, SqlKind sepKind) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,126,SqlBinaryOperator sepOp =
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,127,sepKind == SqlKind.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,128,? SqlStdOperatorTable.AND
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,129,: SqlStdOperatorTable.OR;
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,130,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,131,SqlNode node = list.get(i);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,132,writer.sep(sepKind.name(), false);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,140,int lprec = (i == 0) ? 0 : sepOp.getRightPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,141,int rprec = (i == (list.size() - 1)) ? 0 : sepOp.getLeftPrec();
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,142,node.unparse(writer, lprec, rprec);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,338,unparseListClause(writer, clause, null);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,345,if (clause instanceof SqlNodeList) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,346,if (sepKind != null) {
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,347,((SqlNodeList) clause).andOrList(writer, sepKind);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,349,((SqlNodeList) clause).commaList(writer);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,352,clause.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,93,final SqlWriter.Frame listFrame =
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,94,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,95,unparseListClause(writer, orderBy.orderList);
core/src/main/java/org/apache/calcite/sql/SqlOrderBy.java,96,writer.endList(listFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,146,SqlNode selectClause = select.selectList;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,147,if (selectClause == null) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,148,selectClause = SqlIdentifier.star(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,150,final SqlWriter.Frame selectListFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,151,writer.startList(SqlWriter.FrameTypeEnum.SELECT_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,152,unparseListClause(writer, selectClause);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,153,writer.endList(selectListFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,178,SqlKind whereSepKind = SqlKind.AND;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,181,whereSepKind = SqlKind.OR;
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,186,while (node.getKind() == whereSepKind) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,195,final SqlWriter.Frame whereFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,196,writer.startList(SqlWriter.FrameTypeEnum.WHERE_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,197,unparseListClause(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,198,writer,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,199,new SqlNodeList(
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,200,list,
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,201,select.where.getParserPosition()),
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,202,whereSepKind);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,203,writer.endList(whereFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,210,final SqlWriter.Frame groupFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,211,writer.startList(SqlWriter.FrameTypeEnum.GROUP_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,212,if (select.groupBy.getList().isEmpty()) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,213,final SqlWriter.Frame frame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,214,writer.startList(SqlWriter.FrameTypeEnum.SIMPLE, "(", ")");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,215,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,217,unparseListClause(writer, select.groupBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,219,writer.endList(groupFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,227,final SqlWriter.Frame windowFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,228,writer.startList(SqlWriter.FrameTypeEnum.WINDOW_DECL_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,229,for (SqlNode windowDecl : select.windowDecls) {
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,230,writer.sep(",");
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,231,windowDecl.unparse(writer, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,233,writer.endList(windowFrame);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,237,final SqlWriter.Frame orderFrame =
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,238,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,239,unparseListClause(writer, select.orderBy);
core/src/main/java/org/apache/calcite/sql/SqlSelectOperator.java,240,writer.endList(orderFrame);
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,179,SUB_QUERY,
core/src/main/java/org/apache/calcite/sql/SqlWriter.java,224,IDENTIFIER(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,127,private static final SqlWriter.FrameType FRAME_TYPE =
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,128,SqlWriter.FrameTypeEnum.create("CASE");
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,299,writer.startList(FRAME_TYPE, "CASE", "END");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,25,import org.apache.calcite.util.Unsafe;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,34,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,140,private final StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,141,protected final PrintWriter pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,146,protected boolean alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,147,private boolean keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,149,private boolean quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,150,private int indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,151,private boolean clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,152,private boolean selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,153,private boolean selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,155,private boolean windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,156,private boolean updateSetListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,157,private boolean windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,158,private SubQueryStyle subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,159,private boolean whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,161,private boolean caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,162,private int lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,163,private int charCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,171,if (pw == null) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,172,pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,174,this.pw = pw;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,175,this.dialect = dialect;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,176,this.alwaysUseParentheses = alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,177,resetSettings();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,178,reset();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,184,this(dialect, alwaysUseParentheses, null);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,188,this(dialect, true);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,198,this.caseClausesOnNewLines = caseClausesOnNewLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,206,this.subQueryStyle = subQueryStyle;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,210,this.windowNewline = windowNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,214,this.windowDeclListNewline = windowDeclListNewline;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,218,return indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,222,return alwaysUseParentheses;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,233,return quoteAllIdentifiers;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,237,return clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,241,return selectListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,245,return whereListItemsOnSeparateLines;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,249,return selectListExtraIndentFlag;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,253,return keywordsLowerCase;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,257,return lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,262,indentation = 4;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,263,clauseStartsLine = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,264,selectListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,265,selectListExtraIndentFlag = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,266,keywordsLowerCase = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,267,quoteAllIdentifiers = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,268,windowDeclListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,269,updateSetListNewline = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,270,windowNewline = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,271,subQueryStyle = SubQueryStyle.HYDE;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,272,alwaysUseParentheses = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,273,whereListItemsOnSeparateLines = false;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,274,lineLength = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,275,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,279,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,280,Unsafe.clear(sw);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,301,this.indentation = indentation;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,349,this.clauseStartsLine = clauseStartsLine;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,357,this.selectListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,385,public void setSelectListExtraIndentFlag(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,386,this.selectListExtraIndentFlag = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,393,public void setKeywordsLowerCase(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,394,this.keywordsLowerCase = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,403,public void setWhereListItemsOnSeparateLines(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,404,this.whereListItemsOnSeparateLines = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,407,public void setAlwaysUseParentheses(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,408,this.alwaysUseParentheses = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,412,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,413,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,414,indent(currentIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,422,Spaces.append(pw, indent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,423,charCount += indent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,433,public void setQuoteAllIdentifiers(boolean b) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,434,this.quoteAllIdentifiers = b;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,454,int indentation = getIndentation();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,455,if (frameType instanceof FrameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,456,FrameTypeEnum frameTypeEnum = (FrameTypeEnum) frameType;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,458,switch (frameTypeEnum) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,459,case WINDOW_DECL_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,460,case VALUES:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,461,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,462,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,463,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,464,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,465,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,466,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,467,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,468,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,469,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,470,windowDeclListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,471,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,472,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,474,case UPDATE_SET_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,475,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,476,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,477,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,478,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,479,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,480,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,481,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,482,updateSetListNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,483,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,484,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,485,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,486,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,488,case SELECT_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,489,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,490,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,491,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,492,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,493,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,494,selectListExtraIndentFlag ? indentation : 0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,495,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,496,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,497,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,498,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,499,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,500,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,502,case ORDER_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,503,case GROUP_BY_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,504,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,505,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,506,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,507,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,508,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,509,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,510,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,511,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,512,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,513,selectListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,514,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,515,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,517,case SUB_QUERY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,518,switch (subQueryStyle) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,519,case BLACK:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,525,open = Spaces.padRight("(", indentation);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,526,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,527,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,528,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,529,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,530,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,531,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,532,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,533,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,534,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,535,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,536,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,537,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,538,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,539,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,542,case HYDE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,548,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,549,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,550,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,551,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,552,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,553,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,554,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,555,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,556,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,557,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,558,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,559,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,560,protected void _before() {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,561,nextWhitespace = NL;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,564,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,565,throw Util.unexpected(subQueryStyle);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,568,case ORDER_BY:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,569,case OFFSET:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,570,case FETCH:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,571,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,572,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,573,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,574,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,575,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,576,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,577,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,578,true,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,579,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,580,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,581,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,582,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,584,case SELECT:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,585,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,586,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,587,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,588,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,589,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,590,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,591,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,592,isClauseStartsLine(), // newline before FROM, WHERE etc.
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,593,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,594,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,595,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,596,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,598,case SETOP:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,599,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,600,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,601,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,602,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,603,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,604,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,605,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,606,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,607,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,608,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,609,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,610,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,612,case WINDOW:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,613,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,614,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,615,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,616,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,617,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,618,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,619,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,620,windowNewline,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,621,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,622,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,623,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,624,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,626,case FUN_CALL:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,627,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,628,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,629,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,630,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,631,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,632,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,633,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,634,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,635,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,636,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,637,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,638,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,639,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,641,case IDENTIFIER:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,642,case SIMPLE:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,643,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,644,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,645,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,646,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,647,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,648,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,649,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,650,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,651,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,652,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,653,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,654,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,656,case WHERE_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,657,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,658,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,659,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,660,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,661,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,662,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,663,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,664,whereListItemsOnSeparateLines,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,665,0,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,666,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,667,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,668,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,670,case FROM_LIST:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,671,case JOIN:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,672,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,673,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,674,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,675,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,676,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,677,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,678,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,679,isClauseStartsLine(), // newline before UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,680,0, // all clauses appear below SELECT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,681,isClauseStartsLine(), // newline after UNION, EXCEPT
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,682,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,683,false) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,684,protected void sep(boolean printFirst, String sep) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,685,boolean newlineBefore =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,686,newlineBeforeSep
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,687,&& !sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,688,boolean newlineAfter =
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,689,newlineAfterSep && sep.equals(",");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,690,if ((itemCount > 0) || printFirst) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,691,if (newlineBefore && (itemCount > 0)) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,692,pw.println();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,693,charCount = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,694,indent(currentIndent + sepIndent);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,695,setNeedWhitespace(false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,697,keyword(sep);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,698,nextWhitespace = newlineAfter ? NL : " ";
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,700,++itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,703,default:
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,711,if (frameType.getName().equals("CASE")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,712,if (caseClausesOnNewLines) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,713,newlineAfterOpen = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,715,newlineBeforeClose = true;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,716,sepIndent = 0;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,719,return new FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,720,frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,721,keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,722,open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,723,close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,724,indentation,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,725,newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,726,newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,727,sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,728,false,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,729,newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,730,false);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,749,++frame.itemCount;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,756,if (frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,757,currentIndent += frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,793,if (endedFrame.frameType.needsIndent()) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,794,currentIndent -= this.frame.extraIndent;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,807,pw.flush();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,808,return sw.toString();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,826,pw.print(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,830,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,862,pw.print(nextWhitespace);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,863,charCount += nextWhitespace.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,874,&& ((charCount + s.length()) >= lineLength);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,890,pw.print(s);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,891,charCount += s.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,896,pw.print(x);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,897,charCount += String.valueOf(x).length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,907,pw.print(qName);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,908,charCount += qName.length();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1002,this.lineLength = lineLength;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1060,private final boolean newlineBeforeClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1061,private final boolean newlineAfterClose;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1062,private final boolean newlineAfterOpen;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1064,FrameImpl(
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1065,FrameType frameType,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1066,String keyword,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1067,String open,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1068,String close,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1069,int extraIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1070,boolean newlineAfterOpen,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1071,boolean newlineBeforeSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1072,int sepIndent,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1073,boolean newlineAfterSep,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1074,boolean newlineBeforeClose,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1075,boolean newlineAfterClose) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1100,|| (newlineAfterOpen && (itemCount == 0))) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1101,newlineAndIndent();
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,60,final SqlPrettyWriter writer = new SqlPrettyWriter(dialect);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,61,writer.setAlwaysUseParentheses(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,62,writer.setSelectListItemsOnSeparateLines(false);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,63,writer.setIndentation(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,319,identifierList(modify.getInput().getRowType().getFieldNames()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4076,int iAdjusted = i;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4077,if (query instanceof SqlUpdate) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4078,int nUpdateColumns =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4079,((SqlUpdate) query).getTargetColumnList().size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4080,assert sourceFields.size() >= nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4081,iAdjusted -= sourceFields.size() - nUpdateColumns;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4083,SqlNode node = getNthExpr(query, iAdjusted, sourceCount);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4124,if (update.getTargetColumnList() != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4125,return update.getTargetColumnList().get(ordinal);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4175,final RelDataType sourceRowType = getNamespace(call).getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4176,checkTypeAssignment(sourceRowType, targetRowType, call);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,203,List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,223,RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,224,rel.getCluster().getTypeFactory();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,36,import java.util.HashMap;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,86,final Map<Integer, Integer> mapInToOutPos = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,87,final List<RexNode> projExprs = rel.getProjects();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,88,final Set<ImmutableBitSet> projUniqueKeySet = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,94,mapInToOutPos.put(((RexInputRef) projExpr).getIndex(), i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,98,if (mapInToOutPos.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,101,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,107,if (childUniqueKeySet != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,110,for (ImmutableBitSet colMask : childUniqueKeySet) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,111,ImmutableBitSet.Builder tmpMask = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,112,boolean completeKeyProjected = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,113,for (int bit : colMask) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,114,if (mapInToOutPos.containsKey(bit)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,115,tmpMask.set(mapInToOutPos.get(bit));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,119,completeKeyProjected = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,120,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,123,if (completeKeyProjected) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,124,projUniqueKeySet.add(tmpMask.build());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,129,return projUniqueKeySet;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,71,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,638,switch (operand.getKind()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,639,case CASE:
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,321,if (rank.get(target) < rank.get(ordinal1)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,428,SqlNode expanded = expand(selectItem, scope);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,758,final List<RexNode> castExps =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,759,RexUtil.generateCastExpressions(rexBuilder, castRowType, rowType);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,762,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,766,return projectFactory.createProject(rel, castExps,
core/src/main/java/org/apache/calcite/sql/SqlLateralOperator.java,40,writer.keyword(getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,234,|| Number.class.isAssignableFrom(elementType))) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,233,protected final List<RelNode> leaves = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1608,leaves.add(resultRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2485,leaves.add(r);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4113,leaves.add(root);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4262,if (leaves.contains(rel) || rel instanceof LogicalMatch) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,181,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,182,final CalciteCatalogReader catalogReader = createCatalogReader();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,183,this.validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,184,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,185,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,186,this.validator.setIdentifierExpansion(true);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,59,return (Integer) expression0.evaluate(evaluator) + (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,60,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,63,+ (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,70,return (Integer) expression0.evaluate(evaluator) / (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,71,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,84,return (Integer) expression0.evaluate(evaluator) > (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,85,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,88,> (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,96,>= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,99,>= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,106,return (Integer) expression0.evaluate(evaluator) < (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,107,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,110,< (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,118,<= (Integer) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,121,<= (Double) expression1.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,128,return (Integer) expression0.evaluate(evaluator) * (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,129,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,145,return (Integer) expression0.evaluate(evaluator) - (Integer) expression1
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,146,.evaluate(evaluator);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BinaryExpression.java,149,- (Double) expression1.evaluate(evaluator);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,502,new SqlSingleOperandTypeChecker() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,503,public boolean checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,504,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,505,SqlNode node,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,506,int iFormalOperand,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,507,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,508,assert 0 == iFormalOperand;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,509,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,510,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,511,callBinding.getScope(),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,512,node);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,513,boolean validationError = false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,514,if (!type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,515,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,517,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,519,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,520,type.getFieldList().get(0).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,521,if (typeName != SqlTypeName.MULTISET
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,522,&& typeName != SqlTypeName.ARRAY) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,523,validationError = true;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,527,if (validationError && throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,528,throw callBinding.newValidationSignatureError();
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,530,return !validationError;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,533,public boolean checkOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,534,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,535,boolean throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,536,return checkSingleOperandType(
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,537,callBinding,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,538,callBinding.operand(0),
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,539,0,
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,540,throwOnFailure);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,543,public SqlOperandCountRange getOperandCountRange() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,544,return SqlOperandCountRanges.of(1);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,547,public String getAllowedSignatures(SqlOperator op, String opName) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,548,return "UNNEST(<MULTISET>)";
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,551,public boolean isOptional(int i) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,552,return false;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,555,public Consistency getConsistency() {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,556,return Consistency.NONE;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,566,OperandTypes.or(COLLECTION_OR_MAP, RECORD_COLLECTION);
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,232,for (SqlNode node : thenList) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,233,argTypes.add(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,234,callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/fun/SqlCaseOperator.java,235,callBinding.getScope(), node));
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,63,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,64,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,65,operand(Join.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,66,relFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,129,join.getTraitSet(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,176,static Expression fromInternal(Expression e, Class<?> targetType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,177,if (e == ConstantUntypedNull.INSTANCE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,178,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,180,if (!(e.getType() instanceof Class)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,181,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,183,if (targetType.isAssignableFrom((Class) e.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,184,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,187,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,189,if (targetType == java.sql.Time.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,190,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,192,if (targetType == java.sql.Timestamp.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,193,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,198,return Expressions.convert_(e,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,201,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,223,static Type toInternal(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,239,static Expression enforce(final Type storageType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,240,final Expression e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,241,if (storageType != null && e.type != storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,242,if (e.type == java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,243,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,244,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,246,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,247,return Expressions.call(BuiltInMethod.DATE_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,250,if (storageType == int.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,251,return Expressions.call(BuiltInMethod.TIME_TO_INT.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,253,if (storageType == Integer.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,254,return Expressions.call(BuiltInMethod.TIME_TO_INT_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,257,if (storageType == long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,258,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,260,if (storageType == Long.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,261,return Expressions.call(BuiltInMethod.TIMESTAMP_TO_LONG_OPTIONAL.method, e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,265,return e;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,146,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,265,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,885,RexToLixTranslator.convert(res, agg.result.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,910,offs = RexToLixTranslator.convert(offs, int.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,187,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,216,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/JavaRowFormat.java,247,return RexToLixTranslator.convert(e, fromType, fieldType);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,651,if (fieldType != java.sql.Date.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,990,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1201,return RexToLixTranslator.convert(result.accumulator().get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,27,import org.apache.calcite.linq4j.tree.ExpressionType;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,31,import org.apache.calcite.linq4j.tree.UnaryExpression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,222,expression = EnumUtils.enforce(storageType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,365,convert = convert(operand, typeFactory.getJavaClass(targetType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,573,convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,760,public static Expression convert(Expression operand, Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,761,final Type fromType = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,762,return convert(operand, fromType, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,765,public static Expression convert(Expression operand, Type fromType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,766,Type toType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,768,return operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,772,final Primitive toPrimitive = Primitive.of(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,773,final Primitive toBox = Primitive.ofBox(toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,774,final Primitive fromBox = Primitive.ofBox(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,775,final Primitive fromPrimitive = Primitive.of(fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,776,final boolean fromNumber = fromType instanceof Class
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,777,&& Number.class.isAssignableFrom((Class) fromType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,778,if (fromType == String.class) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,779,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,780,switch (toPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,781,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,782,case SHORT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,783,case INT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,784,case LONG:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,785,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,786,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,788,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,789,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,791,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,792,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,794,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,795,toPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,797,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,800,if (toBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,801,switch (toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,802,case CHAR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,804,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,805,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,807,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,808,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,810,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,811,toBox.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,813,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,817,if (toPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,818,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,820,return Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,821,operand, toPrimitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,823,if (fromNumber || fromBox == Primitive.CHAR) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,825,return Expressions.unbox(operand, toPrimitive);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,829,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,830,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,832,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,837,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,838,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,839,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,840,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,841,Expressions.unbox(operand, toBox),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,842,toBox));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,847,if (operand instanceof UnaryExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,848,UnaryExpression una = (UnaryExpression) operand;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,849,if (una.nodeType == ExpressionType.Convert
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,850,|| Primitive.of(una.getType()) == toBox) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,851,return Expressions.box(una.expression, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,856,if (toBox == Primitive.INT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,857,return Expressions.call(BuiltInMethod.DATE_TO_INT.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,859,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,864,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,865,return Expressions.call(BuiltInMethod.INTERNAL_TO_DATE.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,867,return Expressions.convert_(operand, java.sql.Date.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,872,if (isA(fromType, Primitive.INT)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,873,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIME.method, operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,875,return Expressions.convert_(operand, java.sql.Time.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,880,if (isA(fromType, Primitive.LONG)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,881,return Expressions.call(BuiltInMethod.INTERNAL_TO_TIMESTAMP.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,882,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,884,return Expressions.convert_(operand, java.sql.Timestamp.class);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,887,if (fromBox != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,890,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,891,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,892,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,893,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,894,BigDecimal.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,895,Expressions.unbox(operand, fromBox)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,897,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,905,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,906,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,907,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,908,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,909,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,911,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,913,if (fromPrimitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,914,switch (fromPrimitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,915,case DOUBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,916,case FLOAT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,919,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,920,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,922,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,923,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,926,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,927,fromPrimitive.boxClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,929,operand);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,934,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,935,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,936,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,937,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,938,SqlFunctions.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,940,operand));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,952,return Expressions.convert_(operand, toType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,955,static boolean isA(Type fromType, Primitive primitive) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,956,return Primitive.of(fromType) == primitive
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,957,|| Primitive.ofBox(fromType) == primitive;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,170,return RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,181,Expression nonNull = RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,153,RexToLixTranslator.convert(recFromCtx, Object[].class);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,161,return RexToLixTranslator.convert(recordAccess, storageType);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,19,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,181,RexToLixTranslator.convert(Expressions.constant(o), clazz);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2179,flatElements[i] = (E) Integer.valueOf(++ordinality); // 1-based
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,176,&& token.s.equalsIgnoreCase("ALL")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,489,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,618,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,695,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,775,if (token.s.equals(hintToken)) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,902,public static int mod(int b0, BigDecimal b1) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,903,return mod(b0, b1.intValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,193,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3924,private final Set<SubQuery> subQueryList = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4243,if (rowType == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4246,return null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4253,throw new AssertionError();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4282,if (node.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4291,if (expr.equalsDeep(subQuery.node, Litmus.IGNORE)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,30,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,103,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,106,final ImmutableIntList projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,107,final ImmutableList<RexNode> filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,111,filters = bindableScan.filters;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,112,projects = bindableScan.projects;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,114,filters = ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,115,projects = scan.identity();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,118,final List<Integer> projects2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,119,Mappings.apply((Mapping) mapping, projects);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,120,call.transformTo(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,121,Bindables.BindableTableScan.create(scan.getCluster(), scan.getTable(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,122,filters, projects2));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,307,final SqlIdentifier sqlTargetTable =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,865,if (LOGGER.isDebugEnabled()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,881,return subset;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,883,return register(rel, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,906,if (relCost.isLt(subset.bestCost)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,873,rel.recomputeDigest();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,327,subset.bestCost = otherSubset.bestCost;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,328,subset.best = otherSubset.best;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,356,final Set<RelSubset> activeSet = new HashSet<>();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,357,final RelMetadataQuery mq = rel.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,198,if (rel.set == set && traitSet.satisfies(rel.getTraitSet())) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,64,RelOptPlanner planner, SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,66,schema, EnumerableRel.Prefer.ANY, planner, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,67,convertletTable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,316,context.getRootSchema(), null, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,317,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,733,context.getRootSchema(), prefer, planner, resultConvention,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,734,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1001,RelOptPlanner planner, Prepare.Materialization materialization) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1013,new CalciteMaterializer(this, context, catalogReader, schema, planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1014,createConvertletTable());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1077,RelOptPlanner planner,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1079,SqlRexConvertletTable convertletTable) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1084,this.planner = planner;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1087,this.rexBuilder = new RexBuilder(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1165,final RelOptCluster cluster = prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1302,prepare.populateMaterializations(context, planner, materialization);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,266,buff.append(", r");
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,51,super("ITEM", SqlKind.OTHER_FUNCTION, 100, true, null, null, null);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,218,case OTHER_FUNCTION:
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,44,final Properties properties1 = new Properties(properties);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,45,properties1.setProperty(property.camelName(), value);
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,46,return new CalciteConnectionConfigImpl(properties1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,800,SqlNode node = field(collation.getFieldIndex());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,981,Context newContext;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,24,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,225,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,226,fieldClass(field),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,227,fieldReference(v1, field)));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,299,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,300,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,400,arg0 = Types.castIfNecessary(Comparable.class, arg0);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,401,arg1 = Types.castIfNecessary(Comparable.class, arg1);
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,559,Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,560,returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,561,fieldReference(v1, field0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1123,Types.castIfNecessary(acc.type, add.arguments().get(0)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1623,Types.castIfNecessary(type,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1624,Expressions.constant(timeUnit.multiplier)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1650,return Types.castIfNecessary(returnType, expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1767,return Types.castIfNecessary(returnType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1769,expressions.get(1)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,767,if (fromType.equals(toType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,854,return Expressions.box(operand, toBox);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,944,return Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,945,Expressions.equal(operand, RexImpTable.NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,946,RexImpTable.NULL_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,947,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,948,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,25,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/enumerable/StrictAggImplementor.java,58,Expressions.assign(acc, Types.castIfNecessary(acc.type, next))));
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,29,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,170,return Types.castIfNecessary(
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,171,target.getClass(),
core/src/main/java/org/apache/calcite/adapter/java/ReflectiveSchema.java,176,BuiltInMethod.REFLECTIVE_SCHEMA_GET_TARGET.method));
core/src/main/java/org/apache/calcite/schema/Schemas.java,33,import org.apache.calcite.linq4j.tree.Types;
core/src/main/java/org/apache/calcite/schema/Schemas.java,200,return Types.castIfNecessary(clazz, expression);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,453,if (returnType instanceof RecordType) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,455,return expression;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,457,if (Types.isAssignableFrom(returnType, type)) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,124,e.getLeft().getRowType().getFieldCount());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,264,Context rightContext, int leftFieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,285,rightContext, leftFieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,301,node = stripCastFromString(node);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,355,private static RexNode stripCastFromString(RexNode node) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,369,final RexNode o0b = ((RexCall) o0).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,370,switch (o0b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,371,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,372,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,373,return call.clone(call.getType(), ImmutableList.of(o0b, o1));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,378,final RexNode o1b = ((RexCall) o1).getOperands().get(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,379,switch (o1b.getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,380,case CHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,381,case VARCHAR:
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,382,return call.clone(call.getType(), ImmutableList.of(o0, o1b));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,611,final RexCall call = (RexCall) stripCastFromString(rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,626,return createLeftCall(op, nodeList);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,150,writer.append("new java.math.BigDecimal(").append(exact).append("L");
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,317,subset.propagateCostImprovements0(planner, mq, rel, activeSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,323,RelNode rel, Set<RelSubset> activeSet) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,346,parentSubset.propagateCostImprovements(planner, mq, parent,
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,347,activeSet);
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,28,public static final CyclicMetadataException INSTANCE =
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,29,new CyclicMetadataException();
core/src/main/java/org/apache/calcite/rel/metadata/CyclicMetadataException.java,32,private CyclicMetadataException() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,297,if (!predicate.apply(join, joinType, exp)) {
core/src/main/java/org/apache/calcite/sql/SqlExplain.java,175,return getFormat() == SqlExplainFormat.XML;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,84,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/core/Calc.java,171,return copy(traitSet, getInput(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,172,new RexProgram(program.getInputRowType(),
core/src/main/java/org/apache/calcite/rel/core/Calc.java,173,exprs,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,175,(RexLocalRef) condition,
core/src/main/java/org/apache/calcite/rel/core/Calc.java,176,program.getOutputRowType()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistribution.java,137,throw new AssertionError(); // TODO:
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,180,assert curRelTrait.getTraitDef() == traitDef;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,110,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,160,.item("requiredColumns", requiredColumns.toString());
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,91,new CorrelationId((Integer) input.get("correlationId")),
core/src/main/java/org/apache/calcite/rex/RexProgram.java,243,return collectExplainTerms("", pw, pw.getDetailLevel());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,152,List<RexNode> newOperands = apply(call.getOperands());
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,153,if (true) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,156,throw new AssertionError();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,51,RelTrait out, String description) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,68,description == null
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,70,: description);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,234,return table.unwrap(ScannableTable.class).scan(dataContext);
core/src/main/java/org/apache/calcite/rel/core/Project.java,281,mapping.set(((RexInputRef) exp.e).getIndex(), exp.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,100,final Mappings.TargetMapping mapping = project.getMapping();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,101,if (mapping == null
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,102,|| Mappings.isIdentity(mapping)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1074,for (RelDataTypeField field : model.rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1075,exprList.add(rexBuilder.makeZeroLiteral(field.getType()));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1080,exprList.set(target,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1081,rexBuilder.ensureType(expr.e.getType(),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1082,RexInputRef.of(expr.i, input.rowType),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1083,false));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1085,throw MatchFailed.INSTANCE;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,922,if (needsNullIndicator(type)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,926,RelDataType indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,927,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,928,if (type.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,929,indicatorType =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,930,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,931,indicatorType,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,932,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,934,RelDataTypeField nullIndicatorField =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,935,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,937,0,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,938,indicatorType);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,939,list.add(nullIndicatorField);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,940,nested = true;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,184,restructured = false;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,185,List<RexNode> structuringExps = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,188,structuringExps = restructureFields(root.getRowType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,190,if (restructured) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,199,return flattened;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,207,if (field.getType().getSqlTypeName() == SqlTypeName.STRUCTURED) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,209,structuringExps.add(restructure(field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,211,structuringExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,212,new RexInputRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,213,iRestructureInput,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,214,field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,215,++iRestructureInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,221,private RexNode restructure(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,222,RelDataType structuredType) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,224,RexInputRef nullIndicator =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,225,RexInputRef.of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,226,iRestructureInput++, flattenedRootType.getFieldList());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,229,List<RexNode> inputExprs = restructureFields(structuredType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,230,RexNode newInvocation =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,231,rexBuilder.makeNewInvocation(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,232,structuredType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,233,inputExprs);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,235,if (!structuredType.isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,237,return newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,242,RexNode[] caseOperands = new RexNode[3];
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,245,caseOperands[0] =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,246,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,247,SqlStdOperatorTable.IS_NULL,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,248,nullIndicator);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,257,caseOperands[2] = newInvocation;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,259,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,260,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,261,caseOperands);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,281,int newOrdinal = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,285,RelNode oldInput = null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,286,for (RelNode oldInput1 : currentRel.getInputs()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,287,RelDataType oldInputType = oldInput1.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,288,int n = oldInputType.getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,289,if (oldOrdinal < n) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,290,oldInput = oldInput1;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,291,break;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,294,newOrdinal += newInput.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,295,oldOrdinal -= n;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,297,assert oldInput != null;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,299,RelDataType oldInputType = oldInput.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,322,private int calculateFlattenedOffset(RelDataType rowType, int ordinal) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,323,int offset = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,324,if (SqlTypeUtil.needsNullIndicator(rowType)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,326,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,328,List<RelDataTypeField> oldFields = rowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,329,for (int i = 0; i < ordinal; ++i) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,330,RelDataType oldFieldType = oldFields.get(i).getType();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,331,if (oldFieldType.isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,334,RelDataType flattened =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,335,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,336,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,337,oldFieldType,
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,338,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,339,final List<RelDataTypeField> fields = flattened.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,340,offset += fields.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,342,++offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,345,return offset;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,397,RelNode newRel =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,398,rel.copy(rel.getTraitSet(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,399,getNewForOldRel(rel.getInput()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,400,rel.getCondition().accept(new RewriteRexShuttle()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,471,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,472,rel.getProjects(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,473,rel.getRowType().getFieldNames(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,475,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,553,String fieldName =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,556,: fieldNames.get(i);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,557,if (!prefix.equals("")) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,558,fieldName = prefix + "$" + fieldName;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,570,RexInputRef inputRef = (RexInputRef) exp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,574,RelDataType flattenedType =
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,575,SqlTypeUtil.flattenRecordType(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,576,rexBuilder.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,577,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,578,null);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,579,List<RelDataTypeField> fieldList = flattenedType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,580,int n = fieldList.size();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,581,for (int j = 0; j < n; ++j) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,583,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,586,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,592,if (exp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,595,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,597,fieldName));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,599,if (RexLiteral.isNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,600,((RexCall) exp).operands.get(0))) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,603,flattenNullLiteral(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,604,exp.getType(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,605,flattenedExps);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,606,return;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,609,flattenProjections(new RewriteRexShuttle(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,618,int j = 0;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,620,flattenedExps.add(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,622,fieldName + "$" + (j++)));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,660,flattenInputs(rel.getRowType().getFieldList(),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,661,rexBuilder.makeRangeReference(newRel),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,662,flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,689,flattenInputs(field.getType().getFieldList(), ref, flattenedExpList);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,771,calculateFlattenedOffset(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1750,if (validator.getValidatedNodeType(node).isNullable()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1751,break;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,701,final UnifyRuleCall call = new UnifyRuleCall(rule, query, target, null);
core/src/main/java/org/apache/calcite/rel/mutable/MutableTableFunctionScan.java,72,&& inputs.equals(((MutableSetOp) obj).getInputs());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,94,private final RexToLixTranslator.InputGetter inputGetter;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,92,boolean allColumnsInAggregate = aggregate.getGroupSet().
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,93,contains(filterColumns);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,593,throw Extensions.todo();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/VisitorImpl.java,99,return gotoStatement.expression.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,37,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/Match.java,68,protected final List<RexNode> partitionKeys;
core/src/main/java/org/apache/calcite/rel/core/Match.java,95,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,108,this.partitionKeys = ImmutableList.copyOf(partitionKeys);
core/src/main/java/org/apache/calcite/rel/core/Match.java,175,public List<RexNode> getPartitionKeys() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,61,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,384,if (e.getPartitionKeys() != null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,385,for (RexNode rex : e.getPartitionKeys()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,386,SqlNode sqlNode = context.toSql(null, rex);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,387,partitionSqlList.add(sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2094,final List<RexNode> partitionKeys = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2097,partitionKeys.add(e);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2231,definitionNodes.build(), measureNodes.build(), after,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1547,final List<RelFieldCollation> fieldCollations = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1551,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1553,collation(node, RelFieldCollation.Direction.ASCENDING, null,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1565,final boolean addedFields = extraNodes.size() > originalExtraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1567,assert !addedFields;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1597,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1598,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1604,if (addedFields) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1605,project(originalExtraNodes);
core/src/main/java/org/apache/calcite/util/Pair.java,208,return new AbstractList<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,209,public Pair<K, V> get(int index) {
core/src/main/java/org/apache/calcite/util/Pair.java,210,return Pair.of(ks.get(index), vs.get(index));
core/src/main/java/org/apache/calcite/util/Pair.java,213,public int size() {
core/src/main/java/org/apache/calcite/util/Pair.java,214,return size;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,124,BINDABLE_WINDOW_RULE);
core/src/main/java/org/apache/calcite/rel/core/Match.java,185,Map<String, RexNode> patternDefinitions, Map<String, RexNode> measures,
core/src/main/java/org/apache/calcite/rel/core/Match.java,186,RexNode after, Map<String, ? extends SortedSet<String>> subsets,
core/src/main/java/org/apache/calcite/rel/core/Match.java,187,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys,
core/src/main/java/org/apache/calcite/rel/core/Match.java,192,&& traitSet == getTraitSet()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,193,return this;
core/src/main/java/org/apache/calcite/rel/core/Match.java,197,patternDefinitions, measures, after, subsets, allRows,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,57,private LogicalMatch(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,90,final RelTraitSet traitSet = getCluster().traitSetOf(Convention.NONE);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,91,return new LogicalMatch(getCluster(), traitSet,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,20,import java.util.ArrayList;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,21,import java.util.Arrays;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,28,static final Indent INDENT = new Indent(20);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,31,private int level;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,32,private String indent = "";
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,78,indent = INDENT.get(++level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,85,indent = INDENT.get(--level);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,95,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,147,buf.append(indent);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,199,private static class Indent extends ArrayList<String> {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,201,super(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,202,ensureSize(initialCapacity);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,205,public synchronized String of(int index) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,206,ensureSize(index + 1);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,207,return get(index);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,210,private void ensureSize(int targetSize) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,211,if (targetSize < size()) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,212,return;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,214,char[] chars = new char[2 * targetSize];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,215,Arrays.fill(chars, ' ');
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,217,clear();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,218,for (int i = 0; i < targetSize; i++) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,467,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,476,RexNode first = removeCast(operands.get(0));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,477,RexNode second = removeCast(operands.get(1));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,494,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,495,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,496,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,497,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,498,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,499,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,502,return inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,30,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,31,import org.apache.calcite.sql.fun.SqlCastFunction;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,111,inputRef = removeCast(inputRef);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,112,literal = removeCast(literal);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,165,private static RexNode removeCast(RexNode inputRef) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,166,if (inputRef instanceof RexCall) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,167,final RexCall castedRef = (RexCall) inputRef;
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,168,final SqlOperator operator = castedRef.getOperator();
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,169,if (operator instanceof SqlCastFunction) {
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,170,inputRef = castedRef.getOperands().get(0);
core/src/main/java/org/apache/calcite/plan/VisitorDataContext.java,173,return inputRef;
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,76,super(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3353,case AND:
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3360,final int left2 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3362,final RexNode e =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3363,pushDownEqualJoinConditions(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3364,operand,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3365,leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3366,rightCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3367,extraLeftExprs,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3369,final List<RexNode> remainingOperands = Util.skip(operands, i + 1);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3370,final int left3 = leftCount + extraLeftExprs.size();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3371,fix(remainingOperands, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3372,fix(list, left2, left3);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3373,list.add(e);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,361,final String op = (String) map.get("op");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,363,if (op != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,442,final List<SqlOperator> operatorList =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,443,SqlStdOperatorTable.instance().getOperatorList();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,444,for (SqlOperator operator : operatorList) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,445,if (operator.getName().equals(op)) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,460,private String toJson(SqlOperator operator) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,462,return operator.getName();
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,273,final String aggName = (String) jsonAggCall.get("agg");
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,459,private SqlCall as(SqlNode e, String alias) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,460,return SqlStdOperatorTable.AS.createCall(POS, e,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,461,new SqlIdentifier(alias, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,210,node = SqlStdOperatorTable.AS.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,211,POS, node, new SqlIdentifier(name, POS));
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,418,protected boolean requiresAliasForFromItems() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,76,String stringValue = ((NlsString) value).getValue();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,80,assert value instanceof NlsString;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,81,writer.literal(value.toString());
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,61,private final String identifierQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,62,private final String identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,63,private final String identifierEscapedQuote;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,286,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,287,buf.append(val); // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,288,return buf;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,290,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,291,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,292,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,293,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,294,buf.append(identifierQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,295,buf.append(val2);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,296,buf.append(identifierEndQuoteString);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,331,public String quoteStringLiteral(String val) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,332,if (containsNonAscii(val)) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,333,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,335,return buf.toString();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,337,val = FakeUtil.replace(val, "'", "''");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,338,return "'" + val + "'";
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,349,private static boolean containsNonAscii(String s) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,352,if (c < 32 || c >= 128) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,395,&& (val.charAt(val.length() - 1) == '\'')) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,396,if (val.length() > 2) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,397,val = FakeUtil.replace(val, "''", "'");
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,398,return val.substring(1, val.length() - 1);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,401,return "";
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,174,writer.literal(nls.asSql(true, false));
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,177,writer.literal(nls.asSql(false, false));
core/src/main/java/org/apache/calcite/util/NlsString.java,157,boolean suffix) {
core/src/main/java/org/apache/calcite/util/NlsString.java,159,if (prefix && (null != charsetName)) {
core/src/main/java/org/apache/calcite/util/NlsString.java,160,ret.append("_");
core/src/main/java/org/apache/calcite/util/NlsString.java,161,ret.append(charsetName);
core/src/main/java/org/apache/calcite/util/NlsString.java,163,ret.append("'");
core/src/main/java/org/apache/calcite/util/NlsString.java,165,ret.append("'");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,403,final Object literal = map.get("literal");
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,24,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,36,this.inputs = ImmutableList.copyOf(inputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,51,return Expressions.call(method, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/ReflectiveCallNotNullImplementor.java,57,return Expressions.call(target, method, translatedOperands);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,253,public Statement visit(TryStatement tryStatement) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Shuttle.java,254,return tryStatement;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,41,return shuttle.visit(this);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,312,List<RelNode> inputRels = input.set.getRelsFromAllSubsets();
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,105,if (!description.matches("[A-Za-z][-A-Za-z0-9_.():]*")) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,69,? "ConverterRule<in=" + in + ",out=" + out + ">"
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,86,materialization.queryRel =
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,87,sqlToRelConverter2.convertQuery(node, true, true).rel;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,456,assert queryDescendant.rowType.equals(targetDescendant.rowType);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,493,MutableRel parent = result.call.query.replaceInParent(result.result);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,504,: Pair.of(result.result, result.call.query);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,136,private final boolean simplify;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,147,this.simplify = Hook.REL_BUILDER_SIMPLIFY.get(true);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1038,action.getConfig().getDefaultSchema() != null
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1049,action.getConfig().getContext(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1050,action.getConfig().getCostFactory());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,78,public abstract static class PrepareAction<R> {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,81,this.config = newConfigBuilder() //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,93,public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,94,SchemaPlus rootSchema, CalciteServerStatement statement);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,104,public static <R> R withPlanner(final PlannerAction<R> action, //
core/src/main/java/org/apache/calcite/tools/Frameworks.java,106,return withPrepare(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,107,new Frameworks.PrepareAction<R>(config) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,108,public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/Frameworks.java,109,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,110,final CalciteSchema schema =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,111,CalciteSchema.from(
core/src/main/java/org/apache/calcite/tools/Frameworks.java,112,Util.first(config.getDefaultSchema(), rootSchema));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,113,return action.apply(cluster, relOptSchema, schema.root().plus());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,137,public static <R> R withPrepare(PrepareAction<R> action) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,140,if (action.config.getTypeSystem() != RelDataTypeSystem.DEFAULT) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,142,action.config.getTypeSystem().getClass().getName());
core/src/main/java/org/apache/calcite/tools/Frameworks.java,149,return new CalcitePrepareImpl().perform(statement, action);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,55,import org.apache.calcite.schema.SchemaPlus;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,56,import org.apache.calcite.server.CalciteServerStatement;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,188,final RelOptCluster[] clusters = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,189,final RelOptSchema[] relOptSchemas = {null};
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,190,Frameworks.withPrepare(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,191,new Frameworks.PrepareAction<Void>(config) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,192,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,193,SchemaPlus rootSchema, CalciteServerStatement statement) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,194,clusters[0] = cluster;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,195,relOptSchemas[0] = relOptSchema;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,196,return null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,199,return new RelBuilder(config.getContext(), clusters[0], relOptSchemas[0]);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,486,ret = factory.createFilter(ret, conditionExp);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,637,return factory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,643,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,666,return filterFactory.createFilter(child, condition);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,716,return factory.createFilter(rel, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,223,RelNode createFilter(RelNode input, RexNode condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,231,public RelNode createFilter(RelNode input, RexNode condition) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,232,return LogicalFilter.create(input, condition);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,70,factory.createFilter(newSemiJoin, filter.getCondition());
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,486,relBuilder.push(
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,487,filter.copy(filter.getTraitSet(), newInput, newConditionExpr));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,801,return filter(ImmutableList.copyOf(predicates));
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,74,return new PigFilter(input.getCluster(), input.getTraitSet().replace(PigRel.CONVENTION),
pig/src/main/java/org/apache/calcite/adapter/pig/PigRelFactories.java,75,input, condition);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,934,return call.result(call.query);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3361,final int right2 = rightCount + extraRightExprs.size();
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,25,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,87,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,194,if (RelOptUtil.classifyFilters(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3289,+ rightCount + extraRightExprs.size(),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3290,0, 0, leftCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3291,leftCount, leftCount + extraLeftExprs.size(), rightCount);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1436,return values(frame.rel.getRowType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,39,public static final RelOptRule ENUMERABLE_SEMI_JOIN_RULE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,40,new EnumerableSemiJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,22,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,25,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,26,import org.apache.calcite.rel.InvalidRelException;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,27,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,31,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,32,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,34,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,43,EnumerableSemiJoin(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,44,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,45,RelTraitSet traits,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,46,RelNode left,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,47,RelNode right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,48,RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,49,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,51,throws InvalidRelException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,57,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,58,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,59,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,82,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,17,package org.apache.calcite.adapter.enumerable;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,20,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,21,import org.apache.calcite.rel.convert.ConverterRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,24,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,25,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,30,class EnumerableSemiJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,31,EnumerableSemiJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,38,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,39,for (RelNode input : semiJoin.getInputs()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,40,if (!(input.getConvention() instanceof EnumerableConvention)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,41,input =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,42,convert(input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,43,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,45,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,341,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,342,return SemiJoin.create(left, right,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,343,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,17,package org.apache.calcite.rel.core;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,19,import org.apache.calcite.plan.Convention;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,21,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,22,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,23,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,24,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,25,import org.apache.calcite.rel.metadata.RelMdUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,26,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,27,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,29,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,30,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,31,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,32,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,34,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,35,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,44,public class SemiJoin extends EquiJoin {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,60,public SemiJoin(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,61,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,62,RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,63,RelNode left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,64,RelNode right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,65,RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,66,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,67,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,68,super(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,69,cluster,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,70,traitSet,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,71,left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,72,right,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,73,condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,74,leftKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,75,rightKeys,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,77,JoinRelType.INNER);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,81,public static SemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,82,ImmutableIntList leftKeys, ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,83,final RelOptCluster cluster = left.getCluster();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,84,return new SemiJoin(cluster, cluster.traitSetOf(Convention.NONE), left,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,85,right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,91,RelNode left, RelNode right, JoinRelType joinType, boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,92,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,93,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,94,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,95,return new SemiJoin(getCluster(), traitSet, left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,96,joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,100,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,102,return planner.getCostFactory().makeTinyCost();
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,106,return Util.first(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,107,RelMdUtil.getSemiJoinRowCount(mq, left, right, joinType, condition),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,108,1D);
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,118,return SqlValidatorUtil.deriveJoinRowType(
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,119,left.getRowType(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,120,null,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,121,JoinRelType.INNER,
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,122,getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,123,null,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRelType.java,32,SEMIJOIN,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,247,case SEMIJOIN:
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,248,final MutableSemiJoin semiJoin = (MutableSemiJoin) node;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,249,relBuilder.push(fromMutable(semiJoin.getLeft(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,250,relBuilder.push(fromMutable(semiJoin.getRight(), relBuilder));
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,251,relBuilder.semiJoin(semiJoin.condition);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,252,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,17,package org.apache.calcite.rel.mutable;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,20,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,21,import org.apache.calcite.util.ImmutableIntList;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,23,import java.util.Objects;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,26,public class MutableSemiJoin extends MutableBiRel {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,27,public final RexNode condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,28,public final ImmutableIntList leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,29,public final ImmutableIntList rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,31,private MutableSemiJoin(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,32,RelDataType rowType,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,33,MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,34,MutableRel right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,35,RexNode condition,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,36,ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,37,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,38,super(MutableRelType.SEMIJOIN, left.cluster, rowType, left, right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,39,this.condition = condition;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,40,this.leftKeys = leftKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,41,this.rightKeys = rightKeys;
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,54,public static MutableSemiJoin of(RelDataType rowType, MutableRel left,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,55,MutableRel right, RexNode condition, ImmutableIntList leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,56,ImmutableIntList rightKeys) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,57,return new MutableSemiJoin(rowType, left, right, condition, leftKeys,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,58,rightKeys);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,62,return obj == this
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,63,|| obj instanceof MutableSemiJoin
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,69,&& right.equals(((MutableSemiJoin) obj).right);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,81,.append(")");
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,85,return MutableSemiJoin.of(rowType, left.clone(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,86,right.clone(), condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,19,import org.apache.calcite.linq4j.CorrelateJoinType;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,87,public CorrelateJoinType toLinq4j() {
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,90,return CorrelateJoinType.INNER;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,92,return CorrelateJoinType.LEFT;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,94,return CorrelateJoinType.SEMI;
core/src/main/java/org/apache/calcite/sql/SemiJoinType.java,96,return CorrelateJoinType.ANTI;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,200,return program.getCollations(mq.collations(input));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,91,.push(call.rel(3).getInput(0));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,56,private static final LoadingCache<Object, RelDataType> CACHE =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,346,return CACHE.getUnchecked(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,142,RelOptUtil.permute(child.cluster.getTypeFactory(), rowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3700,&& targetRowType.getFieldCount() >= i
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1310,permute(query, project.getInput(), mapping.inverse());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1311,final MutableRel result = unifyAggregates(aggregate2, target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1312,return result == null ? null : call.result(result);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,143,Mappings.bijection(posList)),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1080,RelNode aggregate = aggregateFactory.createAggregate(r,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1094,fields.add(frame.fields.get(((RexInputRef) node).getIndex()));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,461,Map<Integer, Integer> mapNewInputToProjOutputs = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,575,combinedMap.put(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,591,postProjects.add(entry.getKey() + frame.corDefOutputs.size(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,592,entry.getValue());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,599,return register(rel, relBuilder.build(), combinedMap, corDefOutputs);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,100,info.leftKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,101,info.rightKeys,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,19,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,20,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,21,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,23,import org.apache.calcite.plan.RelOptCost;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,24,import org.apache.calcite.plan.RelOptPlanner;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,28,import org.apache.calcite.rel.core.JoinInfo;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,33,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,35,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,39,public class EnumerableSemiJoin extends SemiJoin implements EnumerableRel {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,52,super(cluster, traits, left, right, condition, leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,56,public static EnumerableSemiJoin create(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,66,throw new AssertionError(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,71,RelNode left, RelNode right, JoinRelType joinType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,72,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,73,assert joinType == JoinRelType.INNER;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,74,final JoinInfo joinInfo = JoinInfo.of(left, right, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,75,assert joinInfo.isEqui();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,76,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,77,return new EnumerableSemiJoin(getCluster(), traitSet, left, right,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,78,condition, joinInfo.leftKeys, joinInfo.rightKeys);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,87,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,88,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,91,final double rightRowCount = right.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,92,final double leftRowCount = left.estimateRowCount(mq);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,93,if (Double.isInfinite(leftRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,94,rowCount = leftRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,96,rowCount += Util.nLogN(leftRowCount);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,98,if (Double.isInfinite(rightRowCount)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,99,rowCount = rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,101,rowCount += rightRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,103,return planner.getCostFactory().makeCost(rowCount, 0, 0).multiplyBy(.01d);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,106,public Result implement(EnumerableRelImplementor implementor, Prefer pref) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,107,BlockBuilder builder = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,108,final Result leftResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,109,implementor.visitChild(this, 0, (EnumerableRel) left, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,110,Expression leftExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,111,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,113,final Result rightResult =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,114,implementor.visitChild(this, 1, (EnumerableRel) right, pref);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,115,Expression rightExpression =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,116,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,118,final PhysType physType = leftResult.physType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,119,return implementor.result(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,120,physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,121,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,122,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,123,BuiltInMethod.SEMI_JOIN.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,124,Expressions.list(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,125,leftExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,126,rightExpression,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,127,leftResult.physType.generateAccessor(leftKeys),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoin.java,129,.toBlock());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,47,return EnumerableSemiJoin.create(newInputs.get(0), newInputs.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSemiJoinRule.java,48,semiJoin.getCondition(), semiJoin.leftKeys, semiJoin.rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,31,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCorrelate.java,28,import org.apache.calcite.sql.SemiJoinType;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,32,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,313,public Boolean areColumnsUnique(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,314,ImmutableBitSet columns, boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,317,return mq.areColumnsUnique(rel.getLeft(), columns, ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,27,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,152,public Double getDistinctRowCount(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdDistinctRowCount.java,153,ImmutableBitSet groupKey, RexNode predicate) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,117,public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,118,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdNodeTypes.java,119,return getNodeTypes(rel, SemiJoin.class, mq);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,25,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,88,public Double getPopulationSize(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,89,ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPopulationSize.java,90,return mq.getPopulationSize(rel.getLeft(), groupKey);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,30,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,36,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,178,public Double getRowCount(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,181,RexNode semiJoinSelectivity =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,182,RelMdUtil.makeSemiJoinSelectivityRexNode(mq, rel);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,184,return NumberUtil.multiply(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,185,mq.getSelectivity(rel.getLeft(), semiJoinSelectivity),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdRowCount.java,186,mq.getRowCount(rel.getLeft()));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,29,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,180,public List<Double> averageColumnSizes(SemiJoin rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,26,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,203,public Set<ImmutableBitSet> getUniqueKeys(SemiJoin rel, RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,204,boolean ignoreNulls) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUniqueKeys.java,207,return mq.getUniqueKeys(rel.getLeft(), ignoreNulls);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,28,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,117,public static double computeSemiJoinSelectivity(RelMetadataQuery mq,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,118,SemiJoin rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,119,return computeSemiJoinSelectivity(mq, rel.getLeft(), rel.getRight(),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,120,rel.getLeftKeys(), rel.getRightKeys());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,35,import org.apache.calcite.rel.core.SemiJoin;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,371,if (rel instanceof SemiJoin) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,372,final SemiJoin semiJoin = (SemiJoin) rel;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,373,final MutableRel left = toMutable(semiJoin.getLeft());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,374,final MutableRel right = toMutable(semiJoin.getRight());
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,375,return MutableSemiJoin.of(semiJoin.getRowType(), left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,376,semiJoin.getCondition(), semiJoin.getLeftKeys(), semiJoin.getRightKeys());
core/src/main/java/org/apache/calcite/tools/Programs.java,117,EnumerableRules.ENUMERABLE_SEMI_JOIN_RULE,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,646,if (from.getKind() == SqlKind.VALUES) {
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,40,private static void unparseCube(SqlWriter writer, SqlCall call) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,174,final DateTimeUtils.PrecisionTime pt =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,175,DateTimeUtils.parsePrecisionDateTimeLiteral(dateStr,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,176,Format.PER_THREAD.get().timestamp, DateTimeUtils.UTC_ZONE, -1);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,450,final Schema schema = new CalciteConnectionImpl.RootSchema();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,88,super();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,202,DatabaseMetaData metaData = connection.getMetaData();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,203,resultSet = metaData.getTables(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,204,catalog,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,205,schema,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,206,null,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,207,null);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,210,while (resultSet.next()) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,211,final String tableName = resultSet.getString(3);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,212,final String catalogName = resultSet.getString(1);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,213,final String schemaName = resultSet.getString(2);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,214,final String tableTypeName = resultSet.getString(4);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,225,tableTypeName == null
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,227,: tableTypeName.toUpperCase(Locale.ROOT).replace(' ', '_');
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,234,new JdbcTable(this, catalogName, schemaName, tableName, tableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,235,builder.put(tableName, table);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,622,return call(SqlStdOperatorTable.AS, expr, literal(alias));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,769,String digest = rel.getDigest();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,770,HepRelVertex equivVertex = mapDigestToVertex.get(digest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,835,String oldDigest = vertex.getCurrentRel().toString();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,836,if (mapDigestToVertex.get(oldDigest) == vertex) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,837,mapDigestToVertex.remove(oldDigest);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,912,Iterator<Map.Entry<String, HepRelVertex>> digestIter =
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,79,if (newCalc.getDigest().equals(bottomCalc.getDigest())) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,193,return DatabaseProduct.DERBY;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1287,for (int i = 0; i < queryAggregate.getAggCallList().size(); i++) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1289,rexBuilder.makeInputRef(result, queryAggregate.getGroupCount() + i));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,550,literal.getValueAs(BigDecimal.class).toString(), POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,553,literal.getValueAs(BigDecimal.class).toString(), POS);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,72,if (filter.isA(SqlKind.EQUALS)) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,64,static String isItem(RexCall call) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,128,final String name = isItem(call);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,135,return strings.get(0).startsWith("$") ? strings.get(0).substring(1) : strings.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,467,private static class TypeFinder extends VisitorImpl<Void> {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,493,if (constantExpression.value instanceof Type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,494,types.add((Type) constantExpression.value);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,554,if (SqlUtil.isNullLiteral(left, false)) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,555,return cx.convertExpression(left);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,557,RexNode arg = cx.convertExpression(left);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,41,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,90,final RelDataType operandType = callBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,91,final SqlSingleOperandTypeChecker checker = getChecker(operandType);
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,96,private SqlSingleOperandTypeChecker getChecker(RelDataType operandType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,109,throw new AssertionError(operandType.getSqlTypeName());
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,514,return Arrays.equals(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,518,return Arrays.hashCode(t);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,98,for (RelNode input : setOp.getInputs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,101,Project p = pushProject.createProjectRefsAndExprs(input, true, false);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,102,newSetOpInputs.add(pushProject.createNewProject(p, adjustments));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,106,SetOp newSetOp =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,107,setOp.copy(setOp.getTraitSet(), newSetOpInputs);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,109,call.transformTo(newSetOp);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,125,newFilterRel = filter.copy(filter.getTraitSet(), project.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,478,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,596,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,242,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,275,if (hasAmbiguousUnresolvedStar(namespace.getRowType(), field,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,276,columnName)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,492,if (hasAmbiguousUnresolvedStar(step.rowType, field0, name)) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,544,private boolean hasAmbiguousUnresolvedStar(RelDataType rowType,
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,545,RelDataTypeField field, String columnName) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,52,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,60,final RelNode input = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,61,if (!aggregate.getAggCallList().isEmpty() || aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,62,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,71,final RelNode newInput = convert(input, aggregate.getTraitSet().simplify());
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,173,return rexBuilder.makeExactLiteral(BigDecimal.ONE);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,175,return rexBuilder.makeCall(SqlStdOperatorTable.CASE, predicate,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,176,rexBuilder.makeExactLiteral(BigDecimal.ONE),
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,177,rexBuilder.makeExactLiteral(BigDecimal.ZERO));
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,288,if (operand.ordinalInParent < inputs.size()) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,292,successors = subset.set.subsets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,307,if (ascending) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,42,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,82,final List<RelNode> inputs = call.getChildRels(union);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,84,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,87,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,91,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,92,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,93,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,94,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,96,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,97,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,98,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,99,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,100,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,101,union.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,102,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,103,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,104,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,105,builder.push(LogicalUnion.create(newInputs, union.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,106,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,130,final List<RelNode> inputs = call.getChildRels(minus);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,132,final List<RelNode> newInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,135,newInputs.add(input);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,143,: "planner promised us at least one Empty child";
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,144,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,145,switch (newInputs.size()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,146,case 0:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,148,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,149,case 1:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,150,builder.push(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,151,RelOptUtil.createCastRel(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,152,newInputs.get(0),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,153,minus.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,154,true));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,155,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,156,default:
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,157,builder.push(LogicalMinus.create(newInputs, minus.all));
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,158,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,190,return node instanceof Values
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,191,&& ((Values) node).getTuples().isEmpty();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,80,private final JdbcSchema jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,81,private final String jdbcCatalogName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,82,private final String jdbcSchemaName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,83,private final String jdbcTableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,84,private final Schema.TableType jdbcTableType;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,87,String jdbcSchemaName, String tableName, Schema.TableType jdbcTableType) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,89,this.jdbcSchema = jdbcSchema;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,92,this.jdbcTableName = tableName;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,151,SqlIdentifier tableName() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,152,final List<String> strings = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,154,strings.add(jdbcSchema.catalog);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,157,strings.add(jdbcSchema.schema);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,159,strings.add(jdbcTableName);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,160,return new SqlIdentifier(strings, SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,141,RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,142,RelCollation collation, RexNode offset, RexNode fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,156,public RelNode createSort(RelTraitSet traits, RelNode input,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,157,RelCollation collation, RexNode offset, RexNode fetch) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,158,return createSort(input, collation, offset, fetch);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,260,RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,262,boolean semiJoinDone);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,277,public RelNode createJoin(RelNode left, RelNode right, RexNode condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,278,JoinRelType joinType, Set<String> variablesStopped,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,279,boolean semiJoinDone) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,280,return createJoin(left, right, condition,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,281,CorrelationId.setOf(variablesStopped), joinType, semiJoinDone);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,213,final SqlIdentifier identifier =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,214,new SqlIdentifier(e.getTable().getQualifiedName(), SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,49,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2401,assert nTotalFields == (joinRel instanceof SemiJoin
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2402,? nSysFields + nFieldsLeft
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2403,: nSysFields + nFieldsLeft + nFieldsRight);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,89,!corr.getJoinType().toJoinType().generatesNullsOnLeft(),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,90,!corr.getJoinType().toJoinType().generatesNullsOnRight(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2358,LogicalCorrelate corr = LogicalCorrelate.create(leftRel, p.r,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2359,p.id, p.requiredColumns, SemiJoinType.of(joinType));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2363,return factory.createFilter(corr, joinCond);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,502,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,503,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,504,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,505,ImmutableList.of(0),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,506,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,507,0,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,508,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,509,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,510,extraName);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,512,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,514,ImmutableBitSet.of(), null, ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,581,final AggregateCall aggCall =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,582,AggregateCall.create(SqlStdOperatorTable.MIN,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,583,false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,584,ImmutableList.of(projectedKeyCount),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,585,-1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,586,projectedKeyCount,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,587,ret,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,588,null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,589,null);
core/src/main/java/org/apache/calcite/rel/core/Window.java,356,boolean distinct) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,160,over.isDistinct());
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,111,(SqlAggFunction) call.getOperator(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,112,call.getType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,113,clonedOperands,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,114,((Window.RexWinAggCall) call).ordinal,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,115,((Window.RexWinAggCall) call).distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,341,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,353,final RexOver over = new RexOver(type, operator, exprs, window, distinct);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,359,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,360,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,370,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,377,operator, exprs, window, distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,383,final RelDataType bigintType = getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,384,SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,396,distinct),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,639,getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,640,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,641,scale + exp.getType().getPrecision(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,642,scale);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1039,return getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1040,type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1041,valueNullability);
core/src/main/java/org/apache/calcite/rex/RexOver.java,66,boolean distinct) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,54,over.isDistinct());
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,44,super("FILTER", SqlKind.FILTER, 2, true, ReturnTypes.ARG0_FORCE_NULLABLE,
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,155,if (call.getKind() == SqlKind.FILTER) {
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,156,call.operand(0).accept(this);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1884,isDistinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5091,boolean distinct) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5154,distinct);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5195,distinct);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,75,RelTraitSet traits,
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,81,super(cluster, traits);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,21,import org.apache.calcite.plan.RelTraitSet;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,43,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,44,sort.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,55,RelNode x = convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,56,input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,57,input.getTraitSet().replace(EnumerableConvention.INSTANCE));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,59,new EnumerableLimit(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,60,sort.getCluster(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,61,traitSet,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,62,x,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,241,SortUnionTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,130,public NullDirection defaultNullDirection() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,452,checkRollup:
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,453,if (groupSets.size() == groupSet.cardinality() + 1) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,454,ImmutableBitSet g = groupSet;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,455,for (ImmutableBitSet bitSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,456,if (!bitSet.equals(g)) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,457,break checkRollup;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,459,g = g.clear(g.length() - 1);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,461,assert g.isEmpty();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,187,List<SqlNode> groupByList = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,189,for (int group : e.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,190,final SqlNode field = builder.context.field(group);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,191,addSelect(selectList, field, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,192,groupByList.add(field);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,289,builder = x.builder(e, Clause.FETCH);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,294,builder = x.builder(e, Clause.OFFSET);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,536,public RelFieldCollation.NullDirection defaultNullDirection(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,528,public RexNode call(SqlOperator operator, RexNode... operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,533,private RexNode call(SqlOperator operator, List<RexNode> operandList) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,544,public RexNode call(SqlOperator operator,
core/src/main/java/org/apache/calcite/util/Bug.java,154,public static final boolean CALCITE_461_FIXED = false;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1019,return this;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,340,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,90,static Class javaRowClass(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,91,JavaTypeFactory typeFactory, RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,92,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,93,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,95,final Type clazz = typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,96,return clazz instanceof Class ? (Class) clazz : Object[].class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,438,inputPhysType.convertTo(childExp, physType),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollect.java,60,Expressions.call(child_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,211,final RelDataType dummyType = this.rowType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,212,final Expression e3 =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,213,elementPhysType.convertTo(e2,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,214,PhysTypeImpl.of(typeFactory, dummyType, JavaRowFormat.LIST));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,53,import static org.apache.calcite.adapter.enumerable.EnumUtils.javaRowClass;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,75,fieldClasses.add(javaRowClass(typeFactory, field.getType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,242,final JavaRowFormat targetFormat = targetPhysType.getFormat();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,249,return Expressions.call(exp, BuiltInMethod.SELECT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,250,generateSelector(o_, Util.range(fieldCount), targetFormat));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,168,if (type.isStruct() && type.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,169,return getJavaClass(type.getFieldList().get(0).getType());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1957,return list;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,683,if (id.names.size() == 1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,83,double rowCount = mq.getRowCount(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,84,double percentage = mq.getPercentageOriginalRows(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,103,double left = mq.getPercentageOriginalRows(rel.getLeft());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPercentageOriginalRows.java,104,double right = mq.getPercentageOriginalRows(rel.getRight());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,907,name = SqlValidatorUtil.F_SUGGESTER.apply(name, j, j++);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,560,return simplifier.simplifyAnds(operands);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1443,new SqlBaseContextVariable("PI", ReturnTypes.DOUBLE,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1444,SqlFunctionCategory.NUMERIC);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,202,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,203,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,204,final Integer precision = (Integer) map.get("precision");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,205,final Integer scale = (Integer) map.get("scale");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,206,final RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,207,if (precision == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,208,type = typeFactory.createSqlType(sqlTypeName);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,210,type = typeFactory.createSqlType(sqlTypeName, precision);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,212,type = typeFactory.createSqlType(sqlTypeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,214,final boolean nullable = (Boolean) map.get("nullable");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,215,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,228,Object toJson(Object value) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,286,final Map<String, Object> map =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,287,(Map<String, Object>) toJson(node.getType());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,307,final Object value2 = literal.getValue2();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,308,if (value2 == null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,312,map = jsonBuilder.map();
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,313,map.put("literal", null);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,314,map.put("type", literal.getTypeName().name());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,315,return map;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,317,return value2;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,345,map.put("class", call.getOperator().getClass().getName());
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,365,final Object jsonType = map.get("type");
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,366,final SqlOperator operator = toOp(op, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,368,RelDataType type;
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,369,if (jsonType != null) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,370,type = toType(typeFactory, jsonType);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,372,type = rexBuilder.deriveReturnType(operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,374,return rexBuilder.makeCall(type, operator, rexOperands);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,404,final SqlTypeName sqlTypeName =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,405,Util.enumVal(SqlTypeName.class, (String) map.get("type"));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,407,return rexBuilder.makeNullLiteral(
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,408,typeFactory.createSqlType(sqlTypeName));
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,410,return toRex(relInput, literal);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,439,private SqlOperator toOp(String op, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,456,SqlAggFunction toAggregation(String agg, Map<String, Object> map) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,457,return (SqlAggFunction) toOp(agg, map);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,78,Map<String, Object> o = mapper.readValue(s, TYPE_REF);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,169,inputs.add(toAggCall(jsonAggCall));
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,272,private AggregateCall toAggCall(Map<String, Object> jsonAggCall) {
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,275,relJson.toAggregation(aggName, jsonAggCall);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,40,private final JsonBuilder jsonBuilder;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,41,private final RelJson relJson;
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonWriter.java,43,private final List<Object> relList;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,60,static final SqlPostfixOperator FOLLOWING_OPERATOR =
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,67,static final SqlPostfixOperator PRECEDING_OPERATOR =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,73,import org.apache.calcite.util.Util;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,725,if (nodeList.size() == 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,726,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,728,final List<SqlNode> butLast = Util.skipLast(nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,729,final SqlNode last = nodeList.get(nodeList.size() - 1);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,730,final SqlNode call = createLeftCall(op, butLast);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,731,return op.createCall(new SqlNodeList(ImmutableList.of(call, last), POS));
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,241,return typeFactory.createStructType(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,242,Lists.transform(type.getFieldList(),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,248,type.getFieldNames());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,250,if (type instanceof JavaType) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,251,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,252,typeFactory.createSqlType(type.getSqlTypeName()),
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,253,type.isNullable());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,255,return type;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,147,return canonize(kind, fieldNameList, typeList);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,298,type.getFieldNames());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,303,if (type instanceof RelRecordType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,304,return copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,306,return createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,307,type,
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,308,type.isNullable());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,324,if (nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,327,newType = copyRecordType((RelRecordType) type, false, true);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,331,newType = copyRecordType((RelRecordType) type, true, false);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,359,final List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,360,final RelDataType type = CACHE.getIfPresent(new Key(kind, names, types));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,366,return CACHE.getUnchecked(new Key(kind, names2, types2));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,664,Key(StructKind kind, List<String> names, List<RelDataType> types) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,671,return Objects.hash(kind, names, types);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,679,&& types.equals(((Key) obj).types);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,40,public RelRecordType(StructKind kind, List<RelDataTypeField> fields) {
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,47,this(StructKind.FULLY_QUALIFIED, fields);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,57,return false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,437,+ "] could not be implemented; planner state:\n");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,223,private String originalRootString;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,241,private final Deque<VolcanoRuleCall> ruleCallStack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,312,this.originalRootString =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,313,RelOptUtil.toString(root, SqlExplainLevel.ALL_ATTRIBUTES);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1175,pw.println(originalRootString);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1176,pw.println("Sets:");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1230,pw.println();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1766,ruleCallStack.push(ruleCall);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1768,ruleCallStack.pop();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,212,getRule().onMatch(this);
core/src/main/java/org/apache/calcite/tools/Programs.java,278,return hep(
core/src/main/java/org/apache/calcite/tools/Programs.java,279,ImmutableList.of((RelOptRule) SubQueryRemoveRule.FILTER,
core/src/main/java/org/apache/calcite/tools/Programs.java,280,SubQueryRemoveRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,281,SubQueryRemoveRule.JOIN), true, metadataProvider);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,61,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,158,private final Map<Pair<String, RelDataType>, RelNode> mapDigestToRel =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1234,private static Pair<String, RelDataType> key(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1235,return Pair.of(rel.getDigest(), rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1250,final Pair<String, RelDataType> oldKey =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1251,Pair.of(oldDigest, rel.getRowType());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1252,final RelNode removed = mapDigestToRel.remove(oldKey);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1256,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1257,final RelNode equivRel = mapDigestToRel.put(key, rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1265,mapDigestToRel.put(key, equivRel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1308,final Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1309,RelNode equivRel = mapDigestToRel.get(key);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1513,Pair<String, RelDataType> key = key(rel);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1551,key = key(rel);
core/src/main/java/org/apache/calcite/rel/core/Values.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/core/Values.java,192,.itemIf("tuples", tuples, pw.nest());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,988,return makeLiteral(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,989,new NlsString(s, null, null),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,990,typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,991,SqlTypeName.CHAR,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,992,s.length()),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,993,SqlTypeName.CHAR);
core/src/main/java/org/apache/calcite/rex/RexCall.java,76,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,77,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,78,sb.append(", ");
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,212,this.digest = toJavaString(value, typeName);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,304,SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,306,return "null";
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,310,printAsJava(value, pw, typeName, false);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,351,printAsJava(value, pw, typeName, true);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,376,boolean java) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,464,return list.get(index).digest;
core/src/main/java/org/apache/calcite/rex/RexOver.java,96,for (int i = 0; i < operands.size(); i++) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,97,if (i > 0) {
core/src/main/java/org/apache/calcite/rex/RexOver.java,98,sb.append(", ");
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,203,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,204,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,205,Coercibility.COERCIBLE);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,207,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,208,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,209,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,213,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,214,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,215,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,222,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,223,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,224,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,227,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,228,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,229,Coercibility.IMPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,235,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,236,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,237,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,248,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,249,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,250,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,259,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,260,col1.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,261,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,264,return new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,265,col2.collationName,
core/src/main/java/org/apache/calcite/sql/SqlCollation.java,266,Coercibility.EXPLICIT);
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,83,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,84,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPostfixOperator.java,85,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,84,new SqlCollation(
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,85,collation.getCollationName(),
core/src/main/java/org/apache/calcite/sql/SqlPrefixOperator.java,86,collation.getCoercibility()));
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,203,if (wrappedCharset != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,208,if (collation != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,113,public static Enumerable<Object> of(DataSource dataSource, String sql) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,119,public static Enumerable<Object> of(DataSource dataSource, String sql,
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,126,public static <T> Enumerable<T> of(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,71,if (LOGGER.isDebugEnabled()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,72,LOGGER.debug("Inferred ranges on interval : " + condensedRanges);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,184,switch (call.getKind()) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,127,columns = getKeyspace().getMaterializedView(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,129,columns = getKeyspace().getTable(columnFamily).getColumns();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,174,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,176,table = getKeyspace().getTable(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,202,table = getKeyspace().getMaterializedView(columnFamily);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,204,table = getKeyspace().getTable(columnFamily);
core/src/main/java/org/apache/calcite/config/CalciteConnectionProperty.java,127,TIME_ZONE("timeZone", Type.STRING, null, false),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,410,+ "\nexpression is " + newRel.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,383,if (operands.size() != 2 && predicate.getKind() == SqlKind.EQUALS) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,384,decompose(excludeSet, predicate);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,385,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,129,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,130,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,131,final Join join = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,132,final RexBuilder rexBuilder = aggregate.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,133,final RelBuilder relBuilder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,140,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,142,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,143,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,149,if (join.getJoinType() != JoinRelType.INNER) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,150,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,153,if (!allowFunctions && !aggregate.getAggCallList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,154,return;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,63,filter.getCondition());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,359,assert tempDigest != null : "post: return != null";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,360,String prefix = "rel#" + id + ":";
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,364,this.desc = prefix + tempDigest;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,365,this.digest = this.desc.substring(prefix.length());
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,417,pw.write(value.left + "=" + value.right);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,655,final SqlNode lowerBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,656,createSqlWindowBound(rexWindow.getLowerBound());
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,657,final SqlNode upperBound =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,658,createSqlWindowBound(rexWindow.getUpperBound());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,275,return;
core/src/main/java/org/apache/calcite/runtime/CalciteException.java,61,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorException.java,59,LOGGER.error(toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,454,inferUnknownTypes(targetType, scope, expanded);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1677,RelDataType inferredType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1678,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1679,SqlNode node) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1754,if (operandTypeInference == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1757,Arrays.fill(operandTypes, unknownType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1765,inferUnknownTypes(operandTypes[i], scope, operands.get(i));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,55,import org.apache.calcite.rex.RexUtil.ExprSimplifier;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,473,RexNode expr2 = simplifier.apply(expList.get(i));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,90,final RexNode e3 = rexBuilder.makeCast(e.getType(), e2, true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,462,case INPUT_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,467,if (nullAs == RexImpTable.NullAs.NOT_POSSIBLE
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,468,&& input.type.equals(storageType)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,471,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,518,case FIELD_ACCESS:
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,891,long l = bd.unscaledValue().longValue();
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,894,assert BigDecimal.valueOf(l, scale).equals(bd);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,896,if ((l >= Integer.MIN_VALUE) && (l <= Integer.MAX_VALUE)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2126,final BuiltInMethod method =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2127,operand0.getType().getSqlTypeName() == SqlTypeName.TIMESTAMP
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2128,? BuiltInMethod.ADD_MONTHS
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2129,: BuiltInMethod.ADD_MONTHS_INT;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2130,return Expressions.call(method.method, trop0, trop1);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,68,return def.canonizeComposite(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,106,RelCompositeTrait<T> canonize(RelTraitDef<T> traitDef) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,107,T[] newTraits = null;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,108,for (int i = 0; i < traits.length; i++) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,109,final T trait = traits[i];
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,110,final T trait2 = traitDef.canonize(trait);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,111,if (trait2 != trait) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,112,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,113,newTraits = traits.clone();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,115,newTraits[i] = trait2;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,118,if (newTraits == null) {
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,119,return this;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,121,assert false;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,22,import com.google.common.cache.CacheBuilder;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,23,import com.google.common.cache.CacheLoader;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,24,import com.google.common.cache.LoadingCache;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,26,import java.util.List;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,27,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,59,private final LoadingCache<T, T> canonicalMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,76,private final LoadingCache<Object, RelCompositeTrait> canonicalCompositeMap =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,79,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,80,new CacheLoader<Object, RelCompositeTrait>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,82,if (key instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,83,return (RelCompositeTrait) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,86,final List<RelMultipleTrait> list =
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,87,(List<RelMultipleTrait>) key;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,88,final RelTraitDef def = list.get(0).getTraitDef();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,89,return (RelCompositeTrait) RelCompositeTrait.of(def, list);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,134,if (trait instanceof RelCompositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,135,RelCompositeTrait relCompositeTrait = (RelCompositeTrait) trait;
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,136,return (T) canonizeComposite(relCompositeTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,140,+ " cannot canonize a "
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,141,+ trait.getClass().getName();
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,143,return canonicalMap.getUnchecked(trait);
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,146,final RelCompositeTrait canonizeComposite(RelCompositeTrait compositeTrait) {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,147,return canonicalCompositeMap.getUnchecked(compositeTrait);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,171,if (RexUtil.eq(first, second)) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1332,final Map<String, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1334,map.put(e.toString(), map.size());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1338,final Integer integer = map.get(ref.getName());
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1346,final Integer integer = map.get(call.toString());
core/src/main/java/org/apache/calcite/rel/core/Match.java,267,if (rex.toString().equals(aggCall.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,64,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,75,import java.util.Map.Entry;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,379,Map<String, RexNode> finalPreds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,380,List<RexNode> finalResidualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,381,for (int i = 0; i < union.getInputs().size(); i++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,382,RelNode input = union.getInputs().get(i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,383,RelOptPredicateList info = mq.getPulledUpPredicates(input);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,387,Map<String, RexNode> preds = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,388,List<RexNode> residualPreds = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,390,final String predDigest = pred.toString();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,391,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,392,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,395,if (finalPreds.containsKey(predDigest)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,396,preds.put(predDigest, pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,398,residualPreds.add(pred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,404,for (Entry<String, RexNode> e : finalPreds.entrySet()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,405,if (!preds.containsKey(e.getKey())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,407,for (int j = 0; j < i; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,408,finalResidualPreds.set(j,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,415,finalPreds = preds;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,418,List<RexNode> preds = new ArrayList<>(finalPreds.values());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,424,if (!disjPred.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,425,preds.add(disjPred);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,497,final Map<String, ImmutableBitSet> exprFields;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,499,final Set<String> equalityPredicates;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,526,if (lPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,531,leftChildPredicates = lPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,535,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,539,if (rPreds == null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,545,rightChildPredicates = rPreds.accept(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,549,exprFields.put(r.toString(), RelOptUtil.InputFinder.bits(r));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,569,new ArrayList<>(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,678,private void infer(RexNode predicates, Set<String> allExprsDigests,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,683,&& equalityPredicates.contains(r.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,712,private void equivalent(int p1, int p2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,742,JoinConditionBasedPredicateInference.this.equivalent(lPos, rPos);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,743,JoinConditionBasedPredicateInference.this.equalityPredicates
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,744,.add(call.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,52,import java.util.HashSet;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,436,final List<RexNode> unionList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,437,final Set<String> strings = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,439,for (RexNode rex : RelOptUtil.conjunctions(pred1)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,440,if (strings.add(rex.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,441,unionList.add(rex);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,444,for (RexNode rex2 : RelOptUtil.conjunctions(pred2)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,445,if (strings.add(rex2.toString())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,446,unionList.add(rex2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,466,final List<RexNode> list1 = RelOptUtil.conjunctions(pred1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,467,final List<RexNode> list2 = RelOptUtil.conjunctions(pred2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,468,final List<RexNode> minusList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,470,for (RexNode rex1 : list1) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,471,boolean add = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,472,for (RexNode rex2 : list2) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,473,if (rex2.toString().compareTo(rex1.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,474,add = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,475,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,478,if (add) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,479,minusList.add(rex1);
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,46,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableFilter.java,52,return Objects.hash(input, condition.toString());
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,69,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,78,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableJoin.java,79,condition.toString(), joinType, variablesSet);
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,64,&& condition.toString().equals(
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,73,return Objects.hash(left, right,
core/src/main/java/org/apache/calcite/rel/mutable/MutableSemiJoin.java,74,condition.toString(), leftKeys, rightKeys);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1586,&& sourceEC.getEquivalenceClassesMap().get(uniqueKeyColumnRef).contains(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1587,foreignKeyColumnRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1884,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1885,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1899,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1901,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1904,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1918,Map<String, Integer> exprsLineage = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1919,Map<String, Integer> exprsLineageLosslessCasts = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1928,assert s.size() == 1;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1931,final RexNode e = RexUtil.swapColumnTableReferences(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1932,rexBuilder, s.iterator().next(), ec.getEquivalenceClassesMap(), tableMapping);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1933,exprsLineage.put(e.toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1935,exprsLineageLosslessCasts.put(((RexCall) e).getOperands().get(0).toString(), i);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1938,return NodeLineage.of(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2027,Integer pos = nodeLineage.exprsLineage.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2032,pos = nodeLineage.exprsLineageLosslessCasts.get(e.toString());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2162,private final Map<String, Integer> exprsLineage;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2163,private final Map<String, Integer> exprsLineageLosslessCasts;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2165,private NodeLineage(Map<String, Integer> exprsLineage,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2166,Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2167,this.exprsLineage = Collections.unmodifiableMap(exprsLineage);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2168,this.exprsLineageLosslessCasts = Collections.unmodifiableMap(exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2171,protected static NodeLineage of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2172,Map<String, Integer> exprsLineage, Map<String, Integer> exprsLineageLosslessCasts) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2173,return new NodeLineage(exprsLineage, exprsLineageLosslessCasts);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,158,if (RexUtil.eq(condition, filter.getCondition())) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,200,private final Map<String, RangeSet<Calendar>> operandRanges;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,254,final Map<String, RangeSet<Calendar>> save =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,287,RangeSet<Calendar> rangeSet = operandRanges.get(operand.toString());
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,320,operandRanges.put(operand.toString(), ImmutableRangeSet.copyOf(s2));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,64,if (join.getCondition().toString().equals(newCondition.toString())) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,670,addExpr(preserveLeft, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,674,addExpr(preserveRight, call);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,698,private void addExpr(List<RexNode> exprList, RexNode newExpr) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,699,String newExprString = newExpr.toString();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,700,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,701,if (newExprString.compareTo(expr.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,702,return;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,705,exprList.add(newExpr);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,774,int match = findExprInList(rex, rexList1);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,780,match = findExprInList(rex, rexList2);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,789,private int findExprInList(RexNode rex, List<RexNode> rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,790,int match = 0;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,791,for (RexNode rexElement : rexList) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,792,if (rexElement.toString().compareTo(rex.toString()) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,793,return match;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,795,match++;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,797,return -1;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,122,private final Map<Pair<String, String>, RexNode> irreducible;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,123,private final Map<Pair<String, String>, RexNode> results;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,173,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,185,Pair<String, String> key = RexUtil.makeKey(node);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,474,if (!expr2.toString().equals(expList.get(i).toString())) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,363,return RexUtil.eq(subQuery, this.subQuery) ? replacement : subQuery;
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,118,if (RexUtil.eq(node, seek)) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,68,protected String computeDigest(boolean withType) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,69,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexCall.java,80,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexCall.java,81,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexCall.java,95,public String toString() {
core/src/main/java/org/apache/calcite/rex/RexOver.java,100,RexNode operand = operands.get(i);
core/src/main/java/org/apache/calcite/rex/RexOver.java,101,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,46,private final Map<Pair<String, String>, RexLocalRef> exprMap =
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,329,final Pair<String, String> key;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,568,final Multimap<String, Pair<String, RexNode>> equalityTerms = ArrayListMultimap.create();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,570,final Map<String, String> equalityConstantTerms = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,571,final Set<String> negatedTerms = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,572,final Set<String> nullOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,574,final Set<String> comparedOperands = new HashSet<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,602,RexNode left = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,603,comparedOperands.add(left.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,607,comparedOperands.add(leftCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,609,RexNode right = call.getOperands().get(1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,610,comparedOperands.add(right.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,614,comparedOperands.add(rightCast.getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,637,equalityTerms.put(left.toString(), Pair.of(right.toString(), term));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,647,negatedTerms.add(negatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,650,negatedTerms.add(invertNegatedTerm.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,677,comparedOperands.add(((RexCall) term).operands.get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,680,comparedOperands.add(((RexCall) term).operands.get(1).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,688,nullOperands.add(((RexCall) term).getOperands().get(0).toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,700,for (String ref1 : equalityTerms.keySet()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,701,final String literal1 = equalityConstantTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,705,Collection<Pair<String, RexNode>> references = equalityTerms.get(ref1);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,706,for (Pair<String, RexNode> ref2 : references) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,707,final String literal2 = equalityConstantTerms.get(ref2.left);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,725,if (!comparedOperands.contains(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,742,final List<String> terms2Set = RexUtil.strings(RelOptUtil.conjunctions(notDisjunction));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,754,for (String negatedTerm : negatedTerms) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,860,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,873,rangeTerms.put(ref.toString(),
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,93,StringBuilder sb = new StringBuilder(op.getName());
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,96,sb.append(operand.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,985,public static Pair<String, String> makeKey(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,986,return Pair.of(expr.toString(), expr.getType().getFullTypeString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1062,addAnd(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1069,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1077,if (!node.isAlwaysTrue() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1125,addOr(builder, digests, node);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1131,Set<String> digests, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1135,addOr(builder, digests, operand);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1139,if (!node.isAlwaysFalse() && digests.add(node.toString())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1648,if (eq(next, e)) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2045,final Map<String, RexNode> mapDigestToExpr = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2054,final String key = expr.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2055,final RexNode previous = mapDigestToExpr.put(key, expr);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2063,return mapDigestToExpr.get(expr.toString());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2299,final Map<String, RexNode> factors = commonFactors(operands);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2328,private Map<String, RexNode> commonFactors(List<RexNode> nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2334,map.put(conjunction.toString(), conjunction);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2337,map.keySet().retainAll(strings(RelOptUtil.conjunctions(node)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2343,private RexNode removeFactor(Map<String, RexNode> factors, RexNode node) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2346,if (!factors.containsKey(operand.toString())) {
core/src/main/java/org/apache/calcite/rex/RexVariable.java,35,assert type != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,36,assert name != null;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,37,this.name = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,38,this.digest = name;
core/src/main/java/org/apache/calcite/rex/RexVariable.java,39,this.type = type;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,703,int x = findExpr(projectExprs.get(i), projectExprs, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,704,if (x >= 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,768,private int findExpr(RexNode seek, List<RexNode> exprs, int count) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,769,for (int i = 0; i < count; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,770,RexNode expr = exprs.get(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,771,if (expr.toString().equals(seek.toString())) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,772,return i;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,775,return -1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4894,if (expr.toString().equals(convertedInputExpr.toString())) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1941,SqlOperator nullOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1942,SqlOperator eqOp;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1944,nullOp = SqlStdOperatorTable.IS_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1945,eqOp = SqlStdOperatorTable.EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1947,nullOp = SqlStdOperatorTable.IS_NOT_NULL;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1948,eqOp = SqlStdOperatorTable.NOT_EQUALS;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1950,RexNode[] whenThenElse = {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1952,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1955,rexBuilder.makeCall(nullOp, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1958,rexBuilder.makeCall(SqlStdOperatorTable.IS_NULL, y),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1961,rexBuilder.makeCall(nullOp, x),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1966,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1967,SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1968,whenThenElse);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2713,(List) rel.getInputs());
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,706,if (node != call) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,91,String sql = generateSql(jdbcConvention.dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,153,final Expression enumerable =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,154,builder0.append(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,156,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,157,BuiltInMethod.RESULT_SET_ENUMERABLE_OF.method,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,158,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,159,Schemas.unwrap(jdbcConvention.expression,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,160,JdbcSchema.class),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,161,BuiltInMethod.JDBC_SCHEMA_DATA_SOURCE.method),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,162,sql_,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,163,rowBuilderFactory_));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,294,private String generateSql(SqlDialect dialect) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,300,return result.asStatement().toSqlString(dialect).getSql();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,955,return null;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,106,Function1<ResultSet, Function0<T>> rowBuilderFactory) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,139,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,140,statement.setQueryTimeout(10);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,142,LOGGER.debug("Failed to set query timeout.");
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,154,throw new RuntimeException("while executing SQL [" + sql + "]", e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,156,if (statement != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,157,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,158,statement.close();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,163,if (connection != null) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,164,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,165,connection.close();
core/src/main/java/org/apache/calcite/sql/SqlDynamicParam.java,64,writer.print("?");
core/src/main/java/org/apache/calcite/sql/SqlNode.java,142,final String sql = writer.toString();
core/src/main/java/org/apache/calcite/sql/SqlNode.java,143,return new SqlString(dialect, sql);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,23,import org.apache.calcite.sql.util.SqlBuilder;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,812,return new SqlBuilder(dialect, toString()).toSqlString();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,31,private final String s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,39,public SqlString(SqlDialect dialect, String s) {
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,41,this.s = s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,42,assert s != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,43,assert dialect != null;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,47,return s.hashCode();
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,53,&& s.equals(((SqlString) obj).s);
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,65,return s;
core/src/main/java/org/apache/calcite/sql/util/SqlString.java,74,return s;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,111,for (RelTableRef leftRef : mq.getTableReferences(leftInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,119,for (RelTableRef rightRef : mq.getTableReferences(rightInput)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,148,for (RelTableRef tableRef : mq.getTableReferences(input)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,109,return new RexCall(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,110,call.getType(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,111,call.getOperator(),
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,112,clonedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,258,if (accPhysType.getJavaRowType() instanceof JavaTypeFactoryImpl.SyntheticRecordType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,261,JavaTypeFactoryImpl.SyntheticRecordType synType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,263,final ParameterExpression record0_ =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,265,initBlock.add(Expressions.declare(0, record0_, null));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,266,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,271,List<Types.RecordField> fieldList = synType.getRecordFields();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,272,for (int i = 0; i < initExpressions.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,273,Expression right = initExpressions.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,274,initBlock.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,282,initBlock.add(record0_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,284,initBlock.add(accPhysType.record(initExpressions));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,288,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,302,final BlockBuilder builder2 = new BlockBuilder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,350,builder2.add(acc_);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,351,final Expression accumulatorAdder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,352,builder.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,354,Expressions.lambda(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,355,Function2.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,356,builder2.toBlock(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,357,acc_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,358,inParameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,408,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,409,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,428,Expressions.call(accumulatorInitializer, "apply"),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,429,accumulatorAdder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,430,resultSelector))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,459,accumulatorInitializer,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,460,accumulatorAdder,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,787,AggregateCall.create(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,68,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1206,apply(mapping, aggregate.aggCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1211,private static List<AggregateCall> apply(final Mapping mapping,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1212,List<AggregateCall> aggCallList) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1213,return Lists.transform(aggCallList,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1268,aggregateCall.type, aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,82,private AggregateCall(
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,83,SqlAggFunction aggFunction,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,84,boolean distinct,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,85,List<Integer> argList,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,86,int filterArg,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,87,RelDataType type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,88,String name) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,224,&& filterArg == other.filterArg;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,228,return Objects.hash(aggFunction, distinct, argList, filterArg);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,252,public AggregateCall copy(List<Integer> args, int filterArg) {
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,259,return copy(args, filterArg);
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,283,filterOperand == null ? -1 : filterOperand, type, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1170,orderByList.add(context.toSql(field));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,750,newFilterArg, aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,77,for (int key : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,78,final RexNode rex = project.getProjects().get(key);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,79,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,80,final int newKey = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,81,newKeys.add(newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,82,map.put(key, newKey);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,100,final ImmutableList.Builder<Integer> newArgs = ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,101,for (int arg : aggregateCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,102,final RexNode rex = project.getProjects().get(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,103,if (rex instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,104,newArgs.add(((RexInputRef) rex).getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,107,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,110,final int newFilterArg;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,111,if (aggregateCall.filterArg >= 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,112,final RexNode rex = project.getProjects().get(aggregateCall.filterArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,113,if (!(rex instanceof RexInputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,114,return null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,116,newFilterArg = ((RexInputRef) rex).getIndex();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,118,newFilterArg = -1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,120,aggCalls.add(aggregateCall.copy(newArgs.build(), newFilterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,173,ImmutableList.of(groupCount + ord.i), -1, groupCount, input,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,174,aggType, origCall.getName());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,303,aggCall = aggCall.copy(nullableArgs, aggCall.filterArg);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,51,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,65,operandTypeChecker, funcType, false, false);
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,81,boolean requiresOver) {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,108,validator.validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,72,SqlCall aggCall = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,78,validator.validateAggregateParams(aggCall, condition, scope);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,95,SqlNode agg = call.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,97,if (!(agg instanceof SqlCall)) {
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,98,throw new IllegalStateException("Argument to SqlOverOperator"
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,99,+ " should be SqlCall, got " + agg.getClass() + ": " + agg);
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,102,final SqlCall aggCall = (SqlCall) agg;
core/src/main/java/org/apache/calcite/sql/SqlFilterOperator.java,117,((SqlValidatorImpl) validator).setValidatedNodeType(agg, ret);
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,31,true);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,119,ImmutableIntList.of(), -1,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,148,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,149,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,209,return aggregateCall.copy(ImmutableIntList.of(arg), -1);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,262,ImmutableList.of(ordinal), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,263,aggregateCall.name);
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,49,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFirstLastValueAggFunction.java,51,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlHistogramAggFunction.java,56,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,85,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,78,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,40,true);
core/src/main/java/org/apache/calcite/sql/fun/SqlSingleValueAggFunction.java,54,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1865,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1877,SqlFunctionCategory.SYSTEM, false, false) {
core/src/main/java/org/apache/calcite/sql/fun/SqlSumAggFunction.java,57,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,51,false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,54,SqlFunctionCategory.USER_DEFINED_FUNCTION, requiresOrder, requiresOver);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,302,SqlValidatorScope scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4487,validateAggregateParams(call, null, scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4703,SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,791,for (int i : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,792,inputFieldsUsed.set(i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4532,&& (op.isAggregator() || op.getKind() == SqlKind.FILTER)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4779,translateAgg((SqlCall) call.operand(0), call.operand(1), call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4802,translateAgg(call, null, call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4817,private void translateAgg(SqlCall call, SqlNode filter, SqlCall outerCall) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1069,filterArg, groupSet.cardinality(), r, null, aggCall1.alias);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1046,relBuilder.aggregateCall(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1050,aggCall.name,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,360,aggregate.copy(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,361,aggregate.getTraitSet(), relBuilder.build(),
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,868,relBuilder.aggregateCall(aggCall.getAggregation(),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,708,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,714,if (filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,715,if (filter.getType().getSqlTypeName() != SqlTypeName.BOOLEAN) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,716,throw RESOURCE.filterMustBeBoolean().ex();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,718,if (filter.getType().isNullable()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,719,filter = call(SqlStdOperatorTable.IS_TRUE, filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,723,ImmutableList.copyOf(operands));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,740,operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1725,private static class AggCallImpl implements AggCall {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1728,private final RexNode filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1729,private final String alias;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1730,private final ImmutableList<RexNode> operands;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1733,String alias, ImmutableList<RexNode> operands) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1734,this.aggFunction = aggFunction;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1736,this.filter = filter;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1738,this.operands = operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,29,import org.apache.calcite.rel.core.JoinRelType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,101,Expression selector =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,102,EnumUtils.joinSelector(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,104,: JoinRelType.INNER, physType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelate.java,105,ImmutableList.of(leftResult.physType, rightResult.physType));
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,636,assert table != null;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,107,starRelOptTable.toRel(RelOptUtil.getContext(cluster));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,23,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2804,public static RelOptTable.ToRelContext getContext(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2805,final RelOptCluster cluster) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2806,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2807,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2808,return cluster;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2811,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2812,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2813,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,31,import org.apache.calcite.rel.RelRoot;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,52,class LixToRelTranslator implements RelOptTable.ToRelContext {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,63,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,64,return cluster;
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,67,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,68,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,69,return preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,62,public class PlannerImpl implements Planner {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,229,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,243,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,244,SqlParser parser = SqlParser.create(queryString, parserConfig);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,245,SqlNode sqlNode;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,246,try {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,247,sqlNode = parser.parseQuery();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,249,throw new RuntimeException("parse failed", e);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,252,final SqlConformance conformance = conformance();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,253,final CalciteCatalogReader catalogReader =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,254,createCatalogReader().withSchemaPath(schemaPath);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,255,final SqlValidator validator =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,256,new CalciteSqlValidator(operatorTable, catalogReader, typeFactory,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,257,conformance);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,258,validator.setIdentifierExpansion(true);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,261,final RexBuilder rexBuilder = createRexBuilder();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,262,final RelOptCluster cluster = RelOptCluster.create(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,265,final SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,266,new SqlToRelConverter(new ViewExpanderImpl(), validator,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,267,catalogReader, cluster, convertletTable, config);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,270,root = root.withRel(sqlToRelConverter.flattenTypes(root.rel, true));
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,273,return PlannerImpl.this.root;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,176,RelOptUtil.getContext(cluster);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,401,public RelRoot expandView(RelDataType rowType, String queryString,
core/src/main/java/org/apache/calcite/prepare/Prepare.java,402,List<String> schemaPath, List<String> viewPath) {
core/src/main/java/org/apache/calcite/prepare/Prepare.java,403,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,102,return ((TranslatableTable) table).toRel(translator, relOptTable);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,28,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,130,relBuilder.push(aggregateRelOptTable.toRel(RelOptUtil.getContext(cluster)));
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,284,RelOptUtil.getContext(factRel.getCluster()));
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,22,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,48,RelOptUtil.getContext(oldRel.getCluster()));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,121,private RelRoot expandView(RelOptTable.ToRelContext preparingStmt,
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,124,RelRoot root = preparingStmt.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,126,root = root.withRel(RelOptUtil.createCastRel(root.rel, rowType, true));
core/src/main/java/org/apache/calcite/schema/impl/ViewTable.java,127,return root;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,107,import java.util.ArrayDeque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,111,import java.util.Deque;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2667,final Deque<RelNode> stack = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3197,return new RelOptTable.ToRelContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3198,public RelOptCluster getCluster() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3199,return cluster;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3203,RelDataType rowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3204,String queryString,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3205,List<String> schemaPath,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3206,List<String> viewPath) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3207,return viewExpander.expandView(rowType, queryString, schemaPath, viewPath);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,671,final SqlCall aggFunctionCall =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,672,rexOver.getAggOperator().createCall(POS, nodeList);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,675,sqlWindow);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,785,SqlOperator op = aggCall.getAggregation();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,786,if (op instanceof SqlSumEmptyIsZeroAggFunction) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,787,op = SqlStdOperatorTable.SUM;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,789,final List<SqlNode> operands = Expressions.list();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,791,operands.add(field(arg));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,793,return op.createCall(
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,794,aggCall.isDistinct() ? SqlSelectKeyword.DISTINCT.symbol(POS) : null,
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,883,if (s.equals("(")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,884,throw new RuntimeException("Use 'startList'");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,886,if (s.equals(")")) {
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,887,throw new RuntimeException("Use 'endList'");
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,689,if (groupSets == null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,690,groupSets = ImmutableList.of(groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,695,Lists.transform(groupSets,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,701,return groupKey(nodes, indicator, nodeLists);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,89,public final ImmutableList<Node> nodes;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,97,public final ImmutableList<String> uniqueColumnNames;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,114,private Lattice(CalciteSchema rootSchema, ImmutableList<Node> nodes,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,131,for (int i = 0; i < nodes.size(); i++) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,132,Node node = nodes.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,133,if (i == 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,134,assert node.parent == null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,136,assert nodes.subList(0, i).contains(node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,144,uniqueColumnNames =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,145,ImmutableList.copyOf(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,162,String current) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,306,for (Node node : usedNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,307,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,310,dialect.quoteIdentifier(buf, node.scan.getTable().getQualifiedName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,313,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,316,for (IntPair pair : node.link) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,320,final Column left = columns.get(node.parent.startCol + pair.source);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,321,dialect.quoteIdentifier(buf, left.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,324,dialect.quoteIdentifier(buf, right.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,344,private static void use(List<Node> usedNodes, Node node) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,345,if (!usedNodes.contains(node)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,346,if (node.parent != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,347,use(usedNodes, node.parent);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,349,usedNodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,355,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,356,tables.add(node.scan.getTable().unwrap(Table.class));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,362,return new Builder(calciteSchema, sql);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,415,public static class Node {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,416,public final TableScan scan;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,417,public final Node parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,418,public final ImmutableList<IntPair> link;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,419,public final int startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,420,public final int endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,421,public final String alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,423,public Node(TableScan scan, Node parent, List<IntPair> link,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,424,int startCol, int endCol, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,426,this.parent = parent;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,427,this.link = link == null ? null : ImmutableList.copyOf(link);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,428,assert (parent == null) == (link == null);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,429,assert startCol >= 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,430,assert endCol > startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,431,this.startCol = startCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,432,this.endCol = endCol;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,433,this.alias = alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,439,public static final DirectedGraph.EdgeFactory<RelNode, Edge> FACTORY =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,452,public RelNode getTarget() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,453,return (RelNode) target;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,456,public RelNode getSource() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,457,return (RelNode) source;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,466,public Measure(SqlAggFunction agg, Iterable<Column> args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,471,public int compareTo(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,472,int c = agg.getName().compareTo(measure.agg.getName());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,473,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,474,return c;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,476,return compare(args, measure.args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,480,return "Measure: [agg: " + agg + ", args: " + args + "]";
core/src/main/java/org/apache/calcite/materialize/Lattice.java,491,&& this.args.equals(((Measure) obj).args);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,525,public static class Column implements Comparable<Column> {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,527,public final String table;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,528,public final String column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,531,private Column(int ordinal, String table, String column, String alias) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,564,private final ImmutableList<Column> columns;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,566,private final ImmutableList.Builder<Measure> defaultMeasureListBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,567,ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,577,public Builder(CalciteSchema schema, String sql) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,594,final DirectedGraph<RelNode, Edge> graph =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,596,for (RelNode node : relNodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,597,graph.addVertex(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,600,final RelNode source = relNodes.get(tempLink[0][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,601,final RelNode target = relNodes.get(tempLink[1][0]);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,611,Node previous = null;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,613,int previousColumn = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,614,for (RelNode relNode : TopologicalOrderIterator.of(graph)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,615,final List<Edge> edges = graph.getInwardEdges(relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,616,Node node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,617,final int column = previousColumn
core/src/main/java/org/apache/calcite/materialize/Lattice.java,618,+ relNode.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,619,if (previous == null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,622,+ relNode);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,624,node = new Node((TableScan) relNode, null, null,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,625,previousColumn, column, aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,632,node = new Node((TableScan) relNode,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,633,map.get(edge.getSource()), edge.pairs, previousColumn, column,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,634,aliases.get(nodes.size()));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,636,nodes.add(node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,637,map.put(relNode, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,638,previous = node;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,639,previousColumn = column;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,642,final ImmutableList.Builder<Column> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,643,final ImmutableListMultimap.Builder<String, Column> aliasBuilder =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,644,ImmutableListMultimap.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,645,int c = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,646,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,647,if (node.scan != null) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,648,for (String name : node.scan.getRowType().getFieldNames()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,649,final Column column = new Column(c++, node.alias, name, name);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,650,builder.add(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,651,aliasBuilder.put(column.alias, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,655,columns = builder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,656,columnsByAlias = aliasBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,699,return new Lattice(rootSchema, ImmutableList.copyOf(nodes), auto,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,701,columns, defaultMeasureListBuilder.build(), tileListBuilder.build());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,708,public ImmutableList<Column> resolveArgs(Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,774,for (Column column1 : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,784,public Measure resolveMeasure(String aggName, Object args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,787,return new Measure(agg, list);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,801,public void addMeasure(Measure measure) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,802,defaultMeasureListBuilder.add(measure);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,416,latticeBuilder.resolveMeasure(jsonMeasure.agg, jsonMeasure.args);
core/src/main/java/org/apache/calcite/plan/RelOptLattice.java,43,return lattice.nodes.get(0).scan.getTable();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,69,private HepProgram mainProgram;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,77,private Map<String, HepRelVertex> mapDigestToVertex;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,79,private final Set<RelOptRule> allRules;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,87,private boolean noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,94,private DirectedGraph<HepRelVertex, DefaultEdge> graph;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,129,boolean noDAG,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,134,this.onCopyHook =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,136,mapDigestToVertex = new HashMap<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,137,graph = DefaultDirectedGraph.create();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,141,allRules = new LinkedHashSet<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,142,this.noDAG = noDAG;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,767,if (!noDAG) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,497,public abstract class Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,501,protected Context(int fieldCount) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,502,this(fieldCount, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,505,protected Context(int fieldCount, boolean ignoreCast) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,835,return new AliasContext(aliases, qualified);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,839,return new JoinContext(leftContext, rightContext);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,843,return new MatchRecognizeContext(((AliasContext) context).aliases);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,850,protected MatchRecognizeContext(Map<String, RelDataType> aliases) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,851,super(aliases, false);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,867,public class AliasContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,872,protected AliasContext(Map<String, RelDataType> aliases,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,873,boolean qualified) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,874,super(computeFieldCount(aliases));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,903,class JoinContext extends Context {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,908,private JoinContext(Context leftContext, Context rightContext) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,909,super(leftContext.fieldCount + rightContext.fieldCount);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,984,newContext = new Context(selectList.size()) {
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,92,return typeFactory.createStructType(typeList, lattice.uniqueColumnNames);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,174,private SqlRexConvertletTable convertletTable =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,175,StandardConvertletTable.INSTANCE;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,176,private SqlOperatorTable operatorTable = SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,177,private ImmutableList<Program> programs = ImmutableList.of();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,180,private SqlParser.Config parserConfig =
core/src/main/java/org/apache/calcite/tools/Frameworks.java,181,SqlParser.Config.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,185,private RelDataTypeSystem typeSystem = RelDataTypeSystem.DEFAULT;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,187,private ConfigBuilder() {}
core/src/main/java/org/apache/calcite/tools/Frameworks.java,295,RexExecutor executor) {
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,38,final Map<V, VertexInfo<V, E>> vertexMap =
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,57,StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,63,.append(")");
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,64,return buf.toString();
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,27,this.source = source;
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,28,this.target = target;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,825,if (constants.containsKey(inputRef)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,826,stack.add(Constancy.REDUCIBLE_CONSTANT);
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,36,String s = left.toString();
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,40,s += " DESC";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,43,s += " NULLS FIRST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,46,s += " NULLS LAST";
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,52,return s;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,522,if (!(target instanceof RexCorrelVariable)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,523,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,526,if (correlates == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,527,throw new RuntimeException("Cannot translate " + expr + " since "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,528,+ "correlate variables resolver is not defined");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,530,InputGetter getter =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,531,correlates.apply(((RexCorrelVariable) target).getName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,532,return getter.field(list, fieldAccess.getField().getIndex(), storageType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,787,RexCall cast = (RexCall) refExp;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,788,refExp = cast.getOperands().get(0);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,790,if (refExp.isA(SqlKind.NEW_SPECIFICATION)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,791,return ((RexCall) refExp).operands
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,792,.get(fieldAccess.getField().getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,794,if (!(refExp instanceof RexFieldAccess)) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,797,fieldAccess = (RexFieldAccess) refExp;
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,392,METADATA_REL(Metadata.class, "rel");
core/src/main/java/org/apache/calcite/rex/RexFieldCollation.java,32,super(left, ImmutableSet.copyOf(right));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,245,&& Primitive.is(expression0.getType())) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,257,&& Primitive.is(expression0.getType())) {
core/src/main/java/org/apache/calcite/rex/RexCall.java,121,case IS_NOT_FALSE:
core/src/main/java/org/apache/calcite/rex/RexCall.java,122,case NOT:
core/src/main/java/org/apache/calcite/rex/RexCall.java,123,return operands.get(0).isAlwaysFalse();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1401,assert !generateNullsOnLeft : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1402,assert !generateNullsOnRight : "not implemented";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3288,assert c < 0 : "not sorted";
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3304,assert c < 0 : "not sorted";
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,478,final RexNode disjunction = RexUtil.composeDisjunction(rexBuilder, terms);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,480,return rexBuilder.makeCast(call.getType(), disjunction);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,482,return disjunction;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,174,implementor.allCorrelateVariables);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,85,(JavaTypeFactory) getCluster().getTypeFactory(), bb, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableThetaJoin.java,183,implementor.allCorrelateVariables)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,276,inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,425,getBlockBuilderWinAggFrameResultContextFunction(typeFactory, result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,426,translatedConstants, comparator_, rows_, i_, startX, endX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,427,minX, maxX,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,525,final JavaTypeFactory typeFactory, final Result result,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,526,final List<Expression> translatedConstants,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1563,translatedOperands.get(2));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,109,private RexToLixTranslator(RexProgram program, JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,110,Expression root, InputGetter inputGetter, BlockBuilder list) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,111,this(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,113,new RexBuilder(typeFactory));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,116,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,117,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,118,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,119,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,120,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,121,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,122,Map<RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,123,RexBuilder builder) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,124,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,125,builder, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,128,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,129,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,130,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,131,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,132,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,133,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,134,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,135,RexBuilder builder,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,136,RexToLixTranslator parent) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,137,this(program, typeFactory, root, inputGetter, list, exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,138,builder, parent, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,141,private RexToLixTranslator(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,142,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,151,this.program = program;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,152,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,153,this.root = root;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,155,this.list = list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,156,this.exprNullableMap = exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,157,this.builder = builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,158,this.parent = parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,159,this.correlates = correlates;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,177,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,178,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,179,PhysType outputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,180,Expression root,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,181,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,182,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,198,BlockBuilder list, InputGetter inputGetter) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,200,return new RexToLixTranslator(null, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,743,public static Expression translateCondition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,744,RexProgram program,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,745,JavaTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,746,BlockBuilder list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,747,InputGetter inputGetter,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,748,Function1<String, InputGetter> correlates) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,754,new RexToLixTranslator(program, typeFactory, root, inputGetter, list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1050,nullable, builder, this, correlates);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,102,RexToLixTranslator.translateProjects(program, javaTypeFactory, builder,
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,103,null, root, inputGetter, correlates);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,80,RexToLixTranslator.translateProjects(programBuilder.getProgram(),
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,81,javaTypeFactory, blockBuilder, null, root_, getter, null);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,205,return trim_(s, false, true, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,210,return trim_(s, true, false, ' ');
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,214,public static String trim(boolean leading, boolean trailing, String seek,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,216,return trim_(s, leading, trailing, seek.charAt(0));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,220,private static String trim_(String s, boolean left, boolean right, char c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,227,if (s.charAt(j - 1) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,239,if (s.charAt(i) != c) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1436,s = trim_(s, true, true, ' ');
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,278,String.class),
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,349,null);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodCallExpression.java,53,this(method.getGenericReturnType(), method, targetExpression, expressions);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,799,RelDataType int8Type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,800,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,801,final RexNode[] casts = new RexNode[2];
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,802,casts[0] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,803,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,804,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,805,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,806,exprs.get(0).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,807,exprs.get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,808,casts[1] =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,809,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,810,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,811,int8Type,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,812,exprs.get(1).getType().isNullable()),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,813,exprs.get(1));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,122,public static String substring(String s, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,123,return s.substring(from - 1, Math.min(from - 1 + for_, s.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,127,public static String substring(String s, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,128,return s.substring(from - 1);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,132,public static ByteString substring(ByteString b, int from, int for_) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,133,return b.substring(from - 1, Math.min(from - 1 + for_, b.length()));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,137,public static ByteString substring(ByteString b, int from) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,138,return b.substring(from - 1);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,86,for (String opfield : implementor.list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,88,implementor.list.remove(opfield);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,47,public void add(String findOp) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRel.java,51,public void visitChild(int ordinal, RelNode input) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,144,+ "is not supported by ElasticsearchProject");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,31,import org.apache.calcite.util.Util;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,33,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,59,if (!collation.getFieldCollations().isEmpty()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,60,final List<String> keys = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,68,implementor.add("\"sort\": [ " + Util.toString(keys, "{", "}, {", "}") + "]");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,72,implementor.add("\"from\": " + ((RexLiteral) offset).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,76,implementor.add("\"size\": " + ((RexLiteral) fetch).getValue());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,80,private String direction(RelFieldCollation fieldCollation) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,81,switch (fieldCollation.getDirection()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,82,case DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,83,case STRICTLY_DESCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,84,return "\"desc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,85,case ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,86,case STRICTLY_ASCENDING:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,87,default:
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSort.java,88,return "\"asc\"";
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,34,import org.apache.calcite.prepare.CalcitePrepareImpl;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,39,import org.apache.calcite.runtime.Hook;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,68,final BlockBuilder list = new BlockBuilder();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,69,final ElasticsearchRel.Implementor elasticsearchImplementor =
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,70,new ElasticsearchRel.Implementor();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,71,elasticsearchImplementor.visitChild(0, getInput());
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,73,final PhysType physType = PhysTypeImpl.of(implementor.getTypeFactory(), rowType,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,75,final Expression fields = list.append("fields",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,88,final Expression table = list.append("table",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,89,elasticsearchImplementor.table
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,91,List<String> opList = elasticsearchImplementor.list;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,92,final Expression ops = list.append("ops", constantArrayList(opList, String.class));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,93,Expression enumerable = list.append("enumerable",
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,95,fields));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,96,if (CalcitePrepareImpl.DEBUG) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,97,System.out.println("Elasticsearch: " + opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,99,Hook.QUERY_PLAN.run(opList);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,100,list.add(Expressions.return_(null, enumerable));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,101,return implementor.result(physType, list.toBlock());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2097,c1 = c2;
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2098,p1 = p2;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,81,StringBuilder out, CharSequence ... args) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,124,+ new String(bytes, StandardCharsets.UTF_8));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,139,try (final JsonParser parser = factory.createParser(in)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,538,+ new String(bytes, StandardCharsets.UTF_8));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,216,String bigString = new String(chars);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,219,add(bigString.substring(0, i * 2));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,868,if ((sqlNode instanceof SqlCall) && containsInOperator(sqlNode)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,869,SqlCall sqlCall = (SqlCall) sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,871,|| (sqlCall.getOperator() == SqlStdOperatorTable.OR)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,872,SqlNode[] sqlOperands = ((SqlBasicCall) sqlCall).operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,873,for (int i = 0; i < sqlOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,874,sqlOperands[i] = pushDownNotForIn(scope, sqlOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,876,return reg(scope, sqlNode);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,878,SqlNode childNode = sqlCall.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,879,assert childNode instanceof SqlCall;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,880,SqlBasicCall childSqlCall = (SqlBasicCall) childNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,881,if (childSqlCall.getOperator() == SqlStdOperatorTable.AND) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,882,SqlNode[] andOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,883,SqlNode[] orOperands = new SqlNode[andOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,884,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,885,orOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,886,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,887,andOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,889,for (int i = 0; i < orOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,890,orOperands[i] = pushDownNotForIn(scope, orOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,892,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,893,SqlStdOperatorTable.OR.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,894,orOperands[0], orOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,896,SqlNode[] orOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,897,SqlNode[] andOperands = new SqlNode[orOperands.length];
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,898,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,899,andOperands[i] = reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,900,SqlStdOperatorTable.NOT.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,901,orOperands[i]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,903,for (int i = 0; i < andOperands.length; i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,904,andOperands[i] = pushDownNotForIn(scope, andOperands[i]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,906,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,907,SqlStdOperatorTable.AND.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,908,andOperands[0], andOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,910,SqlNode[] notOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,911,assert notOperands.length == 1;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,912,return pushDownNotForIn(scope, notOperands[0]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,914,SqlNode[] inOperands = childSqlCall.getOperands();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,915,SqlInOperator inOp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,916,(SqlInOperator) childSqlCall.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,918,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,919,SqlStdOperatorTable.IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,920,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,922,return reg(scope,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,923,SqlStdOperatorTable.NOT_IN.createCall(SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,924,inOperands[0], inOperands[1]));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,929,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,934,return sqlNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,938,return sqlNode;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,248,ImmutableList.of(((RexCall) a).getOperands().get(0))));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,418,return al;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,183,case RPAREN:
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,184,iter.previous();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,185,return;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,188,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,572,purgeSelectExprsKeepAliases();
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,38,UNION, INTERSECT, EXCEPT,
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,336,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,432,return new SqlAdvisor(validator);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,146,final List<SqlMoniker> result;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,147,if (word.length() > 0) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,148,result = new ArrayList<SqlMoniker>();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,149,if (quoted) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,151,word = word.substring(1);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,152,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,153,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,154,if (cname.startsWith(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,155,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,160,for (SqlMoniker hint : completionHints) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,161,String cname = hint.toString();
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,163,&& cname.substring(0, word.length()).equalsIgnoreCase(word)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,164,result.add(hint);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,169,result = completionHints;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,220,if (hintList.contains(star) && !isSelectListItem(sqlNode, pos)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,241,final SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,110,&& (sql.charAt(wordStart - 1) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,128,&& (sql.charAt(wordEnd) == '"')) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,334,SqlSimpleParser simpleParser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,401,SqlSimpleParser parser = new SqlSimpleParser(HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,430,SqlParser parser = SqlParser.create("");
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,444,SqlParser parser = SqlParser.create(sql);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,134,Tokenizer tokenizer = new Tokenizer(sql, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,278,case '"':
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,281,start = pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,282,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,283,while (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,284,c = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,285,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,286,if (c == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,287,if (pos < sql.length()) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,288,char c1 = sql.charAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,289,if (c1 == '"') {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,292,++pos;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,294,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,297,break;
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,301,match = sql.substring(start, pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,302,if (match.startsWith("\" " + hintToken + " ")) {
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,303,return new Token(TokenType.ID, hintToken);
core/src/main/java/org/apache/calcite/sql/advise/SqlSimpleParser.java,305,return new Token(TokenType.DQID, match);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,49,SqlMatchRecognize matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,211,public SqlMatchRecognize getMatchRecognize() {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,212,return matchRecognize;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,215,public void setMatchRecognize(SqlMatchRecognize matchRecognize) {
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,216,this.matchRecognize = matchRecognize;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5190,SqlNode expandedExpr = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5196,&& !DynamicRecordType.isDynamicStarColName(Util.last(id.names))) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5197,SqlNode[] inputs = new SqlNode[2];
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5198,inputs[0] = fqId;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5199,inputs[1] = SqlLiteral.createCharString(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5200,Util.last(id.names),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5201,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5202,SqlBasicCall item_call = new SqlBasicCall(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5206,expandedExpr = item_call;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5378,expr = getScope().fullyQualify((SqlIdentifier) expr).identifier;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,43,import java.util.Locale;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,404,assert map.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,405,return map.subMap(s.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,406,s.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,412,assert set.comparator() == NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,413,return set.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,414,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMap.java,26,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMap.java,60,if (map.containsKey(name)) {
core/src/main/java/org/apache/calcite/util/NameMap.java,61,return ImmutableSortedMap.of(name, map.get(name));
core/src/main/java/org/apache/calcite/util/NameMap.java,63,return ImmutableSortedMap.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,19,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,27,import java.util.TreeMap;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,29,import static org.apache.calcite.util.NameSet.COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,36,private final NavigableMap<String, List<V>> map;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,39,private NameMultimap(NavigableMap<String, List<V>> map) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,41,assert this.map.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,46,this(new TreeMap<String, List<V>>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,63,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,64,final List<V> list = map.get(name);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,65,if (list != null && !list.isEmpty()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,66,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,67,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,68,for (V v : list) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,69,builder.add(Pair.of(name, v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,71,return builder.build();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,73,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,93,return !range(name, caseSensitive).isEmpty();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,99,return map;
core/src/main/java/org/apache/calcite/util/NameSet.java,19,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/util/NameSet.java,20,import com.google.common.collect.ImmutableSortedSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,25,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameSet.java,26,import java.util.NavigableSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,28,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/util/NameSet.java,48,private final NavigableSet<String> names;
core/src/main/java/org/apache/calcite/util/NameSet.java,51,private NameSet(NavigableSet<String> names) {
core/src/main/java/org/apache/calcite/util/NameSet.java,53,assert names.comparator() == COMPARATOR;
core/src/main/java/org/apache/calcite/util/NameSet.java,58,this(new TreeSet<>(COMPARATOR));
core/src/main/java/org/apache/calcite/util/NameSet.java,63,return new NameSet(ImmutableSortedSet.copyOf(NameSet.COMPARATOR, names));
core/src/main/java/org/apache/calcite/util/NameSet.java,67,names.add(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,74,if (caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,75,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,76,return ImmutableList.of(name);
core/src/main/java/org/apache/calcite/util/NameSet.java,78,return ImmutableList.of();
core/src/main/java/org/apache/calcite/util/NameSet.java,89,if (names.contains(name)) {
core/src/main/java/org/apache/calcite/util/NameSet.java,90,return true;
core/src/main/java/org/apache/calcite/util/NameSet.java,92,if (!caseSensitive) {
core/src/main/java/org/apache/calcite/util/NameSet.java,97,return false;
core/src/main/java/org/apache/calcite/util/NameSet.java,102,return Collections.unmodifiableSet(names);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,293,RelNode newInput = getNewForOldRel(oldInput1);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,300,newOrdinal += calculateFlattenedOffset(oldInputType, oldOrdinal);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,301,return newOrdinal;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,518,programBuilder.addCondition(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,519,new RexLocalRef(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,520,getNewForOldInput(conditionRef.getIndex()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,521,conditionRef.getType()));
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,571,int newOffset = getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,582,RelDataTypeField field = fieldList.get(j);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,585,new RexInputRef(newOffset + j, field.getType()),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,743,final int newIndex = getNewForOldInput(oldIndex);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,749,RelDataType fieldType = removeDistinct(input.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,750,RexInputRef newInput = new RexInputRef(newIndex, fieldType);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,751,return newInput;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,765,RelDataType fieldType = removeDistinct(fieldAccess.getType());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,776,iInput += getNewForOldInput(inputRef.getIndex());
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,777,return new RexInputRef(iInput, fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,88,import java.util.Iterator;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,879,final List<String> names = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,880,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,881,final Iterator<String> nameIterator = fieldNames.iterator();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,882,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,883,if (simplify) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,884,node = simplifier.simplifyPreservingType(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,886,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,887,String name = nameIterator.hasNext() ? nameIterator.next() : null;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,888,names.add(name != null ? name : inferAlias(exprList, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,890,final Frame frame = stack.peek();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,897,for (int i = 0; i < names.size(); ++i) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,898,RexNode node = exprList.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,899,String name = names.get(i);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,909,names.set(i, name);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,926,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,927,if (!force && RexUtil.isIdentity(exprList, inputRowType)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,928,if (names.equals(inputRowType.getFieldNames())) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,939,projectFactory.createProject(frame.rel, ImmutableList.copyOf(exprList),
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,940,names);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,948,public RelBuilder project(RexNode... nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,949,return project(ImmutableList.copyOf(nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,957,private String inferAlias(List<RexNode> exprList, RexNode expr) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,963,return inferAlias(exprList, ((RexCall) expr).getOperands().get(0));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,966,for (;;) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,967,final int i = exprList.indexOf(expr);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,968,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,969,break;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,74,final ObjectMapper mapper = new ObjectMapper();
core/src/main/java/org/apache/calcite/model/ModelHandler.java,75,mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,76,mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,77,mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,80,root = mapper.readValue(
core/src/main/java/org/apache/calcite/model/ModelHandler.java,81,uri.substring("inline:".length()), JsonRoot.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,292,if (!a.getType().isNullable()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,293,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,298,RexNode simplified = simplifyIsNotNull(a);
core/src/main/java/org/apache/calcite/util/Sources.java,53,URL url_ = new URL(url);
core/src/main/java/org/apache/calcite/util/Sources.java,54,return new FileSource(url_);
core/src/main/java/org/apache/calcite/util/Sources.java,80,if (url.getProtocol().equals("file")) {
core/src/main/java/org/apache/calcite/util/Sources.java,81,this.file = new File(url.getFile());
core/src/main/java/org/apache/calcite/util/Sources.java,83,this.file = null;
core/src/main/java/org/apache/calcite/util/Sources.java,115,return file != null ? file.getPath() : url.toExternalForm();
core/src/main/java/org/apache/calcite/util/Sources.java,153,String path;
core/src/main/java/org/apache/calcite/util/Sources.java,155,path = child.file().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,160,path = child.url().getPath();
core/src/main/java/org/apache/calcite/util/Sources.java,161,if (path.startsWith("/")) {
core/src/main/java/org/apache/calcite/util/Sources.java,162,return child;
core/src/main/java/org/apache/calcite/util/Sources.java,166,return Sources.url(url + "/" + path);
file/src/main/java/org/apache/calcite/adapter/file/FileReader.java,68,doc = Jsoup.connect(source.path()).get();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,538,if (terms.containsAll(terms2)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,124,if (variables.contains(declaration.parameter.name)) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,125,Expression x = append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,126,newName(declaration.parameter.name, optimize),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,127,declaration.initializer);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,136,add(statement);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,240,return (decl.modifiers & Modifier.FINAL) != 0;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,343,final SubstituteVariableVisitor visitor = new SubstituteVariableVisitor(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,496,private final Map<ParameterExpression, Expression> map;
core/src/main/java/org/apache/calcite/util/NameMap.java,21,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMap.java,66,return map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMap.java,67,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,24,import java.util.Locale;
core/src/main/java/org/apache/calcite/util/NameMultimap.java,76,final ImmutableList.Builder<Map.Entry<String, V>> builder =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,77,ImmutableList.builder();
core/src/main/java/org/apache/calcite/util/NameMultimap.java,78,NavigableMap<String, List<V>> m =
core/src/main/java/org/apache/calcite/util/NameMultimap.java,79,map.subMap(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameMultimap.java,80,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameMultimap.java,81,for (Map.Entry<String, List<V>> entry : m.entrySet()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,82,for (V v : entry.getValue()) {
core/src/main/java/org/apache/calcite/util/NameMultimap.java,83,builder.add(Pair.of(entry.getKey(), v));
core/src/main/java/org/apache/calcite/util/NameMultimap.java,86,return builder.build();
core/src/main/java/org/apache/calcite/util/NameSet.java,81,return names.subSet(name.toUpperCase(Locale.ROOT), true,
core/src/main/java/org/apache/calcite/util/NameSet.java,82,name.toLowerCase(Locale.ROOT), true);
core/src/main/java/org/apache/calcite/util/NameSet.java,93,final String s = names.ceiling(name.toLowerCase(Locale.ROOT));
core/src/main/java/org/apache/calcite/util/NameSet.java,94,return s != null
core/src/main/java/org/apache/calcite/util/NameSet.java,95,&& s.equalsIgnoreCase(name);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,995,LAST_VALUE, COVAR_POP, COVAR_SAMP, REGR_SXX, REGR_SYY,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,54,SqlValidator.STRICT
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,55,? OperandTypes.ANY
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,56,: OperandTypes.ONE_OR_MORE,
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,52,Preconditions.checkArgument(kind == SqlKind.COVAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,53,|| kind == SqlKind.COVAR_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,54,|| kind == SqlKind.REGR_SXX
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,55,|| kind == SqlKind.REGR_SYY);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,425,exprList.add(cx.convertExpression(whenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,426,exprList.add(cx.convertExpression(thenList.get(i)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,428,exprList.add(cx.convertExpression(call.getElseOperand()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,430,RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,558,RelDataType type = dataType.deriveType(typeFactory);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1334,final SqlNode argSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1335,SqlStdOperatorTable.MULTIPLY.createCall(pos, arg, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1336,final SqlNode sumArgSquared =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1337,SqlStdOperatorTable.SUM.createCall(pos, argSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1338,final SqlNode sum =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1339,SqlStdOperatorTable.SUM.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1341,SqlStdOperatorTable.MULTIPLY.createCall(pos, sum, sum);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1342,final SqlNode count =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1343,SqlStdOperatorTable.COUNT.createCall(pos, arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1345,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1346,pos, sumSquared, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1348,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1349,pos, sumArgSquared, avgSumSquared);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1352,denominator = count;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1354,final SqlNumericLiteral one =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1355,SqlLiteral.createExactNumeric("1", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1356,denominator =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1357,SqlStdOperatorTable.MINUS.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1358,pos, count, one);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1361,SqlStdOperatorTable.DIVIDE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1362,pos, diff, denominator);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1365,final SqlNumericLiteral half =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1366,SqlLiteral.createExactNumeric("0.5", pos);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1367,result =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1368,SqlStdOperatorTable.POWER.createCall(pos, div, half);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1202,SqlNode sqlNode1 = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1208,sqlToRelConverter.convertQuery(sqlNode1, true, false);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,259,final SqlNode validatedSqlNode = validator.validate(sqlNode);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,269,root = sqlToRelConverter.convertQuery(validatedSqlNode, true, false);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,451,throw new AssertionError("invalid literal: " + node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,782,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,783,hintList.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,784,new SqlMonikerImpl(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,785,field.getName(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,786,SqlMonikerType.COLUMN));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,71,implementor.add(match);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,147,private String stripQuotes(String s) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,148,return s.startsWith("'") && s.endsWith("'") ? s.substring(1, s.length() - 1) : s;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchToEnumerableConverter.java,44,import com.google.common.collect.Lists;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,32,import java.io.IOException;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,34,import java.io.Writer;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,52,private static final File SRC_DIR = new File("/tmp");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,109,final File file = new File(SRC_DIR, className + ".java");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,110,try (Writer w = Util.printWriter(file)) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,111,String source = "public class " + className + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,114,+ " {\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,115,+ s + "\n"
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,116,+ "}\n";
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,118,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,119,System.out.println(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,120,System.out.println("======================");
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,122,w.write(source);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,123,w.close();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,124,JaninoCompiler compiler = new JaninoCompiler();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,125,compiler.getArgs().setDestdir(CLASS_DIR.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,126,compiler.getArgs().setSource(source, file.getAbsolutePath());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,127,compiler.getArgs().setFullClassName(className);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkHandlerImpl.java,128,compiler.compile();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,37,import net.hydromatic.tpcds.TpcdsColumn;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,38,import net.hydromatic.tpcds.TpcdsEntity;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,39,import net.hydromatic.tpcds.TpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,41,import java.sql.Date;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,51,private final int part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,52,private final int partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,86,this.part = part;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,87,this.partCount = partCount;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,90,for (TpcdsTable<?> tpcdsTable : TpcdsTable.getTables()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,92,builder.put(tpcdsTable.getTableName().toUpperCase(Locale.ROOT),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,103,private class TpcdsQueryableTable<E extends TpcdsEntity>
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,105,private final TpcdsTable<E> tpcdsTable;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,107,TpcdsQueryableTable(TpcdsTable<E> tpcdsTable) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,114,Integer rowCount = TABLE_ROW_COUNTS.get(tpcdsTable.name);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,115,assert rowCount != null : tpcdsTable.name;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,125,final Enumerator<E> iterator =
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,126,Linq4j.iterableEnumerator(
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,127,tpcdsTable.createGenerator(scaleFactor, part, partCount));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,128,return new Enumerator<Object[]>() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,129,public Object[] current() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,130,final List<TpcdsColumn<E>> columns = tpcdsTable.getColumns();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,131,final Object[] objects = new Object[columns.size()];
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,132,int i = 0;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,133,for (TpcdsColumn<E> column : columns) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,134,objects[i++] = value(column, iterator.current());
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,136,return objects;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,139,private Object value(TpcdsColumn<E> tpcdsColumn, E current) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,140,final Class<?> type = realType(tpcdsColumn);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,141,if (type == String.class) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,142,return tpcdsColumn.getString(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,144,return tpcdsColumn.getDouble(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,146,return Date.valueOf(tpcdsColumn.getString(current));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,148,return tpcdsColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,152,public boolean moveNext() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,153,return iterator.moveNext();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,156,public void reset() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,157,iterator.reset();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,160,public void close() {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,169,for (TpcdsColumn<E> column : tpcdsTable.getColumns()) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,170,builder.add(column.getColumnName().toUpperCase(Locale.ROOT),
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,171,typeFactory.createJavaType(realType(column)));
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,176,private Class<?> realType(TpcdsColumn<E> column) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,177,if (column.getColumnName().endsWith("date")) {
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,178,return Date.class;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,180,return column.getType();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,39,Map map = (Map) operand;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,41,int part = Util.first((Integer) map.get("part"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,42,int partCount = Util.first((Integer) map.get("partCount"), 1);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,43,boolean columnPrefix = Util.first((Boolean) map.get("columnPrefix"), true);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchemaFactory.java,44,return new TpcdsSchema(scale, part, partCount);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,76,? this
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampDiffFunction.java,23,import org.apache.calcite.sql.type.ReturnTypes;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampDiffFunction.java,57,ReturnTypes.INTEGER_NULLABLE, null,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1464,multiply(rexBuilder,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1465,rexBuilder.makeIntervalLiteral(unit.multiplier,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1466,new SqlIntervalQualifier(unit, null,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1508,cx.getTypeFactory().createSqlType(SqlTypeName.INTEGER),
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,231,getOperator().unparse(writer, this, 0, 0);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,234,getOperator().unparse(writer, this, leftPrec, rightPrec);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,40,import org.apache.calcite.runtime.PredicateImpl;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,45,import com.google.common.base.Predicate;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,46,import com.google.common.base.Predicates;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,98,this(clazz, Predicates.<RelNode>alwaysTrue(), description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,116,new PredicateImpl<LogicalFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,117,public boolean test(LogicalFilter input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,120,return RelOptUtil.disjunctions(input.getCondition()).size() == 1;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,271,private static final Predicate<Sort> SORT_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,272,new PredicateImpl<Sort>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,273,public boolean test(Sort input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,275,return input.offset == null && input.fetch == null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,278,private static final Predicate<CassandraFilter> FILTER_PREDICATE =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,279,new PredicateImpl<CassandraFilter>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,280,public boolean test(CassandraFilter input) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,282,return input.isSinglePartition();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,287,operand(CassandraFilter.class, null, FILTER_PREDICATE, any()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,292,super(operand(Sort.class, null, SORT_PREDICATE, CASSANDRA_OP), "CassandraSortRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,22,import org.apache.calcite.rel.RelNode;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,53,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,116,this.hook = Hook.TRIMMED.add(new Function<RelNode, Void>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,117,public Void apply(RelNode node) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,118,CassandraSchema.this.addMaterializedViews();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,119,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,180,List<String> pKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,186,List<String> cKeyFields = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,191,return Pair.of((List<String>) ImmutableList.copyOf(pKeyFields),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,192,(List<String>) ImmutableList.copyOf(cKeyFields));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,208,List<RelFieldCollation> keyCollations = new ArrayList<RelFieldCollation>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,240,List<String> columnNames = new ArrayList<String>();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,46,import java.util.Collections;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,100,return query(session, Collections.<Map.Entry<String, Class>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,101,Collections.<Map.Entry<String, String>>emptyList(),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,102,Collections.<String>emptyList(), Collections.<String>emptyList(), 0, -1);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,121,Function1<String, Void> addField = new Function1<String, Void>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,122,public Void apply(String fieldName) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,123,SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,124,fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,125,return null;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,146,selectString = Util.toString(new Iterable<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,147,public Iterator<String> iterator() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,148,final Iterator<Map.Entry<String, String>> selectIterator =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,149,selectFields.iterator();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,151,return new Iterator<String>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,153,return selectIterator.hasNext();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,157,Map.Entry<String, String> entry = selectIterator.next();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,158,return entry.getKey() + " AS " + entry.getValue();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,162,throw new UnsupportedOperationException();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,42,import com.google.common.base.Function;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,147,return Lists.transform(values,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,148,new Function<T, Expression>() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,149,public Expression apply(T a0) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,150,return Expressions.constant(a0);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,75,final List<ImmutableBitSet> keys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,283,return list.toArray(new Comparable[list.size()]);
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,819,: ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,88,ImmutableList.<RelCollation>of(), null, queryable);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,96,return createCloneTable(typeFactory, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,97,ImmutableList.<RelCollation>of(), repList, source);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,118,Suppliers.memoize(
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,119,new Supplier<ArrayTable.Content>() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,120,public ArrayTable.Content get() {
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,121,final ColumnLoader loader =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,122,new ColumnLoader<>(typeFactory, source, protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,123,repList);
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,124,final List<RelCollation> collation2 =
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,126,&& loader.sortField >= 0
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,128,: collations;
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,129,return new ArrayTable.Content(loader.representationValues,
core/src/main/java/org/apache/calcite/adapter/clone/CloneSchema.java,130,loader.size(), collation2);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,56,private static final Function<Timestamp, Long> TIMESTAMP_TO_LONG =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,57,new Function<Timestamp, Long>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,58,public Long apply(Timestamp a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,59,return a0 == null ? null : a0.getTime();
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,63,private static final Function<Time, Integer> TIME_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,64,new Function<Time, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,65,public Integer apply(Time a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,66,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,67,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,68,: (int) (a0.getTime() % DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,72,private static final Function<Date, Integer> DATE_TO_INT =
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,73,new Function<Date, Integer>() {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,74,public Integer apply(Date a0) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,75,return a0 == null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,76,? null
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,77,: (int) (a0.getTime() / DateTimeUtils.MILLIS_PER_DAY);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,267,return Lists.transform(list, TIMESTAMP_TO_LONG);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,274,return Lists.transform(list, TIME_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,281,return Lists.transform(list, DATE_TO_INT);
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,32,import org.apache.calcite.util.ImmutableBitSet;
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,67,return Statistics.of(list.size(), ImmutableList.<ImmutableBitSet>of());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,35,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,52,private static final Function<RexNode, Type> REX_TO_INTERNAL_TYPE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,53,new Function<RexNode, Type>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,54,public Type apply(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,55,return toInternal(node.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,236,return Lists.transform(operandList, REX_TO_INTERNAL_TYPE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,49,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,386,final List<Expression> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,71,return new Node() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,72,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,73,final Sink sink =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,74,implementor.relSinks.get(EnumerableBindable.this).get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,75,final Enumerable<Object[]> enumerable = bind(implementor.dataContext);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,76,final Enumerator<Object[]> enumerator = enumerable.enumerator();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,77,while (enumerator.moveNext()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,78,sink.send(Row.asCopy(enumerator.current()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,34,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,49,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,97,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,98,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,99,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,103,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,104,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,105,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,33,super(LogicalCalc.class, RelOptUtil.CALC_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,23,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,32,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,34,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,62,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,63,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,64,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,68,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,69,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilter.java,70,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,31,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,24,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,26,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,72,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,73,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,74,return RelMdCollation.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,78,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,79,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimit.java,80,return RelMdDistribution.limit(mq, input);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,99,leftKeys, rightKeys, ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,64,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,65,final List<RelCollation> collations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,71,final List<RelFieldCollation> fieldCollations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,21,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,31,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,76,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,77,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProject.java,78,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,31,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,23,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,24,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,25,import org.apache.calcite.rex.RexUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,26,import org.apache.calcite.sql.validate.SqlValidatorUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,28,import java.util.List;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,37,RelFactories.FilterFactory FILTER_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,38,new RelFactories.FilterFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,39,public RelNode createFilter(RelNode child, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,40,return EnumerableFilter.create(child, condition);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,44,RelFactories.ProjectFactory PROJECT_FACTORY =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,45,new RelFactories.ProjectFactory() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,46,public RelNode createProject(RelNode child,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,47,List<? extends RexNode> projects, List<String> fieldNames) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,48,final RelOptCluster cluster = child.getCluster();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,49,final RelDataType rowType =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,50,RexUtil.createStructType(cluster.getTypeFactory(), projects,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,51,fieldNames, SqlValidatorUtil.F_SUGGESTER);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRel.java,52,return EnumerableProject.create(child, projects, rowType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,48,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,77,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,79,Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,124,new Function<ParameterExpression, Statement>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,125,public Statement apply(ParameterExpression input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,126,return Expressions.declare(Modifier.FINAL, input,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,127,Expressions.convert_(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,128,Expressions.call(DataContext.ROOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,129,BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,130,Expressions.constant(input.name)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,131,input.type));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,155,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,162,Collections.<Type>singletonList(Bindable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,173,ImmutableList.<Type>of(Serializable.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,287,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,385,Collections.<ParameterExpression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,440,corrVars.put(name, new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,441,public Expression field(BlockBuilder list, int index, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,442,Expression fieldReference =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,443,physType.fieldReference(pe, index, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,444,return corrBlock.append(name + "_" + index, fieldReference);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,34,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,48,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,79,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,80,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,81,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,82,if (table != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,83,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScan.java,85,return ImmutableList.of();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,119,inputTypes.toArray(new FlatProductInputType[inputTypes.size()])));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,26,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,28,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,41,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,65,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,66,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,67,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,71,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,72,public RelDistribution get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,73,return RelMdDistribution.values(rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,55,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,431,final Function<AggImpState, List<RexNode>> rexArguments =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,432,new Function<AggImpState, List<RexNode>>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,433,public List<RexNode> apply(AggImpState agg) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,434,List<Integer> argList = agg.call.getArgList();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,435,List<RelDataType> inputTypes =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,436,EnumUtils.fieldRowTypes(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,437,result.physType.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,438,constants,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,439,argList);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,440,List<RexNode> args = new ArrayList<RexNode>(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,441,inputTypes.size());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,442,for (int i = 0; i < argList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,443,Integer idx = argList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,444,args.add(new RexInputRef(idx, inputTypes.get(i)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,446,return args;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,535,return new Function<BlockBuilder,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,536,WinAggFrameResultContext>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,537,public WinAggFrameResultContext apply(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,538,final BlockBuilder block) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,539,return new WinAggFrameResultContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,540,public RexToLixTranslator rowTranslator(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,541,Expression row =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,542,getRow(rowIndex);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,543,final RexToLixTranslator.InputGetter inputGetter =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,544,new WindowRelInputGetter(row, inputPhysType,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,545,result.physType.getRowType().getFieldCount(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,546,translatedConstants);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,548,return RexToLixTranslator.forAggregation(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,549,block, inputGetter);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,552,public Expression computeIndex(Expression offset,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,553,WinAggImplementor.SeekType seekType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,554,Expression index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,555,if (seekType == WinAggImplementor.SeekType.AGG_INDEX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,556,index = jDecl.parameter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,558,index = i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,560,index = startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,562,index = endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,564,throw new IllegalArgumentException("SeekSet " + seekType
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,565,+ " is not supported");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,567,if (!Expressions.constant(0).equals(offset)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,568,index = block.append("idx", Expressions.add(index, offset));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,570,return index;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,573,private Expression checkBounds(Expression rowIndex,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,574,Expression minIndex, Expression maxIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,575,if (rowIndex == i_ || rowIndex == startX || rowIndex == endX) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,577,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,581,Expression res = block.append("rowInFrame",
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,582,Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,583,ImmutableList.of(hasRows,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,584,Expressions.greaterThanOrEqual(rowIndex, minIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,585,Expressions.lessThanOrEqual(rowIndex, maxIndex))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,587,return res;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,590,public Expression rowInFrame(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,591,return checkBounds(rowIndex, startX, endX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,594,public Expression rowInPartition(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,595,return checkBounds(rowIndex, minX, maxX);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,598,public Expression compareRows(Expression a, Expression b) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,599,return Expressions.call(comparator_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,600,BuiltInMethod.COMPARATOR_COMPARE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,601,getRow(a), getRow(b));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,604,public Expression getRow(Expression rowIndex) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,605,return block.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,607,RexToLixTranslator.convert(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,608,Expressions.arrayIndex(rows_, rowIndex),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,609,inputPhysType.getJavaRowType()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,612,public Expression index() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,613,return i_;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,616,public Expression startIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,617,return startX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,620,public Expression endIndex() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,621,return endX;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,624,public Expression hasRows() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,625,return hasRows;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,628,public Expression getFrameRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,629,return frameRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,632,public Expression getPartitionRowCount() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,633,return partitionRowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,55,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/NestedBlockBuilderImpl.java,66,nestBlock(block, Collections.<RexNode, Boolean>emptyMap());
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,49,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,176,final List<Expression> expressions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,213,return Pair.of(parameter.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,214,Collections.<Expression>singletonList(parameter));
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,265,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,266,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,335,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,369,return Pair.<Expression, Expression>of(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,370,selector,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,371,Expressions.new_(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,372,Comparator.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,373,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,436,Expressions.<MemberDeclaration>list(
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,471,Collections.<Expression>emptyList(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,58,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,60,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,214,Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,310,map.put(PI, new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,312,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,313,return Expressions.constant(Math.PI);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,370,map.put(DEFAULT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,371,new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,372,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,373,RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,374,return Expressions.constant(null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,433,return new Supplier<T>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,434,public T get() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,435,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,436,return constructor.newInstance();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,438,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,439,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,478,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,479,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,480,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,481,return implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,482,translator, call, nullAs, nullPolicy, harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,483,implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,499,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,500,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,501,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,502,assert call.getOperator() == AND
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,503,: "AND null semantics is supported only for AND operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,504,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,505,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,506,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,507,case NOT_POSSIBLE: // Just foldAnd
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,508,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,511,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,514,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,515,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,516,return Expressions.foldAnd(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,517,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,518,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,519,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,520,final List<Expression> nullAsTrue =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,521,translator.translateList(call2.getOperands(), NullAs.TRUE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,522,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,523,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,524,Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,525,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,526,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,527,Expressions.condition(hasFalse, BOXED_FALSE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,528,Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,529,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,530,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,531,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,544,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,545,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,546,RexToLixTranslator translator, RexCall call, final NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,547,assert call.getOperator() == OR
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,548,: "OR null semantics is supported only for OR operator. Actual operator is "
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,549,+ String.valueOf(call.getOperator());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,550,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,551,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,552,case NOT_POSSIBLE: // Just foldOr
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,553,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,556,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,559,final List<Expression> expressions =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,560,translator.translateList(call2.getOperands(), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,561,return Expressions.foldOr(expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,562,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,563,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,564,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,565,final List<Expression> nullAsFalse =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,566,translator.translateList(call2.getOperands(), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,567,final List<Expression> nullAsIsNull =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,568,translator.translateList(call2.getOperands(), NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,569,Expression hasTrue = Expressions.foldOr(nullAsFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,570,Expression hasNull = Expressions.foldOr(nullAsIsNull);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,571,Expression result = nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,572,Expressions.condition(hasTrue, BOXED_TRUE_EXPR,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,573,Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,574,return result;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,575,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,576,throw new IllegalArgumentException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,611,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,612,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,613,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,614,final RexCall call2 = call2(false, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,615,return implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,616,translator, call2, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1239,return Collections.<Type>singletonList(afi.accumulatorType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1241,return Arrays.<Type>asList(afi.accumulatorType, afi.declaringClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,78,Util.<Method, SqlOperator>mapOf(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,112,Collections.<RexNode, Boolean>emptyMap(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1058,block, ImmutableMap.<RexNode, Boolean>of(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1067,Collections.<RexNode, Boolean>emptyMap(), builder, this, correlates);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggAddContextImpl.java,27,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,26,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,89,this.dataSource = Preconditions.checkNotNull(dataSource);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,90,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,57,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,58,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,93,this.jdbcTableType = Preconditions.checkNotNull(jdbcTableType);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,124,return Lists.transform(rowType.getFieldList(),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,125,new Function<RelDataTypeField, Pair<ColumnMetaData.Rep, Integer>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,129,final Class clazz = (Class) typeFactory.getJavaClass(type);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,130,final ColumnMetaData.Rep rep =
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,131,Util.first(ColumnMetaData.Rep.of(clazz),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,132,ColumnMetaData.Rep.OBJECT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,133,return Pair.of(rep, type.getSqlTypeName().getJdbcOrdinal());
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,121,return new Function1<ResultSet, Function0<Object[]>>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,122,public Function0<Object[]> apply(ResultSet resultSet) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,123,try {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,124,return new ObjectArrayRowBuilder(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,125,resultSet,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,126,Pair.left(list).toArray(new ColumnMetaData.Rep[list.size()]),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,127,Ints.toArray(Pair.right(list)));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,129,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,206,CacheBuilder.newBuilder().softValues().build(
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,207,new CacheLoader<List<String>, BasicDataSource>() {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,209,BasicDataSource dataSource = new BasicDataSource();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,210,dataSource.setUrl(key.get(0));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,211,dataSource.setUsername(key.get(1));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,212,dataSource.setPassword(key.get(2));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,213,dataSource.setDriverClassName(key.get(3));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,214,return dataSource;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,95,tables.toArray(new SqlOperatorTable[tables.size()])));
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,43,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,45,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,46,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,60,private final List<Grouping> groups = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,108,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,109,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,110,final Accumulator accumulator = factory.get();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,111,return new FilterAccumulator(accumulator, call.filterArg);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,116,return new AccumulatorFactory() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,117,public Accumulator get() {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,118,return new CountAccumulator(call);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,304,private final Map<Row, AccumulatorList> accumulators = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,73,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,168,this.filters = Preconditions.checkNotNull(filters);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,169,this.projects = Preconditions.checkNotNull(projects);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,176,return create(cluster, relOptTable, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,187,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,188,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,189,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,190,if (table != null) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,191,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,193,return ImmutableList.of();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,245,super(LogicalFilter.class, RelOptUtil.FILTER_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,276,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,277,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,278,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,308,super(LogicalProject.class, RelOptUtil.PROJECT_PREDICATE, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,23,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,40,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,43,public final Map<RelNode, List<Sink>> relSinks = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,45,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,73,this.dataContext = Preconditions.checkNotNull(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,341,this.enumerator = Preconditions.checkNotNull(enumerator);
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,20,import org.apache.calcite.adapter.enumerable.PhysType;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,43,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,53,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,88,Pair.<Expression, PhysType>of(
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,93,final Function1<String, RexToLixTranslator.InputGetter> correlates =
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,94,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,95,public RexToLixTranslator.InputGetter apply(String a0) {
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,96,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,120,final List<MemberDeclaration> declarations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/JaninoRexCompiler.java,148,ImmutableList.<Type>of(Scalar.class), declarations);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,59,rightList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,25,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,28,import java.util.Collections;
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,71,final List<Row> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,75,Collections.sort(list, comparator());
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,94,return comparator(input);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,104,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,105,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,106,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,107,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,108,return RelFieldCollation.compare(c1, c2, nullComparison);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,112,return new Comparator<Row>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,113,public int compare(Row o1, Row o2) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,114,final Comparable c1 = (Comparable) o1.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,115,final Comparable c2 = (Comparable) o2.getValues()[x];
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,116,return RelFieldCollation.compare(c2, c1, -nullComparison);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,23,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,147,rowEnumerable = queryable.select(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,148,new Function1<Object, Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,149,public Row apply(Object o) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,150,final Object[] values = new Object[fields.size()];
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,151,for (int i = 0; i < fields.size(); i++) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,152,Field field = fields.get(i);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,153,try {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,154,values[i] = field.get(o);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,156,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,159,return new Row(values);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,273,enumerable = enumerable.where(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,274,new Predicate1<Row>() {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,276,context.values = row.getValues();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,277,Boolean b = (Boolean) condition.execute(context);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,278,return b != null && b;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,22,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,46,final Set<Row> rows = rel.all ? null : Sets.<Row>newHashSet();
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,45,final List<RexNode> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,46,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,66,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,70,import java.sql.PreparedStatement;
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,124,Preconditions.checkNotNull(rootSchema != null
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,157,return iface.cast(
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,158,new RelRunner() {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,159,public PreparedStatement prepare(RelNode rel) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,160,try {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,161,return prepareStatement_(CalcitePrepare.Query.of(rel),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,162,ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY,
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,163,getHoldability());
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,165,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,273,Map<String, Object> map = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,329,final Map<Integer, CalciteServerStatement> statementMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,454,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,479,return connection.createDataContext(ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,518,this.connection = Preconditions.checkNotNull(connection);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,22,import org.apache.calcite.avatica.AvaticaParameter;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,40,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,44,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,63,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,101,return new Predicate1<T>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,102,public boolean apply(T v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,103,return regex.matcher(v1.getName()).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,113,return new Predicate1<String>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,114,public boolean apply(String v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,115,return regex.matcher(v1).matches();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,193,return createResultSet(Collections.<String, Object>emptyMap(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,202,return createResultSet(Collections.<String, Object>emptyMap(), columns,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,214,ImmutableList.<AvaticaParameter>of(), internalParameters, null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,215,columns, cursorFactory, null, ImmutableList.<RelCollation>of(), -1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,271,typeFilter = new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,272,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,273,return typeList.contains(v1.tableType);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,280,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,281,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,282,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,283,return tables(schema, matcher(tableNamePattern));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,334,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,335,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,336,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,337,return tables(schema, tableNameMatcher);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,340,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,341,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,342,public Enumerable<MetaColumn> apply(MetaTable schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,343,return columns(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,388,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,389,new Function1<CalciteSchema, MetaSchema>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,390,public MetaSchema apply(CalciteSchema calciteSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,391,return new CalciteMetaSchema(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,392,calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,394,calciteSchema.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,397,.orderBy(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,398,new Function1<MetaSchema, Comparable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,399,public Comparable apply(MetaSchema metaSchema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,400,return (Comparable) FlatLists.of(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,401,Util.first(metaSchema.tableCatalog, ""),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,402,metaSchema.tableSchem);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,409,.selectMany(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,410,new Function1<MetaSchema, Enumerable<MetaTable>>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,411,public Enumerable<MetaTable> apply(MetaSchema schema) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,412,return tables(schema, Functions.<String>truePredicate1());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,420,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,421,new Function1<String, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,422,public MetaTable apply(String name) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,423,final Table table =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,424,schema.calciteSchema.getTable(name, true).getTable();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,425,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,426,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,427,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,428,name);
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,435,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,436,new Function1<Map.Entry<String, Table>, MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,437,public MetaTable apply(Map.Entry<String, Table> pair) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,438,final Table table = pair.getValue();
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,439,return new CalciteMetaTable(table,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,440,schema.tableCatalog,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,441,schema.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,442,pair.getKey());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,451,.where(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,452,new Predicate1<MetaTable>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,453,public boolean apply(MetaTable v1) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,454,return matcher.apply(v1.getName());
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,496,.select(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,497,new Function1<RelDataTypeField, MetaColumn>() {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,498,public MetaColumn apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,499,final int precision =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,504,: -1;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,505,return new MetaColumn(
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,506,table.tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,507,table.tableSchem,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,508,table.tableName,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,509,field.getName(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,510,field.getType().getSqlTypeName().getJdbcOrdinal(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,511,field.getType().getFullTypeString(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,512,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,515,: null,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,516,10,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,518,? DatabaseMetaData.columnNullable
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,519,: DatabaseMetaData.columnNoNulls,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,520,precision,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,521,field.getIndex() + 1,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,522,field.getType().isNullable() ? "YES" : "NO");
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,730,_createIterable(h, signature, ImmutableList.<TypedValue>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,748,.createDataContext(ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,781,this.calciteTable = Preconditions.checkNotNull(calciteTable);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,64,Function0<CalcitePrepare> DEFAULT_FACTORY =
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,65,new Function0<CalcitePrepare>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,66,public CalcitePrepare apply() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,67,return new CalcitePrepareImpl();
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,71,new ThreadLocal<Deque<Context>>() {
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,73,return new ArrayDeque<>();
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,28,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,60,resultSink = new Handler.ResultSink() {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,61,public void toBeCompleted() {
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,81,this.tableMap = Preconditions.checkNotNull(tableMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,86,this.latticeMap = Preconditions.checkNotNull(latticeMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,91,this.subSchemaMap = Preconditions.checkNotNull(subSchemaMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,100,this.functionMap = Preconditions.checkNotNull(functionMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,101,this.functionNames = Preconditions.checkNotNull(functionNames);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,102,this.nullaryFunctionMap = Preconditions.checkNotNull(nullaryFunctionMap);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,155,return new TableEntryImpl(this, name, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,160,return add(tableName, table, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,477,this.schema = Preconditions.checkNotNull(schema);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,478,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,494,this.sqls = Preconditions.checkNotNull(sqls);
core/src/main/java/org/apache/calcite/jdbc/CalciteSchema.java,637,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaRecordType.java,39,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,39,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,40,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,243,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,244,public RelDataType apply(RelDataTypeField a0) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,245,return toSql(typeFactory, a0.getType());
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,365,this.syntheticType = Preconditions.checkNotNull(syntheticType);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,366,this.name = Preconditions.checkNotNull(name);
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,367,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,19,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,21,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,36,ImmutableMap.<String, Table>of(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,42,return meta.tables(catalog).selectMany(
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,43,new Function1<MetaTable, Enumerable<MetaColumn>>() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,44,public Enumerable<MetaColumn> apply(MetaTable table) {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,45,return meta.columns(table);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,40,.build(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,54,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,59,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,61,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,74,private static final Function<Column, String> GET_ALIAS =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,75,new Function<Column, String>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,76,public String apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,77,return input.alias;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,81,private static final Function<Column, Integer> GET_ORDINAL =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,82,new Function<Column, Integer>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,83,public Integer apply(Column input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,84,return input.ordinal;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,100,private final Function<Integer, Column> toColumnFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,101,new Function<Integer, Column>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,102,public Column apply(Integer input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,103,return columns.get(input);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,106,private final Function<AggregateCall, Measure> toMeasureFunction =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,107,new Function<AggregateCall, Measure>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,108,public Measure apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,109,return new Measure(input.getAggregation(),
core/src/main/java/org/apache/calcite/materialize/Lattice.java,110,Lists.transform(input.getArgList(), toColumnFunction));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,120,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,121,this.columns = Preconditions.checkNotNull(columns);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,126,this.defaultMeasures = Preconditions.checkNotNull(defaultMeasures);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,127,this.tiles = Preconditions.checkNotNull(tiles);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,140,List<String> nameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,146,SqlValidatorUtil.uniquify(Lists.transform(columns, GET_ALIAS), true));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,261,final Set<String> columnNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,354,final List<Table> tables = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,366,return Lists.transform(aggCallList, toMeasureFunction);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,425,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,440,new DirectedGraph.EdgeFactory<RelNode, Edge>() {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,441,public Edge createEdge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,442,return new Edge(source, target);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,446,final List<IntPair> pairs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,467,this.agg = Preconditions.checkNotNull(agg);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,505,return Lists.transform(args, GET_ORDINAL);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,533,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,534,this.column = Preconditions.checkNotNull(column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,535,this.alias = Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,563,private final List<Node> nodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,578,this.rootSchema = Preconditions.checkNotNull(schema.root());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,585,List<RelNode> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,586,List<int[][]> tempLinks = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,590,List<String> aliases = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,612,final Map<RelNode, Node> map = Maps.newIdentityHashMap();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,840,private final List<Measure> measureBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,841,private final List<Column> dimensionListBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,24,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,38,final Map<MaterializationKey, Materialization> keyMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,40,final Map<QueryKey, MaterializationKey> keyBySql = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,42,final Map<TileKey, MaterializationKey> keyByTile = Maps.newHashMap();
core/src/main/java/org/apache/calcite/materialize/MaterializationActor.java,78,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,21,import org.apache.calcite.avatica.ColumnMetaData;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,41,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,45,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,66,new ThreadLocal<MaterializationService>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,68,return new MaterializationService();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,73,new Comparator<Pair<CalciteSchema.TableEntry, TileKey>>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,74,public int compare(Pair<CalciteSchema.TableEntry, TileKey> o0,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,75,Pair<CalciteSchema.TableEntry, TileKey> o1) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,77,final Table t0 = o0.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,78,final Table t1 = o1.left.getTable();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,79,int c = Double.compare(t0.getStatistic().getRowCount(),
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,80,t1.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,81,if (c != 0) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,82,return c;
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,85,return o0.left.name.compareTo(o1.left.name);
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,204,new TileKey(lattice, groupSet, ImmutableList.<Lattice.Measure>of());
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,264,final List<TileKey> obsolete = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,265,final LinkedHashSet<Lattice.Measure> measureSet = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,373,Lists.transform(calciteSignature.columns,
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,374,new Function<ColumnMetaData, ColumnMetaData.Rep>() {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,375,public ColumnMetaData.Rep apply(ColumnMetaData column) {
core/src/main/java/org/apache/calcite/materialize/MaterializationService.java,376,return column.type.rep;
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,41,.createTable(lattice.rootSchema, sql, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,49,private static final Function<Attribute, Lattice.Column> TO_COLUMN =
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,50,new Function<Attribute, Lattice.Column>() {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,51,public Lattice.Column apply(Attribute input) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,52,return ((AttributeImpl) input).column;
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,209,return lattice.getRowCount(Lists.transform(attributes, TO_COLUMN));
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,24,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,420,return Iterables.filter(classes,
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,421,new PredicateImpl<Class<? extends RelNode>>() {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,422,public boolean test(Class<? extends RelNode> input) {
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,423,return clazz.isAssignableFrom(input);
core/src/main/java/org/apache/calcite/plan/Contexts.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Contexts.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/Contexts.java,85,final List<Context> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/Contexts.java,119,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/Contexts.java,142,this.contexts = Preconditions.checkNotNull(contexts);
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,35,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,62,CacheBuilder.newBuilder().weakKeys().build(
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,63,new CacheLoader<RelOptPlanner, ConversionData>() {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,64,public ConversionData load(@Nonnull RelOptPlanner key) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,65,return new ConversionData();
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,43,this.traits = Preconditions.checkNotNull(traits);
core/src/main/java/org/apache/calcite/plan/RelCompositeTrait.java,62,traitList.toArray(new RelMultipleTrait[traitList.size()]);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,79,this.planner = Preconditions.checkNotNull(planner);
core/src/main/java/org/apache/calcite/plan/RelOptCluster.java,80,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,46,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,48,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,161,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,185,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,211,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,212,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,225,this.scan = Preconditions.checkNotNull(scan);
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,288,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,289,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,34,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,35,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,69,applied.add(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,70,Pair.<RelNode, List<RelOptMaterialization>>of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,71,rel, ImmutableList.<RelOptMaterialization>of()));
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,105,final List<Pair<RelNode, RelOptLattice>> latticeUses = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,107,Sets.newHashSet(Iterables.transform(queryTables, GET_QUALIFIED_NAME));
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,109,final Supplier<RelNode> leafJoinRoot = Suppliers.memoize(
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,110,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,111,public RelNode get() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,112,return RelOptMaterialization.toLeafJoinForm(rel);
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,166,final List<RelOptMaterialization> applicableMaterializations = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,177,private static final Function<RelOptTable, List<String>> GET_QUALIFIED_NAME =
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,178,new Function<RelOptTable, List<String>>() {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,179,public List<String> apply(RelOptTable relOptTable) {
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,180,return relOptTable.getQualifiedName();
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,70,ImmutableMap.<RexNode, RexNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,92,this.pulledUpPredicates = Preconditions.checkNotNull(pulledUpPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,94,Preconditions.checkNotNull(leftInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,96,Preconditions.checkNotNull(rightInferredPredicates);
core/src/main/java/org/apache/calcite/plan/RelOptPredicateList.java,97,this.constantMap = Preconditions.checkNotNull(constantMap);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,28,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,100,this.operand = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,101,this.relBuilderFactory = Preconditions.checkNotNull(relBuilderFactory);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,129,return new RelOptRuleOperand(clazz, null, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,148,return new RelOptRuleOperand(clazz, trait, Predicates.<R>alwaysTrue(),
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,164,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,185,public static <R extends RelNode> RelOptRuleOperand operand(
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,191,return operand(clazz, trait, predicate, some(first, rest));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,575,new Function<RelNode, RelNode>() {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,576,public RelNode apply(RelNode rel) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,577,return convert(rel, rel.getTraitSet().replace(trait));
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,622,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleCall.java,234,transformTo(rel, ImmutableMap.<RelNode, RelNode>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,22,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,121,this.clazz = Preconditions.checkNotNull(clazz);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,124,this.predicate = Preconditions.checkNotNull((Predicate) predicate);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperand.java,215,return predicate.apply(rel);
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,37,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptRuleOperandChildren.java,42,ImmutableList.<RelOptRuleOperand>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,83,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,106,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,107,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,108,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,113,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,138,public static final double EPSILON = 1.0e-5;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,142,public static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,143,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,144,public boolean test(Filter filter) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,145,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,147,|| RexOver.containsOver(filter.getCondition()));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,153,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,154,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,155,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,156,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,158,|| RexOver.containsOver(project.getProjects(), null));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,164,public static final Predicate<Calc> CALC_PREDICATE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,165,new PredicateImpl<Calc>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,166,public boolean test(Calc calc) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,167,return !(B
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,169,|| calc.getProgram().containsAggs());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,173,static final boolean B = false;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,175,private static final Function<RelDataTypeField, RelDataType> GET_TYPE =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,176,new Function<RelDataTypeField, RelDataType>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,177,public RelDataType apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,178,return field.getType();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,248,new Function<RelOptTable, String>() {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,250,return arg0.getQualifiedName().toString();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,351,return Lists.transform(type.getFieldList(), GET_TYPE);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,564,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,625,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,801,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1702,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2268,final Map<Integer, RexNode> projectMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2411,final List<RexNode> filtersToRemove = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2672,List<BitSet> newProjFields = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2703,Lists.transform(newProjFields, ImmutableBitSet.FROM_BIT_SET),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3112,final List<String> outputNameList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3113,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3240,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3264,return Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,62,.build(
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,63,new CacheLoader<T, T>() {
core/src/main/java/org/apache/calcite/plan/RelTraitDef.java,65,return key;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,22,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,554,new RelTraitSet(this, traits.toArray(new RelTrait[traits.size()]));
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,35,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,73,this.builder = Preconditions.checkNotNull(builder);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,74,this.executor = Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,75,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,199,RexUtil.apply(firstUsageFinder, ImmutableList.<RexNode>of(), first);
core/src/main/java/org/apache/calcite/plan/RexImplicationChecker.java,200,RexUtil.apply(secondUsageFinder, ImmutableList.<RexNode>of(), second);
core/src/main/java/org/apache/calcite/plan/Strong.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/Strong.java,90,return Preconditions.checkNotNull(MAP.get(kind), kind);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,47,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,63,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,64,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,65,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,69,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,123,ImmutableList.<UnifyRule>of(
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,428,List<RelNode> sub = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,449,final Map<MutableRel, MutableRel> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,462,final List<Replacement> attempted = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,463,List<List<Replacement>> substitutions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,819,this.rule = Preconditions.checkNotNull(rule);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,820,this.query = Preconditions.checkNotNull(query);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,821,this.target = Preconditions.checkNotNull(target);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,822,this.slots = Preconditions.checkNotNull(slots);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1214,new Function<AggregateCall, AggregateCall>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1215,public AggregateCall apply(AggregateCall call) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1216,return call.copy(Mappings.apply2(mapping, call.getArgList()),
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1217,Mappings.apply(mapping, call.filterArg));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1231,final List<Integer> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1255,final List<AggregateCall> aggregateCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1539,private static final Predicate<LogicalFilter> PREDICATE =
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1540,new PredicateImpl<LogicalFilter>() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1541,public boolean test(LogicalFilter input) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1542,return input.getCondition() instanceof RexInputRef;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1551,operand(LogicalFilter.class, null, PREDICATE,
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,135,Util.first(onCopyHook, Functions.<RelNode, RelNode, Void>ignore2());
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,497,bindings.toArray(new RelNode[bindings.size()]),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,50,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,51,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,52,if (!(rel instanceof HepRelVertex)) {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,53,return null;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,55,HepRelVertex vertex = (HepRelVertex) rel;
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,56,final RelNode rel2 = vertex.getCurrentRel();
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,57,UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,58,rel.getCluster().getMetadataProvider().apply(rel2.getClass(),
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,59,metadataClass);
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,60,return function.bind(rel2, mq);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,20,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,44,import java.util.Iterator;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,383,return new Iterable<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,384,public Iterator<RelNode> iterator() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,386,.where(
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,387,new Predicate1<RelNode>() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,388,public boolean apply(RelNode v1) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,389,return v1.getTraitSet().satisfies(traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,392,.iterator();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,40,import java.util.Collections;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,238,Collections.sort(
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,239,boostRemovals,
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,240,new Comparator<RelSubset>() {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,241,public int compare(RelSubset o1, RelSubset o2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,242,int o1children = countChildren(o1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,243,int o2children = countChildren(o2);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,244,int c = compare(o1children, o2children);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,245,if (c == 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,247,c = compare(o1.getId(), o2.getId());
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,249,return c;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,252,private int compare(int i1, int i2) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,253,return (i1 < i2) ? -1 : ((i1 == i2) ? 0 : 1);
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,256,private int countChildren(RelSubset subset) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,257,int count = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,258,for (RelNode rel : subset.getRels()) {
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,259,count += rel.getInputs().size();
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,261,return count;
core/src/main/java/org/apache/calcite/plan/volcano/RuleQueue.java,455,Collections.sort(matchList, MATCH_COMPARATOR);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,72,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,73,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,77,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,85,import java.util.Comparator;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,233,Lists.newArrayList();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,237,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,286,return new VolcanoPlannerPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,287,public void initialize(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,288,Map<VolcanoPlannerPhase, Set<String>> phaseRuleMap) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,290,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS_MDR).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,291,phaseRuleMap.get(VolcanoPlannerPhase.PRE_PROCESS).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,292,phaseRuleMap.get(VolcanoPlannerPhase.CLEANUP).add("xxx");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,692,final Set<RelSubset> subsets = Sets.newHashSet();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1177,Ordering<RelSet> ordering = Ordering.from(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1178,new Comparator<RelSet>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1179,public int compare(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1180,RelSet o1,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1181,RelSet o2) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1182,return o1.id - o2.id;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,24,import org.apache.calcite.rel.metadata.RelMetadataQuery;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,55,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,56,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,57,final RelSubset subset = (RelSubset) rel;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,58,final RelMetadataProvider provider =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,59,rel.getCluster().getMetadataProvider();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,69,if (subset.best != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,70,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,71,provider.apply(subset.best.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,72,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,73,final M metadata = function.bind(subset.best, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,74,if (metadata != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,75,return metadata;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,92,if (subset.set.inMetadataQuery) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,93,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,96,subset.set.inMetadataQuery = true;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,97,try {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,98,for (RelNode relCandidate : subset.set.rels) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,99,final UnboundMetadata<M> function =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,100,provider.apply(relCandidate.getClass(), metadataClass);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,101,if (function != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,102,final M result = function.bind(relCandidate, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,103,if (result != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,104,return result;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,109,subset.set.inMetadataQuery = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,113,return null;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,83,ImmutableMap.<RelNode, List<RelNode>>of());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,26,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,38,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,59,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,60,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,61,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,62,import com.google.common.collect.Collections2;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,88,ImmutableList.of(Preconditions.checkNotNull(defaultSchema),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,89,ImmutableList.<String>of()),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,96,this.rootSchema = Preconditions.checkNotNull(rootSchema);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,154,final List<Function> functions2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,278,predicate = Predicates.alwaysTrue();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,280,predicate = new PredicateImpl<Function>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,281,public boolean test(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,282,return function instanceof TableMacro
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,287,predicate = new PredicateImpl<Function>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,288,public boolean test(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,289,return !(function instanceof TableMacro
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,294,final Collection<Function> functions =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,295,Collections2.filter(getFunctionsFrom(opName.names), predicate);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,296,if (functions.isEmpty()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,297,return;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,299,operatorList.addAll(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,300,Collections2.transform(functions,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,301,new com.google.common.base.Function<Function, SqlOperator>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,302,public SqlOperator apply(Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,303,return toOp(opName, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,317,final Predicate<Integer> optional =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,318,new PredicateImpl<Integer>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,319,public boolean test(Integer input) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,320,return function.getParameters().get(input).isOptional();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,324,OperandTypes.family(typeFamilies, optional);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,347,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,348,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,356,return new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,357,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,358,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,365,return Lists.transform(types,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,366,new com.google.common.base.Function<RelDataType, RelDataType>() {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,367,public RelDataType apply(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,53,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,129,final List<Callback> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,19,import org.apache.calcite.DataContext;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,39,import org.apache.calcite.linq4j.Enumerable;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,143,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,501,return Collections.<Function1<Context, RelOptPlanner>>singletonList(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,502,new Function1<Context, RelOptPlanner>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,503,public RelOptPlanner apply(Context context) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,504,return createPlanner(context, null, null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,667,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,668,ImmutableMap.<String, Object>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,673,ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,674,-1,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,675,new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,676,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,677,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,773,ImmutableList.<AvaticaParameter>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,774,ImmutableMap.<String, Object>of(), null,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,775,ImmutableList.<ColumnMetaData>of(), Meta.CursorFactory.OBJECT,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,848,: ImmutableList.<RelCollation>of(),
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1067,Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1096,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1097,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1098,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1099,final RelOptCluster cluster =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1100,prepare.createCluster(planner, rexBuilder);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1102,.translate(queryable);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1108,return prepare_(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1109,new Supplier<RelNode>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1110,public RelNode get() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1111,return rel;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1300,: ImmutableList.<Prepare.Materialization>of();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1325,return new Bindable() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1326,public Enumerable bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1327,switch (cursorFactory.style) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1328,case ARRAY:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1329,return Linq4j.singletonEnumerable(new String[] {explanation});
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1330,case OBJECT:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1331,default:
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1332,return Linq4j.singletonEnumerable(explanation);
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,105,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,113,ImmutableList.<String>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,24,import org.apache.calcite.plan.RelOptLattice;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,25,import org.apache.calcite.plan.RelOptMaterialization;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,27,import org.apache.calcite.plan.RelOptSchema;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,141,new Frameworks.PlannerAction<Void>() {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,142,public Void apply(RelOptCluster cluster, RelOptSchema relOptSchema,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,143,SchemaPlus rootSchema) {
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,144,Util.discard(rootSchema); // use our own defaultSchema
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,145,typeFactory = (JavaTypeFactory) cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,146,planner = cluster.getPlanner();
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,147,planner.setExecutor(executor);
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,148,return null;
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,313,return program.run(planner, rel, requiredOutputTraits,
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,314,ImmutableList.<RelOptMaterialization>of(),
core/src/main/java/org/apache/calcite/prepare/PlannerImpl.java,315,ImmutableList.<RelOptLattice>of());
core/src/main/java/org/apache/calcite/prepare/Prepare.java,71,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/Prepare.java,529,Collections.<String>nCopies(4, null));
core/src/main/java/org/apache/calcite/prepare/Prepare.java,596,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,597,this.parameterRowType = Preconditions.checkNotNull(parameterRowType);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,598,this.fieldOrigins = Preconditions.checkNotNull(fieldOrigins);
core/src/main/java/org/apache/calcite/prepare/Prepare.java,600,this.rootRel = Preconditions.checkNotNull(rootRel);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,55,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,56,import com.google.common.base.Functions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,57,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,91,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,104,final Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,105,(Function) Functions.constant(expression);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,107,expressionFunction, null);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,113,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,114,getClassExpressionFunction(schemaPlus, Util.last(path).left, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,116,expressionFunction, table.getStatistic().getRowCount());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,122,Function<Class, Expression> expressionFunction =
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,123,getClassExpressionFunction(tableEntry, table);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,125,table, expressionFunction, rowCount);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,146,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,147,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,148,return queryableTable.getExpression(schema, tableName, clazz);
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,154,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,155,public Expression apply(Class clazz) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,156,return Schemas.tableExpression(schema, Object[].class, tableName,
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,157,table.getClass());
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,164,return new Function<Class, Expression>() {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,165,public Expression apply(Class input) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,166,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rel/RelCollations.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/RelCollations.java,40,new RelCollationImpl(ImmutableList.<RelFieldCollation>of()));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,114,new Function<RelFieldCollation, Integer>() {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,115,public Integer apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/RelCollations.java,116,return input.getFieldIndex();
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,89,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,200,this.direction = Preconditions.checkNotNull(direction);
core/src/main/java/org/apache/calcite/rel/RelFieldCollation.java,201,this.nullDirection = Preconditions.checkNotNull(nullDirection);
core/src/main/java/org/apache/calcite/rel/RelRoot.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/RelRoot.java,95,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,28,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,71,this.inTrait = Preconditions.checkNotNull(in);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,72,this.outTrait = Preconditions.checkNotNull(out);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,34,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,48,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,50,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,76,public static final Predicate<Aggregate> IS_SIMPLE =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,77,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,78,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,79,return input.getGroupType() == Group.SIMPLE;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,83,public static final Predicate<Aggregate> IS_NOT_GRAND_TOTAL =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,84,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,85,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,86,return input.getGroupCount() > 0;
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,138,this.groupSet = Preconditions.checkNotNull(groupSet);
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,344,final Set<String> containedNames = Sets.newHashSet();
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,27,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,89,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,91,this.aggFunction = Preconditions.checkNotNull(aggFunction);
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,30,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/Correlate.java,147,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,42,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/EquiJoin.java,43,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Exchange.java,61,this.distribution = Preconditions.checkNotNull(distribution);
core/src/main/java/org/apache/calcite/rel/core/Join.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/Join.java,104,this.condition = Preconditions.checkNotNull(condition);
core/src/main/java/org/apache/calcite/rel/core/Join.java,106,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,50,this.leftKeys = Preconditions.checkNotNull(leftKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,51,this.rightKeys = Preconditions.checkNotNull(rightKeys);
core/src/main/java/org/apache/calcite/rel/core/JoinInfo.java,129,this.remaining = Preconditions.checkNotNull(remaining);
core/src/main/java/org/apache/calcite/rel/core/Match.java,98,this.pattern = Preconditions.checkNotNull(pattern);
core/src/main/java/org/apache/calcite/rel/core/Match.java,105,this.after = Preconditions.checkNotNull(after);
core/src/main/java/org/apache/calcite/rel/core/Match.java,109,this.orderKeys = Preconditions.checkNotNull(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Project.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Project.java,195,if (false && !Util.isDistinct(
core/src/main/java/org/apache/calcite/rel/core/Project.java,196,Lists.transform(exps,
core/src/main/java/org/apache/calcite/rel/core/Project.java,197,new Function<RexNode, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Project.java,198,public Object apply(RexNode a0) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,199,return a0.toString();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,38,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,274,semiJoinDone, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,28,import org.apache.calcite.rel.type.RelDataTypeField;
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,76,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/core/SemiJoin.java,124,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,31,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,105,final List<RelDataType> inputRowTypes = Lists.transform(inputs,
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,106,new Function<RelNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,107,public RelDataType apply(RelNode input) {
core/src/main/java/org/apache/calcite/rel/core/SetOp.java,108,return input.getRowType();
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/core/SortExchange.java,60,this.collation = Preconditions.checkNotNull(collation);
core/src/main/java/org/apache/calcite/rel/core/TableFunctionScan.java,98,ImmutableSet.<RelColumnMapping>of());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,119,Preconditions.checkNotNull(updateColumnList);
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,120,Preconditions.checkNotNull(sourceExpressionList);
core/src/main/java/org/apache/calcite/rel/core/Values.java,31,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/core/Values.java,36,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/core/Values.java,37,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/core/Values.java,51,private static final Function<ImmutableList<RexLiteral>, Object> F =
core/src/main/java/org/apache/calcite/rel/core/Values.java,52,new Function<ImmutableList<RexLiteral>, Object>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,53,public Object apply(ImmutableList<RexLiteral> tuple) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,54,String s = tuple.toString();
core/src/main/java/org/apache/calcite/rel/core/Values.java,55,assert s.startsWith("[");
core/src/main/java/org/apache/calcite/rel/core/Values.java,56,assert s.endsWith("]");
core/src/main/java/org/apache/calcite/rel/core/Values.java,57,return "{ " + s.substring(1, s.length() - 1) + " }";
core/src/main/java/org/apache/calcite/rel/core/Values.java,68,public static final Predicate<? super Values> IS_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,69,new PredicateImpl<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,70,public boolean test(Values values) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,71,return values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/core/Values.java,82,public static final Predicate<? super Values> IS_NOT_EMPTY =
core/src/main/java/org/apache/calcite/rel/core/Values.java,83,new PredicateImpl<Values>() {
core/src/main/java/org/apache/calcite/rel/core/Values.java,84,public boolean test(Values values) {
core/src/main/java/org/apache/calcite/rel/core/Values.java,85,return !values.getTuples().isEmpty();
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,25,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,39,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,98,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,99,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,100,return RelMdCollation.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,104,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,105,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,106,return RelMdDistribution.calc(mq, input, program);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,24,import org.apache.calcite.rel.RelDistribution;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,38,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,41,import java.util.List;
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,72,this.variablesSet = Preconditions.checkNotNull(variablesSet);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,81,this(cluster, traitSet, child, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,90,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,103,return create(input, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,113,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,114,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,115,return RelMdCollation.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,119,new Supplier<RelDistribution>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,120,public RelDistribution get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalFilter.java,121,return RelMdDistribution.filter(mq, input);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,100,this.systemFieldList = Preconditions.checkNotNull(systemFieldList);
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,118,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,136,input.getExpression("condition"), ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,138,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,164,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalJoin.java,171,joinType, false, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,37,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,113,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,114,RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,115,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,116,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalProject.java,117,return RelMdCollation.project(mq, input, projects);
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,101,.replaceIfs(RelCollationTraitDef.INSTANCE,
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,102,new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,103,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,104,if (table != null) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,105,return table.getStatistic().getCollations();
core/src/main/java/org/apache/calcite/rel/logical/LogicalTableScan.java,107,return ImmutableList.of();
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,22,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,34,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,87,.replaceIfs(
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,88,RelCollationTraitDef.INSTANCE, new Supplier<List<RelCollation>>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,89,public List<RelCollation> get() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,90,return RelMdCollation.values(mq, rowType, tuples);
core/src/main/java/org/apache/calcite/rel/logical/LogicalValues.java,106,ImmutableList.<ImmutableList<RexLiteral>>of());
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,27,import org.apache.calcite.rex.RexFieldCollation;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,37,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,184,new ArrayList<Map.Entry<String, RelDataType>>(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,185,child.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,69,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,70,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,71,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,72,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,73,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,74,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,75,new CachingInvocationHandler(metadata)));
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,105,this.metadata = Preconditions.checkNotNull(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,89,return new UnboundMetadata<M>() {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,90,public M bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,91,final List<Metadata> metadataList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,92,for (UnboundMetadata<M> function : functions) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,93,final Metadata metadata = function.bind(rel, mq);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,94,if (metadata != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,95,metadataList.add(metadata);
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,98,return metadataClass.cast(
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,99,Proxy.newProxyInstance(metadataClass.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,100,new Class[]{metadataClass},
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,101,new ChainedInvocationHandler(metadataList)));
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,88,import javax.annotation.Nonnull;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,39,public static final UnboundMetadata<Metadata> DUMMY =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,40,new UnboundMetadata<Metadata>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,41,public Metadata bind(RelNode rel, RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,42,return null;
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,55,return new CacheLoader<Pair<Class<RelNode>, Class<Metadata>>,
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,56,UnboundMetadata<Metadata>>() {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,58,Pair<Class<RelNode>, Class<Metadata>> key) throws Exception {
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,59,final UnboundMetadata<Metadata> function =
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,60,provider.apply(key.left, key.right);
core/src/main/java/org/apache/calcite/rel/metadata/MetadataFactoryImpl.java,62,return function != null ? function : DUMMY;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,33,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,134,final UnboundMetadata function =
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,135,new UnboundMetadata() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,136,public Metadata bind(final RelNode rel,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,137,final RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,138,return (Metadata) Proxy.newProxyInstance(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,139,space.metadataClass0.getClassLoader(),
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,140,new Class[]{space.metadataClass0},
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,141,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,142,public Object invoke(Object proxy, Method method,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,143,Object[] args) throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,150,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,151,BuiltInMethod.METADATA_REL.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,152,return rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,154,if (method.equals(
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,155,BuiltInMethod.OBJECT_TO_STRING.method)) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,156,return space.metadataClass0.getSimpleName() + "(" + rel
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,157,+ ")";
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,159,int i = methods.indexOf(method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,160,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,161,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,162,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,164,final Method handlerMethod = handlerMethods.get(i);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,165,if (handlerMethod == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,166,throw new AssertionError("not handled: " + method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,167,+ " for " + rel);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,169,final Object[] args1;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,170,final List key;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,171,if (args == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,172,args1 = new Object[]{rel, mq};
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,173,key = FlatLists.of(rel, method);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,175,args1 = new Object[args.length + 2];
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,176,args1[0] = rel;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,177,args1[1] = mq;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,178,System.arraycopy(args, 0, args1, 2, args.length);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,180,final Object[] args2 = args1.clone();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,181,args2[1] = method; // replace RelMetadataQuery with method
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,182,for (int j = 0; j < args2.length; j++) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,183,if (args2[j] == null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,184,args2[j] = NullSentinel.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,187,args2[j] = args2[j].toString();
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,190,key = FlatLists.copyOf(args2);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,192,if (mq.map.put(key, NullSentinel.INSTANCE) != null) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,193,throw CyclicMetadataException.INSTANCE;
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,195,try {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,196,return handlerMethod.invoke(target, args1);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,198,| UndeclaredThrowableException e) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,199,Util.throwIfUnchecked(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,200,throw new RuntimeException(e.getCause());
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,202,mq.map.remove(key);
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,318,Preconditions.checkNotNull(relNodeClass);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,203,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,204,inputPreds.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,205,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,207,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,210,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,296,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,297,inputPreds.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,298,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,300,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,303,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,50,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,53,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,166,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,299,final List<RelCollation> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,302,Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,43,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,49,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,68,private static final Predicate<RelNode> SAFE_REL =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,69,new PredicateImpl<RelNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,70,public boolean test(RelNode r) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,71,return r instanceof Aggregate || r instanceof Project;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,44,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,49,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,130,final Set<RexNode> originalExprs = Sets.newHashSet(inputRef);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,132,mapping.put(ref, originalExprs);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,240,final Set<RexNode> updatedExprs = Sets.newHashSet(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,241,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,242,originalExprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,243,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,245,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,248,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,295,final Set<RexNode> updatedExprs = Sets.newHashSet(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,296,Iterables.transform(
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,297,originalExprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,298,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,300,return RexUtil.swapTableReferences(rexBuilder, e, currentTablesMapping);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,303,));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdExpressionLineage.java,396,return Sets.newHashSet(expr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,61,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,65,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,523,exprFields = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,554,equivalence = Maps.newTreeMap();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,570,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,571,new Function<RexNode, Void>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,572,public Void apply(RexNode input) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,573,return input.accept(eF);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,701,return new Iterable<Mapping>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,702,public Iterator<Mapping> iterator() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,703,ImmutableBitSet fields = exprFields.get(predicate.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,704,if (fields.cardinality() == 0) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,705,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,707,return new ExprsItr(fields);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,721,exprs = Linq4j.asEnumerable(exprs).where(new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,722,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,723,return expr != null;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdSize.java,222,List<List<Double>> inputColumnSizeList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,36,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdTableReferences.java,91,return Sets.newHashSet(RelTableRef.of(rel.getTable(), 0));
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,35,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,36,import java.lang.reflect.Method;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,112,new ThreadLocal<JaninoRelMetadataProvider>() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,113,protected JaninoRelMetadataProvider initialValue() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,114,return JaninoRelMetadataProvider.DEFAULT;
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,120,this.metadataProvider = Preconditions.checkNotNull(metadataProvider);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,149,new Class[] {handlerClass},
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,150,new InvocationHandler() {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,152,throws Throwable {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,153,final RelNode r = (RelNode) args[0];
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,154,throw new JaninoRelMetadataProvider.NoHandler(r.getClass());
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,62,return Lists.transform(inputs,
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,63,new Function<MutableRel, MutableRel>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,64,public MutableRel apply(MutableRel mutableRel) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableMultiRel.java,65,return mutableRel.clone();
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,72,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,73,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRel.java,74,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,59,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,278,private static List<RelNode> fromMutables(List<MutableRel> nodes, final RelBuilder relBuilder) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,280,new Function<MutableRel, RelNode>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,281,public RelNode apply(MutableRel mutableRel) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,282,return fromMutable(mutableRel, relBuilder);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,412,return Lists.transform(nodes,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,413,new Function<RelNode, MutableRel>() {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,414,public MutableRel apply(RelNode relNode) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,415,return toMutable(relNode);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,65,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,321,return result(sqlInsert, ImmutableList.<Clause>of(), modify, null);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,355,Lists.transform(exprs,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,356,new Function<RexNode, SqlNode>() {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,357,public SqlNode apply(RexNode e) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,358,return context.toSql(null, e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,367,Lists.transform(names,
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,368,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,369,public SqlNode apply(String name) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,370,return new SqlIdentifier(name, POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,430,List<SqlNode> rhl = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,75,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,124,this.dialect = Preconditions.checkNotNull(dialect);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,795,POS, operands.toArray(new SqlNode[operands.size()]));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1103,ImmutableMap.<String, RelDataType>of(neededAlias, neededType));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,186,: ImmutableList.<RelOptMaterialization>of();
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1420,ImmutableList.<BiMap<RelTableRef, RelTableRef>>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1421,HashBiMap.<RelTableRef, RelTableRef>create());
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1438,HashBiMap.<RelTableRef, RelTableRef>create(m);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1520,return ImmutableTriple.<RexNode, RexNode, RexNode>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1551,DefaultDirectedGraph.create(Edge.FACTORY);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1700,return ImmutableTriple.<RexNode, RexNode, RexNode>of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1701,compensationColumnsEquiPred, compensationRangePred, compensationResidualPred);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2179,public static final DirectedGraph.EdgeFactory<RelTableRef, Edge> FACTORY =
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2180,new DirectedGraph.EdgeFactory<RelTableRef, Edge>() {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2181,public Edge createEdge(RelTableRef source, RelTableRef target) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2182,return new Edge(source, target);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,792,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,929,null, ImmutableList.<AggregateCall>of()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,37,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,39,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,98,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,99,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,100,return newGroupSet.indexOf(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,135,final List<AggregateCall> topAggCallList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,48,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,49,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,51,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,83,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,84,operand(joinClass, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,170,final List<Integer> leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,171,final List<Integer> rightKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,172,final List<Boolean> filterNulls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,241,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,274,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,275,public Integer apply(Integer a0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,276,return map.get(a0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,300,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,396,return new SqlSplittableAggFunction.Registry<E>() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,397,public int register(E e) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,398,int i = list.indexOf(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,399,if (i < 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,400,i = list.size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,401,list.add(e);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,403,return i;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,75,final List<Integer> newKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,133,final List<Integer> posList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,89,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,144,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,145,final Map<AggregateCall, RexNode> aggCallMapping = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,147,final List<RexNode> projList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,177,Collections.<String>nCopies(extraArgCount, null)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,47,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,61,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,67,operand(Aggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,146,final List<AggregateCall> aggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,223,List<Integer> newArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,54,operand(aggregateClass, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,42,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,150,final List<AggregateCall> newCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,59,operand(Aggregate.class, null, Predicates.not(Aggregate.IS_NOT_GRAND_TOTAL),
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,129,final RexNode[] exprs = exprList.toArray(new RexNode[exprList.size()]);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,31,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,41,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,85,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,90,filter.getCondition().accept(finder);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,140,super(operand(Filter.class, null, FILTER_PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,176,new ThreadLocal<ExtractFinder>() {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,178,return new ExtractFinder();
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,105,final List<RexNode> pushedConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,106,final List<RexNode> remainingConditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,36,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,52,public static final Predicate TRUE_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,53,new Predicate() {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,54,public boolean apply(Join join, JoinRelType joinType, RexNode exp) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,55,return true;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,93,this.predicate = Preconditions.checkNotNull(predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,140,: Lists.<RexNode>newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,29,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,36,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,53,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,54,new PredicateImpl<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,55,public boolean test(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,58,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,59,return table.unwrap(FilterableTable.class) != null
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,60,|| table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,68,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,82,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,118,final List<RexNode> top = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,119,final List<RexNode> bottom = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,133,final List<RexNode> newBottomList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,190,Collections.<RelDataTypeField>emptyList());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,37,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,38,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,128,final List<ImmutableBitSet> projFieldsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,129,final List<int[]> joinFieldRefCountsList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,141,final List<Pair<JoinRelType, RexNode>> joinSpecs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,200,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,382,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,473,final Map<Integer, int[]> refCountsMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,524,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,23,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,137,List<Integer> treeOrder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,160,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,198,this.left = Preconditions.checkNotNull(left);
core/src/main/java/org/apache/calcite/rel/rules/LoptJoinTree.java,199,this.right = Preconditions.checkNotNull(right);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,37,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,465,fieldsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,466,factorsRefByJoinFilter = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,50,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,301,sortedFactors.toArray(new Integer[sortedFactors.size()]);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,496,List<RexNode> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1636,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,77,: ImmutableList.<RelOptMaterialization>of();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,41,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,95,final List<Vertex> vertexes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,105,final List<LoptMultiJoin.Edge> unusedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,127,final List<LoptMultiJoin.Edge> usedEdges = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,177,final List<RexNode> conditions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,226,List<Pair<RelNode, Mappings.TargetMapping>> relNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,375,this.conditions = Preconditions.checkNotNull(conditions);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,37,public static final ProjectFilterTransposeRule INSTANCE = new ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,38,LogicalProject.class, LogicalFilter.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,39,PushProjector.ExprCondition.FALSE);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,41,new ProjectJoinTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,42,PushProjector.ExprCondition.TRUE,
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,26,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,28,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,45,private static final Predicate<Project> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,46,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,47,public boolean test(Project input) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,48,return isTrivial(input);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,43,new ProjectSetOpTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,44,PushProjector.ExprCondition.FALSE, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,28,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,34,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,51,public static final Predicate<TableScan> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,52,new PredicateImpl<TableScan>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,53,public boolean test(TableScan scan) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,55,final RelOptTable table = scan.getTable();
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,56,return table.unwrap(ProjectableFilterableTable.class) != null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,64,operand(TableScan.class, null, PREDICATE, none())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,78,operand(TableScan.class, null, PREDICATE, none()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,40,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,49,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,51,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,53,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,79,private static final Predicate<Calc> PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,80,new PredicateImpl<Calc>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,81,public boolean test(Calc calc) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,82,return RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,86,private static final Predicate<Project> PREDICATE2 =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,87,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,88,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,89,return RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,282,final Set<Integer> newSet = Sets.newHashSet(i);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,39,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,40,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,78,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,126,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,179,unordered(operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,205,new RemoveEmptySingleRule(Project.class, Predicates.<Project>alwaysTrue(),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,206,RelFactories.LOGICAL_BUILDER, "PruneEmptyProject");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,272,new RemoveEmptySingleRule(Aggregate.class, Aggregate.IS_NOT_GRAND_TOTAL,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,289,operand(Values.class, null, Values.IS_EMPTY, none()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,318,operand(Values.class, null, Values.IS_EMPTY, none()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,337,this(clazz, Predicates.<R>alwaysTrue(), RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,346,operand(clazz, null, predicate,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,347,operand(Values.class, null, Values.IS_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,34,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,41,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,42,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,45,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,213,this.relBuilder = Preconditions.checkNotNull(relBuilder);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,580,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,818,ExprCondition FALSE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,819,new ExprConditionImpl() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,821,return false;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,828,ExprCondition TRUE =
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,829,new ExprConditionImpl() {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,831,return true;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,837,abstract static class ExprConditionImpl extends PredicateImpl<RexNode>
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,838,implements ExprCondition {
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,845,class OperatorExprCondition extends ExprConditionImpl {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,345,final List<RexNode> expandedExprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,361,final List<RexLocalRef> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,491,final List<RexNode> constExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,492,List<Boolean> addCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,493,final List<RexNode> removableCasts = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,505,final List<RexNode> reducedExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,545,final List<RexNode> reducedValues = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,31,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,37,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,38,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,49,new PredicateImpl<Join>() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,50,public boolean test(Join input) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,51,switch (input.getJoinType()) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,52,case LEFT:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,53,case INNER:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,54,return true;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,55,default:
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,56,return false;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,63,new PredicateImpl<Aggregate>() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,64,public boolean test(Aggregate input) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,65,return input.getRowType().getFieldCount() == 0;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,83,operand(joinClass, null, IS_LEFT_OR_INNER,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,92,operand(joinClass, null, IS_LEFT_OR_INNER,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,94,operand(aggregateClass, null, IS_EMPTY_AGGREGATE, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,126,final List<Integer> newRightKeyBuilder = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,124,ImmutableList.<RelNode>of(newSort));
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,121,Pair.<RexNode, String>of(rexBuilder.makeInputRef(input, j),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,76,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,92,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY, none())),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,109,operand(LogicalValues.class, null, Values.IS_NOT_EMPTY,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,46,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,160,final List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,268,List<RelNode> inputsToUnion = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,23,import java.util.Collections;
core/src/main/java/org/apache/calcite/rel/type/DynamicRecordTypeImpl.java,72,return new SqlTypeExplicitPrecedenceList(Collections.<SqlTypeName>emptyList());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,59,.build(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,60,new CacheLoader<Object, RelDataType>() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,62,if (k instanceof RelDataType) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,63,return (RelDataType) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,66,final Key key = (Key) k;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,67,final ImmutableList.Builder<RelDataTypeField> list =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,68,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,69,for (int i = 0; i < key.names.size(); i++) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,70,list.add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,71,new RelDataTypeFieldImpl(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,72,key.names.get(i), i, key.types.get(i)));
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,74,return new RelRecordType(key.kind, list.build());
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,107,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,316,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,38,class ToFieldIndex implements Function<RelDataTypeField, Integer> {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeField.java,48,class ToFieldName implements Function<RelDataTypeField, String> {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,30,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,88,final List<Slot> slots = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,301,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,302,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,303,return typeFactory.copyType(protoType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,321,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,322,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,323,final RelDataType type = typeFactory.createSqlType(typeName);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,324,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,343,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,344,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,345,final RelDataType type = typeFactory.createSqlType(typeName, precision);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,346,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,365,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,366,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,367,final RelDataType type =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,368,typeFactory.createSqlType(typeName, precision, scale);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeImpl.java,369,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rel/type/RelRecordType.java,42,this.kind = Preconditions.checkNotNull(kind);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,52,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,81,private static final Function<RelDataTypeField, RexInputRef> TO_INPUT_REF =
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,82,new Function<RelDataTypeField, RexInputRef>() {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,83,public RexInputRef apply(RelDataTypeField input) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,84,return new RexInputRef(input.getIndex(), input.getType());
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,131,return Lists.transform(rowType.getFieldList(), TO_INPUT_REF);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,276,ImmutableList.<RelCollation>of()));
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,394,ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1068,return makeLiteral(Preconditions.checkNotNull(date),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1082,return makeLiteral(Preconditions.checkNotNull(time),
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1099,return makeLiteral(Preconditions.checkNotNull(timestamp),
core/src/main/java/org/apache/calcite/rex/RexCall.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCall.java,59,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rex/RexCall.java,60,this.op = Preconditions.checkNotNull(op);
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexCorrelVariable.java,41,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,119,new RexToLixTranslator.InputGetter() {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,120,public Expression field(BlockBuilder list, int index,
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,121,Type storageType) {
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,122,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,207,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,208,this.typeName = Preconditions.checkNotNull(typeName);
core/src/main/java/org/apache/calcite/rex/RexOver.java,69,this.window = Preconditions.checkNotNull(window);
core/src/main/java/org/apache/calcite/rex/RexPermuteInputsShuttle.java,69,ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/rex/RexProgram.java,36,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/rex/RexProgram.java,515,final List<RexNode> filters = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,69,this.inputRowType = Preconditions.checkNotNull(inputRowType);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,70,this.rexBuilder = Preconditions.checkNotNull(rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,25,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,272,return Iterables.transform(iterable, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,273,public RexNode apply(@Nullable RexNode t) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,274,return t == null ? null : t.accept(RexShuttle.this);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,65,this.rexBuilder = Preconditions.checkNotNull(rexBuilder);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,67,this.executor = Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,816,executor.reduce(rexBuilder, ImmutableList.<RexNode>of(e), reducedValues);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,817,return Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,192,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,193,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,194,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,195,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,196,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,197,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,198,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,199,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,200,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,202,List<SqlNode> operandList =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,203,new ArrayList<SqlNode>(Arrays.asList(operands));
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,204,SqlDataTypeSpec typeSpec =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,205,SqlTypeUtil.convertTypeToSpec(call.getType());
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,206,operandList.add(typeSpec);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,207,return new SqlBasicCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,208,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,209,operandList.toArray(new SqlNode[operandList.size()]),
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,210,SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,223,op,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,224,new RexSqlConvertlet() {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,225,public SqlNode convertCall(
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,226,RexToSqlNodeConverter converter,
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,227,RexCall call) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,228,assert op instanceof SqlCaseOperator;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,229,SqlNode[] operands =
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,230,convertExpressionList(converter, call.operands);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,231,if (operands == null) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,232,return null;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,234,SqlNodeList whenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,235,SqlNodeList thenList = new SqlNodeList(SqlParserPos.ZERO);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,236,int i = 0;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,237,while (i < operands.length - 1) {
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,238,whenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,239,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,240,thenList.add(operands[i]);
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,241,++i;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,243,SqlNode elseExpr = operands[i];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,244,SqlNode[] newOperands = new SqlNode[3];
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,245,newOperands[0] = whenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,246,newOperands[1] = thenList;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,247,newOperands[2] = elseExpr;
core/src/main/java/org/apache/calcite/rex/RexSqlStandardConvertletTable.java,248,return op.createCall(null, SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,70,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,81,ImmutableList.<RexNode>of(), rel);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,32,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,48,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,49,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,50,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,55,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,56,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,74,private static final Function<? super RexNode, ? extends RexNode> ADD_NOT =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,75,new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,76,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,77,return new RexCall(input.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,78,ImmutableList.of(input));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,82,private static final Predicate1<RexNode> IS_FLAT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,83,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,84,public boolean apply(RexNode v1) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,85,return isFlat(v1);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,89,private static final Function<Object, String> TO_STRING =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,90,new Function<Object, String>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,91,public String apply(Object input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,92,return input.toString();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,96,private static final Function<RexNode, RelDataType> TYPE_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,97,new Function<RexNode, RelDataType>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,98,public RelDataType apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,99,return input.getType();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,103,private static final Function<RelDataType, RelDataTypeFamily> FAMILY_FN =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,104,new Function<RelDataType, RelDataTypeFamily>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,105,public RelDataTypeFamily apply(RelDataType input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,106,return input.getFamily();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,568,List<RexNode> conjuctions = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1059,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1093,return Preconditions.checkNotNull(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1123,final Set<String> digests = Sets.newHashSet(); // to eliminate duplicates
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1255,return Iterables.transform(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1256,nodes, new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1257,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1258,return input.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1362,|| !exists(exprs,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1363,new Predicate1<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1364,public boolean apply(RexNode expr) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1365,return isCallTo(expr, op);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1380,&& all(call.getOperands(), IS_FLAT_PREDICATE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1634,return Lists.transform(nodes, TYPE_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1638,return Lists.transform(types, FAMILY_FN);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1750,return new RexCall(e.getType(), SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1751,ImmutableList.of(e));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1878,new PredicateImpl<RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1879,public boolean test(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1880,switch (input.getKind()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1881,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1882,RexCall call2 = (RexCall) input;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1885,&& call2.getOperands().get(1) instanceof RexLiteral) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1886,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1889,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1896,Iterables.transform(notTerms, notFn(rexBuilder))),
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1915,public static Function<RexNode, RexNode> notFn(final RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1916,return new Function<RexNode, RexNode>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1917,public RexNode apply(RexNode input) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1922,: input.getKind() == SqlKind.NOT
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1924,: rexBuilder.makeCall(SqlStdOperatorTable.NOT, input);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2225,final List<RexNode> cnfOperands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2248,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2262,return toCnf2(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2265,return toCnf2(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2303,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2314,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2329,final Map<String, RexNode> map = Maps.newHashMap();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2344,List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2364,return Lists.transform(list, TO_STRING);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2386,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2403,return toDnf(and(Lists.transform(flattenOr(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2406,return toDnf(or(Lists.transform(flattenAnd(operands), ADD_NOT)));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2416,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2502,public static final Predicate<Project> PROJECT_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2503,new PredicateImpl<Project>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2504,public boolean test(Project project) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2505,for (RexNode node : project.getProjects()) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2506,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2507,node.accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2509,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2512,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2518,new PredicateImpl<Filter>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2519,public boolean test(Filter filter) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2520,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2521,filter.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2522,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2524,return true;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2530,public static final Predicate<Join> JOIN_PREDICATE =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2531,new PredicateImpl<Join>() {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2532,public boolean test(Join join) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2533,try {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2534,join.getCondition().accept(INSTANCE);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2535,return false;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2537,return true;
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,52,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,71,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,139,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/BinarySearch.java,161,Functions.<T>identitySelector(), comparator);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,23,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,33,private static final Function1<?, ?> SLICE =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,34,new Function1<Object[], Object>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,35,public Object apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,36,return a0[0];
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,40,private static final Function1<Object[], Row> ARRAY_TO_ROW =
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,41,new Function1<Object[], Row>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,42,public Row apply(Object[] a0) {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,43,return Row.asCopy(a0);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,53,return enumerable.select((Function1<E[], E>) SLICE);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,59,return enumerable.select(ARRAY_TO_ROW);
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,66,return new Supplier<Enumerable<Row>>() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,67,public Enumerable<Row> get() {
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,68,return toRow(supplier.get());
core/src/main/java/org/apache/calcite/runtime/Hook.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/runtime/Hook.java,87,private final List<Function<Object, Object>> handlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,90,private final ThreadLocal<List<Function<Object, Object>>> threadHandlers =
core/src/main/java/org/apache/calcite/runtime/Hook.java,91,new ThreadLocal<List<Function<Object, Object>>>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,92,protected List<Function<Object, Object>> initialValue() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,93,return new ArrayList<>();
core/src/main/java/org/apache/calcite/runtime/Hook.java,111,public <T, R> Closeable add(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,113,handlers.add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,114,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,115,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,116,remove(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,122,private boolean remove(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,127,public <T, R> Closeable addThread(final Function<T, R> handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,129,threadHandlers.get().add((Function<Object, Object>) handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,130,return new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,131,public void close() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,132,removeThread(handler);
core/src/main/java/org/apache/calcite/runtime/Hook.java,138,private boolean removeThread(Function handler) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,145,public static <V> Function<Holder<V>, Void> property(final V v) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,146,return new Function<Holder<V>, Void>() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,147,public Void apply(Holder<V> holder) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,148,holder.set(v);
core/src/main/java/org/apache/calcite/runtime/Hook.java,149,return null;
core/src/main/java/org/apache/calcite/runtime/Hook.java,156,for (Function<Object, Object> handler : handlers) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,157,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,159,for (Function<Object, Object> handler : threadHandlers.get()) {
core/src/main/java/org/apache/calcite/runtime/Hook.java,160,handler.apply(arg);
core/src/main/java/org/apache/calcite/runtime/Hook.java,175,Closeable EMPTY =
core/src/main/java/org/apache/calcite/runtime/Hook.java,176,new Closeable() {
core/src/main/java/org/apache/calcite/runtime/Hook.java,177,public void close() {}
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,30,import javax.net.ssl.HostnameVerifier;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,32,import javax.net.ssl.SSLSession;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,52,httpsConn.setHostnameVerifier(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,53,new HostnameVerifier() {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,54,public boolean verify(String arg0, SSLSession arg1) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,55,return true;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,55,new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,56,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,57,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,58,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,59,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,60,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,61,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,63,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,65,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,66,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,67,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,68,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,69,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,71,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,77,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,78,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,79,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,80,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,81,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,82,if (metaData.getColumnType(i + 1) == Types.TIMESTAMP) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,83,long v = resultSet.getLong(i + 1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,84,if (v == 0 && resultSet.wasNull()) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,85,list.add(null);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,87,list.add(v);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,90,list.add(resultSet.getObject(i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,93,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,95,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,229,return new Function1<ResultSet, Function0<Object>>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,230,public Function0<Object> apply(final ResultSet resultSet) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,231,final ResultSetMetaData metaData;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,232,final int columnCount;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,234,metaData = resultSet.getMetaData();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,235,columnCount = metaData.getColumnCount();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,239,assert columnCount == primitives.length;
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,240,if (columnCount == 1) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,241,return new Function0<Object>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,242,public Object apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,243,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,244,return resultSet.getObject(1);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,246,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,252,return (Function0) new Function0<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,253,public Object[] apply() {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,254,try {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,255,final List<Object> list = new ArrayList<Object>();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,256,for (int i = 0; i < columnCount; i++) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,257,list.add(primitives[i].jdbcGet(resultSet, i + 1));
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,259,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,261,throw new RuntimeException(e);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,77,new Function1<List<Object>, Enumerable<Object>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,78,public Enumerable<Object> apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,79,return Linq4j.asEnumerable(list);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,85,new Function1<Object[], Enumerable<Object[]>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,86,public Enumerable<Object[]> apply(Object[] lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,87,final List<Enumerator<Object>> enumerators = new ArrayList<>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,88,for (Object list : lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,89,enumerators.add(Linq4j.enumerator((List) list));
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,91,final Enumerator<List<Object>> product = Linq4j.product(enumerators);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,92,return new AbstractEnumerable<Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,93,public Enumerator<Object[]> enumerator() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,94,return Linq4j.transform(product,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,95,new Function1<List<Object>, Object[]>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,96,public Object[] apply(List<Object> list) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,97,return list.toArray();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,112,new ThreadLocal<Map<String, AtomicLong>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,114,return new HashMap<String, AtomicLong>();
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1980,return new Function1<Object, Enumerable<ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1981,public Enumerable<ComparableList<Comparable>> apply(Object row) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1982,return p2(new Object[] { row }, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1983,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1988,return new Function1<Object, Enumerable<FlatLists.ComparableList<Comparable>>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1989,public Enumerable<FlatLists.ComparableList<Comparable>> apply(Object lists) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1990,return p2((Object[]) lists, fieldCounts, withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1991,inputTypes);
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2011,Linq4j.enumerator(list),
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2012,new Function1<Comparable, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2013,public List<Comparable> apply(Comparable a0) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2014,return FlatLists.of(a0);
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,30,com.google.common.base.Function<FunctionParameter, String> NAME_FN =
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,31,new com.google.common.base.Function<FunctionParameter, String>() {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,32,public String apply(FunctionParameter p) {
core/src/main/java/org/apache/calcite/schema/FunctionParameter.java,33,return p.getName();
core/src/main/java/org/apache/calcite/schema/Schemas.java,38,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/schema/Schemas.java,63,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,64,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,65,CalciteSchema.TableEntry> TO_TABLE_ENTRY =
core/src/main/java/org/apache/calcite/schema/Schemas.java,66,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,67,CalciteSchema.TableEntry>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,68,public CalciteSchema.TableEntry apply(
core/src/main/java/org/apache/calcite/schema/Schemas.java,69,CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,70,final CalciteSchema.TableEntry starTable = entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,72,== Schema.TableType.STAR;
core/src/main/java/org/apache/calcite/schema/Schemas.java,73,return entry.getStarTable();
core/src/main/java/org/apache/calcite/schema/Schemas.java,77,private static final com.google.common.base.Function<
core/src/main/java/org/apache/calcite/schema/Schemas.java,78,CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,79,Lattice> TO_LATTICE =
core/src/main/java/org/apache/calcite/schema/Schemas.java,80,new com.google.common.base.Function<CalciteSchema.LatticeEntry,
core/src/main/java/org/apache/calcite/schema/Schemas.java,81,Lattice>() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,82,public Lattice apply(CalciteSchema.LatticeEntry entry) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,83,return entry.getLattice();
core/src/main/java/org/apache/calcite/schema/Schemas.java,248,return table.scan(root, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/schema/Schemas.java,256,return table.scan(root, ImmutableList.<RexNode>of(),
core/src/main/java/org/apache/calcite/schema/Schemas.java,424,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,425,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,426,return table.getRowType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,435,return new RelProtoDataType() {
core/src/main/java/org/apache/calcite/schema/Schemas.java,436,public RelDataType apply(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,437,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/Schemas.java,448,return Lists.transform(list, TO_TABLE_ENTRY);
core/src/main/java/org/apache/calcite/schema/Schemas.java,456,return Lists.transform(list, TO_LATTICE);
core/src/main/java/org/apache/calcite/schema/Schemas.java,464,final List<CalciteSchema.LatticeEntry> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/schema/Schemas.java,496,String t = Preconditions.checkNotNull(base);
core/src/main/java/org/apache/calcite/schema/Schemas.java,534,list.add(Pair.<String, Schema>of(s.getName(), s));
core/src/main/java/org/apache/calcite/schema/Schemas.java,576,new PathImpl(ImmutableList.<Pair<String, Schema>>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,48,return ImmutableList.<RelReferentialConstraint>of();
core/src/main/java/org/apache/calcite/schema/Statistics.java,62,return of(null, ImmutableList.<ImmutableBitSet>of(),
core/src/main/java/org/apache/calcite/schema/Statistics.java,63,referentialConstraints, ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,69,return of(rowCount, keys, ImmutableList.<RelReferentialConstraint>of(),
core/src/main/java/org/apache/calcite/schema/Statistics.java,70,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/schema/Statistics.java,78,return of(rowCount, keys, ImmutableList.<RelReferentialConstraint>of(), collations);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,73,this.initMethod = Preconditions.checkNotNull(initMethod);
core/src/main/java/org/apache/calcite/schema/impl/AggregateFunctionImpl.java,74,this.addMethod = Preconditions.checkNotNull(addMethod);
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,33,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/MaterializedViewTable.java,110,this.key = Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,41,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,188,final Map<Integer, RexNode> projectMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,37,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/schema/impl/StarTable.java,66,this.lattice = Preconditions.checkNotNull(lattice);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,49,this.operator = Preconditions.checkNotNull(operator);
core/src/main/java/org/apache/calcite/sql/SqlBasicCall.java,68,this.operator = Preconditions.checkNotNull(operator);
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,23,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,35,private static final Function<SqlLiteral, BitString> F =
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,36,new Function<SqlLiteral, BitString>() {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,37,public BitString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,38,return ((SqlBinaryStringLiteral) literal).getBitString();
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,73,BitString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlCall.java,87,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,33,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,157,return Lists.transform(operator.getParamNames(),
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,158,new Function<String, SqlNode>() {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,159,public SqlNode apply(String paramName) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,160,for (SqlNode operand2 : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,161,final SqlCall call2 = (SqlCall) operand2;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,162,assert operand2.getKind() == SqlKind.ARGUMENT_ASSIGNMENT;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,163,final SqlIdentifier id = call2.operand(1);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,164,if (id.getSimple().equals(paramName)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,165,return call2.operand(0);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,168,return DEFAULT_CALL;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,25,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,37,private static final Function<SqlLiteral, NlsString> F =
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,38,new Function<SqlLiteral, NlsString>() {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,39,public NlsString apply(SqlLiteral literal) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,40,return ((SqlCharStringLiteral) literal).getNlsString();
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,86,NlsString.concat(Lists.transform(literals, F)),
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,31,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,344,Preconditions.checkNotNull(
core/src/main/java/org/apache/calcite/sql/SqlDataTypeSpec.java,358,Preconditions.checkNotNull(SqlTypeName.get(collectionName),
core/src/main/java/org/apache/calcite/sql/SqlDescribeSchema.java,67,return ImmutableNullableList.<SqlNode>of(schema);
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,78,return ImmutableNullableList.<SqlNode>of(table, column);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,653,private String databaseProductName;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,654,private String quoteString;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,655,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,660,this.quoteString = quoteString;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,19,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,43,private static final Function1<Integer, String> ARG_FN =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,44,new Function1<Integer, String>() {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,45,public String apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,46,return "arg" + a0;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,126,this.category = Preconditions.checkNotNull(category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,164,return Functions.generate(paramTypes.size(), ARG_FN);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,29,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,40,private static final Function<String, String> STAR_TO_EMPTY =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,41,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,42,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,43,return s.equals("*") ? "" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,47,private static final Function<String, String> EMPTY_TO_STAR =
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,48,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,49,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,50,return s.equals("") ? "*" : s.equals("*") ? "\"*\"" : s;
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,134,return new SqlIdentifier(Lists.transform(names, STAR_TO_EMPTY), null, pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,159,return Lists.transform(names, EMPTY_TO_STAR);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,178,String[] nameArray = names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,277,return new SqlIdentifier(Lists.transform(id.names, STAR_TO_EMPTY), null, id.pos,
core/src/main/java/org/apache/calcite/sql/SqlIdentifier.java,278,id.componentPositions);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,112,TimeUnitRange.of(Preconditions.checkNotNull(startUnit), endUnit);
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlJdbcFunctionCall.java,603,this.order = Preconditions.checkNotNull(order);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,63,this.natural = Preconditions.checkNotNull(natural);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,64,this.joinType = Preconditions.checkNotNull(joinType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,66,this.conditionType = Preconditions.checkNotNull(conditionType);
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,70,Preconditions.checkNotNull(conditionType.symbolValue(JoinConditionType.class));
core/src/main/java/org/apache/calcite/sql/SqlJoin.java,71,Preconditions.checkNotNull(joinType.symbolValue(JoinType.class));
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,76,this.tableRef = Preconditions.checkNotNull(tableRef);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,77,this.pattern = Preconditions.checkNotNull(pattern);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,80,this.patternDefList = Preconditions.checkNotNull(patternDefList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,82,this.measureList = Preconditions.checkNotNull(measureList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,88,this.partitionList = Preconditions.checkNotNull(partitionList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,89,this.orderList = Preconditions.checkNotNull(orderList);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,119,tableRef = Preconditions.checkNotNull(operand);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,131,patternDefList = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,135,measureList = Preconditions.checkNotNull((SqlNodeList) operand);
core/src/main/java/org/apache/calcite/sql/SqlNode.java,30,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/SqlNode.java,60,this.pos = Preconditions.checkNotNull(pos);
core/src/main/java/org/apache/calcite/sql/SqlNodeList.java,175,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,299,operandList.toArray(new SqlNode[operandList.size()]));
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,24,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/SqlSetOption.java,110,final List<SqlNode> operandList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlSpecialOperator.java,26,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,27,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,42,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,45,import com.google.common.collect.Iterables;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,74,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,91,ArrayList<SqlNode> list = new ArrayList<SqlNode>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,390,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,391,public boolean test(SqlOperator input) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,392,return input.getKind() == sqlKind;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,493,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,494,public boolean test(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,495,return operator.getSyntax() == syntax;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,505,new PredicateImpl<SqlOperator>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,506,public boolean test(SqlOperator operator) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,507,SqlOperandCountRange od = operator.getOperandCountRange();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,508,return od.isValidCount(argTypes.size());
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,527,new PredicateImpl<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,528,public boolean test(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,529,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,530,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,532,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,534,final List<RelDataType> permutedArgTypes;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,535,if (argNames != null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,538,final Map<Integer, Integer> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,539,for (Ord<String> argName : Ord.zip(argNames)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,540,final int i = function.getParamNames().indexOf(argName.e);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,541,if (i < 0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,542,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,544,map.put(i, argName.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,546,permutedArgTypes = Functions.generate(paramTypes.size(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,547,new Function1<Integer, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,548,public RelDataType apply(Integer a0) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,549,if (map.containsKey(a0)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,550,return argTypes.get(map.get(a0));
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,552,return null;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,557,permutedArgTypes = Lists.newArrayList(argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,558,while (permutedArgTypes.size() < argTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,559,paramTypes.add(null);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,562,for (Pair<RelDataType, RelDataType> p
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,563,: Pair.zip(paramTypes, permutedArgTypes)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,564,final RelDataType argType = p.right;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,565,final RelDataType paramType = p.left;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,566,if (argType != null
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,567,&& !SqlTypeUtil.canCastFrom(paramType, argType, false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,568,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,571,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,595,sqlFunctions =
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,596,Lists.newArrayList(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,597,Iterables.filter(sqlFunctions,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,598,new PredicateImpl<SqlFunction>() {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,599,public boolean test(SqlFunction function) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,600,final List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,601,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,602,return false;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,604,final RelDataType paramType = paramTypes.get(argType.i);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,605,return precList.compareTypePrecedence(paramType, bestMatch) >= 0;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,684,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,934,private final List<SqlNode> ancestors = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,951,if (predicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,958,if (postPredicate.apply(node)) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,21,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,243,new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,244,public boolean test(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,245,return input instanceof SqlIdentifier
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,247,.equals(UPPER_HINT_TOKEN);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,250,new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,251,public boolean test(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisor.java,252,return input.getParserPosition().startsAt(pos);
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,21,import org.apache.calcite.adapter.enumerable.NotNullImplementor;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,24,import org.apache.calcite.adapter.enumerable.RexToLixTranslator;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorHint.java,46,: names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,24,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,47,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,48,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,49,final List<RelDataType> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,50,for (int i = 1, n = opBinding.getOperandCount(); i < n; i++) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,51,if (i < n - 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,52,++i;
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,54,list.add(opBinding.getOperandType(i));
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,56,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,57,RelDataType type = typeFactory.leastRestrictive(list);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,58,if (opBinding.getOperandCount() % 2 == 1) {
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,59,type = typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/fun/OracleSqlOperatorTable.java,61,return type;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,23,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,59,ReturnTypes.cascade(ReturnTypes.ARG0, new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,60,public RelDataType transformType(SqlOperatorBinding binding,
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,61,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,63,SqlTypeTransform transform;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,64,if (binding.getOperandCount() < 3) {
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,65,transform = SqlTypeTransforms.FORCE_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,67,RelDataType defValueType = binding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,69,? SqlTypeTransforms.FORCE_NULLABLE
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,70,: SqlTypeTransforms.TO_NOT_NULLABLE;
core/src/main/java/org/apache/calcite/sql/fun/SqlLeadLagAggFunction.java,72,return transform.transformType(binding, type);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2150,Pair.<SqlNode, AuxiliaryConverter>of(copy(call, f),
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2161,return new SqlBasicCall(operator, list.toArray(new SqlNode[list.size()]),
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,25,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,60,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,61,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,62,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,35,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,394,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,237,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,242,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,247,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,282,this.parserFactory = Preconditions.checkNotNull(factory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,320,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,321,this.quotedCasing = Preconditions.checkNotNull(quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,322,this.unquotedCasing = Preconditions.checkNotNull(unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,323,this.quoting = Preconditions.checkNotNull(quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,324,this.parserFactory = Preconditions.checkNotNull(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,21,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,49,private static final Function<SqlNode, SqlParserPos> NODE_TO_POS =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,50,new Function<SqlNode, SqlParserPos>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,51,public SqlParserPos apply(SqlNode input) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,52,return input.getParserPosition();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,193,return Iterables.transform(nodes, NODE_TO_POS);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserPos.java,201,return sum(Lists.transform(nodes, NODE_TO_POS));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,23,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,50,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,574,return list.toArray(new String[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,578,return list.toArray(new SqlNode[list.size()]);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,611,Preconditions.checkNotNull(list);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,654,final Predicate<PrecedenceClimbingParser.Token> predicate =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,655,new PredicateImpl<PrecedenceClimbingParser.Token>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,656,public boolean test(PrecedenceClimbingParser.Token t) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,657,if (t instanceof PrecedenceClimbingParser.Op) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,658,final SqlOperator op = ((ToTreeListItem) t.o).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,659,return stopperKind != SqlKind.OTHER
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,660,&& op.kind == stopperKind
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,661,|| minPrec > 0
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,662,&& op.getLeftPrec() < minPrec;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,664,return false;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,668,PrecedenceClimbingParser parser = list.parser(start, predicate);
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,817,public PrecedenceClimbingParser parser(int start, Predicate
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,818,<PrecedenceClimbingParser.Token> predicate) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,891,new PrecedenceClimbingParser.Special() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,892,public PrecedenceClimbingParser.Result apply(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,893,PrecedenceClimbingParser parser,
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,894,PrecedenceClimbingParser.SpecialOp op) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,895,final List<PrecedenceClimbingParser.Token> tokens =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,896,parser.all();
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,897,final SqlSpecialOperator op1 =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,898,(SqlSpecialOperator) ((ToTreeListItem) op.o).op;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,899,SqlSpecialOperator.ReduceResult r =
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,900,op1.reduceExpr(tokens.indexOf(op),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,901,new TokenSequenceImpl(parser));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,902,return new PrecedenceClimbingParser.Result(
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,903,tokens.get(r.startOrdinal),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,904,tokens.get(r.endOrdinal - 1),
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,905,parser.atom(r.node));
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,950,new ThreadLocal<Format>() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,952,return new Format();
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,1184,return names.toArray(new String[names.size()]);
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ArraySqlType.java,40,this.elementType = Preconditions.checkNotNull(elementType);
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/ComparableOperandTypeChecker.java,48,this.consistency = Preconditions.checkNotNull(consistency);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,96,this.allowedRules = Preconditions.checkNotNull(allowedRules);
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,97,this.composition = Preconditions.checkNotNull(composition);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,27,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,58,return optional.apply(i);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,123,while (min > 0 && optional.apply(min - 1)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,21,import org.apache.calcite.sql.SqlCallBinding;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,42,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,43,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,44,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,45,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,46,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,47,final RelDataType unknownType =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,48,callBinding.getValidator().getUnknownType();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,49,RelDataType knownType = unknownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,50,for (SqlNode operand : callBinding.operands()) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,51,knownType = callBinding.getValidator().deriveType(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,52,callBinding.getScope(), operand);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,53,if (!knownType.equals(unknownType)) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,54,break;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,63,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,64,operandTypes[i] = knownType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,75,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,76,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,77,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,78,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,79,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,80,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,81,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,84,: returnType;
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,94,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,95,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,96,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,97,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,98,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,99,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,100,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,101,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,102,typeFactory.createSqlType(SqlTypeName.BOOLEAN);
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,115,new SqlOperandTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,116,public void inferOperandTypes(
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,117,SqlCallBinding callBinding,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,118,RelDataType returnType,
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,119,RelDataType[] operandTypes) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,120,RelDataTypeFactory typeFactory = callBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,121,for (int i = 0; i < operandTypes.length; ++i) {
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,122,operandTypes[i] =
core/src/main/java/org/apache/calcite/sql/type/InferTypes.java,123,typeFactory.createSqlType(SqlTypeName.VARCHAR, 1024);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,50,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,51,this.intervalQualifier = Preconditions.checkNotNull(intervalQualifier);
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,86,TimeUnit thisStart = Preconditions.checkNotNull(typeName.getStartUnit());
core/src/main/java/org/apache/calcite/sql/type/IntervalSqlType.java,89,Preconditions.checkNotNull(that.typeName.getStartUnit());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,28,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,29,import com.google.common.base.Predicates;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,64,Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,81,return family(families, Predicates.<Integer>alwaysFalse());
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,280,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,480,Predicates.<Integer>alwaysFalse()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,189,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,194,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,195,final int n = opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,196,RelDataType type1 = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,197,for (int i = 0; i < n; i++) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,198,type1 = opBinding.getOperandType(i);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,199,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,200,break;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,203,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,303,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,304,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,305,return opBinding.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,306,opBinding.collectOperandTypes());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,313,public static final SqlReturnTypeInference MULTISET =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,314,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,315,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,316,final SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,317,ExplicitOperatorBinding newBinding =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,318,new ExplicitOperatorBinding(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,319,opBinding,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,320,new AbstractList<RelDataType>() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,321,public RelDataType get(int index) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,322,RelDataType type =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,324,.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,325,assert type != null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,326,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,329,public int size() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,330,return opBinding.getOperandCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,334,RelDataType biggestElementType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,335,LEAST_RESTRICTIVE.inferReturnType(newBinding);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,336,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,337,biggestElementType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,338,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,386,public static final SqlReturnTypeInference DECIMAL_SCALE0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,387,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,388,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,389,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,390,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,391,if (SqlTypeUtil.isDecimal(type1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,392,if (type1.getScale() == 0) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,393,return type1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,395,int p = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,396,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,397,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,398,opBinding.getTypeFactory().createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,399,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,400,p,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,401,0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,402,if (type1.isNullable()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,403,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,405,.createTypeWithNullability(ret, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,407,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,410,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,426,public static final SqlReturnTypeInference DECIMAL_PRODUCT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,427,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,428,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,429,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,430,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,431,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,432,return typeFactory.createDecimalProduct(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,459,public static final SqlReturnTypeInference DECIMAL_QUOTIENT =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,460,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,461,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,462,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,463,RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,464,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,465,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,466,return typeFactory.createDecimalQuotient(type1, type2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,503,public static final SqlReturnTypeInference DECIMAL_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,504,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,505,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,506,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,507,RelDataType type1 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,508,RelDataType type2 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,510,&& SqlTypeUtil.isExactNumeric(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,512,|| SqlTypeUtil.isDecimal(type2)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,513,int p1 = type1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,514,int p2 = type2.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,515,int s1 = type1.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,516,int s2 = type2.getScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,518,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,519,int scale = Math.max(s1, s2);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,520,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,521,assert scale <= typeSystem.getMaxNumericScale();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,522,int precision = Math.max(p1 - s1, p2 - s2) + scale + 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,523,precision =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,524,Math.min(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,525,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,526,typeSystem.getMaxNumericPrecision());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,527,assert precision > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,529,return typeFactory.createSqlType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,530,SqlTypeName.DECIMAL,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,531,precision,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,532,scale);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,536,return null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,574,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,575,public RelDataType inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,576,final RelDataType argType0 = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,577,final RelDataType argType1 = opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,579,final boolean containsAnyType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,581,|| (argType1.getSqlTypeName() == SqlTypeName.ANY);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,583,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,585,&& SqlTypeUtil.inCharOrBinaryFamilies(argType1))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,586,Preconditions.checkArgument(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,587,SqlTypeUtil.sameNamedType(argType0, argType1));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,589,SqlCollation pickedCollation = null;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,590,if (!containsAnyType
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,591,&& SqlTypeUtil.inCharFamily(argType0)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,592,if (!SqlTypeUtil.isCharTypeComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,593,opBinding.collectOperandTypes().subList(0, 2))) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,594,throw opBinding.newError(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,595,RESOURCE.typeNotComparable(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,596,argType0.getFullTypeString(),
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,597,argType1.getFullTypeString()));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,600,pickedCollation =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,601,SqlCollation.getCoercibilityDyadicOperator(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,602,argType0.getCollation(), argType1.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,603,assert null != pickedCollation;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,607,SqlTypeName typeName =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,608,argType0.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,609,if (SqlTypeUtil.isBoundedVariableWidth(argType1)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,610,typeName = argType1.getSqlTypeName();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,613,RelDataType ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,614,int typePrecision;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,615,final long x =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,616,(long) argType0.getPrecision() + (long) argType1.getPrecision();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,617,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,618,final RelDataTypeSystem typeSystem = typeFactory.getTypeSystem();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,619,if (argType0.getPrecision() == RelDataType.PRECISION_NOT_SPECIFIED
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,620,|| argType1.getPrecision() == RelDataType.PRECISION_NOT_SPECIFIED
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,621,|| x > typeSystem.getMaxPrecision(typeName)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,622,typePrecision = RelDataType.PRECISION_NOT_SPECIFIED;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,624,typePrecision = (int) x;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,627,ret = typeFactory.createSqlType(typeName, typePrecision);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,628,if (null != pickedCollation) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,629,RelDataType pickedType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,630,if (argType0.getCollation().equals(pickedCollation)) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,631,pickedType = argType0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,633,pickedType = argType1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,635,throw new AssertionError("should never come here");
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,637,ret =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,638,typeFactory.createTypeWithCharsetAndCollation(ret,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,639,pickedType.getCharset(), pickedType.getCollation());
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,641,return ret;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,668,public static final SqlReturnTypeInference SCOPE =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,669,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,670,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,671,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,672,SqlCallBinding callBinding = (SqlCallBinding) opBinding;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,673,return callBinding.getValidator().getNamespace(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,674,callBinding.getCall()).getRowType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,683,public static final SqlReturnTypeInference MULTISET_PROJECT0 =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,684,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,685,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,686,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,687,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,688,final RelDataType recordMultisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,689,opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,690,RelDataType multisetType =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,691,recordMultisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,692,assert multisetType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,693,+ recordMultisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,694,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,695,multisetType.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,696,assert fields.size() > 0;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,697,final RelDataType firstColType = fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,698,return opBinding.getTypeFactory().createMultisetType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,699,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,700,-1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,708,public static final SqlReturnTypeInference MULTISET_RECORD =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,709,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,710,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,711,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,712,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,713,final RelDataType multisetType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,714,RelDataType componentType = multisetType.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,715,assert componentType != null : "expected a multiset type: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,716,+ multisetType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,717,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,719,.add(SqlUtil.deriveAliasFromOrdinal(0), componentType).build();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,720,return typeFactory.createMultisetType(type, -1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,727,public static final SqlReturnTypeInference RECORD_TO_SCALAR =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,728,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,729,public RelDataType inferReturnType(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,730,SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,731,assert opBinding.getOperandCount() == 1;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,733,final RelDataType recordType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,735,boolean isStruct = recordType.isStruct();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,736,int fieldCount = recordType.getFieldCount();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,738,assert isStruct && (fieldCount == 1);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,740,RelDataTypeField fieldType = recordType.getFieldList().get(0);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,741,assert fieldType != null
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,742,: "expected a record type with one field: "
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,743,+ recordType;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,744,final RelDataType firstColType = fieldType.getType();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,745,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,746,firstColType,
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,747,true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,758,public static final SqlReturnTypeInference AGG_SUM =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,759,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,761,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,762,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,764,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,765,if (opBinding.getGroupCount() == 0 || opBinding.hasFilter()) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,766,return typeFactory.createTypeWithNullability(type, true);
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,768,return type;
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,780,new SqlReturnTypeInference() {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,782,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,783,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,785,.deriveSumType(typeFactory, opBinding.getOperandType(0));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,25,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,47,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,48,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,49,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,50,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,51,return SqlTypeUtil.makeNullableIfOperandsAre(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,52,opBinding.getTypeFactory(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,54,Preconditions.checkNotNull(typeToTransform));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,63,public static final SqlTypeTransform TO_NULLABLE_ALL =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,64,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,65,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,66,RelDataType type) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,67,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,68,return typeFactory.createTypeWithNullability(type,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,69,SqlTypeUtil.allNullable(opBinding.collectOperandTypes()));
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,78,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,79,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,80,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,81,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,82,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,83,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,84,false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,93,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,94,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,95,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,96,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,97,return opBinding.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,98,Preconditions.checkNotNull(typeToTransform),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,99,true);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,161,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,162,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,163,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,164,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,165,return typeToTransform.getComponentType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,176,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,177,public RelDataType transformType(SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,178,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,179,return opBinding.getTypeFactory().createMultisetType(typeToTransform,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,180,-1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,190,new SqlTypeTransform() {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,191,public RelDataType transformType(
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,192,SqlOperatorBinding opBinding,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,193,RelDataType typeToTransform) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,194,final List<RelDataTypeField> fields =
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,195,typeToTransform.getFieldList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,196,assert fields.size() == 1;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeTransforms.java,197,return fields.get(0).getType();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,38,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,40,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,67,List<RelDataType> argTypes2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,203,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1179,ImmutableList.<RelDataType>of(),
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1180,ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/sql/util/SqlShuttle.java,111,this.clonedOperands = operands.toArray(new SqlNode[operands.size()]);
core/src/main/java/org/apache/calcite/sql/validate/AggChecker.java,212,.acceptCall(this, call, true, ArgHandlerImpl.<Void>instance());
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,30,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,61,Suppliers.memoize(
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,62,new Supplier<Resolved>() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,63,public Resolved get() {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,64,assert temporaryGroupExprList == null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,65,temporaryGroupExprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,66,try {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,67,return resolve();
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,69,temporaryGroupExprList = null;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,152,return Pair.of(ImmutableList.<SqlNode>of(), groupExprs.build());
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,156,return Pair.of(ImmutableList.<SqlNode>of(),
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,163,return Pair.of(ImmutableList.<SqlNode>of(), ImmutableList.<SqlNode>of());
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,20,import org.apache.calcite.linq4j.function.Function1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,21,import org.apache.calcite.linq4j.function.Predicate1;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,25,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,55,.where(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,56,new Predicate1<SqlMoniker>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,57,public boolean apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,58,return input.getType() == SqlMonikerType.SCHEMA;
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,61,.select(
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,62,new Function1<SqlMoniker, List<String>>() {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,63,public List<String> apply(SqlMoniker input) {
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,64,return input.getFullyQualifiedNames();
core/src/main/java/org/apache/calcite/sql/validate/CatalogScope.java,67,.into(Sets.<List<String>>newHashSet());
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,463,Collections.sort(resolved.resolves, c);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,28,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,77,this.parentScope = Preconditions.checkNotNull(parentScope);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,167,resolvedNamespace = Preconditions.checkNotNull(resolveImpl(id));
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,26,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,60,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,70,return Lists.transform(children, ScopeChild.NAMESPACE_FN);
core/src/main/java/org/apache/calcite/sql/validate/ListScope.java,79,return Lists.transform(children, ScopeChild.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,24,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,40,this.names = Preconditions.checkNotNull(names);
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,19,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,32,static final Function<ScopeChild, SqlValidatorNamespace> NAMESPACE_FN =
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,33,new Function<ScopeChild, SqlValidatorNamespace>() {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,34,public SqlValidatorNamespace apply(ScopeChild input) {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,35,return input.namespace;
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,39,static final Function<ScopeChild, String> NAME_FN =
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,40,new Function<ScopeChild, String>() {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,41,public String apply(ScopeChild input) {
core/src/main/java/org/apache/calcite/sql/validate/ScopeChild.java,42,return input.name;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlIdentifierMoniker.java,40,this.id = Preconditions.checkNotNull(id);
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,23,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlMonikerImpl.java,45,this.type = Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,32,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,62,new Function<FunctionParameter, RelDataType>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,63,public RelDataType apply(FunctionParameter input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,64,return input.getType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,78,return Lists.transform(function.getParameters(), FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,24,import org.apache.calcite.linq4j.tree.ParameterExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,48,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,72,Preconditions.checkNotNull(paramTypes),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,79,FunctionParameter.NAME_FN);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,129,final List<Object> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,184,Expressions.lambda(bb.toBlock(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,185,Collections.<ParameterExpression>emptyList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,99,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,100,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,102,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,295,this.opTab = Preconditions.checkNotNull(opTab);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,296,this.catalogReader = Preconditions.checkNotNull(catalogReader);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,297,this.typeFactory = Preconditions.checkNotNull(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,298,this.conformance = Preconditions.checkNotNull(conformance);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1544,Preconditions.checkNotNull(type);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1545,Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1561,Preconditions.checkNotNull(scope);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1562,Preconditions.checkNotNull(expr);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1590,Bug.upgrade("guava-17");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1591,return Preconditions.checkNotNull(scope.nullifyType(operand, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1815,this.nullCollation = Preconditions.checkNotNull(nullCollation);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2286,Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2287,Preconditions.checkNotNull(enclosingNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2936,Preconditions.checkNotNull(targetRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3161,names = Lists.transform(names,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3162,new Function<String, String>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3163,public String apply(String s) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3164,return s.toUpperCase(Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3270,String inputs = Joiner.on(", ").join(scope.getChildNames());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3683,final Set<String> aliases = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4751,ImmutableList.<RelDataType>of(), null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4932,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4949,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4966,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4983,this.node = Preconditions.checkNotNull(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,28,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,29,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,237,return Lists.transform(steps(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,238,new Function<Step, String>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,239,public String apply(Step input) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,240,return input.name;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,263,this.parent = Preconditions.checkNotNull(parent);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,267,this.kind = Preconditions.checkNotNull(kind);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,317,this.namespace = Preconditions.checkNotNull(namespace);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorScope.java,320,this.path = Preconditions.checkNotNull(path);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,51,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,55,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,220,Lists.transform(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,221,sourceRowType.getFieldList(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,222,new RelDataTypeField.ToFieldIndex()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,717,GroupAnalyzer groupAnalyzer,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,794,List<ImmutableBitSet> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,898,Set<ImmutableBitSet> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,923,final Set<List<ImmutableBitSet>> builder = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,927,Set<ImmutableBitSet> flattenedBitSets = Sets.newLinkedHashSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,955,: ImmutableList.<SqlValidatorNamespace>of();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1043,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1044,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1045,return Util.first(original, "EXPR$") + attempt;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1050,new Suggester() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1051,public String apply(String original, int attempt, int size) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1052,return Util.first(original, "$f") + Math.max(size, attempt);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,23,import org.apache.calcite.runtime.PredicateImpl;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,32,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,33,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,51,this.table = Preconditions.checkNotNull(table);
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,56,this(validator, table, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,111,return new TableNamespace(
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,112,validator, validatorTable, ImmutableList.<RelDataTypeField>of());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,154,final Predicate<SqlNode> nameMatches = new PredicateImpl<SqlNode>() {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,156,if (sqlNode instanceof SqlIdentifier) {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,157,final SqlIdentifier identifier = (SqlIdentifier) sqlNode;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,158,return Util.last(identifier.names).equals(extendedField.getName());
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,160,return false;
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,164,Iterables.find(extendList.getList(), nameMatches);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,81,map.put(parameterType,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,82,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,83,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,84,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,85,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,86,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,87,return (RexNode) method.invoke(ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,88,cx, call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,90,throw new RuntimeException("while converting " + call, e);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,127,map.put(opClass,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,128,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,129,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,130,try {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,131,return (RexNode) method.invoke(ReflectiveConvertletTable.this,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,132,cx, call.getOperator(), call);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,134,throw new RuntimeException("while converting " + call, e);
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,194,alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,195,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,196,public RexNode convertCall(
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,197,SqlRexContext cx,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,198,SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,199,Preconditions.checkArgument(call.getOperator() == alias,
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,201,final SqlCall newCall =
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,202,target.createCall(SqlParserPos.ZERO, call.getOperandList());
core/src/main/java/org/apache/calcite/sql2rel/ReflectiveConvertletTable.java,203,return cx.convertExpression(newCall);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,89,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,90,import com.google.common.base.Supplier;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,97,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,98,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,100,import com.google.common.collect.Multimaps;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,121,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,169,private final HashSet<LogicalCorrelate> generatedCorRels = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,264,return new Function2<RelNode, RelNode, Void>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,265,public Void apply(RelNode oldNode, RelNode newNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,266,if (cm.mapRefRelToCorRef.containsKey(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,267,cm.mapRefRelToCorRef.putAll(newNode,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,268,cm.mapRefRelToCorRef.get(oldNode));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,270,if (oldNode instanceof LogicalCorrelate
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,271,&& newNode instanceof LogicalCorrelate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,272,LogicalCorrelate oldCor = (LogicalCorrelate) oldNode;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,273,CorrelationId c = oldCor.getCorrelationId();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,274,if (cm.mapCorToCorRel.get(c) == oldNode) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,275,cm.mapCorToCorRel.put(c, newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,278,if (generatedCorRels.contains(oldNode)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,279,generatedCorRels.add((LogicalCorrelate) newNode);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,282,return null;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,323,projectPulledAboveLeftCorrelator, null, ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,334,ImmutableSet.<Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,354,List<RelNode> newInputs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,374,ImmutableSortedMap.<CorDef, Integer>of());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,466,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,534,Map<Integer, Integer> combinedMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,546,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,557,List<Integer> aggArgs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,646,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,762,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,801,return new Frame(r, r, ImmutableSortedMap.<CorDef, Integer>of(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,909,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1127,ImmutableSet.<CorrelationId>of(), rel.getJoinType().toJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1159,ImmutableSet.<CorrelationId>of(), rel.getJoinType());
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1163,Map<Integer, Integer> mapOldToNewOutputs = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1263,List<Pair<RexNode, String>> newProjExprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1311,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1419,List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1478,this.currentRel = Preconditions.checkNotNull(currentRel);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1479,this.map = Preconditions.checkNotNull(map);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1480,this.cm = Preconditions.checkNotNull(cm);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1862,List<RexNode> tmpRightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1863,List<RexNode> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1962,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1981,operand(LogicalAggregate.class, null, Aggregate.IS_SIMPLE,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2031,final Set<Integer> isCountStar = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2069,List<RexNode> rightJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2070,List<RexNode> tmpCorrelatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2080,List<RexFieldAccess> correlatedJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2081,List<RexInputRef> correlatedInputRefJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2235,Pair.<RexNode, String>of(rexBuilder.makeLiteral(true),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2240,ImmutableSet.<CorrelationId>of(), joinType);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2255,List<RexNode> joinOutputProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2286,List<AggregateCall> newAggCalls = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2297,argList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2320,List<RexNode> newAggOutputProjectList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2384,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2443,Set<Integer> isCount = Sets.newHashSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2653,Multimaps.newSortedSetMultimap(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2654,new HashMap<RelNode, Collection<CorRef>>(),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2655,new Supplier<TreeSet<CorRef>>() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2656,public TreeSet<CorRef> get() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2657,Bug.upgrade("use MultimapBuilder when we're on Guava-16");
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2658,return Sets.newTreeSet();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2771,this.r = Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,67,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,844,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,845,public ImmutableBitSet apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,846,return Mappings.apply(inputMapping, input);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,76,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,78,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,131,private final Map<RelNode, RelNode> oldToNewRelMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,204,final List<RexNode> structuringExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,313,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,314,public Integer apply(Integer oldInput) {
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,315,return getNewForOldInput(oldInput);
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,470,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,502,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,584,Pair.<RexNode, String>of(
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,596,Pair.<RexNode, String>of(rexBuilder.makeLiteral(false),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,611,Collections.<String>nCopies(call.getOperands().size(), null),
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,659,final List<Pair<RexNode, String>> flattenedExpList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/RelStructuredTypeFlattener.java,840,final List<Pair<RexNode, String>> flattenedExps = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,170,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,177,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,178,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,316,this.cluster = Preconditions.checkNotNull(cluster);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,716,final Map<Integer, Integer> squished = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,718,final List<Pair<RexNode, String>> newProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,734,final List<Pair<RexNode, String>> undoProjects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1031,leftKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1106,ImmutableSet.<CorrelationId>of(), JoinRelType.INNER);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1413,new Function<Pair<RexNode, SqlNode>, RexNode>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1414,public RexNode apply(Pair<RexNode, SqlNode> pair) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1416,pair.left,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1417,ensureSqlType(pair.left.getType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1418,bb.convertExpression(pair.right)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2161,final Map<String, TreeSet<String>> subsetMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2370,joinCond, ImmutableSet.<CorrelationId>of(), joinType, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2382,final List<CorrelationId> correlNames = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2587,final List<RexNode> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2694,final List<Pair<RexNode, String>> projects = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3259,Collections.<RexNode>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3262,Collections.<String>nCopies(targetFields.size(), null));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3709,ImmutableSet.<CorrelationId>of(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4014,final List<Integer> leftJoinKeys = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4220,return Pair.<RexNode, Map<String, Integer>>of(c, fields.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4391,subQuery = Preconditions.checkNotNull(getSubQuery(expr));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4392,rex = Preconditions.checkNotNull(subQuery.expr);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4439,return Preconditions.checkNotNull(rex);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4627,private final Map<String, String> nameMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5139,ImmutableList.<RelCollation>of());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,23,import org.apache.calcite.rel.RelCollation;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,101,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,102,SqlStdOperatorTable.CHARACTER_LENGTH,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,104,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,105,SqlStdOperatorTable.IS_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,107,addAlias(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,108,SqlStdOperatorTable.IS_NOT_UNKNOWN,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,112,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,113,SqlStdOperatorTable.CAST,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,114,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,115,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,116,return convertCast(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,119,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,120,SqlStdOperatorTable.IS_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,121,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,122,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,123,return convertIsDistinctFrom(cx, call, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,126,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,127,SqlStdOperatorTable.IS_NOT_DISTINCT_FROM,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,128,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,129,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,130,return convertIsDistinctFrom(cx, call, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,134,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,135,SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,136,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,137,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,138,return convertPlus(cx, call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,143,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,144,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,145,final RexCall e =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,146,(RexCall) StandardConvertletTable.this.convertCall(cx, call,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,147,call.getOperator());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,148,switch (e.getOperands().get(0).getType().getSqlTypeName()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,149,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,150,case TIME:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,151,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,152,return convertDatetimeMinus(cx, SqlStdOperatorTable.MINUS_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,153,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,154,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,155,return e;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,169,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,170,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,171,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,172,final RexNode operand0 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,173,cx.convertExpression(call.getOperandList().get(0));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,174,final RexNode operand1 =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,175,cx.convertExpression(call.getOperandList().get(1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,176,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,177,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,178,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,179,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,180,rexBuilder.makeCall(SqlStdOperatorTable.IS_NOT_NULL,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,181,operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,182,rexBuilder.makeCast(type, operand0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,183,rexBuilder.makeCast(type, operand1)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,188,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,189,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,190,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,191,final List<RexNode> operands = convertExpressionList(cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,192,call.getOperandList(), SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,193,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,194,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,195,final List<RexNode> exprs = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,196,for (int i = 1; i < operands.size() - 1; i += 2) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,197,exprs.add(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,198,RelOptUtil.isDistinctFrom(rexBuilder, operands.get(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,199,operands.get(i), true));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,200,exprs.add(operands.get(i + 1));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,202,if (operands.size() % 2 == 0) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,203,exprs.add(Util.last(operands));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,205,exprs.add(rexBuilder.makeNullLiteral(type));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,207,return rexBuilder.makeCall(type, SqlStdOperatorTable.CASE, exprs);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,212,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,213,SqlStdOperatorTable.NOT_LIKE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,214,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,215,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,216,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,217,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,218,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,219,SqlStdOperatorTable.LIKE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,220,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,221,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,222,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,227,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,228,SqlStdOperatorTable.NOT_SIMILAR_TO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,229,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,230,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,231,final SqlCall expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,232,SqlStdOperatorTable.NOT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,233,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,234,SqlStdOperatorTable.SIMILAR_TO.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,235,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,236,call.getOperandList()));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,237,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,242,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,243,SqlStdOperatorTable.UNARY_PLUS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,244,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,245,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,246,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,247,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,252,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,253,SqlStdOperatorTable.AS,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,254,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,255,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,256,SqlNode expanded = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,257,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,261,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,262,SqlStdOperatorTable.SQRT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,263,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,264,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,265,SqlNode expanded =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,266,SqlStdOperatorTable.POWER.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,267,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,268,call.operand(0),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,269,SqlLiteral.createExactNumeric(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,271,return cx.convertExpression(expanded);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,291,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,292,SqlStdOperatorTable.AVG,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,294,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,295,SqlStdOperatorTable.STDDEV_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,297,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,298,SqlStdOperatorTable.STDDEV_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,300,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,301,SqlStdOperatorTable.VAR_POP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,303,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,304,SqlStdOperatorTable.VAR_SAMP,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,318,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,319,SqlStdOperatorTable.ELEMENT,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,320,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,321,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,322,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,323,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,324,final RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,325,cx.getValidator().getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,326,if (!type.getComponentType().isStruct()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,327,return cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,328,SqlStdOperatorTable.ELEMENT_SLICE.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,329,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,330,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,334,return StandardConvertletTable.this.convertCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,335,cx,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,336,call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,343,registerOp(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,344,SqlStdOperatorTable.ELEMENT_SLICE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,345,new SqlRexConvertlet() {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,346,public RexNode convertCall(SqlRexContext cx, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,347,assert call.operandCount() == 1;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,348,final SqlNode operand = call.operand(0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,349,final RexNode expr =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,350,cx.convertExpression(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,351,SqlStdOperatorTable.ELEMENT.createCall(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,352,SqlParserPos.ZERO,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,353,operand));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,354,return cx.getRexBuilder().makeFieldAccess(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,355,expr,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,356,0);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,849,ImmutableList.<RexNode>of(cx.getRexBuilder().makeLiteral(key)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,869,new RexCallBinding(cx.getTypeFactory(), fun, exprs, ImmutableList.<RelCollation>of()) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,960,final List<RexNode> exprs = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,988,final List<RelDataType> nonCharacterTypes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Frameworks.java,39,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,196,this.context = Preconditions.checkNotNull(c);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,201,Preconditions.checkNotNull(executor);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,202,this.executor = executor;
core/src/main/java/org/apache/calcite/tools/Frameworks.java,208,this.convertletTable = Preconditions.checkNotNull(convertletTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,213,this.operatorTable = Preconditions.checkNotNull(operatorTable);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,232,this.parserConfig = Preconditions.checkNotNull(parserConfig);
core/src/main/java/org/apache/calcite/tools/Frameworks.java,251,return programs(Programs.listOf(Preconditions.checkNotNull(ruleSets)));
core/src/main/java/org/apache/calcite/tools/Frameworks.java,265,this.typeSystem = Preconditions.checkNotNull(typeSystem);
core/src/main/java/org/apache/calcite/tools/Programs.java,67,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/Programs.java,79,private static final Function<RuleSet, Program> RULE_SET_TO_PROGRAM =
core/src/main/java/org/apache/calcite/tools/Programs.java,80,new Function<RuleSet, Program>() {
core/src/main/java/org/apache/calcite/tools/Programs.java,81,public Program apply(RuleSet ruleSet) {
core/src/main/java/org/apache/calcite/tools/Programs.java,82,return of(ruleSet);
core/src/main/java/org/apache/calcite/tools/Programs.java,159,return Lists.transform(Arrays.asList(ruleSets), RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,164,return Lists.transform(ruleSets, RULE_SET_TO_PROGRAM);
core/src/main/java/org/apache/calcite/tools/Programs.java,195,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,196,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,197,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,198,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,199,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,200,final HepPlanner hepPlanner = new HepPlanner(hepProgram,
core/src/main/java/org/apache/calcite/tools/Programs.java,201,null, noDag, null, RelOptCostImpl.FACTORY);
core/src/main/java/org/apache/calcite/tools/Programs.java,203,List<RelMetadataProvider> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/Programs.java,204,if (metadataProvider != null) {
core/src/main/java/org/apache/calcite/tools/Programs.java,205,list.add(metadataProvider);
core/src/main/java/org/apache/calcite/tools/Programs.java,207,hepPlanner.registerMetadataProviders(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,208,RelMetadataProvider plannerChain =
core/src/main/java/org/apache/calcite/tools/Programs.java,209,ChainedRelMetadataProvider.of(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,210,rel.getCluster().setMetadataProvider(plannerChain);
core/src/main/java/org/apache/calcite/tools/Programs.java,212,hepPlanner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,213,return hepPlanner.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,226,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,227,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,228,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,229,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,230,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,231,final int joinCount = RelOptUtil.countJoins(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,232,final Program program;
core/src/main/java/org/apache/calcite/tools/Programs.java,233,if (joinCount < minJoinCount) {
core/src/main/java/org/apache/calcite/tools/Programs.java,234,program = ofRules(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,241,.build();
core/src/main/java/org/apache/calcite/tools/Programs.java,242,final Program program1 =
core/src/main/java/org/apache/calcite/tools/Programs.java,243,of(hep, false, DefaultRelMetadataProvider.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,249,final List<RelOptRule> list = Lists.newArrayList(rules);
core/src/main/java/org/apache/calcite/tools/Programs.java,250,list.removeAll(
core/src/main/java/org/apache/calcite/tools/Programs.java,251,ImmutableList.of(JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,252,JoinAssociateRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,253,JoinPushThroughJoinRule.LEFT,
core/src/main/java/org/apache/calcite/tools/Programs.java,254,JoinPushThroughJoinRule.RIGHT));
core/src/main/java/org/apache/calcite/tools/Programs.java,255,list.add(bushy
core/src/main/java/org/apache/calcite/tools/Programs.java,256,? MultiJoinOptimizeBushyRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,257,: LoptOptimizeJoinRule.INSTANCE);
core/src/main/java/org/apache/calcite/tools/Programs.java,258,final Program program2 = ofRules(list);
core/src/main/java/org/apache/calcite/tools/Programs.java,260,program = sequence(program1, program2);
core/src/main/java/org/apache/calcite/tools/Programs.java,262,return program.run(
core/src/main/java/org/apache/calcite/tools/Programs.java,263,planner, rel, requiredOutputTraits, materializations, lattices);
core/src/main/java/org/apache/calcite/tools/Programs.java,285,return new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,286,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,287,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,288,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,289,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,290,return null;
core/src/main/java/org/apache/calcite/tools/Programs.java,304,new Program() {
core/src/main/java/org/apache/calcite/tools/Programs.java,305,public RelNode run(RelOptPlanner planner, RelNode rel,
core/src/main/java/org/apache/calcite/tools/Programs.java,306,RelTraitSet requiredOutputTraits,
core/src/main/java/org/apache/calcite/tools/Programs.java,307,List<RelOptMaterialization> materializations,
core/src/main/java/org/apache/calcite/tools/Programs.java,308,List<RelOptLattice> lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,309,planner.setRoot(rel);
core/src/main/java/org/apache/calcite/tools/Programs.java,311,for (RelOptMaterialization materialization : materializations) {
core/src/main/java/org/apache/calcite/tools/Programs.java,312,planner.addMaterialization(materialization);
core/src/main/java/org/apache/calcite/tools/Programs.java,314,for (RelOptLattice lattice : lattices) {
core/src/main/java/org/apache/calcite/tools/Programs.java,315,planner.addLattice(lattice);
core/src/main/java/org/apache/calcite/tools/Programs.java,318,final RelNode rootRel2 =
core/src/main/java/org/apache/calcite/tools/Programs.java,320,? rel
core/src/main/java/org/apache/calcite/tools/Programs.java,321,: planner.changeTraits(rel, requiredOutputTraits);
core/src/main/java/org/apache/calcite/tools/Programs.java,322,assert rootRel2 != null;
core/src/main/java/org/apache/calcite/tools/Programs.java,324,planner.setRoot(rootRel2);
core/src/main/java/org/apache/calcite/tools/Programs.java,325,final RelOptPlanner planner2 = planner.chooseDelegate();
core/src/main/java/org/apache/calcite/tools/Programs.java,326,final RelNode rootRel3 = planner2.findBestExp();
core/src/main/java/org/apache/calcite/tools/Programs.java,327,assert rootRel3 != null : "could not implement exp";
core/src/main/java/org/apache/calcite/tools/Programs.java,328,return rootRel3;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,74,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,75,import com.google.common.base.Joiner;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,116,private static final Function<RexNode, String> FN_TYPE =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,117,new Function<RexNode, String>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,118,public String apply(RexNode input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,119,return input + ": " + input.getType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,215,return new RelBuilderFactory() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,216,public RelBuilder create(RelOptCluster cluster, RelOptSchema schema) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,217,return new RelBuilder(context, cluster, schema);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,427,Preconditions.checkNotNull(alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,428,Preconditions.checkNotNull(fieldName);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,538,+ "; operands: " + Lists.transform(operandList, FN_TYPE));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,644,return groupKey(ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,696,new Function<ImmutableBitSet, ImmutableList<RexNode>>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,697,public ImmutableList<RexNode> apply(ImmutableBitSet input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,698,return fields(ImmutableIntList.of(input.toArray()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,774,throw RESOURCE.tableNotFound(Joiner.on(".").join(names)).ex();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,838,return project(nodes, ImmutableList.<String>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,920,field = new Field(ImmutableSet.<String>of(), fieldType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1100,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1111,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1121,fields.add(new Field(ImmutableSet.<String>of(), fieldType));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1246,ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1250,return join(joinType, condition, ImmutableSet.<CorrelationId>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1334,Lists.transform(pair.fields, new Function<Field, Field>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1335,public Field apply(Field field) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1337,.add(alias).build(), field.right);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1508,return sortLimit(offset, fetch, ImmutableList.<RexNode>of());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1657,final List<RexNode> exprList = Lists.newArrayList();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1667,Lists.transform(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1668,aggregateCalls, new Function<AggregateCall, AggCall>() {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1669,public AggCall apply(AggregateCall input) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1670,return new AggCallImpl2(input);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1707,this.nodes = Preconditions.checkNotNull(nodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1748,this.aggregateCall = Preconditions.checkNotNull(aggregateCall);
core/src/main/java/org/apache/calcite/util/BitSets.java,88,return new Iterable<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,89,public Iterator<Integer> iterator() {
core/src/main/java/org/apache/calcite/util/BitSets.java,90,return new Iterator<Integer>() {
core/src/main/java/org/apache/calcite/util/BitSets.java,91,int i = bitSet.nextSetBit(0);
core/src/main/java/org/apache/calcite/util/BitSets.java,93,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/BitSets.java,94,return i >= 0;
core/src/main/java/org/apache/calcite/util/BitSets.java,97,public Integer next() {
core/src/main/java/org/apache/calcite/util/BitSets.java,98,int prev = i;
core/src/main/java/org/apache/calcite/util/BitSets.java,99,i = bitSet.nextSetBit(i + 1);
core/src/main/java/org/apache/calcite/util/BitSets.java,100,return prev;
core/src/main/java/org/apache/calcite/util/BitSets.java,103,public void remove() {
core/src/main/java/org/apache/calcite/util/BitSets.java,104,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/CancelFlag.java,22,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/CancelFlag.java,39,this.atomicBoolean = Preconditions.checkNotNull(atomicBoolean);
core/src/main/java/org/apache/calcite/util/Compatible.java,25,import java.lang.reflect.InvocationHandler;
core/src/main/java/org/apache/calcite/util/Compatible.java,77,new Class<?>[] {Compatible.class},
core/src/main/java/org/apache/calcite/util/Compatible.java,78,new InvocationHandler() {
core/src/main/java/org/apache/calcite/util/Compatible.java,80,throws Throwable {
core/src/main/java/org/apache/calcite/util/Compatible.java,81,if (method.getName().equals("asMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,83,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,85,final Method guavaMethod = Maps.class.getMethod(
core/src/main/java/org/apache/calcite/util/Compatible.java,86,method.getName(), method.getParameterTypes());
core/src/main/java/org/apache/calcite/util/Compatible.java,87,return guavaMethod.invoke(null, args);
core/src/main/java/org/apache/calcite/util/Compatible.java,89,Set set = (Set) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,90,Function function = (Function) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,91,return CompatibleGuava11.asMap(set, function);
core/src/main/java/org/apache/calcite/util/Compatible.java,94,if (method.getName().equals("navigableSet")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,95,ImmutableSortedSet set = (ImmutableSortedSet) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,96,return CompatibleGuava11.navigableSet(set);
core/src/main/java/org/apache/calcite/util/Compatible.java,98,if (method.getName().equals("navigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,99,ImmutableSortedMap map = (ImmutableSortedMap) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,100,return CompatibleGuava11.navigableMap(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,102,if (method.getName().equals("immutableNavigableMap")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,103,Map map = (Map) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,104,ImmutableSortedMap sortedMap = ImmutableSortedMap.copyOf(map);
core/src/main/java/org/apache/calcite/util/Compatible.java,105,return CompatibleGuava11.navigableMap(sortedMap);
core/src/main/java/org/apache/calcite/util/Compatible.java,107,if (method.getName().equals("setSchema")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,108,Connection connection = (Connection) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,109,String schema = (String) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,111,connection.getClass().getMethod("setSchema", String.class);
core/src/main/java/org/apache/calcite/util/Compatible.java,112,return method1.invoke(connection, schema);
core/src/main/java/org/apache/calcite/util/Compatible.java,114,if (method.getName().equals("getParameterName")) {
core/src/main/java/org/apache/calcite/util/Compatible.java,115,final Method m = (Method) args[0];
core/src/main/java/org/apache/calcite/util/Compatible.java,116,final int i = (Integer) args[1];
core/src/main/java/org/apache/calcite/util/Compatible.java,117,try {
core/src/main/java/org/apache/calcite/util/Compatible.java,118,final Method method1 =
core/src/main/java/org/apache/calcite/util/Compatible.java,119,m.getClass().getMethod("getParameters");
core/src/main/java/org/apache/calcite/util/Compatible.java,120,Object parameters = method1.invoke(m);
core/src/main/java/org/apache/calcite/util/Compatible.java,121,final Object parameter = Array.get(parameters, i);
core/src/main/java/org/apache/calcite/util/Compatible.java,122,final Method method3 = parameter.getClass().getMethod("getName");
core/src/main/java/org/apache/calcite/util/Compatible.java,123,return method3.invoke(parameter);
core/src/main/java/org/apache/calcite/util/Compatible.java,125,return "arg" + i;
core/src/main/java/org/apache/calcite/util/Compatible.java,128,return null;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,20,import com.google.common.base.Objects;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,41,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,65,return super.retainAll(checkNotNull(c)); // GWT compatibility
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,81,checkNotNull(collection); // for GWT
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,231,this.set = checkNotNull(set);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,232,this.function = checkNotNull(function);
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,328,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,341,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,378,if (com.google.common.base.Objects.equal(o, entry.getValue())) {
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,389,return super.removeAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,391,Set<K> toRemove = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,403,return super.retainAll(checkNotNull(c));
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,405,Set<K> toRetain = Sets.newHashSet();
core/src/main/java/org/apache/calcite/util/CompatibleGuava11.java,437,this.backingIterator = checkNotNull(backingIterator);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,22,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,26,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,27,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,53,public static final Comparator<ImmutableBitSet> COMPARATOR =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,54,new Comparator<ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,55,public int compare(ImmutableBitSet o1, ImmutableBitSet o2) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,56,if (o1.equals(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,57,return 0;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,59,if (o1.contains(o2)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,60,return -1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,62,if (o2.contains(o1)) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,63,return 1;
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,65,return o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,86,public static final Function<? super BitSet, ImmutableBitSet> FROM_BIT_SET =
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,87,new Function<BitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,88,public ImmutableBitSet apply(BitSet input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,89,return ImmutableBitSet.of(BitSets.toIter(input));
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,260,List<List<ImmutableBitSet>> singletons = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,261,for (Integer bit : this) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,266,new Function<List<ImmutableBitSet>, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,267,public ImmutableBitSet apply(List<ImmutableBitSet> input) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,268,return ImmutableBitSet.union(input);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,468,public int compareTo(ImmutableBitSet o) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,882,return Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,883,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,884,public ImmutableBitSet apply(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,885,return bitSet.permute(map);
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,915,Maps.newTreeMap();
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,22,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/ImmutableNullableList.java,205,private final List<E> contents = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,94,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,95,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,96,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,97,if (!exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,98,bounds[0] = Math.min(bounds[0], start);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,99,bounds[1] = Math.max(bounds[1], end);
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,139,s,
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,140,new Handler() {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,141,public void range(int start, int end, boolean exclude) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,142,if (start <= n && n <= end) {
core/src/main/java/org/apache/calcite/util/IntegerIntervalSet.java,143,bs[0] = !exclude;
core/src/main/java/org/apache/calcite/util/NameSet.java,37,public static final Comparator<String> COMPARATOR =
core/src/main/java/org/apache/calcite/util/NameSet.java,38,new Comparator<String>() {
core/src/main/java/org/apache/calcite/util/NameSet.java,39,public int compare(String o1, String o2) {
core/src/main/java/org/apache/calcite/util/NameSet.java,40,int c = o1.compareToIgnoreCase(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,41,if (c == 0) {
core/src/main/java/org/apache/calcite/util/NameSet.java,42,c = o1.compareTo(o2);
core/src/main/java/org/apache/calcite/util/NameSet.java,44,return c;
core/src/main/java/org/apache/calcite/util/Pair.java,232,return new Iterable<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,233,public Iterator<Pair<K, V>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,234,final Iterator<? extends K> kIterator = ks.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,235,final Iterator<? extends V> vIterator = vs.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,237,return new Iterator<Pair<K, V>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,238,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,239,return kIterator.hasNext() && vIterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,243,public Pair<K, V> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,244,return (Pair<K, V>) Pair.of(kIterator.next(), vIterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,247,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,248,kIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,249,vIterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,291,return new Iterable<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,292,public Iterator<L> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,293,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,294,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,295,return new Iterator<L>() {
core/src/main/java/org/apache/calcite/util/Pair.java,296,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,297,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,300,public L next() {
core/src/main/java/org/apache/calcite/util/Pair.java,301,return iterator.next().getKey();
core/src/main/java/org/apache/calcite/util/Pair.java,304,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,305,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,322,return new Iterable<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,323,public Iterator<R> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,324,final Iterator<? extends Map.Entry<L, R>> iterator =
core/src/main/java/org/apache/calcite/util/Pair.java,325,iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,326,return new Iterator<R>() {
core/src/main/java/org/apache/calcite/util/Pair.java,327,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,328,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,331,public R next() {
core/src/main/java/org/apache/calcite/util/Pair.java,332,return iterator.next().getValue();
core/src/main/java/org/apache/calcite/util/Pair.java,335,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,336,iterator.remove();
core/src/main/java/org/apache/calcite/util/Pair.java,379,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,380,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,381,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,382,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,383,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,385,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,386,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,387,T previous = first;
core/src/main/java/org/apache/calcite/util/Pair.java,389,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,390,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,393,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,394,final T current = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,395,final Pair<T, T> pair = of(previous, current);
core/src/main/java/org/apache/calcite/util/Pair.java,396,previous = current;
core/src/main/java/org/apache/calcite/util/Pair.java,397,return pair;
core/src/main/java/org/apache/calcite/util/Pair.java,400,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,401,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/Pair.java,419,return new Iterable<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,420,public Iterator<Pair<T, T>> iterator() {
core/src/main/java/org/apache/calcite/util/Pair.java,421,final Iterator<T> iterator = iterable.iterator();
core/src/main/java/org/apache/calcite/util/Pair.java,422,if (!iterator.hasNext()) {
core/src/main/java/org/apache/calcite/util/Pair.java,423,return Collections.emptyIterator();
core/src/main/java/org/apache/calcite/util/Pair.java,425,final T first = iterator.next();
core/src/main/java/org/apache/calcite/util/Pair.java,426,return new Iterator<Pair<T, T>>() {
core/src/main/java/org/apache/calcite/util/Pair.java,427,public boolean hasNext() {
core/src/main/java/org/apache/calcite/util/Pair.java,428,return iterator.hasNext();
core/src/main/java/org/apache/calcite/util/Pair.java,431,public Pair<T, T> next() {
core/src/main/java/org/apache/calcite/util/Pair.java,432,return of(first, iterator.next());
core/src/main/java/org/apache/calcite/util/Pair.java,435,public void remove() {
core/src/main/java/org/apache/calcite/util/Pair.java,436,throw new UnsupportedOperationException("remove");
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,504,final Deque<E> unseen = new ArrayDeque<>();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,505,unseen.addAll(getNonChildren());
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,21,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,22,import com.google.common.base.Predicate;
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,110,Preconditions.checkNotNull(r);
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,191,if (predicate.apply(token)) {
core/src/main/java/org/apache/calcite/util/PrecedenceClimbingParser.java,355,new PrecedenceClimbingParser(ImmutableList.<Token>of());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,289,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,430,Collections.<Class>emptyList());
core/src/main/java/org/apache/calcite/util/Sources.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/Sources.java,79,this.url = Preconditions.checkNotNull(url);
core/src/main/java/org/apache/calcite/util/Sources.java,88,this.file = Preconditions.checkNotNull(file);
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,53,return new Memo() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,54,public void close() {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,55,if (previous == initialValue) {
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,56,remove();
core/src/main/java/org/apache/calcite/util/TryThreadLocal.java,58,set(previous);
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,19,import com.google.common.base.Preconditions;
core/src/main/java/org/apache/calcite/util/UnmodifiableArrayList.java,43,this.elements = Preconditions.checkNotNull(elements);
core/src/main/java/org/apache/calcite/util/Util.java,32,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/Util.java,98,import javax.annotation.Nullable;
core/src/main/java/org/apache/calcite/util/Util.java,100,import static com.google.common.base.Preconditions.checkNotNull;
core/src/main/java/org/apache/calcite/util/Util.java,150,.build(
core/src/main/java/org/apache/calcite/util/Util.java,151,new CacheLoader<Class, Map<String, Enum>>() {
core/src/main/java/org/apache/calcite/util/Util.java,154,return enumConstants(clazz);
core/src/main/java/org/apache/calcite/util/Util.java,818,checkNotNull(throwable);
core/src/main/java/org/apache/calcite/util/Util.java,1602,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1603,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1604,return cast(iterable.iterator(), clazz);
core/src/main/java/org/apache/calcite/util/Util.java,1630,return new Iterable<E>() {
core/src/main/java/org/apache/calcite/util/Util.java,1631,public Iterator<E> iterator() {
core/src/main/java/org/apache/calcite/util/Util.java,1632,return new Filterator<>(iterable.iterator(), includeFilter);
core/src/main/java/org/apache/calcite/util/Util.java,1897,return v0 != null ? v0 : ImmutableList.<T>of();
core/src/main/java/org/apache/calcite/util/Util.java,2166,public static <K, V> Map<K, V> asIndexMap(
core/src/main/java/org/apache/calcite/util/Util.java,2170,Collections2.transform(values,
core/src/main/java/org/apache/calcite/util/Util.java,2171,new Function<V, Map.Entry<K, V>>() {
core/src/main/java/org/apache/calcite/util/Util.java,2172,public Map.Entry<K, V> apply(@Nullable V input) {
core/src/main/java/org/apache/calcite/util/Util.java,2173,return Pair.of(function.apply(input), input);
core/src/main/java/org/apache/calcite/util/Util.java,2254,return ImmutableList.copyOf((Iterable) lists);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,555,translationVector.addAll(Collections.<String>nCopies(count, null));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,566,translationVector.toArray(new String[translationVector.size()]);
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,44,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,45,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/BreadthFirstIterator.java,46,return new BreadthFirstIterator<V, E>(graph, root);
core/src/main/java/org/apache/calcite/util/graph/DefaultDirectedGraph.java,48,return create(DefaultEdge.<V>factory());
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,43,return new DirectedGraph.EdgeFactory<V, DefaultEdge>() {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,44,public DefaultEdge createEdge(V v0, V v1) {
core/src/main/java/org/apache/calcite/util/graph/DefaultEdge.java,45,return new DefaultEdge(v0, v1);
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,19,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,20,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,45,final List<V> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/util/graph/DepthFirstIterator.java,46,buildListRecurse(list, Sets.<V>newHashSet(), graph, start);
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,45,return new Iterable<V>() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,46,public Iterator<V> iterator() {
core/src/main/java/org/apache/calcite/util/graph/TopologicalOrderIterator.java,47,return new TopologicalOrderIterator<V, E>(graph);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,64,setStringArray(list.toArray(new String[list.size()]));
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,93,return argsList.toArray(new String[argsList.size()]);
core/src/main/java/org/apache/calcite/util/javac/JavaCompilerArgs.java,101,return fileNameList.toArray(new String[fileNameList.size()]);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,24,import com.google.common.base.Function;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,222,Iterables.transform(bitSets,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,223,new Function<ImmutableBitSet, ImmutableBitSet>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,224,public ImmutableBitSet apply(ImmutableBitSet input1) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,225,return Mappings.apply(mapping, input1);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,349,Function<Integer, Integer> function,
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,609,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,610,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,611,int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,613,? null
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,614,: mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,655,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,656,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,657,int target = mapping.getTargetOpt(source);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,658,return target < 0 ? null : target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,684,new Function<Integer, Integer>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,685,public Integer apply(Integer source) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,686,final int source2 = source - offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,687,if (source2 < 0 || source2 >= mapping.getSourceCount()) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,688,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,690,int target = mapping.getTargetOpt(source2);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,691,if (target < 0) {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,692,return null;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,694,return target + offset;
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,719,return new Iterable<IntPair>() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,720,public Iterator<IntPair> iterator() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,721,return invert(pairs.iterator());
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,60,new ThreadLocal<Function2<Void, File, String>>() {
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,62,return Functions.ignore2();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,41,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,82,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,83,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,32,import com.google.common.base.Function;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,81,if (!range.hasLowerBound() && !range.hasUpperBound()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,82,return DruidTable.DEFAULT_INTERVAL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,86,: DruidTable.DEFAULT_INTERVAL.getStartMillis();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,89,: DruidTable.DEFAULT_INTERVAL.getEndMillis();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,91,&& range.lowerBoundType() == BoundType.OPEN) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,92,start++;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,95,&& range.upperBoundType() == BoundType.CLOSED) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,96,end++;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,71,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,909,this.queryType = Preconditions.checkNotNull(queryType);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,910,this.queryString = Preconditions.checkNotNull(queryString);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,37,import org.apache.calcite.rel.rules.PushProjector;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,63,import com.google.common.base.Predicate;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,730,PushProjector.ExprCondition.FALSE,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,24,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,34,import javax.annotation.Nonnull;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,55,this.url = Preconditions.checkNotNull(url);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidSchema.java,56,this.coordinatorUrl = Preconditions.checkNotNull(coordinatorUrl);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,71,this.timestampFieldName = Preconditions.checkNotNull(timestampFieldName);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,72,this.schema = Preconditions.checkNotNull(schema);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,73,this.dataSource = Preconditions.checkNotNull(dataSource);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,122,ImmutableList.<RelNode>of(scan));
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,20,import com.google.common.base.Preconditions;
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,40,this.dimension = Preconditions.checkNotNull(dimension);
druid/src/main/java/org/apache/calcite/adapter/druid/ExtractionDimensionSpec.java,41,this.extractionFunction = Preconditions.checkNotNull(extractionFunction);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,332,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,338,this.fieldTypes = fieldTypes.toArray(new CsvFieldType[fieldTypes.size()]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,27,import java.io.FilenameFilter;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,80,File[] files = directoryFile.listFiles(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,81,new FilenameFilter() {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,82,public boolean accept(File dir, String name) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,83,final String nameSansGz = trim(name, ".gz");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchema.java,85,|| nameSansGz.endsWith(".json");
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,83,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,84,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,85,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,89,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,90,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,91,String s = region(c) + "";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,92,return s.length() == 1 ? " " + s : s;
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,116,cellContent = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,117,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,118,return solutionSet.contains(c) ? "* " : "  ";
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,355,CellContent SPACE = new CellContent() {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,356,public String get(int c) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,357,return "  ";
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,24,import org.apache.calcite.linq4j.function.Function1;
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,106,new Function1<String, Object[]>() {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,107,public Object[] apply(String s) {
example/function/src/main/java/org/apache/calcite/example/maze/MazeTable.java,108,return new Object[] {s};
file/src/main/java/org/apache/calcite/adapter/file/FileRowConverter.java,24,import com.google.common.base.Joiner;
file/src/main/java/org/apache/calcite/adapter/file/FileRowConverter.java,270,String cellString = Joiner.on(" ").join(cellText).trim();
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,32,import java.io.FilenameFilter;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,92,File[] files = baseDirectory.listFiles(
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,93,new FilenameFilter() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,94,public boolean accept(File dir, String name) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,95,final String nameSansGz = trim(name, ".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,97,|| nameSansGz.endsWith(".json");
linq4j/src/main/java/org/apache/calcite/linq4j/DefaultQueryable.java,54,this(QueryableRecorder.<T>instance());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,38,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,373,return (int) longCount(enumerable, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,405,return Linq4j.asEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,406,new Iterable<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,407,public Iterator<TSource> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,408,return new Iterator<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,410,private boolean nonFirst;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,412,private Iterator<TSource> rest;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,414,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,415,return !nonFirst || rest.hasNext();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,418,public TSource next() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,419,if (nonFirst) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,420,return rest.next();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,422,final TSource first = os.current();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,423,nonFirst = true;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,424,rest = Linq4j.enumeratorIterator(os);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,425,return first;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,429,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,430,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,686,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,687,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,688,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,704,.select(new Function1<Grouping<TKey, TSource>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,705,public TResult apply(Grouping<TKey, TSource> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,706,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,722,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,723,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,724,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,742,.select(new Function1<Grouping<TKey, TElement>, TResult>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,743,public TResult apply(Grouping<TKey, TElement> group) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,744,return resultSelector.apply(group.getKey(), group);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,912,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,953,inners == null ? Linq4j.<TInner>emptyEnumerable() : inners);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1332,return EnumerableDefaults.where(outer.enumerator(),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1333,new Predicate1<TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1334,public boolean apply(TSource v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1335,final TKey key = outerKeySelector.apply(v0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1336,return innerLookup.contains(key);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1353,final List<TResult> result = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1521,return longCount(source, Functions.<TSource>truePredicate1());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1680,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MIN;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1686,return (Function2<TSource, TSource, TSource>) Extensions.COMPARABLE_MAX;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1815,Functions.<TSource, TResult>ofTypePredicate(clazz));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1839,Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1850,return orderBy(source, keySelector, Collections.<TKey>reverseOrder());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2313,return skipWhile(source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2314,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2316,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2329,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2457,source, new Predicate2<TSource, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2458,public boolean apply(TSource v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2460,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2472,source, new Predicate2<TSource, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2473,public boolean apply(TSource v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2475,return v2 < count;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2487,Functions.<TSource, Integer>toPredicate2(predicate));
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2539,Extensions.<TKey>comparableComparator(), false);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2560,Extensions.<TKey>comparableComparator(), true);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2582,return toMap(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2593,return toMap(source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2664,return toLookup(source, keySelector, Functions.<TSource>identitySelector());
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2676,source, keySelector, Functions.<TSource>identitySelector(), comparer);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2770,return new Function1<Wrapped<TSource>, TSource>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2771,public TSource apply(Wrapped<TSource> a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2772,return a0.element;
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2779,return new Function1<TSource, Wrapped<TSource>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2780,public Wrapped<TSource> apply(TSource a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2781,return Wrapped.upAs(comparer, a0);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3310,ImmutableList.of(Linq4j.<Object>enumerator(lefts),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3311,Linq4j.<Object>enumerator(rights)));
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,114,new Function2<BigDecimal, BigDecimal, BigDecimal>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,115,public BigDecimal apply(BigDecimal v1, BigDecimal v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,116,return v1.add(v2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,121,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,122,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,123,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,128,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,129,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,130,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,135,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,136,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,137,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,142,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,143,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,144,return v1 + v2;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,148,static final Function2 COMPARABLE_MIN =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,149,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,150,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,151,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,155,static final Function2 COMPARABLE_MAX =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,156,new Function2<Comparable, Comparable, Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,157,public Comparable apply(Comparable v1, Comparable v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,158,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,163,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,164,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,165,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,170,new Function2<Float, Float, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,171,public Float apply(Float v1, Float v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,172,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,177,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,178,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,179,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,184,new Function2<Double, Double, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,185,public Double apply(Double v1, Double v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,186,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,191,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,192,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,193,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,198,new Function2<Integer, Integer, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,199,public Integer apply(Integer v1, Integer v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,200,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,205,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,206,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,207,return v1 == null || v1.compareTo(v2) > 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,212,new Function2<Long, Long, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,213,public Long apply(Long v1, Long v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,214,return v1 == null || v1.compareTo(v2) < 0 ? v2 : v1;
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,231,private static final Comparator<Comparable> COMPARABLE_COMPARATOR =
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,232,new Comparator<Comparable>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,233,public int compare(Comparable o1, Comparable o2) {
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,235,return o1.compareTo(o2);
linq4j/src/main/java/org/apache/calcite/linq4j/Extensions.java,241,return (Comparator<T>) (Comparator) COMPARABLE_COMPARATOR;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,36,this.key = Preconditions.checkNotNull(key);
linq4j/src/main/java/org/apache/calcite/linq4j/GroupingImpl.java,37,this.values = Preconditions.checkNotNull(values);
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,21,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,393,return new Iterable<List<T>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,394,public Iterator<List<T>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,395,final List<Enumerator<T>> enumerators = Lists.newArrayList();
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,396,for (Iterable<T> iterable : iterables) {
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,397,enumerators.add(iterableEnumerator(iterable));
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,399,return enumeratorIterator(
linq4j/src/main/java/org/apache/calcite/linq4j/Linq4j.java,400,new CartesianProductListEnumerator<>(enumerators));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,55,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,56,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,57,return zip(iterable.iterator());
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,117,return new Iterable<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,118,public Iterator<Ord<E>> iterator() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,119,return new Iterator<Ord<E>>() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,120,int i = elementList.size() - 1;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,122,public boolean hasNext() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,123,return i >= 0;
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,126,public Ord<E> next() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,127,return Ord.of(i, elementList.get(i--));
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,130,public void remove() {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,131,throw new UnsupportedOperationException("remove");
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,900,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1036,Functions.<T, Integer>toPredicate2(predicate.getFunction())));
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,31,Function1<Object, Object> IDENTITY = new Function1<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,32,public Object apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Function1.java,33,return v0;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,41,Collections.<Class<? extends Function>, Class>unmodifiableMap(
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,78,private static final Function1 CONSTANT_NULL_FUNCTION1 =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,79,new Function1() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,80,public Object apply(Object s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,81,return null;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,86,new Function1<Object, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,87,public String apply(Object a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,88,return a0.toString();
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,112,return new Function1<T, R>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,113,public R apply(T s) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,114,return r;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,198,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,199,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,200,return v1 == null || clazz.isInstance(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,207,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,208,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,209,return p1.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,219,return new Predicate2<T1, T2>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,220,public boolean apply(T1 v1, T2 v2) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,221,return function.apply(v1, v2);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,231,return new Predicate1<T>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,232,public boolean apply(T v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,233,return function.apply(v1);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,264,return new Function1<T1, Integer>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,265,public Integer apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,266,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,276,return new Function1<T1, Double>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,277,public Double apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,278,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,288,return new Function1<T1, Long>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,289,public Long apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,290,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,300,return new Function1<T1, Float>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,301,public Float apply(T1 a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,302,return f.apply(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,30,Predicate1<Object> TRUE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,31,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,32,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,41,Predicate1<Object> FALSE = new Predicate1<Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,42,public boolean apply(Object v0) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate1.java,43,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,31,Predicate2<Object, Object> TRUE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,32,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,33,return true;
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,42,Predicate2<Object, Object> FALSE = new Predicate2<Object, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,43,public boolean apply(Object v0, Object v1) {
linq4j/src/main/java/org/apache/calcite/linq4j/function/Predicate2.java,44,return false;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,46,new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,47,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,48,return new DeterministicCodeOptimizer(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,98,return new Function1<ClassDeclarationFinder, ClassDeclarationFinder>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,99,public ClassDeclarationFinder apply(ClassDeclarationFinder a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,100,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,101,return constructor.newInstance(a0);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,103,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,106,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,109,throw new IllegalStateException(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,20,import com.google.common.collect.Lists;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,156,return writer.append("new java.math.BigDecimal(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,157,bigDecimal.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,162,return writer.append("new java.math.BigInteger(\"").append(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,163,bigInteger.toString()).append("\")");
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,182,Lists.transform(Arrays.asList(value.getClass().getFields()),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,183,new Function<Field, Object>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,184,public Object apply(Field field) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,185,try {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,186,return field.get(value);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstantExpression.java,188,throw new RuntimeException(e);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,71,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,72,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,73,public String apply(ParameterExpression parameter) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,74,final String modifiers =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,75,Modifier.toString(parameter.modifier);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,77,+ Types.className(parameter.getType()) + " "
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ConstructorDeclaration.java,78,+ parameter.name;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/DeterministicCodeOptimizer.java,72,ImmutableSet.<Class>of(Byte.class, Boolean.class, Short.class,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,527,return new ConditionalExpression(Arrays.<Node>asList(test, ifFalse, ifTrue),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,965,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,974,return new ConditionalStatement(Arrays.<Node>asList(test, ifTrue, ifFalse));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1912,return new_(
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1913,constructor.getDeclaringClass(), Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1921,return new_(type, Collections.<Expression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2835,return new TryStatement(body, Collections.<CatchBlock>emptyList(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,2836,finally_);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,22,import java.lang.reflect.InvocationHandler;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,28,import java.util.Collections;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,62,this((Class) function.getClass(), function, null,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,63,Collections.<ParameterExpression>emptyList());
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,82,return new Invokable() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,83,public Object dynamicInvoke(Object... args) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,84,final Evaluator evaluator = new Evaluator();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,85,for (int i = 0; i < args.length; i++) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,86,evaluator.push(parameterList.get(i), args[i]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,88,return evaluator.evaluate(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,102,new Class[]{Types.toClass(type)},
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,103,new InvocationHandler() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,105,throws Throwable {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,106,return x.dynamicInvoke(args);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,227,return ((Class) type).getDeclaredMethods()[0];
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,19,import com.google.common.base.Function;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,72,Lists.transform(parameters,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,73,new Function<ParameterExpression, String>() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,74,public String apply(ParameterExpression a0) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/MethodDeclaration.java,75,return a0.declString();
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,19,import com.google.common.base.Preconditions;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,35,this.body = Preconditions.checkNotNull(body);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/TryStatement.java,36,this.catchBlocks = Preconditions.checkNotNull(catchBlocks);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,156,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,164,return classes.toArray(new Class[classes.size()]);
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Types.java,564,return typeArguments.toArray(new Type[typeArguments.size()]);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,83,return (Map) a0;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,92,return convert(a0.get(fieldName), fieldClass);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,104,Object[] objects = new Object[fields.size()];
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,105,for (int i = 0; i < fields.size(); i++) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,106,final Map.Entry<String, Class> field = fields.get(i);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,107,final String name = field.getKey();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,108,objects[i] = convert(a0.get(name), field.getValue());
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,110,return objects;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,42,import com.google.common.base.Function;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,154,return Lists.transform(values,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,155,new Function<T, Expression>() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,156,public Expression apply(T a0) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,157,return Expressions.constant(a0);
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,30,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,99,+ ");";
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,115,+ Joiner.on(";\n").join(distinctCalls) + generateCall + "\n};";
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,133,return "  GENERATE " + Joiner.on(", ").join(allFields) + ';';
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,148,final String fields = Joiner.on(", ").join(getArgNames(relAlias, aggCall));
pig/src/main/java/org/apache/calcite/adapter/pig/PigFilter.java,30,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigFilter.java,80,String allFilterConditions = Joiner.on(" AND ").join(filterConditionsConjunction);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRel.java,22,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigRel.java,86,return Joiner.on("\n").join(statements);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,32,import com.google.common.base.Joiner;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,68,return Joiner.on(", ").join(fieldNamesAndTypes);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,26,import com.google.common.base.Preconditions;
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,139,this.op = Preconditions.checkNotNull(op);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,140,this.pos = Preconditions.checkNotNull(pos);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,157,this.target = Preconditions.checkNotNull(target);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,167,this.name = Preconditions.checkNotNull(name);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,336,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,346,this.relation = Preconditions.checkNotNull(relation);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,356,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,411,this.value = Preconditions.checkNotNull(value);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,469,this.id = Preconditions.checkNotNull(id);
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,470,this.type = Preconditions.checkNotNull(type);
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,33,import org.apache.calcite.util.ImmutableBitSet;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,42,import java.util.Collections;
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,116,return Statistics.of(rowCount, Collections.<ImmutableBitSet>emptyList());
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,168,return new Iterable<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,169,public Iterator<E> iterator() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,170,return new Iterator<E>() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,171,public boolean hasNext() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,172,return enumeration.hasMoreElements();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,175,public E next() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,176,return enumeration.nextElement();
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,179,public void remove() {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,180,throw new UnsupportedOperationException();
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,93,primitives.toArray(new Primitive[primitives.size()])));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,398,file.map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,399,new Function<String, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,401,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,406,file.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,407,new Function<String, String>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,409,return s.substring(0, Math.min(s.length(), 1));
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,413,).map(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,414,new Function<Tuple2<String, Iterable<String>>, Object>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,416,return pair._1() + ":" + Iterables.size(pair._2());
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,435,rdd.groupBy(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,436,new Function<Integer, Integer>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,437,public Integer call(Integer integer) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,438,return integer % 2;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,442,file.flatMap(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,443,new FlatMapFunction<String, Pair<String, Integer>>() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,445,if (!x.startsWith("a")) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,448,return Collections.singletonList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,445,return convert;
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,163,resolved.found(namespace, false, this, path, remainingNames);
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,169,resolved.found(namespace, false, this, path, remainingNames);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,120,arguments.add(null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1853,SqlNode newExpr = registerFrom(usingScope, matchRecognizeScope, expr,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1854,expr, null, null, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1921,boolean forceNullable) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1976,SqlValidatorScope usingScope2 = usingScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1977,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1978,usingScope2 = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1984,usingScope2,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1989,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1996,if (call.operandCount() > 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2019,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2055,forceLeftNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2059,final SqlValidatorScope rightParentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2060,if (rightIsLateral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2061,rightParentScope = joinScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2063,rightParentScope = parentScope;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2067,rightParentScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2073,forceRightNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2088,registerNamespace(usingScope, alias, newNs, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2099,if (tableScope != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2100,tableScope.meetLateral();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2109,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2116,tableScope == null ? parentScope : tableScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2122,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2135,case UNNEST:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2142,usingScope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2165,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2171,registerNamespace(usingScope, child.name, child.namespace,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2172,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2185,forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3433,final Table table = ((RelOptTable) ns.getTable()).unwrap(Table.class);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,34,private boolean beforeLateral;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,44,super(parent);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,45,this.node = node;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,46,this.beforeLateral = true;
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,53,boolean nullable) {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,54,if (beforeLateral) {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,55,super.addChild(ns, alias, nullable);
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,63,public void meetLateral() {
core/src/main/java/org/apache/calcite/sql/validate/TableScope.java,64,this.beforeLateral = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2398,lookup.bb.scope.getValidator().getCatalogReader().nameMatcher();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2409,boolean correlInCurrentScope = ancestorScope == bb.scope;
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,57,class SqlTimestampAddFunction extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,65,case HOUR:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,66,case MINUTE:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,67,case SECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,68,case MILLISECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,69,case MICROSECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,70,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,71,typeFactory.createSqlType(SqlTypeName.TIMESTAMP),
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,73,|| opBinding.getOperandType(2).isNullable());
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,74,default:
core/src/main/java/org/apache/calcite/sql/fun/SqlTimestampAddFunction.java,75,return opBinding.getOperandType(2);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1463,cx.convertExpression(call.operand(2)),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1467,unitLiteral.getParserPosition())),
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1468,cx.convertExpression(call.operand(1))));
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,422,final String schemaName = con.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,468,final String schemaName = connection.getSchema();
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,95,Meta.Signature signature, TimeZone timeZone, Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,376,ImmutableList.of(new MetaCatalog(connection.getCatalog())));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,385,Enumerable<MetaSchema> schemas(String catalog) {
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,393,connection.getCatalog(),
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,50,Meta.Frame firstFrame) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,72,Iterable<Object> iterable) {
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,113,CalciteConnectionImpl getCalciteConnection() {
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,41,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/jdbc/MetadataSchema.java,53,final String catalog = meta.getConnection().getCatalog();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,107,final RelOptLattice lattice = call.getPlanner().getLattice(table);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,111,lattice.getAggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,112,call.getPlanner(), aggregate.getGroupSet(), measures);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcUtils.java,27,import org.apache.commons.dbcp.BasicDataSource;
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,263,childPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,264,rightPreserveExprs = new ArrayList<RexNode>();
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,43,SqlStdOperatorTable.MULTISET_EXCEPT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,45,SqlStdOperatorTable.MULTISET_INTERSECT_ALL,
core/src/main/java/org/apache/calcite/rex/RexMultisetUtil.java,47,SqlStdOperatorTable.MULTISET_UNION_ALL,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,109,public static final SqlMultisetSetOperator MULTISET_UNION =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,110,new SqlMultisetSetOperator("MULTISET UNION", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,115,public static final SqlMultisetSetOperator MULTISET_UNION_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,121,public static final SqlMultisetSetOperator MULTISET_EXCEPT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,122,new SqlMultisetSetOperator("MULTISET EXCEPT", 14, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,127,public static final SqlMultisetSetOperator MULTISET_EXCEPT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,133,public static final SqlMultisetSetOperator MULTISET_INTERSECT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,134,new SqlMultisetSetOperator("MULTISET INTERSECT", 18, false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,139,public static final SqlMultisetSetOperator MULTISET_INTERSECT_ALL =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1871,public static final SqlFunction FUSION =
core/src/main/java/org/apache/calcite/schema/Schemas.java,514,assert rootSchema.name.equals(iterator.next());
core/src/main/java/org/apache/calcite/rel/metadata/NullSentinel.java,22,INSTANCE,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,164,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,233,terms.set(i, withUnknownAsFalse(false).simplify(terms.get(i)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,242,return simplify(((RexCall) a).getOperands().get(0));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,246,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,252,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,261,simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, operand)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,263,return simplify(rexBuilder.makeCall(SqlStdOperatorTable.OR, newOperands));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,270,simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, operand)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,272,return simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,308,return simplify(a);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,316,return simplify(rexBuilder.makeCall(SqlStdOperatorTable.NOT, a));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,330,return simplify(rexBuilder.makeCall(notKind, arg));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,332,RexNode a2 = simplify(a);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,545,simplify(
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,565,return simplify(terms.get(0));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,751,terms.add(simplify(call));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,773,final RexNode term = simplify(terms.get(i));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1853,final Set<SqlKind> flags = EnumSet.noneOf(SqlKind.class);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1855,flags.clear();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1856,RexNode e = bb.convertSortExpression(order, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1857,orderKeys.add(new RexFieldCollation(e, flags));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4446,public RexNode convertSortExpression(SqlNode expr, Set<SqlKind> flags) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4451,flags.add(expr.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4452,final SqlNode operand = ((SqlCall) expr).operand(0);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4453,return convertSortExpression(operand, flags);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4455,return convertExpression(expr);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,77,import com.google.common.collect.Sets;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,83,import java.util.Set;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,982,final Set<RelDataTypeFamily> families =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,983,Sets.newHashSet(RexUtil.families(types));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,984,if (families.size() < 2) {
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,127,rel.getCluster().getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,65,opBinding.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,218,private boolean allowBangEqual =
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,219,SqlConformanceEnum.DEFAULT.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,231,this.allowBangEqual = config.allowBangEqual();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,277,this.allowBangEqual = conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,23,import org.apache.calcite.sql.type.MultisetSqlType;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,62,private RelDataType inferReturnType() {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,63,final SqlNode operand = unnest.operand(0);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,64,RelDataType type = validator.getValidatedNodeType(operand);
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,68,if (type.isStruct()) {
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,69,type = type.getFieldList().get(0).getType();
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,71,MultisetSqlType t = (MultisetSqlType) type;
core/src/main/java/org/apache/calcite/sql/validate/UnnestNamespace.java,72,return t.getComponentType();
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,334,return Collections.singletonList(t0).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,445,return Arrays.asList(t0, t1).equals(o);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,575,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,687,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,724,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,852,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4 + "]";
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,892,return o.equals(this);
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1036,return "[" + t0 + ", " + t1 + ", " + t2 + "," + t3 + ", " + t4
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1080,return o.equals(this);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,189,for (Ord<RexNode> o : Ord.zip(project.getProjects())) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,190,if (o.e instanceof RexInputRef) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,191,int sIdx = ((RexInputRef) o.e).getIndex();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,192,m.set(sIdx, o.i);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,193,columnsMappedBuilder.set(sIdx);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,199,final ImmutableBitSet columnsMapped = columnsMappedBuilder.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,200,for (RexNode r : inputInfo.pulledUpPredicates) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,201,RexNode r2 = projectPredicate(rexBuilder, input, r, columnsMapped);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,202,if (!r2.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,203,r2 = r2.accept(new RexPermuteInputsShuttle(m, input));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,204,projectPullUpPredicates.add(r2);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,210,if (RexLiteral.isNullLiteral(expr.e)) {
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1457,&& !Join.class.isAssignableFrom(c)) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,47,ReturnTypes.LEAST_RESTRICTIVE,
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1222,RelDataTypeFamily family1 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1223,RelDataTypeFamily family2 = null;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1227,if (type1.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1228,family1 = type1.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1230,if (type2.getSqlTypeName() != null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1231,family2 = type2.getSqlTypeName().getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1233,if (family1 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1234,family1 = type1.getFamily();
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1236,if (family2 == null) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1237,family2 = type2.getFamily();
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,25,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,29,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql/validate/MatchRecognizeScope.java,50,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,124,import java.util.LinkedHashSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,129,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,351,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,417,List<Map.Entry<String, RelDataType>> types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,420,if (expandStar(selectItems, aliases, types, includeSystemVars, scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,457,types.add(Pair.of(alias, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,462,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,475,final int before = types.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,488,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,516,for (int i = before; i < types.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,517,final Map.Entry<String, RelDataType> entry = types.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,520,types.set(i,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,548,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,560,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,574,List<Map.Entry<String, RelDataType>> types, boolean includeSystemVars,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,583,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,593,types,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2995,for (int i = 0; i < list.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2996,SqlIdentifier id = (SqlIdentifier) list.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3022,SqlValidatorUtil.deriveNaturalJoinColumnList(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3023,leftRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3024,rightRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3027,final SqlNameMatcher nameMatcher = catalogReader.nameMatcher();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3103,if (Collections.frequency(rowType.getFieldNames(), name) > 1) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3731,assert fieldList.size() >= aliases.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3824,final List<Map.Entry<String, RelDataType>> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3827,types.add(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3828,Pair.of(SqlUtil.deriveAliasFromOrdinal(types.size()),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3848,types.add(targetField);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3850,return typeFactory.createStructType(types);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4643,: new TreeSet<>(String.CASE_INSENSITIVE_ORDER);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,60,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,685,&& (Collections.frequency(rightNames, name) == 1)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2004,SqlValidatorUtil.deriveNaturalJoinColumnList(leftRowType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2005,rightRowType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2006,conditionExp = convertUsing(leftNamespace, rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2007,columnList);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,19,import org.apache.calcite.avatica.AvaticaResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,88,closed = true;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,89,final CalciteConnectionImpl connection1 =
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,90,(CalciteConnectionImpl) connection;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,91,connection1.server.removeStatement(handle);
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,92,if (openResultSet != null) {
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,93,AvaticaResultSet c = openResultSet;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,94,openResultSet = null;
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,95,c.close();
core/src/main/java/org/apache/calcite/jdbc/CalciteStatement.java,99,connection1.getDriver().handler.onStatementClose(this);
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,66,static int nextId = 0;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,98,protected int id;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,115,this.id = nextId++;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,99,new JdbcJoinRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,100,new JdbcCalcRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,101,new JdbcProjectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,102,new JdbcFilterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,103,new JdbcAggregateRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,104,new JdbcSortRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,105,new JdbcUnionRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,106,new JdbcIntersectRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,107,new JdbcMinusRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,108,new JdbcTableModificationRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,109,new JdbcValuesRule(out));
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,133,super(clazz, in, out, description);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,276,private JdbcCalcRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,536,super(Sort.class, Convention.NONE, out, "JdbcSortRule");
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,626,private JdbcIntersectRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,670,private JdbcMinusRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,706,private JdbcTableModificationRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,784,private JdbcValuesRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,24,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,55,LogicalFilter oldFilter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,73,final RelFactories.FilterFactory factory =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,74,RelFactories.DEFAULT_FILTER_FACTORY;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,75,RelNode newFilterRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,76,factory.createFilter(oldFilter.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,77,oldFilterCond.accept(rewriteShuttle));
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,175,expr = relBuilder.field(source);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,176,++source;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,78,IntervalValue interval = (IntervalValue) value;
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,79,writer.keyword("INTERVAL");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,80,if (interval.getSign() == -1) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,81,writer.print("-");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,83,writer.literal("'" + value.toString() + "'");
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,84,writer.keyword(interval.intervalQualifier.toString());
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,205,private boolean useDefaultStartPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,253,private boolean useDefaultFractionalSecondPrecision() {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,308,unparse(RelDataTypeSystem.DEFAULT, writer);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,311,public void unparse(RelDataTypeSystem typeSystem, SqlWriter writer) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,312,final String start = timeUnitRange.startUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,313,final int fractionalSecondPrecision =
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,314,getFractionalSecondPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,315,final int startPrecision = getStartPrecision(typeSystem);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,316,if (timeUnitRange.startUnit == TimeUnit.SECOND) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,317,if (!useDefaultFractionalSecondPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,318,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,319,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,320,writer.sep(",", true);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,321,writer.print(getFractionalSecondPrecision(typeSystem));
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,322,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,324,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,325,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,326,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,328,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,331,if (!useDefaultStartPrecision()) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,332,final SqlWriter.Frame frame = writer.startFunCall(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,333,writer.print(startPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,334,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,336,writer.keyword(start);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,339,if (null != timeUnitRange.endUnit) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,340,writer.keyword("TO");
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,341,final String end = timeUnitRange.endUnit.name();
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,343,&& (!useDefaultFractionalSecondPrecision())) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,344,final SqlWriter.Frame frame = writer.startFunCall(end);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,345,writer.print(fractionalSecondPrecision);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,346,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,348,writer.keyword(end);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,52,InferTypes.FIRST_KNOWN,
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,53,OperandTypes.MINUS_DATE_OPERATOR);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,67,final SqlWriter.Frame frame = writer.startList("(", ")");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,68,call.operand(0).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,69,writer.sep("-");
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,70,call.operand(1).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,71,writer.endList(frame);
core/src/main/java/org/apache/calcite/sql/fun/SqlDatetimeSubtractionOperator.java,72,call.operand(2).unparse(writer, leftPrec, rightPrec);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,20,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,21,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,38,import org.apache.calcite.sql.SqlOperatorBinding;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,53,import org.apache.calcite.sql.type.IntervalSqlType;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,483,new SqlSpecialOperator("DATETIME_PLUS", SqlKind.PLUS, 40, true, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,484,InferTypes.FIRST_KNOWN, OperandTypes.PLUS_OPERATOR) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,486,inferReturnType(SqlOperatorBinding opBinding) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,487,final RelDataTypeFactory typeFactory = opBinding.getTypeFactory();
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,488,final RelDataType leftType = opBinding.getOperandType(0);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,489,final IntervalSqlType unitType =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,490,(IntervalSqlType) opBinding.getOperandType(1);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,491,switch (unitType.getIntervalQualifier().getStartUnit()) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,492,case HOUR:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,493,case MINUTE:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,494,case SECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,495,case MILLISECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,496,case MICROSECOND:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,497,return typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,498,typeFactory.createSqlType(SqlTypeName.TIMESTAMP),
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,499,leftType.isNullable() || unitType.isNullable());
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,500,default:
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,501,return leftType;
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,476,public static final SqlSingleOperandTypeChecker MINUS_DATE_OPERATOR =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,294,public RelOptPredicateList getPredicates(SemiJoin semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,295,RelMetadataQuery mq) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,296,RexBuilder rB = semiJoin.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,297,final RelNode left = semiJoin.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,298,final RelNode right = semiJoin.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,300,final RelOptPredicateList leftInfo = mq.getPulledUpPredicates(left);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,301,final RelOptPredicateList rightInfo = mq.getPulledUpPredicates(right);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,303,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,304,new JoinConditionBasedPredicateInference(semiJoin,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,305,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,306,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,308,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,313,RexBuilder rB = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,314,RelNode left = join.getInput(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,315,RelNode right = join.getInput(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,320,JoinConditionBasedPredicateInference jI =
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,322,RexUtil.composeConjunction(rB, leftInfo.pulledUpPredicates, false),
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,323,RexUtil.composeConjunction(rB, rightInfo.pulledUpPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,324,false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,326,return jI.inferPredicates(false);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,377,RexBuilder rB = union.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,402,finalResidualPreds.add(RexUtil.composeConjunction(rB, residualPreds, false));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,409,RexUtil.composeConjunction(rB,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,427,return RelOptPredicateList.of(rB, preds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,498,final Set<String> allExprsDigests;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,504,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,505,this(joinRel, joinRel instanceof SemiJoin, lPreds, rPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,509,RexNode lPreds, RexNode rPreds) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,524,allExprsDigests = new HashSet<>();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,536,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,550,allExprsDigests.add(r.toString());
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,596,final Set<String> allExprsDigests = new HashSet<>(this.allExprsDigests);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,601,infer(leftChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,610,infer(rightChildPredicates, allExprsDigests, inferredPredicates,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,679,List<RexNode> inferedPredicates, boolean includeEqualityInference,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,692,&& !isAlwaysTrue(tr)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,693,inferedPredicates.add(tr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,694,allExprsDigests.add(tr.toString());
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,811,final RexNode x = simplifierUnknownAsFalse.simplifyAnds(predicates);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,812,if (x.isAlwaysFalse()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,819,final RexNode x2 = simplifierUnknownAsFalse.removeNullabilityCast(x);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,821,if (!x2.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,823,final RelNode filter = filterFactory.createFilter(frame.rel, x2);
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,92,new Function<RelFieldCollation, Comparator<? super Row>>() {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,93,public Comparator<? super Row> apply(RelFieldCollation input) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,277,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/core/Project.java,304,for (Ord<RexNode> exp : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdCollation.java,214,for (Ord<RexNode> project : Ord.zip(projects)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,132,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,275,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,288,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,298,for (Ord<SqlOperandTypeChecker> ord : Ord.zip(allowedRules)) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,377,boolean fixpoint;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,380,fixpoint = true;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,386,if (newVertex != null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,387,++nMatches;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,388,if (nMatches >= currentProgram.matchLimit) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,389,return;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,391,if (fullRestartAfterTransformation) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,392,iter = getGraphIterator(root);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,397,iter = getGraphIterator(newVertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,401,fixpoint = false;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,403,break;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,227,side.newInput = joinInput;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,233,final Mappings.TargetMapping mapping =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,234,s == 0
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,236,: Mappings.createShiftMapping(fieldCount + offset, 0, offset,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,237,fieldCount);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,26,import org.apache.calcite.linq4j.tree.ClassDeclaration;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,27,import org.apache.calcite.linq4j.tree.MemberDeclaration;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,70,import org.codehaus.commons.compiler.IClassBodyEvaluator;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,74,import java.io.StringReader;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,78,import java.lang.reflect.Type;
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,363,ClassDeclaration decl = new ClassDeclaration(0, name, Object.class,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,364,ImmutableList.<Type>of(), ImmutableList.<MemberDeclaration>of());
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,368,return compile(decl, buff.toString(), def, argList);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,430,final IClassBodyEvaluator cbe = compilerFactory.newClassBodyEvaluator();
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,431,cbe.setClassName(expr.name);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,432,cbe.setImplementedInterfaces(new Class[]{def.handlerClass});
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,433,cbe.setParentClassLoader(JaninoRexCompiler.class.getClassLoader());
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,436,cbe.setDebuggingInformation(true, true, true);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,439,cbe.cook(new StringReader(s));
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,440,final Constructor constructor = cbe.getClazz().getDeclaredConstructors()[0];
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,446,| InvocationTargetException e) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,73,private static final int MAX_CONSTRUCTOR_ARG_COUNT = 10;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,178,Expressions.parameter(int.class, builder.newName("prevStart"));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,180,Expressions.parameter(int.class, builder.newName("prevEnd"));
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,176,if (!RexUtil.containsTableInputRef(inputPreds.pulledUpPredicates)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,177,newPreds = newPreds.union(rexBuilder, inputPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,178,continue;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,264,if (!RexUtil.containsTableInputRef(inputPreds.pulledUpPredicates)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,265,newPreds = newPreds.union(rexBuilder, inputPreds);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,266,continue;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,335,for (RexLiteral literal : tuple) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1815,return Expressions.makeUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1816,expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1817,translatedOperands.get(0));
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1609,return new UnaryExpression(expressionType, expression.getType(),
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1610,expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnion.java,68,pref = pref.of(result.format);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,925,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,928,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,929,final List<Expression> translatedOperands =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,933,return nullAs.handle(result);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,473,Expression nullHandled = nullAs.handle(input);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,476,if (nullHandled instanceof ConstantExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,477,return nullHandled;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,482,if (nullHandled == input) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,483,return input;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,490,String unboxVarName = "v_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,491,if (input instanceof ParameterExpression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,492,unboxVarName = ((ParameterExpression) input).name + "_unboxed";
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,494,ParameterExpression unboxed = Expressions.parameter(nullHandled.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,495,list.newName(unboxVarName));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,496,list.add(Expressions.declare(Modifier.FINAL, unboxed, nullHandled));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,498,return unboxed;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1004,newContext =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1005,aliasContext(ImmutableMap.of(neededAlias, rel.getRowType()),
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1006,qualified);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,21,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,23,import org.apache.calcite.sql.SqlOperator;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,25,import org.apache.calcite.sql.SqlSyntax;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,26,import org.apache.calcite.sql.util.SqlBasicVisitor;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,29,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,37,class AggFinder extends SqlBasicVisitor<Void> {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,40,private final SqlOperatorTable opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,43,private final boolean over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,46,private boolean aggregate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,50,private boolean group;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,52,private final AggFinder delegate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,68,this.opTab = opTab;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,69,this.over = over;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,70,this.aggregate = aggregate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,71,this.group = group;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,72,this.delegate = delegate;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,105,public Void visit(SqlCall call) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,106,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,109,if (delegate != null) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,110,return operator.acceptCall(delegate, call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,112,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,113,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,116,if (group && operator.isGroup()) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,117,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,120,if (operator instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,121,final SqlFunction sqlFunction = (SqlFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,122,if (sqlFunction.getFunctionType().isUserDefinedNotSpecificFunction()) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,123,final List<SqlOperator> list = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,124,opTab.lookupOperatorOverloads(sqlFunction.getSqlIdentifier(),
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,125,sqlFunction.getFunctionType(), SqlSyntax.FUNCTION, list);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,126,for (SqlOperator operator2 : list) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,127,if (operator2.isAggregator() && !operator2.requiresOver()) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,129,if (aggregate) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,130,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,136,if (call.isA(SqlKind.QUERY)) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,140,if (call.getKind() == SqlKind.OVER) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,141,if (over) {
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,142,throw new Util.FoundOne(call);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,145,return null;
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,148,return super.visit(call);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2652,for (SqlNode node : select.getSelectList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2653,if (node instanceof SqlCall) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2654,SqlCall call = (SqlCall) overFinder.findAgg(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2655,if (call != null
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2656,&& call.getOperator().getKind() == SqlKind.OVER
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2657,&& call.getOperandList().size() != 0) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2658,if (call.operand(0) instanceof SqlCall
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2659,&& isNestedAggregateWindow((SqlCall) call.operand(0))) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2660,return true;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2668,protected boolean isNestedAggregateWindow(SqlCall windowFunction) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2671,return nestedAggFinder.findAgg(windowFunction) != null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,285,switch (node.getKind()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,286,case EXTRACT:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,288,break;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,289,case FLOOR:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,291,break;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,292,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,296,if (call.operands.size() != 2) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,297,return null;
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,113,.getDefault().toLanguageTag());
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,124,public static boolean isValidTimeExtract(RexCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,125,if (call.getKind() != SqlKind.EXTRACT) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,161,if (isStar(e.getChildExps(), e.getInput().getRowType())) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,216,public static boolean isStar(List<RexNode> exps, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,225,return i == inputRowType.getFieldCount();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,283,public static Granularity extractGranularity(RexNode node) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,301,if (timeUnit == null) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,302,return null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,304,switch (timeUnit) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,305,case YEAR:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,306,return Granularity.YEAR;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,307,case QUARTER:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,308,return Granularity.QUARTER;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,309,case MONTH:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,310,return Granularity.MONTH;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,311,case WEEK:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,312,return Granularity.WEEK;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,313,case DAY:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,314,return Granularity.DAY;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,315,case HOUR:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,316,return Granularity.HOUR;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,317,case MINUTE:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,318,return Granularity.MINUTE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,319,case SECOND:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,320,return Granularity.SECOND;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,321,default:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,322,return null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,520,Granularity finalGranularity = Granularity.ALL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,541,finalGranularity = Granularity.ALL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,557,final Granularity funcGranularity = DruidDateTimeUtils.extractGranularity(call);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,563,finalGranularity = Granularity.ALL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,564,extractColumnName = SqlValidatorUtil.uniquify(EXTRACT_COLUMN_NAME_PREFIX
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,565,+ "_" + funcGranularity.value, usedFieldNames,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,566,SqlValidatorUtil.EXPR_SUGGESTER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,576,extractColumnName = SqlValidatorUtil.uniquify(FLOOR_COLUMN_NAME_PREFIX
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,577,+ "_" + funcGranularity.value, usedFieldNames,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,578,SqlValidatorUtil.EXPR_SUGGESTER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,582,finalGranularity = Granularity.ALL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,608,finalGranularity = Granularity.ALL;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,662,&& finalGranularity == Granularity.ALL
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,697,generator.writeStringField("granularity", finalGranularity.value);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,717,generator.writeStringField("granularity", finalGranularity.value);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,733,generator.writeStringField("granularity", finalGranularity.value);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,755,generator.writeStringField("granularity", finalGranularity.value);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,978,assert DruidDateTimeUtils.extractGranularity(call) != null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1025,ExtractionFunction extractionFunction = null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,486,if (DruidDateTimeUtils.extractGranularity(call) == null) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,644,assert DruidDateTimeUtils.extractGranularity(call) != null;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,676,assert DruidDateTimeUtils.extractGranularity(call) != null;
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,22,public enum Granularity {
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,23,ALL,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,24,YEAR,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,25,QUARTER,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,26,MONTH,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,27,WEEK,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,28,DAY,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,29,HOUR,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,30,MINUTE,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,31,SECOND,
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,32,NONE;
druid/src/main/java/org/apache/calcite/adapter/druid/Granularity.java,35,public final String value = name().toLowerCase(Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,48,TimeUnitRange.WEEK);
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,52,private final String granularity;
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,56,public TimeExtractionFunction(String format, String granularity, String timeZone, String local) {
druid/src/main/java/org/apache/calcite/adapter/druid/TimeExtractionFunction.java,91,switch (granularity) {
piglet/src/main/java/org/apache/calcite/piglet/Ast.java,573,for (Ord<Node> n : Ord.zip(list)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,122,: listGetter(fields);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,746,exprsLineage.add(s.iterator().next());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,447,distinctAggCalls.add(aggCall.left.rename(aggCall.right));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,25,import org.apache.calcite.interpreter.Interpreter;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1103,DruidQueryNode(Interpreter interpreter, DruidQuery query) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,839,String newDigest = rel.recomputeDigest();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,23,import org.apache.calcite.interpreter.Interpreter;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,82,return new EnumerableNode(enumerable, implementor.interpreter, this);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,190,Interpreter interpreter, EnumerableInterpretable rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,192,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,33,this.source = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,34,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,66,public AggregateNode(Interpreter interpreter, Aggregate rel) {
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,67,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,68,this.dataContext = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,298,return new FilterNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,348,return new ProjectNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,398,return new SortNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,461,return new JoinNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,506,return new UnionNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,532,return new ValuesNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,603,return new AggregateNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,658,return new WindowNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,31,public FilterNode(Interpreter interpreter, Filter rel) {
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,32,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,34,interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/FilterNode.java,36,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,38,public final Interpreter interpreter;
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,45,public InterpreterImplementor(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/InterpretableRel.java,48,this.interpreter = interpreter;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,47,import com.google.common.collect.Maps;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,65,final Map<RelNode, NodeInfo> nodes = Maps.newLinkedHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,68,private final Map<RelNode, List<RelNode>> relInputs = Maps.newHashMap();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,69,protected final ScalarCompiler scalarCompiler;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,74,this.scalarCompiler =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,75,new JaninoRexCompiler(rootRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,77,final Compiler compiler = new Nodes.CoreCompiler(this);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,78,this.rootRel = compiler.visitRoot(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,101,final ArrayDeque<Row> queue = ((ListSink) nodeInfo.sink).list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,128,public Scalar compile(List<RexNode> nodes, RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,129,if (inputRowType == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,130,inputRowType = dataContext.getTypeFactory().builder().build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,132,return scalarCompiler.compile(nodes, inputRowType);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,135,RelDataType combinedRowType(List<RelNode> inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,137,dataContext.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,138,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,139,builder.addAll(input.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,141,return builder.build();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,252,public Source source(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,253,final RelNode input = getInput(rel, ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,254,final NodeInfo nodeInfo = nodes.get(input);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,255,if (nodeInfo == null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,256,throw new AssertionError("should be registered: " + rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,258,if (nodeInfo.rowEnumerable != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,259,return new EnumeratorSource(nodeInfo.rowEnumerable.enumerator());
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,261,Sink sink = nodeInfo.sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,262,if (sink instanceof ListSink) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,263,return new ListSource((ListSink) nodeInfo.sink);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,265,throw new IllegalStateException(
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,269,private RelNode getInput(RelNode rel, int ordinal) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,270,final List<RelNode> inputs = relInputs.get(rel);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,271,if (inputs != null) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,272,return inputs.get(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,274,return rel.getInput(ordinal);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,287,public Sink sink(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,288,final ArrayDeque<Row> queue = new ArrayDeque<>(1);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,289,final Sink sink = new ListSink(queue);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,290,NodeInfo nodeInfo = new NodeInfo(rel, sink, null);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,291,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,292,return sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,305,public void enumerable(RelNode rel, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,306,NodeInfo nodeInfo = new NodeInfo(rel, null, rowEnumerable);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,307,nodes.put(rel, nodeInfo);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,310,public Context createContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,311,return new Context(dataContext);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,314,public DataContext getDataContext() {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,315,return dataContext;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,321,final Sink sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,327,this.sink = sink;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,390,this.list = sink.list;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,395,return list.remove();
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,419,public static class Compiler extends RelVisitor implements ReflectiveVisitor {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,420,private final ReflectiveVisitDispatcher<Compiler, RelNode> dispatcher =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,421,ReflectUtil.createDispatcher(Compiler.class, RelNode.class);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,430,Compiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,434,public RelNode visitRoot(RelNode p) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,437,return rootRel;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,456,List<RelNode> inputs = interpreter.relInputs.get(parent);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,459,interpreter.relInputs.put(parent, inputs);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,468,final List<RelNode> inputs = interpreter.relInputs.get(p);
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,484,new InterpretableRel.InterpreterImplementor(interpreter, null,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,485,null));
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,492,final NodeInfo nodeInfo = interpreter.nodes.get(p);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,38,public JoinNode(Interpreter interpreter, Join rel) {
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,39,this.leftSource = interpreter.source(rel, 0);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,40,this.rightSource = interpreter.source(rel, 1);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,42,this.condition = interpreter.compile(ImmutableList.of(rel.getCondition()),
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,43,interpreter.combinedRowType(rel.getInputs()));
core/src/main/java/org/apache/calcite/interpreter/JoinNode.java,45,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,41,public static class CoreCompiler extends Interpreter.Compiler {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,42,CoreCompiler(Interpreter interpreter) {
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,43,super(interpreter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,47,node = new AggregateNode(interpreter, agg);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,51,node = new FilterNode(interpreter, filter);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,55,node = new ProjectNode(interpreter, project);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,59,node = new ValuesNode(interpreter, value);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,63,node = TableScanNode.create(interpreter, scan,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,64,ImmutableList.<RexNode>of(), null);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,68,node = TableScanNode.create(interpreter, scan, scan.filters,
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,69,scan.projects);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,73,node = new SortNode(interpreter, sort);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,77,node = new UnionNode(interpreter, union);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,81,node = new JoinNode(interpreter, join);
core/src/main/java/org/apache/calcite/interpreter/Nodes.java,85,node = new WindowNode(interpreter, window);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,30,public ProjectNode(Interpreter interpreter, Project rel) {
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,31,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,33,this.scalar = interpreter.compile(rel.getProjects(),
core/src/main/java/org/apache/calcite/interpreter/ProjectNode.java,35,this.context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,37,public SortNode(Interpreter interpreter, Sort rel) {
core/src/main/java/org/apache/calcite/interpreter/SortNode.java,38,super(interpreter, rel);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,62,private TableScanNode(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,64,interpreter.enumerable(rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,67,public void run() throws InterruptedException {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,76,static TableScanNode create(Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,82,return createProjectableFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,88,return createFilterable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,94,return createScannable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,100,return createEnumerable(interpreter, rel, enumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,106,return createQueryable(interpreter, rel, filters, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,113,private static TableScanNode createScannable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,114,TableScan rel, ImmutableList<RexNode> filters, ImmutableIntList projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,117,Enumerables.toRow(scannableTable.scan(interpreter.getDataContext()));
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,118,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,122,private static TableScanNode createQueryable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,125,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,166,return createEnumerable(interpreter, rel, rowEnumerable, null, filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,170,private static TableScanNode createFilterable(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,173,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,183,return createEnumerable(interpreter, rel, rowEnumerable, null,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,187,private static TableScanNode createProjectableFilterable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,188,Interpreter interpreter, TableScan rel, ImmutableList<RexNode> filters,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,189,ImmutableIntList projects, ProjectableFilterableTable pfTable) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,190,final DataContext root = interpreter.getDataContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,237,return createEnumerable(interpreter, rel, rowEnumerable, projects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,242,private static TableScanNode createEnumerable(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,243,Interpreter interpreter, TableScan rel,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,244,Enumerable<Row> enumerable, final ImmutableIntList acceptedProjects,
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,245,List<RexNode> rejectedFilters, final ImmutableIntList rejectedProjects) {
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,270,interpreter.compile(
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,271,ImmutableList.of(filter2), inputRowType);
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,272,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,295,return new TableScanNode(interpreter, rel, enumerable);
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,35,public UnionNode(Interpreter interpreter, Union rel) {
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,38,builder.add(interpreter.source(rel, i));
core/src/main/java/org/apache/calcite/interpreter/UnionNode.java,41,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,37,public ValuesNode(Interpreter interpreter, Values rel) {
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,38,this.sink = interpreter.sink(rel);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,40,this.rows = createRows(interpreter, rel.getTuples());
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,43,private ImmutableList<Row> createRows(Interpreter interpreter,
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,49,final Scalar scalar = interpreter.compile(nodes, null);
core/src/main/java/org/apache/calcite/interpreter/ValuesNode.java,51,final Context context = interpreter.createContext();
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,26,WindowNode(Interpreter interpreter, Window rel) {
core/src/main/java/org/apache/calcite/interpreter/WindowNode.java,27,super(interpreter, rel);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,410,return new DruidQueryNode(implementor.interpreter, this);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,224,return foo(call.getKind().reverse(),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,231,return foo(call.getKind(), ((RexCall) op0).getOperands().get(1),
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,232,(RexLiteral) op1);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,286,RexNode foo(SqlKind comparison, RexNode operand, RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,302,s2.add(baz(timeUnit, comparison, c));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,313,s2.add(baz(timeUnit, comparison, c));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,359,rexBuilder.makeDateLiteral(
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,360,DateString.fromCalendarFields(r.lowerEndpoint()))));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,368,rexBuilder.makeDateLiteral(
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,369,DateString.fromCalendarFields(r.upperEndpoint()))));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,374,private Range<Calendar> baz(TimeUnitRange timeUnit, SqlKind comparison,
core/src/main/java/org/apache/calcite/plan/hep/HepMatchOrder.java,40,TOP_DOWN
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,373,currentProgram.matchOrder != HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,421,if (currentProgram.matchOrder == HepMatchOrder.ARBITRARY) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,425,assert start == root;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,432,Iterable<HepRelVertex> iter =
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,433,TopologicalOrderIterator.of(graph);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,435,if (currentProgram.matchOrder == HepMatchOrder.TOP_DOWN) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,436,return iter.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,441,assert currentProgram.matchOrder == HepMatchOrder.BOTTOM_UP;
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,442,final List<HepRelVertex> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,443,for (HepRelVertex vertex : iter) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,444,list.add(vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,446,Collections.reverse(list);
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,447,return list.iterator();
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,840,if (mapDigestToVertex.get(newDigest) == null) {
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,841,mapDigestToVertex.put(newDigest, vertex);
core/src/main/java/org/apache/calcite/plan/hep/HepProgram.java,69,matchOrder = HepMatchOrder.ARBITRARY;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,46,import com.google.common.collect.ImmutableSet;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,125,public static Set<TimeUnitRange> extractTimeUnits(RexNode e) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,130,return ImmutableSet.copyOf(finder.timeUnits);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,147,RexNode condition = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,148,final Map<String, RangeSet<Calendar>> operandRanges = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,149,Set<TimeUnitRange> timeUnitRangeSet = extractTimeUnits(condition);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,150,if (!timeUnitRangeSet.contains(TimeUnitRange.YEAR)) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,152,return;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,154,for (TimeUnitRange timeUnit : timeUnitRangeSet) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,155,condition = condition.accept(
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,156,new ExtractShuttle(rexBuilder, timeUnit, operandRanges));
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,197,public static class ExtractShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,203,public ExtractShuttle(RexBuilder rexBuilder, TimeUnitRange timeUnit,
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,204,Map<String, RangeSet<Calendar>> operandRanges) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,205,this.rexBuilder = rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,206,this.timeUnit = timeUnit;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,209,this.operandRanges = operandRanges;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,223,if (isExtractCall(op1)) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,230,if (isExtractCall(op0)) {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,259,RexNode clonedOperand = operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,911,terms.set(terms.indexOf(term), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,945,terms.set(terms.indexOf(term), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,980,terms.set(terms.indexOf(term), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1014,terms.set(terms.indexOf(term), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,214,class SumSplitter implements SqlSplittableAggFunction {
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,215,public static final SumSplitter INSTANCE = new SumSplitter();
core/src/main/java/org/apache/calcite/sql/fun/SqlSumEmptyIsZeroAggFunction.java,71,return clazz.cast(SqlSplittableAggFunction.SumSplitter.INSTANCE);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,245,call1 = splitter.split(aggCall.e, mapping);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,74,new RelFieldCollation(key,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,75,RelFieldCollation.Direction.ASCENDING,
core/src/main/java/org/apache/calcite/rel/RelCollations.java,59,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,63,return new RelCollationImpl(ImmutableList.copyOf(fieldCollations));
core/src/main/java/org/apache/calcite/rel/RelCollations.java,113,return Lists.transform(collation.getFieldCollations(),
core/src/main/java/org/apache/calcite/rel/RelCollations.java,150,if (contains(collation, keys)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2936,convertOrderItem(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2937,select,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2938,orderItem,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2939,extraOrderExprs,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1552,fieldCollations.add(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1554,extraNodes));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,275,boolean filterOnMetrics = false;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,276,for (Integer i : visitor.inputPosReferenced) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,277,if (input.druidTable.isMetric(input.getRowType().getFieldList().get(i).getName())) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,279,filterOnMetrics = true;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,280,break;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,283,if (filterOnMetrics) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,284,nonPushableNodes.add(conj);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,286,pushableNodes.add(conj);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,425,if (checkAggregateOnMetric(aggregate.getGroupSet(), aggregate, query)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,426,return false;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,462,if (checkAggregateOnMetric(aggregate.getGroupSet(), project, query)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,463,return;
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1166,SqlToRelConverter sqlToRelConverter =
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1167,new SqlToRelConverter(this, validator, catalogReader, cluster,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1168,convertletTable, config);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1169,return sqlToRelConverter;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2372,return RelOptUtil.pushDownJoinConditions(originalJoin);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5421,inSubQueryThreshold);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5433,private final int inSubQueryThreshold;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5438,boolean expand, int inSubQueryThreshold) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,683,if (aggregations.isEmpty()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,686,aggregations.add(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,687,new JsonAggregation("longSum", "dummy_agg", "dummy_agg"));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,706,generator.writeBooleanField("skipEmptyBuckets", true);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,1257,BOUND;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,193,if (!canPush(cond)) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,194,return;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,294,private static boolean canPush(RexNode cond) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,296,return !cond.isAlwaysFalse();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,550,if (!containsNullableFields(seekRel)) {
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,30,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,31,import java.util.List;
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,89,final List<SqlOperatorTable> tables = new ArrayList<>();
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,91,tables.add(operatorTable(s));
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,98,private static SqlOperatorTable operatorTable(String s) {
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,101,return SqlStdOperatorTable.instance();
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,103,return ChainedSqlOperatorTable.of(OracleSqlOperatorTable.instance(),
core/src/main/java/org/apache/calcite/config/CalciteConnectionConfigImpl.java,104,SqlStdOperatorTable.instance());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,325,final List<RelDataType> paramTypes = toSql(argTypes);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,346,private SqlReturnTypeInference infer(final ScalarFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,350,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,355,private SqlReturnTypeInference infer(final AggregateFunction function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,359,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,364,private List<RelDataType> toSql(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,368,return toSql(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,373,private RelDataType toSql(RelDataType type) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,113,for (List<String> schemaPath : schemaPaths) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,114,Prepare.PreparingTable table =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,115,getTableFrom(names, schemaPath, nameMatcher);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,116,if (table != null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,117,return table;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,120,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,123,private Prepare.PreparingTable getTableFrom(List<String> names,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,125,CalciteSchema schema =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,126,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,127,nameMatcher);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,128,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,129,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,131,final String name = Util.last(names);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,132,CalciteSchema.TableEntry entry =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,133,schema.getTable(name, nameMatcher.isCaseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,134,if (entry == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,135,entry = schema.getTableBasedOnNullaryFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,136,nameMatcher.isCaseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,147,return RelOptTableImpl.create(this, table.getRowType(typeFactory), entry,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,148,null);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,166,CalciteSchema schema = getSchema(schemaPath, nameMatcher);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,174,getSchema(Iterables.concat(schemaNames, Util.skipLast(names)),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,175,nameMatcher);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,184,private CalciteSchema getSchema(Iterable<String> schemaNames,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,185,SqlNameMatcher nameMatcher) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,186,CalciteSchema schema = rootSchema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,187,for (String schemaName : schemaNames) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,188,if (schema == rootSchema
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,189,&& nameMatcher.matches(schemaName, schema.getName())) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,190,continue;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,192,schema = schema.getSubSchema(schemaName, nameMatcher.isCaseSensitive());
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,193,if (schema == null) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,194,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,197,return schema;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,205,final CalciteSchema schema = getSchema(names, nameMatcher);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,29,import org.apache.calcite.rex.RexSimplify;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,122,final RexSimplify simplify =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,124,newCondition = simplify.removeNullabilityCast(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,126,newCondition);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,828,while (RexUtil.isNullabilityCast(rexBuilder.getTypeFactory(), e)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,829,e = ((RexCall) e).operands.get(0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,831,return e;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,966,if (convertedWhere.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,972,final RelNode filter = factory.createFilter(bb.root, convertedWhere);
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,109,CacheBuilder.newBuilder().build(
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,110,new CacheLoader<Key, MetadataHandler>() {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,111,public MetadataHandler load(@Nonnull Key key) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,113,return load3(key.def, key.provider.handlers(key.def),
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,114,key.relClasses);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1113,if (isAny(type1) || isAny(type2)) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeUtil.java,1114,return true;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,329,assert (sink != null) != (rowEnumerable != null) : "one or the other";
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,19,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,34,private final LoadingCache<Pair<Lattice, Lattice.Column>, Integer> cache;
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,41,new CacheLoader<Pair<Lattice, Lattice.Column>, Integer>() {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,43,throws Exception {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,44,return provider.cardinality(key.left, key.right);
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,49,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,50,try {
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,51,return cache.get(Pair.of(lattice, column));
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,53,Util.throwIfUnchecked(e.getCause());
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,54,throw new RuntimeException(e.getCause());
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,36,public int cardinality(Lattice lattice, Lattice.Column column) {
core/src/main/java/org/apache/calcite/materialize/DelegatingLatticeStatisticProvider.java,37,return provider.cardinality(lattice, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,63,import java.math.BigInteger;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,116,LatticeStatisticProvider statisticProvider, Double rowCountEstimate,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,117,ImmutableList<Column> columns, ImmutableList<Measure> defaultMeasures,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,118,ImmutableList<Tile> tiles) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,125,this.statisticProvider = Preconditions.checkNotNull(statisticProvider);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,237,final ImmutableBitSet.Builder columnSetBuilder = groupSet.rebuild();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,238,for (Measure call : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,239,for (Column arg : call.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,240,columnSetBuilder.set(arg.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,243,final ImmutableBitSet columnSet = columnSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,247,List<Node> usedNodes = Lists.newArrayList();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,248,for (Node node : nodes) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,250,.intersects(columnSet)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,251,use(usedNodes, node);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,254,if (usedNodes.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,255,usedNodes.add(nodes.get(0));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,262,for (int i : groupSet) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,263,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,264,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,265,groupBuf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,267,final Column column = columns.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,268,dialect.quoteIdentifier(buf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,269,dialect.quoteIdentifier(groupBuf, column.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,270,final String fieldName = uniqueColumnNames.get(i);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,271,columnNames.add(fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,272,if (!column.alias.equals(fieldName)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,273,buf.append(" AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,274,dialect.quoteIdentifier(buf, fieldName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,277,if (groupSet.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,278,groupBuf.append("()");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,280,int m = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,281,for (Measure measure : aggCallList) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,282,if (k++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,283,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,286,.append("(");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,287,if (measure.args.isEmpty()) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,288,buf.append("*");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,290,int z = 0;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,291,for (Column arg : measure.args) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,292,if (z++ > 0) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,293,buf.append(", ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,295,dialect.quoteIdentifier(buf, arg.identifiers());
core/src/main/java/org/apache/calcite/materialize/Lattice.java,298,buf.append(") AS ");
core/src/main/java/org/apache/calcite/materialize/Lattice.java,299,String measureName;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,300,while (!columnNames.add(measureName = "m" + m)) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,301,++m;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,303,dialect.quoteIdentifier(buf, measureName);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,332,buf.append(groupBuf);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,390,BigInteger n = BigInteger.ONE;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,391,for (Column column : columns) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,392,final int cardinality = statisticProvider.cardinality(this, column);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,393,if (cardinality > 1) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,394,n = n.multiply(BigInteger.valueOf(cardinality));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,397,final double nn = n.doubleValue();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,398,final double f = getFactRowCount();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,399,final double a = (nn - 1d) / nn;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,402,return f;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,404,final double v = nn * (1d - Math.pow(a, f));
core/src/main/java/org/apache/calcite/materialize/Lattice.java,407,return Math.min(v, f);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,693,LatticeStatisticProvider statisticProvider =
core/src/main/java/org/apache/calcite/materialize/Lattice.java,695,? AvaticaUtils.instantiatePlugin(LatticeStatisticProvider.class,
core/src/main/java/org/apache/calcite/materialize/Lattice.java,818,this.measures = measures;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,819,this.dimensions = dimensions;
core/src/main/java/org/apache/calcite/materialize/Lattice.java,822,final ImmutableBitSet.Builder bitSetBuilder = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/materialize/Lattice.java,823,for (Column dimension : dimensions) {
core/src/main/java/org/apache/calcite/materialize/Lattice.java,824,bitSetBuilder.set(dimension.ordinal);
core/src/main/java/org/apache/calcite/materialize/Lattice.java,826,bitSet = bitSetBuilder.build();
core/src/main/java/org/apache/calcite/materialize/LatticeStatisticProvider.java,24,int cardinality(Lattice lattice, Lattice.Column column);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,26,public static final LatticeStatisticProvider SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,27,SqlLatticeStatisticProvider.INSTANCE;
core/src/main/java/org/apache/calcite/materialize/Lattices.java,30,public static final LatticeStatisticProvider CACHED_SQL =
core/src/main/java/org/apache/calcite/materialize/Lattices.java,31,cache(SqlLatticeStatisticProvider.INSTANCE);
core/src/main/java/org/apache/calcite/materialize/Lattices.java,34,public static LatticeStatisticProvider cache(
core/src/main/java/org/apache/calcite/materialize/Lattices.java,35,LatticeStatisticProvider provider) {
core/src/main/java/org/apache/calcite/materialize/Lattices.java,36,return new CachingLatticeStatisticProvider(provider);
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,31,static final SqlLatticeStatisticProvider INSTANCE =
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,32,new SqlLatticeStatisticProvider();
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,35,private SqlLatticeStatisticProvider() {}
core/src/main/java/org/apache/calcite/materialize/SqlLatticeStatisticProvider.java,44,return ((Number) values[0]).intValue();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,19,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,74,private static final boolean DEBUG = Math.random() >= 0;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,82,this(ordering, new HashMap<E, Node<E>>());
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,93,this(ordering, new HashMap<E, Node<E>>(collection.size() * 3 / 2));
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,103,private PartiallyOrderedSet(Ordering<E> ordering, Map<E, Node<E>> map) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,542,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,546,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,548,return new StripList<>(node.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,567,return null;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,571,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,573,return new StripList<>(node.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,577,public List<E> getNonChildren() {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,578,if (topNode.childList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,579,&& topNode.childList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,580,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,582,return new StripList<>(topNode.childList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,586,if (bottomNode.parentList.size() == 1
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,587,&& bottomNode.parentList.get(0).e == null) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,588,return Collections.emptyList();
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,590,return new StripList<>(bottomNode.parentList);
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,734,private static class StripList<E> extends AbstractList<E> {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,735,private final List<Node<E>> list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,738,this.list = list;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,742,return list.get(index).e;
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,746,return list.size();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,347,unknownType,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,599,CalciteServerStatement statement =
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,605,callback.assign(signature, null, -1);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,306,super(columns, sql, parameterList, internalParameters, cursorFactory, null);
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,307,this.rowType = rowType;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,308,this.rootSchema = rootSchema;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,309,this.collationList = collationList;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,310,this.maxRowCount = maxRowCount;
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,311,this.bindable = bindable;
core/src/main/java/org/apache/calcite/jdbc/CalciteResultSet.java,86,signature.rootSchema, ImmutableList.<RelCollation>of(), -1, null);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,767,final Bindable<T> bindable = new Bindable<T>() {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,768,public Enumerable<T> bind(DataContext dataContext) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,769,return Linq4j.emptyEnumerable();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,776,null, ImmutableList.<RelCollation>of(), -1, bindable);
core/src/main/java/org/apache/calcite/rel/type/RelDataType.java,35,public interface RelDataType /*extends Type*/ {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,532,List<RelCollation> outputCollations = new ArrayList<>(1);
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,519,ExInst<CalciteException> insertIntoAlwaysGenerated(String a0);
core/src/main/java/org/apache/calcite/runtime/ConsList.java,40,public static <E> List<E> of(E first, List<E> rest) {
core/src/main/java/org/apache/calcite/runtime/ConsList.java,44,return new ConsList<>(first, rest);
core/src/main/java/org/apache/calcite/schema/impl/AbstractTable.java,27,public abstract class AbstractTable implements Table {
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,95,return null;
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,196,assert table.unwrap(ModifiableViewTable.class) != null;
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,197,return false;
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,217,final Table schemaTable = viewTable.unwrap(Table.class);
core/src/main/java/org/apache/calcite/sql/SqlCreate.java,26,public abstract class SqlCreate extends SqlCall {
core/src/main/java/org/apache/calcite/sql/SqlCreate.java,31,public SqlCreate(SqlParserPos pos, boolean replace) {
core/src/main/java/org/apache/calcite/sql/SqlCreate.java,32,super(pos);
core/src/main/java/org/apache/calcite/sql/SqlDrop.java,26,public abstract class SqlDrop extends SqlCall {
core/src/main/java/org/apache/calcite/sql/SqlDrop.java,29,super(pos);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3467,Preconditions.checkNotNull(orderScope != null);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3892,checkFieldCount(insert.getTargetTable(), table, logicalSourceRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3893,logicalTargetRowType);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3998,private void checkFieldCount(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3999,SqlNode node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4000,SqlValidatorTable table,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4001,RelDataType logicalSourceRowType,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4017,if (!field.getType().isNullable()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4018,final RelDataTypeField targetField =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4019,logicalTargetRowType.getField(field.getName(), true, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4020,if (targetField == null
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4021,&& !table.columnHasDefaultValue(table.getRowType(),
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4022,field.getIndex(), rexBuilder)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorTable.java,30,public interface SqlValidatorTable {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorTable.java,59,<T> T unwrap(Class<T> clazz);
core/src/main/java/org/apache/calcite/sql2rel/NullInitializerExpressionFactory.java,35,return false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,200,import static org.apache.calcite.util.Static.RESOURCE;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3124,if (modifiableTable != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3213,public RelNode toRel(RelOptTable table) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3214,return table.toRel(createToRelContext());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3243,protected RelNode convertColumnList(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3244,SqlInsert call,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3245,RelNode sourceRel) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3246,RelDataType sourceRowType = sourceRel.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3254,final RelDataType targetRowType = targetTable.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3255,final List<RelDataTypeField> targetFields =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3256,targetRowType.getFieldList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3284,if (sourceExps.get(i) != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3285,if (initializerFactory.isGeneratedAlways(targetTable, i)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3286,throw RESOURCE.insertIntoAlwaysGenerated(fieldName).ex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3288,continue;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3290,sourceExps.set(i,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3291,initializerFactory.newColumnDefaultValue(targetTable, i,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3292,new InitializerContext() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3293,public RexBuilder getRexBuilder() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3294,return rexBuilder;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3299,sourceExps.set(i,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3300,castNullLiteralIfNeeded(sourceExps.get(i), field.getType()));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3303,return RelOptUtil.createProject(sourceRel, sourceExps, fieldNames, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3317,return new NullInitializerExpressionFactory();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3373,for (int i = 0; i < targetColumnNames.size(); i++) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3374,final RexNode expr = rexBuilder.makeFieldAccess(sourceRef, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3904,protected class Blackboard implements SqlRexContext, SqlVisitor<RexNode> {
core/src/main/java/org/apache/calcite/util/Util.java,228,public static boolean discard(boolean b) {
core/src/main/java/org/apache/calcite/util/Util.java,229,return b;
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,19,import org.apache.calcite.runtime.ConsList;
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,83,ConsList.of(graph1.source(edge), arc2Path));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,31,import org.apache.calcite.runtime.ConsList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,217,return dbCollection.aggregate(ConsList.of(first, rest));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,105,new FilterReduceExpressionsRule(LogicalFilter.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,112,new ProjectReduceExpressionsRule(LogicalProject.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,119,new JoinReduceExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,126,new CalcReduceExpressionsRule(LogicalCalc.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,137,super(filterClass, relBuilderFactory, "ReduceExpressionsRule(Filter)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,149,if (reduceExpressions(filter, expList, predicates, true)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,257,super(projectClass, relBuilderFactory, "ReduceExpressionsRule(Project)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,267,if (reduceExpressions(project, expList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,287,super(joinClass, relBuilderFactory, "ReduceExpressionsRule(Join)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,303,if (!reduceExpressions(join, expList, predicates, true)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,336,super(calcClass, relBuilderFactory, "ReduceExpressionsRule(Calc)");
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,356,if (reduceExpressions(calc, expandedExprList, predicates)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,428,RelBuilderFactory relBuilderFactory, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,429,super(operand(clazz, any()), relBuilderFactory, desc);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,444,return reduceExpressions(rel, expList, predicates, false);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,458,RelOptPredicateList predicates, boolean unknownAsFalse) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,470,final ExprSimplifier simplifier = new ExprSimplifier(simplify);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,183,ReduceExpressionsRule.reduceExpressions(values, reducibleExps, predicates);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2612,return simplify.rexBuilder.makeCast(call.getType(), simplifiedNode, true);
core/src/main/java/org/apache/calcite/util/DateString.java,39,this.v = v;
core/src/main/java/org/apache/calcite/util/DateString.java,40,Preconditions.checkArgument(PATTERN.matcher(v).matches(), v);
core/src/main/java/org/apache/calcite/util/DateString.java,76,int year = Integer.valueOf(v.substring(0, 4));
core/src/main/java/org/apache/calcite/util/DateString.java,77,int month = Integer.valueOf(v.substring(5, 7));
core/src/main/java/org/apache/calcite/util/DateString.java,78,int day = Integer.valueOf(v.substring(8, 10));
core/src/main/java/org/apache/calcite/util/TimeString.java,41,this.v = v;
core/src/main/java/org/apache/calcite/util/TimeString.java,42,Preconditions.checkArgument(PATTERN.matcher(v).matches(), v);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,278,public static final SqlBinaryOperator DOT =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,279,new SqlBinaryOperator(
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,281,SqlKind.DOT,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,282,80,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,283,true,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,284,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,285,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,286,OperandTypes.ANY_ANY);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,105,super(clazz, predicate, Convention.NONE, CassandraRel.CONVENTION, description);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,32,private CassandraToEnumerableConverterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,33,super(RelNode.class, CassandraRel.CONVENTION, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,89,new EnumerableToBindableConverterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,91,private EnumerableToBindableConverterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,92,super(EnumerableRel.class, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,93,BindableConvention.INSTANCE, "EnumerableToBindableConverterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,34,EnumerableConvention.INSTANCE, "EnumerableCalcRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,29,EnumerableCorrelateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,30,super(LogicalCorrelate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,31,EnumerableConvention.INSTANCE, "EnumerableCorrelateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,32,EnumerableConvention.INSTANCE, "EnumerableFilterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,30,EnumerableFilterToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,31,super(operand(EnumerableFilter.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,30,new EnumerableInterpreterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,32,private EnumerableInterpreterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,33,super(RelNode.class, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,34,EnumerableConvention.INSTANCE, "EnumerableInterpreterRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,32,EnumerableConvention.INSTANCE, "EnumerableProjectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,27,EnumerableProjectToCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,28,super(operand(EnumerableProject.class, any()));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,43,new EnumerableCorrelateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,79,new EnumerableValuesRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,97,new EnumerableTableScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,31,super(LogicalTableFunctionScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,32,EnumerableConvention.INSTANCE, "EnumerableTableFunctionScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,31,EnumerableTableModifyRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,32,super(LogicalTableModify.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableModifyRule.java,33,EnumerableConvention.INSTANCE, "EnumerableTableModificationRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,33,super(LogicalTableScan.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,34,EnumerableConvention.INSTANCE, "EnumerableTableScanRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,29,EnumerableValuesRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,30,super(LogicalValues.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,98,new JdbcToEnumerableConverterRule(out),
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,30,JdbcToEnumerableConverterRule(JdbcConvention out) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverterRule.java,31,super(RelNode.class, out, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,86,new BindableTableScanRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,89,new BindableFilterRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,92,new BindableProjectRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,95,new BindableSortRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,98,new BindableJoinRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,101,new BindableUnionRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,104,new BindableValuesRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,107,new BindableAggregateRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,110,new BindableWindowRule();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,139,private static class BindableTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,140,private BindableTableScanRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,141,super(operand(LogicalTableScan.class, none()));
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,243,private static class BindableFilterRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,244,private BindableFilterRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,246,BindableConvention.INSTANCE, "BindableFilterRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,306,private static class BindableProjectRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,307,private BindableProjectRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,309,BindableConvention.INSTANCE, "BindableProjectRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,356,private static class BindableSortRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,357,private BindableSortRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,358,super(Sort.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,406,private static class BindableJoinRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,407,private BindableJoinRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,408,super(LogicalJoin.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,469,private static class BindableUnionRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,470,private BindableUnionRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,471,super(LogicalUnion.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,537,private static class BindableValuesRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,538,private BindableValuesRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,539,super(LogicalValues.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,608,private static class BindableAggregateRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,609,private BindableAggregateRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,610,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,611,BindableConvention.INSTANCE, "BindableAggregateRule");
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,666,private static class BindableWindowRule extends ConverterRule {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,667,private BindableWindowRule() {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,668,super(LogicalWindow.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,31,new NoneToBindableConverterRule();
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,33,private NoneToBindableConverterRule() {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,34,super(RelNode.class, Convention.NONE, BindableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1547,new FilterOnProjectRule();
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1549,private FilterOnProjectRule() {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1552,some(operand(LogicalProject.class, any()))));
core/src/main/java/org/apache/calcite/plan/hep/HepPlanner.java,310,instruction.ruleSet.add(new TraitMatchingRule(converter));
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,103,new ExpandConversionRule();
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,108,private ExpandConversionRule() {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,109,super(operand(AbstractConverter.class, any()));
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,52,this(clazz, Predicates.<RelNode>alwaysTrue(), in, out, description);
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,66,String description) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,44,public TraitMatchingRule(ConverterRule converterRule) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,58,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,69,protected AggregateFilterTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,93,protected AggregateReduceFunctionsRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,37,new AggregateRemoveRule(LogicalAggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,44,public AggregateRemoveRule(Class<? extends Aggregate> aggregateClass) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,53,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,92,private AggregateStarTableRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,93,String description) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,94,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,55,public static final AggregateValuesRule INSTANCE = new AggregateValuesRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,57,private AggregateValuesRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,60,operand(Values.class, null, Values.IS_EMPTY, none())));
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,39,public static final CalcMergeRule INSTANCE = new CalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,43,private CalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,47,operand(Calc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,39,new CalcRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,43,private CalcRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,44,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,45,private CalcSplitRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,63,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,75,List<RelNode> newInputs = new ArrayList<RelNode>(inputs);
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,41,new FilterCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,45,private FilterCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,49,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,33,new FilterMultiJoinMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,40,private FilterMultiJoinMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,43,operand(MultiJoin.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,44,new FilterRemoveIsNotDistinctFromRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,48,private FilterRemoveIsNotDistinctFromRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,49,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,42,new FilterTableFunctionTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,49,private FilterTableFunctionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,52,operand(LogicalTableFunctionScan.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,95,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,46,public static final FilterToCalcRule INSTANCE = new FilterToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,50,private FilterToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,51,super(operand(LogicalFilter.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,39,new JoinAddRedundantSemiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,46,private JoinAddRedundantSemiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,47,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,52,public static final JoinAssociateRule INSTANCE = new JoinAssociateRule();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,59,private JoinAssociateRule() {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,63,operand(RelSubset.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,46,new JoinExtractFilterRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,54,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,71,protected JoinToCorrelateRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,105,new JoinToMultiJoinRule(LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,112,public JoinToMultiJoinRule(Class<? extends Join> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,116,operand(RelNode.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,50,private JoinUnionTransposeRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,51,String description) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,52,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,59,protected MaterializedViewFilterScanRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,90,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,47,new ProjectCalcMergeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,51,private ProjectCalcMergeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,55,operand(LogicalCalc.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,42,private ProjectMultiJoinMergeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,52,public static final ProjectRemoveRule INSTANCE = new ProjectRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,57,private ProjectRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,60,super(operand(Project.class, null, PREDICATE, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,37,new ProjectSortTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,44,private ProjectSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,46,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,47,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,51,super(operand);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,90,private ProjectTableScanRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,91,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,43,public static final ProjectToCalcRule INSTANCE = new ProjectToCalcRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,47,private ProjectToCalcRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,48,super(operand(LogicalProject.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,99,public static final ProjectToWindowRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,100,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,101,operand(Calc.class, null, PREDICATE, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,103,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,104,Calc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,105,assert RexOver.containsOver(calc.getProgram());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,106,final CalcRelSplitter transform =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,107,new WindowedAggRelSplitter(calc, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,108,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,109,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,119,public static final ProjectToWindowRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,120,new ProjectToWindowRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,121,operand(Project.class, null, PREDICATE2, any()),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,124,Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,125,assert RexOver.containsOver(project.getProjects(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,126,final RelNode input = project.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,127,final RexProgram program =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,128,RexProgram.create(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,129,input.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,130,project.getProjects(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,131,null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,132,project.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,133,project.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,135,final LogicalCalc calc = LogicalCalc.create(input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,136,final CalcRelSplitter transform = new WindowedAggRelSplitter(calc,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,137,call.builder()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,139,if (!(rel instanceof LogicalCalc)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,140,return rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,142,final LogicalCalc calc = (LogicalCalc) rel;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,143,final RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,144,relBuilder.push(calc.getInput());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,145,if (program.getCondition() != null) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,146,relBuilder.filter(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,147,program.expandLocalRef(program.getCondition()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,149,if (!program.projectsOnlyIdentity()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,150,relBuilder.project(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,151,Lists.transform(program.getProjectList(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,152,new Function<RexLocalRef, RexNode>() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,153,public RexNode apply(RexLocalRef a0) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,154,return program.expandLocalRef(a0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,157,calc.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,159,return relBuilder.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,162,RelNode newRel = transform.execute();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,163,call.transformTo(newRel);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,170,private ProjectToWindowRule(RelOptRuleOperand operand, String description) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,171,super(operand, description);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,49,new ProjectWindowTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,51,private ProjectWindowTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,54,operand(LogicalWindow.class, any())));
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,68,public static final ReduceDecimalsRule INSTANCE = new ReduceDecimalsRule();
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,75,private ReduceDecimalsRule() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,76,super(operand(LogicalCalc.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,40,new SemiJoinFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,47,private SemiJoinFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,50,some(operand(LogicalFilter.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,48,new SemiJoinJoinTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,55,private SemiJoinJoinTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,58,some(operand(Join.class, any()))));
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,36,new SemiJoinRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,41,private SemiJoinRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,42,super(operand(SemiJoin.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,48,LogicalJoin.class);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,57,operand(joinClass, any())));
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,53,new SortProjectTransposeRule(Sort.class, LogicalProject.class, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,61,this(sortClass, projectClass, null);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,69,super(
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,72,description);
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,33,public static final SortRemoveRule INSTANCE = new SortRemoveRule();
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,35,private SortRemoveRule() {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,36,super(
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,37,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,148,private SubQueryRemoveRule(RelOptRuleOperand operand,
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,34,public static final TableScanRule INSTANCE = new TableScanRule();
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,38,private TableScanRule() {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,39,super(operand(LogicalTableScan.class, any()));
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,31,new UnionEliminatorRule(LogicalUnion.class);
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,38,private UnionEliminatorRule(Class<? extends Union> clazz) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,39,super(operand(clazz, any()));
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,54,protected UnionPullUpConstantsRule(Class<? extends Union> unionClass,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,127,private ValuesReduceRule(RelOptRuleOperand operand, String desc) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,128,super(operand, desc);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,58,new DeltaProjectTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,59,new DeltaFilterTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,60,new DeltaAggregateTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,61,new DeltaSortTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,62,new DeltaUnionTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,63,new DeltaJoinTransposeRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,64,new DeltaTableScanRule(),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,65,new DeltaTableScanToEmptyRule());
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,69,private DeltaProjectTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,72,operand(Project.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,89,private DeltaFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,92,operand(Filter.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,108,private DeltaAggregateTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,130,private DeltaSortTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,133,operand(Sort.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,150,private DeltaUnionTransposeRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,153,operand(Union.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,178,private DeltaTableScanRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,181,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,212,private DeltaTableScanToEmptyRule() {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,215,operand(TableScan.class, none())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,246,operand(Join.class, any())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,80,public static final DruidFilterRule FILTER = new DruidFilterRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,81,public static final DruidProjectRule PROJECT = new DruidProjectRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,82,public static final DruidAggregateRule AGGREGATE = new DruidAggregateRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,84,new DruidAggregateProjectRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,85,public static final DruidSortRule SORT = new DruidSortRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,87,new DruidSortProjectTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,89,new DruidProjectSortTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,91,new DruidProjectFilterTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,93,new DruidFilterProjectTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,95,new DruidAggregateFilterTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,97,new DruidFilterAggregateTransposeRule();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,171,private static class DruidFilterRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,172,private DruidFilterRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,173,super(operand(Filter.class, operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,303,private static class DruidProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,304,private DruidProjectRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,305,super(operand(Project.class, operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,397,private static class DruidAggregateRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,398,private DruidAggregateRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,399,super(operand(Aggregate.class, operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,436,private static class DruidAggregateProjectRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,437,private DruidAggregateProjectRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,441,operand(DruidQuery.class, none()))));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,550,private static class DruidSortProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,552,private DruidSortProjectTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,555,operand(Project.class, operand(DruidQuery.class, none()))));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,564,private static class DruidProjectSortTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,566,private DruidProjectSortTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,569,operand(Sort.class, operand(DruidQuery.class, none()))));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,577,private static class DruidSortRule extends RelOptRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,578,private DruidSortRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,579,super(operand(Sort.class, operand(DruidQuery.class, none())));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,723,private static class DruidProjectFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,725,private DruidProjectFilterTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,731,RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,740,private static class DruidFilterProjectTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,742,private DruidFilterProjectTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,747,true, true, RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,756,private static class DruidAggregateFilterTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,758,private DruidAggregateFilterTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,763,RelFactories.LOGICAL_BUILDER);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,772,private static class DruidFilterAggregateTransposeRule
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,774,private DruidFilterAggregateTransposeRule() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,779,RelFactories.LOGICAL_BUILDER);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,34,new CsvProjectTableScanRule();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,36,private CsvProjectTableScanRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,30,new MongoToEnumerableConverterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,32,private MongoToEnumerableConverterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,33,super(RelNode.class, MongoRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,31,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,33,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,34,super(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,35,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,30,JdbcToSparkConverterRule(JdbcConvention out) {
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,31,super(
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,32,RelNode.class,
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverterRule.java,33,out, SparkRel.CONVENTION,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,75,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,76,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,77,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,78,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,79,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,80,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,86,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,87,LogicalFilter.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,88,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,89,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,95,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,96,LogicalFilter.class, operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,101,operand(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,102,LogicalProject.class,
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,108,super(rule, "SplunkPushDownRule: " + id);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,223,return super.computeSelfCost(planner, mq).multiplyBy(0.01d);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,788,SqlStdOperatorTable.SINGLE_VALUE, false, ImmutableList.of(i), -1,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,789,0, rel, null, null));
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1266,aggregateCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,69,this(aggFunction, distinct, argList, -1, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,104,return create(aggFunction, distinct, argList, -1, groupCount, input, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,105,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,122,return create(aggFunction, distinct, argList, filterArg, type, name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,129,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,130,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,190,return new AggregateCall(aggFunction, distinct, argList, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,191,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,253,return new AggregateCall(aggFunction, distinct, args, filterArg, type,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,254,name);
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,283,return create(aggFunction, distinct, argList, filterArg, newGroupKeyCount,
core/src/main/java/org/apache/calcite/rel/core/AggregateCall.java,284,input, newType, getName());
core/src/main/java/org/apache/calcite/rel/core/Match.java,31,import org.apache.calcite.sql.fun.SqlCountAggFunction;
core/src/main/java/org/apache/calcite/rel/core/Match.java,242,aggFunction = new SqlCountAggFunction();
core/src/main/java/org/apache/calcite/rel/core/Window.java,316,return AggregateCall.create((SqlAggFunction) aggCall.getOperator(),
core/src/main/java/org/apache/calcite/rel/core/Window.java,317,aggCall.distinct, getProjectOrdinals(aggCall.getOperands()), -1,
core/src/main/java/org/apache/calcite/rel/externalize/RelJsonReader.java,282,return AggregateCall.create(aggregation, distinct, operands,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1048,aggCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1049,null,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1051,ImmutableList.of(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1052,rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1053,relBuilder.peek(), aggregate.getGroupCount() + i))));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1251,queryAggCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1252,null,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1253,queryAggCall.name,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1254,ImmutableList.of(rexBuilder.makeInputRef(input, k))));
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1268,queryAggCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1269,null,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1270,queryAggCall.name,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,1271,ImmutableList.of(rexBuilder.makeInputRef(input, targetIdx))));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,332,aggCall.getArgList(), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,408,AggregateCall.create(aggCall.getAggregation(), false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,553,AggregateCall.create(aggregation, false, newArgList, newFilterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,554,aggregate.getGroupCount(), distinct, null, aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,749,AggregateCall.create(aggCall.getAggregation(), false, newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,837,AggregateCall.create(aggCall.getAggregation(), false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,150,ImmutableList.of(i++), -1, aggregateCall.type,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,151,aggregateCall.name));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,259,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,260,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,269,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,270,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,316,oldCall.getArgList(), oldCall.filterArg, oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,317,oldAggRel.getInput(), null, oldCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,319,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,320,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,416,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,417,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,438,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,439,SqlStdOperatorTable.COUNT,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,216,return AggregateCall.create(roll, false, ImmutableList.of(offset + i), -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,231,return AggregateCall.create(aggregation, false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,165,builder.aggregateCall(SqlStdOperatorTable.SINGLE_VALUE, false, null,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,166,null, builder.field(0)));
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,245,builder.aggregateCall(SqlStdOperatorTable.COUNT, false, null, "ck",
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,246,builder.fields()));
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,118,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,147,return AggregateCall.create(SqlStdOperatorTable.SUM0, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,230,return AggregateCall.create(SqlStdOperatorTable.COUNT, false,
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,261,return AggregateCall.create(SqlStdOperatorTable.SUM, false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,47,public SqlCountAggFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,48,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,50,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,51,SqlKind.COUNT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,52,ReturnTypes.BIGINT,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,53,null,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,57,SqlFunctionCategory.NUMERIC,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,58,false,
core/src/main/java/org/apache/calcite/sql/fun/SqlCountAggFunction.java,59,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,768,public static final SqlAggFunction COUNT = new SqlCountAggFunction();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,869,aggCall.isDistinct(), filterArg, aggCall.name, args);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1101,ImmutableList.<Integer>of(), -1, longType, null),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1103,args, -1, longType, null)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4861,final SqlAggFunction aggFunction =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4863,RelDataType type = validator.deriveType(bb.scope, call);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,149,aggregateCall(SqlStdOperatorTable.COLLECT, false, null, getAlias(), row));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,707,return aggregateCall(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,722,return new AggCallImpl(aggFunction, distinct, filter, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,728,return aggregateCall(SqlStdOperatorTable.COUNT, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,729,operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,734,return aggregateCall(SqlStdOperatorTable.COUNT, false, null, alias);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,739,return aggregateCall(SqlStdOperatorTable.SUM, distinct, null, alias,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,745,return aggregateCall(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,746,SqlStdOperatorTable.AVG, distinct, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,751,return aggregateCall(SqlStdOperatorTable.MIN, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,756,return aggregateCall(SqlStdOperatorTable.MAX, false, null, alias, operand);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1068,AggregateCall.create(aggCall1.aggFunction, aggCall1.distinct, args,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1732,AggCallImpl(SqlAggFunction aggFunction, boolean distinct, RexNode filter,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidQuery.java,814,if (config.approximateDistinctCount()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,136,|| aggregateCall.getArgList().isEmpty()) {
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,19,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/rel/RelDistribution.java,38,public interface RelDistribution extends RelTrait {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,112,final RexNode target = apply(e, filter.getVariablesSet(), logic,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1928,ret =
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1929,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1930,rexBuilder.getTypeFactory().createSqlType(SqlTypeName.BOOLEAN),
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,1931,ret);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,65,private final NullCollation nullCollation;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,616,MYSQL("MySQL", "`", NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,622,HIVE("Apache Hive", null, NullCollation.HIGH),
core/src/main/java/org/apache/calcite/sql/fun/SqlTrimFunction.java,122,return "{0}([BOTH|LEADING|TRAILING} {1} FROM {2})";
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,100,return dispatch(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,268,final SqlNodeList selects = new SqlNodeList(POS);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,269,for (List<RexLiteral> tuple : e.getTuples()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,270,selects.add(ANONYMOUS_ROW.createCall(exprList(context, tuple)));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,272,SqlNode query = SqlStdOperatorTable.VALUES.createCall(selects);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1926,convertFrom(bb, ((SqlCall) from).operand(0));
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,780,calciteTable.getJdbcTableType().name());
core/src/main/java/org/apache/calcite/schema/Schema.java,335,OTHER,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalc.java,154,new RexSimplify(rexBuilder, false, RexUtil.EXECUTOR);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,182,this.simplify = new RexSimplify(cluster.getRexBuilder(), false, executor);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,422,final RexSimplify simplify = new RexSimplify(rB, true, executor);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,180,new RexSimplify(rexBuilder, true,
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,181,planner.getExecutor() != null ? planner.getExecutor() : RexUtil.EXECUTOR);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,123,new RexSimplify(relBuilder.getRexBuilder(), false, RexUtil.EXECUTOR);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,464,new RexSimplify(rexBuilder, unknownAsFalse, executor);
core/src/main/java/org/apache/calcite/rex/RexProgram.java,789,return normalize(rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,790,simplify ? new RexSimplify(rexBuilder, false, RexUtil.EXECUTOR) : null);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,326,expr = new RexSimplify(rexBuilder, false, RexUtil.EXECUTOR).simplify(expr);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,546,boolean simplify) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,548,projectList, condition, outputRowType, normalize,
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,549,simplify ? new RexSimplify(rexBuilder, false, RexUtil.EXECUTOR) : null);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,63,public RexSimplify(RexBuilder rexBuilder, boolean unknownAsFalse,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,64,RexExecutor executor) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,77,: new RexSimplify(rexBuilder, unknownAsFalse, executor);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,180,final Comparable v0 = ((RexLiteral) o0).getValueAs(Comparable.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,181,final Comparable v1 = ((RexLiteral) o1).getValueAs(Comparable.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,209,return e;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,211,return rexBuilder.makeCall(e.op, operands);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,525,if (terms.size() == 1 && notTerms.isEmpty()) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,527,return simplify(terms.get(0));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,569,final Map<String, Pair<Range, List<RexNode>>> rangeTerms = new HashMap<>();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,619,final boolean leftRef = RexUtil.isReferenceOrAccess(left, true);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,620,final boolean rightRef = RexUtil.isReferenceOrAccess(right, true);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,621,final boolean leftConstant = left.isA(SqlKind.LITERAL);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,622,final boolean rightConstant = right.isA(SqlKind.LITERAL);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,624,if (leftRef && rightConstant) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,625,final String literal = right.toString();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,626,final String prevLiteral = equalityConstantTerms.put(left.toString(), literal);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,631,final String literal = left.toString();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,632,final String prevLiteral = equalityConstantTerms.put(right.toString(), literal);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,633,if (prevLiteral != null && !literal.equals(prevLiteral)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,634,return rexBuilder.makeLiteral(false);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,654,SqlKind comparison = null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,655,RexNode ref = null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,656,RexLiteral constant = null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,657,if (leftRef && rightConstant) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,658,comparison = term.getKind();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,659,ref = left;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,660,constant = (RexLiteral) right;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,662,comparison = term.getKind().reverse();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,663,constant = (RexLiteral) left;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,664,ref = right;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,667,&& comparison != SqlKind.NOT_EQUALS) { // NOT_EQUALS not supported
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,669,term, ref, constant, comparison);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,737,final Set<String> termsSet = new HashSet<String>(RexUtil.strings(terms));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,834,private static RexNode processRange(RexBuilder rexBuilder,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,835,List<RexNode> terms, Map<String, Pair<Range, List<RexNode>>> rangeTerms,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,836,RexNode term, RexNode ref, RexLiteral constant, SqlKind comparison) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,837,final Comparable v0 = constant.getValueAs(Comparable.class);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,838,Pair<Range, List<RexNode>> p = rangeTerms.get(ref.toString());
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,840,Range r;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,841,switch (comparison) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,842,case EQUALS:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,843,r = Range.singleton(v0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,844,break;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,845,case LESS_THAN:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,846,r = Range.lessThan(v0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,847,break;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,848,case LESS_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,849,r = Range.atMost(v0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,850,break;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,851,case GREATER_THAN:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,852,r = Range.greaterThan(v0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,853,break;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,854,case GREATER_THAN_OR_EQUAL:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,855,r = Range.atLeast(v0);
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,856,break;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,857,default:
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,858,throw new AssertionError();
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,861,new Pair(r, ImmutableList.of(term)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,866,Range r = p.left;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,874,new Pair(Range.singleton(v0), ImmutableList.of(term)));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,877,terms.set(terms.indexOf(e), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1024,if (e.isA(SqlKind.LESS_THAN) || e.isA(SqlKind.LESS_THAN_OR_EQUAL)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1025,terms.set(terms.indexOf(e), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1031,rangeTerms.put(ref.toString(), new Pair(r, newBounds.build()));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1035,if (e.isA(SqlKind.GREATER_THAN) || e.isA(SqlKind.GREATER_THAN_OR_EQUAL)) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1036,terms.set(terms.indexOf(e), rexBuilder.makeLiteral(true));
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,1042,rangeTerms.put(ref.toString(), new Pair(r, newBounds.build()));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1677,.simplifyPreservingType(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1690,.simplify(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1721,.simplify(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1734,.simplifyAnds(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1741,.simplifyAnds(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1792,.simplifyAnd(e);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1799,.simplifyAnd2(terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1806,.simplifyAnd2ForUnknownAsFalse(terms, notTerms);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1840,.simplifyOr(call);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1847,.simplifyOrs(terms);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,181,this.simplifier = new RexSimplify(cluster.getRexBuilder(), false, executor);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,183,new RexSimplify(cluster.getRexBuilder(), true, executor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,191,final RexSimplify simplify = new RexSimplify(rexBuilder, true, executor);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,830,iterationIdx[level] = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,127,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.EXTRACT_DATE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,322,defineMethod(EXTRACT_DATE, BuiltInMethod.UNIX_DATE_EXTRACT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,323,NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1164,public static final SqlSpecialOperator EXTRACT_DATE =
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1165,new SqlSpecialOperator("EXTRACT_DATE", SqlKind.EXTRACT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,21,import org.apache.calcite.avatica.util.TimeUnitRange;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,631,final RexBuilder rexBuilder = cx.getRexBuilder();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,632,final List<SqlNode> operands = call.getOperandList();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,633,final List<RexNode> exprs = convertExpressionList(cx, operands,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,634,SqlOperandTypeChecker.Consistency.NONE);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,637,RelDataType resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,638,cx.getTypeFactory().createSqlType(SqlTypeName.BIGINT);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,639,resType =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,640,cx.getTypeFactory().createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,641,resType,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,642,exprs.get(1).getType().isNullable());
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,643,RexNode res = rexBuilder.makeReinterpretCast(
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,644,resType, exprs.get(1), rexBuilder.makeLiteral(false));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,646,final TimeUnit unit =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,647,((SqlIntervalQualifier) operands.get(0)).getStartUnit();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,648,final SqlTypeName sqlTypeName = exprs.get(1).getType().getSqlTypeName();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,649,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,650,case MILLENNIUM:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,651,case CENTURY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,652,case YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,653,case QUARTER:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,654,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,655,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,656,case DOW:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,657,case DOY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,658,case WEEK:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,659,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,660,case INTERVAL_YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,661,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,662,case INTERVAL_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,663,case INTERVAL_DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,664,case INTERVAL_DAY_HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,665,case INTERVAL_DAY_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,666,case INTERVAL_DAY_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,667,case INTERVAL_HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,668,case INTERVAL_HOUR_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,669,case INTERVAL_HOUR_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,670,case INTERVAL_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,671,case INTERVAL_MINUTE_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,672,case INTERVAL_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,673,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,674,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,675,res = divide(rexBuilder, res, TimeUnit.DAY.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,677,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,678,return rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,679,ImmutableList.of(exprs.get(0), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,680,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,681,throw new AssertionError("unexpected " + sqlTypeName);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,683,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,684,case DECADE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,685,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,686,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,687,res = divide(rexBuilder, res, TimeUnit.DAY.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,689,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,690,res = rexBuilder.makeCall(resType, SqlStdOperatorTable.EXTRACT_DATE,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,691,ImmutableList.of(rexBuilder.makeFlag(TimeUnitRange.YEAR), res));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,692,return divide(rexBuilder, res, unit.multiplier.divide(TimeUnit.YEAR.multiplier));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,694,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,695,case EPOCH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,696,switch (sqlTypeName) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,697,case DATE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,699,res = rexBuilder.makeCall(resType, SqlStdOperatorTable.MULTIPLY,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,700,ImmutableList.of(res, rexBuilder.makeExactLiteral(TimeUnit.DAY.multiplier)));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,702,case TIMESTAMP:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,704,return divide(rexBuilder, res, TimeUnit.SECOND.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,705,case INTERVAL_YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,706,case INTERVAL_YEAR_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,707,case INTERVAL_MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,708,case INTERVAL_DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,709,case INTERVAL_DAY_HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,710,case INTERVAL_DAY_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,711,case INTERVAL_DAY_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,712,case INTERVAL_HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,713,case INTERVAL_HOUR_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,714,case INTERVAL_HOUR_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,715,case INTERVAL_MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,716,case INTERVAL_MINUTE_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,717,case INTERVAL_SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,719,return convertFunction(cx, (SqlFunction) call.getOperator(), call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,721,break;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,724,res = mod(rexBuilder, resType, res, getFactor(unit));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,725,if (unit == TimeUnit.QUARTER) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,726,res = minus(rexBuilder, res, rexBuilder.makeExactLiteral(BigDecimal.ONE));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,728,res = divide(rexBuilder, res, unit.multiplier);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,729,if (unit == TimeUnit.QUARTER) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,730,res = plus(rexBuilder, res, rexBuilder.makeExactLiteral(BigDecimal.ONE));
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,732,return res;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,735,private static BigDecimal getFactor(TimeUnit unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,736,switch (unit) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,737,case DAY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,738,return BigDecimal.ONE;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,739,case HOUR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,740,return TimeUnit.DAY.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,741,case MINUTE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,742,return TimeUnit.HOUR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,743,case SECOND:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,744,return TimeUnit.MINUTE.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,745,case MONTH:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,746,return TimeUnit.YEAR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,747,case QUARTER:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,748,return TimeUnit.YEAR.multiplier;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,749,case YEAR:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,750,case DECADE:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,751,case CENTURY:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,752,case MILLENNIUM:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,753,return BigDecimal.ONE;
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,754,default:
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,755,throw Util.unexpected(unit);
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,359,private class AccumulatorList extends ArrayList<Accumulator> {
core/src/main/java/org/apache/calcite/sql/SqlBinaryStringLiteral.java,59,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,66,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlDateLiteral.java,45,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,67,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,68,return new SqlIntervalLiteral(
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,69,(IntervalValue) value,
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,70,getTypeName(),
core/src/main/java/org/apache/calcite/sql/SqlIntervalLiteral.java,71,pos);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,237,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNode.java,107,clones[i] = (SqlNode) node.clone();
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,68,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,69,return new SqlNumericLiteral(
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,70,(BigDecimal) value,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,71,getPrec(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,72,getScale(),
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,73,isExact,
core/src/main/java/org/apache/calcite/sql/SqlNumericLiteral.java,74,pos);
core/src/main/java/org/apache/calcite/sql/SqlTimeLiteral.java,47,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/SqlTimestampLiteral.java,42,public SqlNode clone(SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,73,for (int i = 0; (i + 1) < operands.size(); ++i) {
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,75,SqlStdOperatorTable.IS_NOT_NULL.createCall(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,76,pos,
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,77,operands.get(i)));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,78,thenList.add(operands.get(i).clone(operands.get(i).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,82,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlCoalesceFunction.java,83,pos, null, whenList, thenList, elseExpr);
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,70,return SqlCase.createSwitched(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,71,pos, operands.get(0), whenList, thenList, operands.get(0).clone(
core/src/main/java/org/apache/calcite/sql/fun/SqlNullifFunction.java,72,operands.get(0).getParserPosition()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1187,orderList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1188,orderBy.orderList.clone(orderBy.orderList.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1277,selectList =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1279,.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1301,SqlNode leftJoinTerm = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1327,SqlNode insertSource = (SqlNode) sourceTableRef.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1009,return (SqlNode) literal.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1024,return (SqlNode) type.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1028,return (SqlNode) param.clone();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,1032,return (SqlNode) intervalQualifier.clone();
core/src/main/java/org/apache/calcite/util/NlsString.java,39,public class NlsString implements Comparable<NlsString> {
core/src/main/java/org/apache/calcite/util/NlsString.java,94,return new NlsString(value, charsetName, collation);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,21,import java.io.IOException;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,22,import java.io.LineNumberReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,24,import java.io.StringReader;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,402,LineNumberReader
core/src/main/java/org/apache/calcite/util/XmlOutput.java,403,in = new LineNumberReader(new StringReader(content));
core/src/main/java/org/apache/calcite/util/XmlOutput.java,404,try {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,405,String line;
core/src/main/java/org/apache/calcite/util/XmlOutput.java,406,while ((line = in.readLine()) != null) {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,408,out.println(line);
core/src/main/java/org/apache/calcite/util/XmlOutput.java,411,throw new AssertionError(ex);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,52,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,398,RelNode createMatchRecognize(RelNode input, RexNode pattern,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,401,RexNode after, Map<String, TreeSet<String>> subsets, boolean allRows,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,410,public RelNode createMatchRecognize(RelNode input, RexNode pattern,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,413,RexNode after, Map<String, TreeSet<String>> subsets, boolean allRows,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,31,import java.util.TreeSet;
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,74,RexNode after, Map<String, TreeSet<String>> subsets, boolean allRows,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2228,factory.createMatchRecognize(input, patternNode,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,999,ImmutableBitSet.of(registerExpressions(extraNodes, groupKey_.nodes));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1011,final Boolean unique = mq.areColumnsUnique(peek(), groupSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1012,if (unique != null && unique) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1014,return this;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1024,final int sizeBefore = extraNodes.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1029,ImmutableBitSet.of(registerExpressions(extraNodes, nodeList));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1037,if (extraNodes.size() > sizeBefore) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1040,+ extraNodes.subList(sizeBefore, extraNodes.size()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1048,registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1050,registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1064,final List<Integer> args = registerExpressions(extraNodes, aggCall1.operands);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1066,: registerExpression(extraNodes, aggCall1.filter);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1090,RexNode node = extraNodes.get(groupField);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1136,private static int registerExpression(List<RexNode> exprList, RexNode node) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1137,int i = exprList.indexOf(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1138,if (i < 0) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1139,i = exprList.size();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1140,exprList.add(node);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1142,return i;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1145,private static List<Integer> registerExpressions(List<RexNode> extraNodes,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1146,Iterable<? extends RexNode> nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1147,final List<Integer> builder = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1148,for (RexNode node : nodes) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1149,builder.add(registerExpression(extraNodes, node));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1151,return builder;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,107,final RelDataType inputRowType = getInput().getRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,181,final int indicatorCount = getIndicatorCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,199,agg.context =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,200,new AggContext() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,201,public SqlAggFunction aggregation() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,202,return agg.call.getAggregation();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,205,public RelDataType returnRelType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,206,return agg.call.type;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,209,public Type returnType() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,210,return EnumUtils.javaClass(typeFactory, returnRelType());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,213,public List<? extends RelDataType> parameterRelTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,214,return EnumUtils.fieldRowTypes(inputRowType, null,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,215,agg.call.getArgList());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,218,public List<? extends Type> parameterTypes() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,219,return EnumUtils.fieldTypes(typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,220,parameterRelTypes());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,223,List<Type> state =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,224,agg.implementor.getStateType(agg.context);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,249,new AggResultContextImpl(initBlock, decls));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,253,PhysTypeImpl.of(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,254,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,374,for (int j = 0; j < groupCount + indicatorCount; j++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,375,results.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,376,keyPhysType.fieldReference(key_, j));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,382,new AggResultContextImpl(resultBlock, agg.state)));
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggAddContextImpl.java,32,super(block, accumulator);
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResetContextImpl.java,30,public class AggResetContextImpl extends NestedBlockBuilderImpl
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,37,public AggResultContextImpl(BlockBuilder block,
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/AggResultContextImpl.java,38,List<Expression> accumulator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/impl/WinAggResultContextImpl.java,48,super(block, accumulator);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,513,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,562,LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,563,ImmutableBitSet.range(keyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,591,ret = LogicalAggregate.create(ret, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,592,ImmutableBitSet.range(projectedKeyCount), null,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,593,ImmutableList.of(aggCall));
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,792,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,793,ImmutableBitSet.of(), null, aggCalls);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,799,return LogicalAggregate.create(rel, false,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1207,return MutableAggregate.of(input, aggregate.indicator, groupSet, groupSets,
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1208,aggregateCalls);
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1270,result = MutableAggregate.of(target, false, groupSet.build(), null,
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,136,this.indicator = indicator;
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,31,public final boolean indicator;
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,37,boolean indicator, ImmutableBitSet groupSet,
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,40,this.indicator = indicator;
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,59,public static MutableAggregate of(MutableRel input, boolean indicator,
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,60,ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,61,List<AggregateCall> aggCalls) {
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,64,input.rowType, indicator, groupSet, groupSets, aggCalls);
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,65,return new MutableAggregate(input, rowType, indicator, groupSet,
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,92,return MutableAggregate.of(input.clone(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableAggregate.java,93,indicator, groupSet, groupSets, aggCalls);
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,197,relBuilder.groupKey(aggregate.groupSet, aggregate.indicator, aggregate.groupSets),
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,315,return MutableAggregate.of(input, aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,316,aggregate.getGroupSet(), aggregate.getGroupSets(),
core/src/main/java/org/apache/calcite/rel/mutable/MutableRels.java,317,aggregate.getAggCallList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,20,import org.apache.calcite.plan.RelOptCluster;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,29,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,30,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,41,import org.apache.calcite.sql.type.SqlTypeName;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,54,import java.math.BigDecimal;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,94,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,168,rewriteUsingGroupingSets(call, aggregate, argLists);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,221,relBuilder.groupKey(groupSet, aggregate.indicator, aggregate.getGroupSets());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,429,Aggregate aggregate, Set<Pair<List<Integer>, Integer>> argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,432,groupSetTreeSet.add(aggregate.getGroupSet());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,433,for (Pair<List<Integer>, Integer> argList : argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,434,groupSetTreeSet.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,437,.union(aggregate.getGroupSet()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,453,final boolean indicator = groupSets.size() > 1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,454,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,455,relBuilder.groupKey(fullGroupSet, indicator, groupSets),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,456,distinctAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,457,final RelNode distinct = relBuilder.peek();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,459,final int indicatorCount = indicator ? groupCount : 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,461,final RelOptCluster cluster = aggregate.getCluster();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,462,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,463,final RelDataTypeFactory typeFactory = cluster.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,464,final RelDataType booleanType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,465,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,466,typeFactory.createSqlType(SqlTypeName.BOOLEAN), false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,467,final List<Pair<RexNode, String>> predicates = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,468,final Map<ImmutableBitSet, Integer> filters = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,471,class Registrar {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,472,RexNode group = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,474,private int register(ImmutableBitSet groupSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,475,if (group == null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,476,group = makeGroup(groupCount - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,478,final RexNode node =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,479,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS, group,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,480,rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,481,toNumber(remap(fullGroupSet, groupSet))));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,482,predicates.add(Pair.of(node, toString(groupSet)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,484,+ predicates.size() - 1;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,487,private RexNode makeGroup(int i) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,488,final RexInputRef ref =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,489,rexBuilder.makeInputRef(booleanType, groupCount + i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,490,final RexNode kase =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,491,rexBuilder.makeCall(SqlStdOperatorTable.CASE, ref,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,492,rexBuilder.makeExactLiteral(BigDecimal.ZERO),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,493,rexBuilder.makeExactLiteral(TWO.pow(i)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,494,if (i == 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,495,return kase;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,497,return rexBuilder.makeCall(SqlStdOperatorTable.PLUS,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,498,makeGroup(i - 1), kase);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,502,private BigDecimal toNumber(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,503,BigDecimal n = BigDecimal.ZERO;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,504,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,505,n = n.add(TWO.pow(key));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,507,return n;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,510,private String toString(ImmutableBitSet bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,511,final StringBuilder buf = new StringBuilder("$i");
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,512,for (int key : bitSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,513,buf.append(key).append('_');
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,515,return buf.substring(0, buf.length() - 1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,518,final Registrar registrar = new Registrar();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,519,for (ImmutableBitSet groupSet : groupSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,520,filters.put(groupSet, indicator ? registrar.register(groupSet) : -1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,523,if (!predicates.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,524,List<Pair<RexNode, String>> nodes = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,525,for (RelDataTypeField f : relBuilder.peek().getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,526,final RexNode node = rexBuilder.makeInputRef(f.getType(), f.getIndex());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,527,nodes.add(Pair.of(node, f.getName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,529,nodes.addAll(predicates);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,530,relBuilder.project(Pair.left(nodes), Pair.right(nodes));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,533,int x = groupCount + indicatorCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,561,aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,109,if (allColumnsInAggregate && !aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,122,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,256,.aggregate(relBuilder.groupKey(belowAggregateKey, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,339,aggregate.indicator, Mappings.apply2(mapping, aggregate.getGroupSets())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,91,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,156,relBuilder.aggregate(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,157,relBuilder.groupKey(newGroupSet, false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,158,newAggCalls);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,534,oldAggregate.indicator,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,107,relBuilder.aggregate(relBuilder.groupKey(topAggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,128,relBuilder.aggregate(relBuilder.groupKey(aggRel.getGroupSet(), false, null),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,143,relBuilder.groupKey(aggRel.getGroupSet(), aggRel.indicator, aggRel.getGroupSets()),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,140,if (aggregate.indicator) {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,110,relBuilder.aggregate(relBuilder.groupKey(groupSet, false, null),
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,111,operand(Aggregate.class, any())));
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,121,LogicalAggregate.create(newDelta, aggregate.indicator,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,122,aggregate.getGroupSet(), aggregate.groupSets,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,123,aggregate.getAggCallList());
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,315,ExInst<SqlValidatorException> aggregateIllegalInGroupBy();
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,20,import org.apache.calcite.sql.SqlFunction;
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,40,public class SqlAbstractGroupFunction extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,57,super(name, kind, returnTypeInference, operandTypeInference,
core/src/main/java/org/apache/calcite/sql/fun/SqlAbstractGroupFunction.java,58,operandTypeChecker, category);
core/src/main/java/org/apache/calcite/sql/validate/AggFinder.java,108,if (operator.isAggregator() && !operator.requiresOver()) {
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,251,public final boolean indicator;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,261,this.indicator = !this.groupSets.equals(ImmutableList.of(groupSet));
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,104,public String translate(String name) {
core/src/main/java/org/apache/calcite/sql/validate/DelegatingNamespace.java,105,return namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,240,return resolvedNamespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,22,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,37,private final SqlValidatorScope scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,44,this.scope = scope;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,59,public List<String> translatedNames() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,60,if (scope == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,61,return identifier.names;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,63,final SqlNameMatcher nameMatcher =
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,64,scope.getValidator().getCatalogReader().nameMatcher();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,65,final ImmutableList.Builder<String> builder = ImmutableList.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,66,final SqlValidatorScope.ResolvedImpl resolved =
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,67,new SqlValidatorScope.ResolvedImpl();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,68,final List<String> prefix = Util.skipLast(identifier.names);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,69,scope.resolve(prefix, nameMatcher, false, resolved);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,70,SqlValidatorNamespace namespace =
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,71,resolved.count() == 1 ? resolved.only().namespace : null;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,72,builder.add(identifier.names.get(0));
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,73,for (String name : Util.skip(identifier.names)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,74,if (namespace != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,75,name = namespace.translate(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,76,namespace = null;
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,78,builder.add(name);
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,80,return builder.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,91,public final List<String> suffixTranslated() {
core/src/main/java/org/apache/calcite/sql/validate/SqlQualified.java,92,return Util.skip(translatedNames(), prefixLength);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3537,validateNoAggs(aggOrOverFinder, groupList, "GROUP BY");
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3586,throw newValidationError(agg, RESOURCE.aggregateIllegalInGroupBy());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3630,String keyword) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3631,validateNoAggs(aggOrOverOrGroupFinder, condition, keyword);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3639,throw newValidationError(condition, RESOURCE.condMustBeBoolean(keyword));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorNamespace.java,167,String translate(String name);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,581,LogicalAggregate.create(newProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,582,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,583,newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,584,null,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,585,newAggCalls));
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2314,LogicalAggregate.create(joinOutputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2315,false,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2316,groupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2317,null,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,876,final RelBuilder.GroupKey groupKey = relBuilder.groupKey(newGroupSet,
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,877,aggregate.indicator, newGroupSets);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,37,import org.apache.calcite.rel.core.Aggregate;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,529,final RelBuilder relBuilder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,530,RelFactories.LOGICAL_BUILDER.create(cluster, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,759,rel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,760,createAggregate(bb, false, groupSet, ImmutableList.of(groupSet),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,761,ImmutableList.<AggregateCall>of());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1098,LogicalAggregate.create(seek, false, ImmutableBitSet.of(), null,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2693,RexNode havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2750,createAggregate(bb, r.indicator, r.groupSet, r.groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2755,final Aggregate aggregate = (Aggregate) bb.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2756,if (aggregate.getGroupType() != Aggregate.Group.SIMPLE) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2757,assert aggregate.indicator;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2758,List<Pair<RexNode, String>> projects2 = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2759,int converted = 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2760,final int groupCount = aggregate.getGroupSet().cardinality();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2761,for (RelDataTypeField field : aggregate.getRowType().getFieldList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2762,final int i = field.getIndex();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2763,final RexNode rex;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2764,if (i < groupCount && r.isNullable(i)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2765,++converted;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2767,rex = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2768,rexBuilder.makeInputRef(aggregate, groupCount + i),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2769,rexBuilder.makeCast(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2770,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2771,field.getType(), true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2772,rexBuilder.constantNull()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2773,rexBuilder.makeInputRef(aggregate, i));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2775,rex = rexBuilder.makeInputRef(aggregate, i);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2777,projects2.add(Pair.of(rex, field.getName()));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2779,if (converted > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2780,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2781,RelOptUtil.createProject(bb.root, projects2, true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2782,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2794,if (havingExpr.isAlwaysTrue()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2795,havingExpr = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2843,final RelFactories.FilterFactory factory =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2844,RelFactories.DEFAULT_FILTER_FACTORY;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2845,bb.setRoot(factory.createFilter(bb.root, havingExpr), false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2849,bb.setRoot(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2850,RelOptUtil.createProject(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2851,bb.root,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2852,projects,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2853,true),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2854,false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2883,protected RelNode createAggregate(Blackboard bb, boolean indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2884,ImmutableBitSet groupSet, ImmutableList<ImmutableBitSet> groupSets,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2885,List<AggregateCall> aggCalls) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2886,return LogicalAggregate.create(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2887,bb.root, indicator, groupSet, groupSets, aggCalls);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3524,for (String name : qualified.suffixTranslated()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4186,return Pair.of(node, null);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4211,fields.put(c.translate(field.getName()),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4212,field.getIndex() + offset);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4884,r.indicator,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4924,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4925,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4926,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4927,final RelDataType type = validator.getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4928,if (!aggregatingSelectScope.resolved.get().indicator) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4929,return rexBuilder.makeExactLiteral(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4930,TWO.pow(effectiveArgCount(call)).subtract(BigDecimal.ONE), type);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4932,final List<Integer> operands;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4933,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4934,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4935,operands = ImmutableIntList.range(0, groupExprs.size());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4936,break;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4937,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4938,operands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4939,for (SqlNode operand : call.getOperandList()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4940,final int x = lookupGroupExpr(operand);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4941,assert x >= 0;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4942,operands.add(x);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4945,RexNode node = null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4946,int shift = operands.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4947,for (int operand : operands) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4948,node = bitValue(node, type, operand, --shift);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4950,return node;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4968,private int effectiveArgCount(SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4969,switch (call.getKind()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4970,case GROUPING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4971,return call.operandCount();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4972,case GROUP_ID:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4973,return groupExprs.size();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4974,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4975,throw new AssertionError(call.getKind());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4979,private RexNode bitValue(RexNode previous, RelDataType type, int x,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4980,int shift) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4981,final AggregatingSelectScope.Resolved r =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4982,aggregatingSelectScope.resolved.get();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4983,RexNode node = rexBuilder.makeCall(SqlStdOperatorTable.CASE,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4984,rexBuilder.makeInputRef(bb.root, r.groupExprList.size() + x),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4985,rexBuilder.makeExactLiteral(BigDecimal.ONE, type),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4986,rexBuilder.makeExactLiteral(BigDecimal.ZERO, type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4987,if (shift > 0) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4988,node = rexBuilder.makeCall(SqlStdOperatorTable.MULTIPLY, node,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4989,rexBuilder.makeExactLiteral(TWO.pow(shift), type));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4991,if (previous != null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4992,node = rexBuilder.makeCall(SqlStdOperatorTable.PLUS, previous, node);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4994,return node;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,995,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,996,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1054,if (extraNodes.size() > inputRowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1055,project(extraNodes);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1127,private List<RexNode> projects(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1128,final List<RexNode> exprList = new ArrayList<>();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1129,for (RelDataTypeField field : inputRowType.getFieldList()) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1130,final RexBuilder rexBuilder = cluster.getRexBuilder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1131,exprList.add(rexBuilder.makeInputRef(field.getType(), field.getIndex()));
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1133,return exprList;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1548,final RelDataType inputRowType = peek().getRowType();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1549,final List<RexNode> extraNodes = projects(inputRowType);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1550,final List<RexNode> originalExtraNodes = ImmutableList.copyOf(extraNodes);
core/src/main/java/org/apache/calcite/model/ModelHandler.java,114,schema.add(entry.getKey(), entry.getValue());
core/src/main/java/org/apache/calcite/model/ModelHandler.java,121,schema.add(Util.first(functionName, methodName), function);
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,924,final int typeOrdinal = getTypeOrdinal(type);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFamily.java,69,COLUMN_LIST;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeName.java,118,Types.JAVA_OBJECT, SqlTypeFamily.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,815,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,824,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,907,if (nullPolicy == NullPolicy.STRICT) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,349,final RelDataType type = function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,38,public class ScalarFunctionImpl extends ReflectiveFunctionBase implements
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,39,ScalarFunction, ImplementableFunction {
core/src/main/java/org/apache/calcite/schema/impl/ScalarFunctionImpl.java,116,new ReflectiveCallNotNullImplementor(method), NullPolicy.NONE, false);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,153,assert containsType(type1);
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,154,assert containsType(type2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,612,final SqlOperator op = call.getOperator();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,35,import org.apache.calcite.sql.fun.SqlAvgAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,37,import org.apache.calcite.sql.fun.SqlSumAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,120,if (call.getAggregation() instanceof SqlAvgAggFunction
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,121,|| call.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,190,if (oldCall.getAggregation() instanceof SqlSumAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,193,return reduceSum(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,195,if (oldCall.getAggregation() instanceof SqlAvgAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,196,final SqlKind kind = oldCall.getAggregation().getKind();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,200,return reduceAvg(oldAggRel, oldCall, newCalls, aggCallMapping);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,250,Map<AggregateCall, RexNode> aggCallMapping) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,252,RexBuilder rexBuilder = oldAggRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,253,int iAvgInput = oldCall.getArgList().get(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,254,RelDataType avgInputType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,258,AggregateCall sumCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,268,AggregateCall countCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,288,RexNode denominatorRef =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,296,rexBuilder.makeCall(SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,297,numeratorRef,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,298,denominatorRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,384,final RelDataType argType =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,385,getFieldType(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,386,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,387,argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,389,final RexNode argRef = inputExprs.get(argOrdinal);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,390,final RexNode argSquared =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,391,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,392,SqlStdOperatorTable.MULTIPLY, argRef, argRef);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,395,final Aggregate.AggCallBinding binding =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,396,new Aggregate.AggCallBinding(typeFactory, SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,397,ImmutableList.of(argRef.getType()), oldAggRel.getGroupCount(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,398,oldCall.filterArg >= 0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,400,AggregateCall.create(
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,401,SqlStdOperatorTable.SUM,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,402,oldCall.isDistinct(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,403,ImmutableIntList.of(argSquaredOrdinal),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,404,oldCall.filterArg,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,405,SqlStdOperatorTable.SUM.inferReturnType(binding),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,406,null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,413,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,431,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,435,SqlStdOperatorTable.MULTIPLY, sumArg, sumArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,444,oldAggRel.getInput(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,453,ImmutableList.of(argType));
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,457,SqlStdOperatorTable.DIVIDE,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,458,sumSquaredArg, countArg);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystem.java,75,RelDataType deriveSumType(RelDataTypeFactory typeFactory, RelDataType argumentType);
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,211,RelDataTypeFactory typeFactory, RelDataType argumentType) {
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,41,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,44,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,50,Preconditions.checkArgument(kind == SqlKind.AVG
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,51,|| kind == SqlKind.STDDEV_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,52,|| kind == SqlKind.STDDEV_SAMP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,53,|| kind == SqlKind.VAR_POP
core/src/main/java/org/apache/calcite/sql/fun/SqlAvgAggFunction.java,54,|| kind == SqlKind.VAR_SAMP);
core/src/main/java/org/apache/calcite/sql/fun/SqlCovarAggFunction.java,46,ReturnTypes.ARG0_NULLABLE_IF_EMPTY,
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1276,expr = expandAvg(arg);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1279,expr = expandVariance(arg, true, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1282,expr = expandVariance(arg, false, true);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1285,expr = expandVariance(arg, true, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1288,expr = expandVariance(arg, false, false);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1293,RelDataType type =
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1294,cx.getValidator().getValidatedNodeType(call);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1300,final SqlNode arg) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1307,pos, sum, count);
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1311,final SqlNode arg,
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,328,final SqlOperator notKind = RexUtil.op(kind.negate());
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1153,return IS_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1155,return IS_TRUE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1159,return IS_NOT_FALSE;
core/src/main/java/org/apache/calcite/sql/SqlKind.java,1161,return IS_NOT_TRUE;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5467,private class NavigationModifier extends SqlBasicVisitor<SqlNode> {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5469,return literal;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5473,return intervalQualifier;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5477,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5481,return param;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5494,private class NavigationExpander extends NavigationModifier {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5495,SqlOperator currentOperator;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5496,SqlNode currentOffset;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5503,this.currentOffset = offset;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5504,this.currentOperator = operator;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5529,return inner.accept(new NavigationExpander(call.getOperator(), offset));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5532,for (SqlNode node : operands) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5533,SqlNode newNode = node.accept(new NavigationExpander());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5534,if (currentOperator != null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5535,newNode = currentOperator.createCall(SqlParserPos.ZERO, newNode, currentOffset);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5537,newOperands.add(newNode);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5539,return call.getOperator().createCall(SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5543,if (currentOperator == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5546,return currentOperator.createCall(SqlParserPos.ZERO, id, currentOffset);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5555,private class NavigationReplacer extends NavigationModifier {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5570,List<SqlNode> operands = call.getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5573,String name = ((SqlIdentifier) operands.get(0)).names.get(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5574,return name.equals(alpha) ? call
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5575,: SqlStdOperatorTable.LAST.createCall(SqlParserPos.ZERO, operands);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5576,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5577,List<SqlNode> newOperands = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5578,for (SqlNode op : operands) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5579,newOperands.add(op.accept(this));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5581,return call.getOperator().createCall(SqlParserPos.ZERO, newOperands);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5662,vars.addAll(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5663,node.accept(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5664,new PatternValidator(isMeasure, firstLastCount, prevNextCount,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5665,aggregateCount)));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5677,if (vars.isEmpty()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5678,throw newValidationError(call,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5679,Static.RESOURCE.patternFunctionNullCheck(call.toString()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5681,if (vars.size() != 1) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5682,throw newValidationError(call,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5683,Static.RESOURCE.patternFunctionVariableCheck(call.toString()));
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraEnumerator.java,45,public CassandraEnumerator(ResultSet results, RelProtoDataType protoRowType) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraLimit.java,59,if (offset != null) { implementor.offset = RexLiteral.intValue(offset); }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraLimit.java,60,if (fetch != null) { implementor.fetch = RexLiteral.intValue(fetch); }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,61,CassandraFilterRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,62,CassandraProjectRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,63,CassandraSortRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,64,CassandraLimitRule.INSTANCE
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,95,public CassandraConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,96,Class<? extends RelNode> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,101,public <R extends RelNode> CassandraConverterRule(
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,102,Class<R> clazz,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,186,if (fetch >= 0) { limit += fetch; }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,199,while (skip < offset && enumerator.moveNext()) { skip++; }
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,54,extends ConverterImpl
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java,55,implements EnumerableRel {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,30,new CassandraToEnumerableConverterRule();
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,63,public ArrayTable(Type elementType, RelProtoDataType protoRowType,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,268,public ObjectArray(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,320,public PrimitiveArray(int ordinal, Primitive primitive, Primitive p) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,367,public PrimitiveDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,409,public ObjectDictionary(
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,478,public StringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,516,public ByteStringDictionary() {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,556,public Constant(int ordinal) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,807,public Content(List<? extends Column> columns, int size,
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,815,public Content(List<? extends Column> columns, int size, int sortField) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,843,public ObjectEnumerator(int rowCount, Column column) {
core/src/main/java/org/apache/calcite/adapter/clone/ArrayTable.java,872,public ArrayEnumerator(int rowCount, List<Column> columns) {
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,53,0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000, 0xFFFFFFFF00000000L};
core/src/main/java/org/apache/calcite/adapter/clone/ColumnLoader.java,464,public Kev(int source, Comparable key) {
core/src/main/java/org/apache/calcite/adapter/clone/ListTable.java,51,public ListTable(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,262,(JavaTypeFactoryImpl.SyntheticRecordType) accPhysType.getJavaRowType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,264,Expressions.parameter(accPhysType.getJavaRowType(), "record0");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,267,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,268,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,269,record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,270,Expressions.new_(accPhysType.getJavaRowType()))));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,275,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,276,Expressions.assign(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,277,Expressions.field(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,278,record0_,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,279,fieldList.get(i)),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregate.java,280,right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpretable.java,189,public EnumerableNode(Enumerable<Object[]> enumerable,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,157,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,158,leftResult.physType.fieldReference(left_, pair.left)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,160,Types.castIfNecessary(keyClass,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,161,rightResult.physType.fieldReference(right_, pair.right)));
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,81,protected final Function1<String, RexToLixTranslator.InputGetter>
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,82,allCorrelateVariables =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,83,new Function1<String, RexToLixTranslator.InputGetter>() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,84,public RexToLixTranslator.InputGetter apply(String name) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,85,return getCorrelVariableGetter(name);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,75,public static final EnumerableTableModifyRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,76,ENUMERABLE_TABLE_MODIFICATION_RULE = new EnumerableTableModifyRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,90,public static final EnumerableFilterToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,91,ENUMERABLE_FILTER_TO_CALC_RULE = new EnumerableFilterToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,93,public static final EnumerableProjectToCalcRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,94,ENUMERABLE_PROJECT_TO_CALC_RULE = new EnumerableProjectToCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,99,public static final EnumerableTableFunctionScanRule
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,100,ENUMERABLE_TABLE_FUNCTION_SCAN_RULE = new EnumerableTableFunctionScanRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,280,inputPhysType.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,524,getBlockBuilderWinAggFrameResultContextFunction(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,215,private final Map<SqlAggFunction, Supplier<? extends WinAggImplementor>>
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,216,winAggMap = Maps.newHashMap();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,271,new ReflectiveCallNotNullImplementor(BuiltInMethod.RAND.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,283,null,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,284,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,286,new ReflectiveCallNotNullImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,672,((SqlUserDefinedFunction) operator).getFunction();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2033,public IsXxxImplementor(Boolean seek, boolean negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2057,public NotImplementor(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/WinAggImplementor.java,38,public enum SeekType {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,131,public JdbcConverterRule(Class<? extends RelNode> clazz, RelTrait in,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,86,public JdbcTable(JdbcSchema jdbcSchema, String jdbcCatalogName,
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,126,public Pair<ColumnMetaData.Rep, Integer>
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,127,apply(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,128,final RelDataType type = field.getType();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcTable.java,199,public JdbcTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
core/src/main/java/org/apache/calcite/interpreter/AbstractSingleNode.java,31,public AbstractSingleNode(Interpreter interpreter, T rel) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,325,public NodeInfo(RelNode rel, Sink sink, Enumerable<Row> rowEnumerable) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,340,public EnumeratorSource(final Enumerator<Row> enumerator) {
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,389,public ListSource(ListSink sink) {
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,208,<T> CalcitePrepare.CalciteSignature<T>
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,209,parseQuery(CalcitePrepare.Query<T> query,
core/src/main/java/org/apache/calcite/jdbc/CalciteJdbc41Factory.java,120,public CalciteJdbc41Statement(CalciteConnectionImpl connection,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,777,public CalciteMetaTable(Table calciteTable, String tableCat,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,789,public CalciteMetaSchema(CalciteSchema calciteSchema,
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,798,public MetadataTable(Class<E> clazz) {
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,63,syntheticTypes = new HashMap<>();
core/src/main/java/org/apache/calcite/jdbc/JavaTypeFactoryImpl.java,359,public RecordFieldImpl(
core/src/main/java/org/apache/calcite/materialize/CachingLatticeStatisticProvider.java,37,public CachingLatticeStatisticProvider(
core/src/main/java/org/apache/calcite/materialize/Lattice.java,448,public Edge(RelNode source, RelNode target) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,102,public SchemaImpl(Lattice lattice, StatisticsProvider statisticsProvider) {
core/src/main/java/org/apache/calcite/materialize/TileSuggester.java,200,public StatisticsProviderImpl(Lattice lattice) {
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,224,final Multimap<Pair<Convention, Convention>, ConverterRule>
core/src/main/java/org/apache/calcite/plan/ConventionTraitDef.java,225,mapArcToConverterRule =
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,88,public abstract static class RelEvent extends EventObject {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,102,public static class RelChosenEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,110,public static class RelEquivalenceEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,134,public static class RelDiscardedEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,141,public abstract static class RuleEvent extends RelEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,158,public static class RuleAttemptedEvent extends RuleEvent {
core/src/main/java/org/apache/calcite/plan/RelOptListener.java,176,public static class RuleProductionEvent extends RuleAttemptedEvent {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,228,convertOperand(Class<R> clazz, Predicate<? super R> predicate,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,376,|| type2.getSqlTypeName() == SqlTypeName.ANY) {
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,436,mapping.set(
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,437,node.i,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,438,((RexInputRef) operand).getIndex());
core/src/main/java/org/apache/calcite/plan/TableAccessMap.java,41,public static enum Mode {
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,47,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,48,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,65,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/plan/hep/HepRelMetadataProvider.java,66,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,161,|| (subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,162,&& !subset.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,164,|| (!subsetToOthers
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,165,&& !other.getConvention().useAbstractConvertersForConversion(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,166,other.getTraitSet(), subset.getTraitSet()))) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,142,classOperands = LinkedListMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,285,getPhaseRuleMappingInitializer() {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,47,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,48,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,118,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRelMetadataProvider.java,119,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/prepare/CalciteMaterializer.java,61,public CalciteMaterializer(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1071,public CalcitePreparingStmt(CalcitePrepareImpl prepare,
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1314,public CalcitePreparedExplain(
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1352,public EmptyScalarTranslator(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,1475,public LambdaScalarTranslator(
core/src/main/java/org/apache/calcite/prepare/CalciteSqlValidator.java,28,public CalciteSqlValidator(SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/prepare/LixToRelTranslator.java,57,public LixToRelTranslator(RelOptCluster cluster, Prepare preparingStmt) {
core/src/main/java/org/apache/calcite/prepare/QueryableRelBuilder.java,81,public QueryableRelBuilder(LixToRelTranslator translator) {
core/src/main/java/org/apache/calcite/prepare/RelOptTableImpl.java,340,public MySchemaPlus(SchemaPlus parent, String name, Schema schema) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,131,ImmutableSortedMap<K, SortedSet<V>> copyMap(
core/src/main/java/org/apache/calcite/rel/core/Match.java,132,Map<K, ? extends SortedSet<V>> map) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,74,new SortFactoryImpl();
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,77,new AggregateFactoryImpl();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,315,public WindowKey(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,350,Lists.newArrayList(
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,351,Iterables.filter(aggWindow.orderKeys,
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,352,new PredicateImpl<RexFieldCollation>() {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,353,public boolean test(RexFieldCollation rexFieldCollation) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,356,return rexFieldCollation.left instanceof RexLocalRef;
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,58,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,59,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,80,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,81,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/CachingRelMetadataProvider.java,104,public CachingInvocationHandler(Metadata metadata) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,71,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,72,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,107,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,108,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ChainedRelMetadataProvider.java,127,public ChainedInvocationHandler(List<Metadata> metadataList) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,187,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,191,private static <M extends Metadata>
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,192,MetadataHandler<M> load3(MetadataDef<M> def,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,193,Multimap<Method, MetadataHandler<M>> map,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,375,private static String
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,376,findProvider(List<Pair<String, MetadataHandler>> providerList,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,420,static <M extends Metadata> MetadataHandler<M>
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,421,compile(ClassDeclaration expr, String s, MetadataDef<M> def,
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,452,synchronized <M extends Metadata, H extends MetadataHandler<M>> H
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,453,create(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,465,synchronized <M extends Metadata, H extends MetadataHandler<M>> H
core/src/main/java/org/apache/calcite/rel/metadata/JaninoRelMetadataProvider.java,466,revise(Class<? extends RelNode> rClass, MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,117,private static RelMetadataProvider
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,118,reflectiveSource(final MetadataHandler target,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,119,final ImmutableList<Method> methods) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,214,public <M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,215,handlers(MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,244,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,245,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,246,Class<? extends M> metadataClass) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,255,public <M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,256,apply(Class<? extends RelNode> relClass) {
core/src/main/java/org/apache/calcite/rel/metadata/ReflectiveRelMetadataProvider.java,346,public Space2(Class<Metadata> metadataClass0,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnUniqueness.java,408,splitLeftAndRightColumns(int leftCount, final ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdPredicates.java,503,public JoinConditionBasedPredicateInference(Join joinRel,
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,760,public CardOfProjExpr(RelMetadataQuery mq, Project rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,65,<M extends Metadata> UnboundMetadata<M>
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,66,apply(Class<? extends RelNode> relClass,
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,67,Class<? extends M> metadataClass);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,69,<M extends Metadata> Multimap<Method, MetadataHandler<M>>
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataProvider.java,70,handlers(MetadataDef<M> def);
core/src/main/java/org/apache/calcite/rel/metadata/RelMetadataQuery.java,202,revise(Class<? extends RelNode> class_, MetadataDef<M> def) {
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,308,new SqlIdentifier(modify.getTable().getQualifiedName(), POS);
core/src/main/java/org/apache/calcite/rel/rules/AbstractMaterializedViewRule.java,2189,public Edge(RelTableRef source, RelTableRef target) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,394,private static <E> SqlSplittableAggFunction.Registry<E>
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,395,registry(final List<E> list) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,59,SUPPORTED_AGGREGATES = new IdentityHashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,826,public ImplementTester(RelType relType) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,879,public InputToCommonExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/CalcRelSplitter.java,962,public HighestUsageFinder(RexNode[] exprs, int[] exprLevels) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,90,public RemoveIsNotDistinctFromRexShuttle(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,547,public InputReferenceCounter(int[] refCounts) {
core/src/main/java/org/apache/calcite/rel/rules/LoptSemiJoinOptimizer.java,827,public LcsIndexOptimizer(LcsTableScan rel) {}
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,182,new RelType("CalcRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,183,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,184,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,187,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,188,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,191,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,192,return true;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,195,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,196,return !(call instanceof RexOver);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,199,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,200,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,201,assert !program.containsAggs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,202,program = program.normalize(cluster.getRexBuilder(), null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,203,return super.makeRel(cluster, traitSet, relBuilder, input, program);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,206,new RelType("WinAggRelType") {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,207,protected boolean canImplement(RexFieldAccess field) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,208,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,211,protected boolean canImplement(RexDynamicParam param) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,212,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,215,protected boolean canImplement(RexLiteral literal) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,216,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,219,protected boolean canImplement(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,220,return call instanceof RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,223,protected boolean supportsCondition() {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,224,return false;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,227,protected RelNode makeRel(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,228,RelBuilder relBuilder, RelNode input, RexProgram program) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,229,Preconditions.checkArgument(program.getCondition() == null,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,231,return LogicalWindow.create(cluster, traitSet, relBuilder, input,
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,232,program);
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,624,public InputSpecialOpFinder(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,719,public RefAndExprConverter(
core/src/main/java/org/apache/calcite/rel/rules/PushProjector.java,853,public OperatorExprCondition(Iterable<? extends SqlOperator> operatorSet) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,357,public ReplaceSubQueryShuttle(RexSubQuery subQuery, RexNode replacement) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeSystemImpl.java,204,&& getDefaultPrecision(typeName) != -1) {
core/src/main/java/org/apache/calcite/rex/RexCallBinding.java,141,public RexCastCallBinding(
core/src/main/java/org/apache/calcite/rex/RexExecutorImpl.java,141,public DataContextInputGetter(RelDataType rowType,
core/src/main/java/org/apache/calcite/rex/RexOver.java,180,public Finder() {
core/src/main/java/org/apache/calcite/rex/RexProgram.java,810,public Checker(RelDataType inputRowType,
core/src/main/java/org/apache/calcite/rex/RexProgram.java,844,public ExpansionShuttle(List<RexNode> exprs) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,1016,public RegisterOutputShuttle(List<RexNode> localExprList) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2027,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2029,occurrences.add(ref.getTableRef());
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2030,return super.visitTableInputRef(ref);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2139,public ForwardRefFinder(RelDataType inputRowType) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2445,public RexShiftShuttle(int offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,94,public int getOrderKey() { return -1; }
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,112,public RexWindowBoundUnbounded(SqlNode node) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,190,public RexWindowBoundBounded(RexNode node) {
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,561,ExInst<CalciteException>
core/src/main/java/org/apache/calcite/runtime/CalciteResource.java,562,sQLConformance_MultipleActiveAutocommitStatements();
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,64,public static Supplier<Enumerable<Row>>
core/src/main/java/org/apache/calcite/runtime/Enumerables.java,65,toRow(final Supplier<Enumerable<Object[]>> supplier) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,143,private static <T extends Object & Comparable> ComparableList<T>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,144,flatList_(T[] t, boolean copy) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,214,public static <T extends Comparable> ComparableList<T>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,215,ofComparable(List<T> t) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1267,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1268,int compare(List<T> list0, List<T> list1) {
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1281,static <T extends Comparable<T>>
core/src/main/java/org/apache/calcite/runtime/FlatLists.java,1282,int compare(List<T> list0, List<T> list1, int size) {
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,53,private static final Function1<ResultSet, Function0<Object>>
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,54,AUTO_ROW_BUILDER_FACTORY =
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,179,public ResultSetEnumerator(
core/src/main/java/org/apache/calcite/runtime/ResultSetEnumerable.java,228,primitiveRowBuilderFactory(final Primitive[] primitives) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,75,private static final Function1<List<Object>, Enumerable<Object>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,76,LIST_AS_ENUMERABLE =
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,83,private static final Function1<Object[], Enumerable<Object[]>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,84,ARRAY_CARTESIAN_PRODUCT =
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1972,public static Function1<Object, Enumerable<ComparableList<Comparable>>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1973,flatProduct(final int[] fieldCounts, final boolean withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1996,private static Enumerable<FlatLists.ComparableList<Comparable>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1997,p2(Object[] lists, int[] fieldCounts, boolean withOrdinality,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2030,new Function1<Entry<Comparable, Comparable>, List<Comparable>>() {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2031,public List<Comparable> apply(Entry<Comparable, Comparable> entry) {
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2032,return FlatLists.<Comparable>of(entry.getKey(), entry.getValue());
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2058,public static <E extends Comparable>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2059,Enumerable<FlatLists.ComparableList<E>>
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2060,product(final List<Enumerator<List<E>>> enumerators, final int fieldCount,
core/src/main/java/org/apache/calcite/schema/Schemas.java,445,public static List<CalciteSchema.TableEntry>
core/src/main/java/org/apache/calcite/schema/Schemas.java,446,getStarTables(CalciteSchema schema) {
core/src/main/java/org/apache/calcite/schema/TableFunction.java,43,List<Object> arguments);
core/src/main/java/org/apache/calcite/sql/SqlDescribeSchema.java,70,public SqlIdentifier getSchema() { return schema; }
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,81,public SqlIdentifier getTable() { return table; }
core/src/main/java/org/apache/calcite/sql/SqlDescribeTable.java,83,public SqlIdentifier getColumn() { return column; }
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,416,ZERO,
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,329,writer.startList(SqlWriter.FrameTypeEnum.ORDER_BY_LIST);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,386,private static Iterator<SqlOperator>
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,387,filterOperatorRoutinesByKind(Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,388,final SqlKind sqlKind) {
core/src/main/java/org/apache/calcite/sql/SqlWithItem.java,79,public SqlWithItemOperator() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,65,RexImpTable.createImplementor(
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,66,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,67,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,68,RexCall call, List<Expression> operands) {
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,69,return Expressions.call(GET_COMPLETION_HINTS,
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,70,Iterables.concat(Collections.singleton(ADVISOR), operands));
core/src/main/java/org/apache/calcite/sql/advise/SqlAdvisorGetHintsFunction.java,112,pos, replaced);
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,38,public SqlArgumentAssignmentOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlDefaultOperator.java,36,public SqlDefaultOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlExtendOperator.java,37,public SqlExtendOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupIdFunction.java,33,public SqlGroupIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingFunction.java,33,public SqlGroupingFunction(String name) {
core/src/main/java/org/apache/calcite/sql/fun/SqlGroupingIdFunction.java,37,public SqlGroupingIdFunction() {
core/src/main/java/org/apache/calcite/sql/fun/SqlItemOperator.java,50,public SqlItemOperator() {
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,84,d, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,85,d, i,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,86,i, d,
core/src/main/java/org/apache/calcite/sql/fun/SqlOverlapsOperator.java,87,i, i
core/src/main/java/org/apache/calcite/sql/fun/SqlRollupOperator.java,31,public SqlRollupOperator(String name, SqlKind kind) {
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2140,public static List<Pair<SqlNode, AuxiliaryConverter>>
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,2141,convertGroupToAuxiliaryCalls(SqlCall call) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,183,&& typeSystem.getDefaultPrecision(typeName) > -1) {
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,359,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,360,COMPARABLE_ORDERED_COMPARABLE_ORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,377,public static final SqlOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,378,COMPARABLE_UNORDERED_COMPARABLE_UNORDERED =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,399,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,400,STRING_STRING_INTEGER_INTEGER =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,417,family(SqlTypeFamily.ANY, SqlTypeFamily.NUMERIC);
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,438,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,439,DATETIME_INTERVAL_INTERVAL_TIME =
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,450,public static final SqlSingleOperandTypeChecker
core/src/main/java/org/apache/calcite/sql/type/OperandTypes.java,451,INTERVALINTERVAL_INTERVALDATETIME =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,650,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,651,DYADIC_STRING_SUM_PRECISION_NULLABLE_VARYING =
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,659,public static final SqlReturnTypeInference
core/src/main/java/org/apache/calcite/sql/type/ReturnTypes.java,660,DYADIC_STRING_SUM_PRECISION_NULLABLE =
core/src/main/java/org/apache/calcite/sql/type/SqlOperandCountRanges.java,48,public RangeImpl(int min, int max) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeExplicitPrecedenceList.java,72,TYPE_NAME_TO_PRECEDENCE_LIST =
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,176,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/DelegatingScope.java,177,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,201,public Pair<String, SqlValidatorNamespace>
core/src/main/java/org/apache/calcite/sql/validate/EmptyScope.java,202,findQualifyingTableName(String columnName, SqlNode ctx) {
core/src/main/java/org/apache/calcite/sql/validate/ParameterNamespace.java,34,public ParameterNamespace(SqlValidatorImpl validator, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,70,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,71,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,87,SqlUserDefinedTableMacro.convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,88,function, getNameAsId(), false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2006,(SqlMatchRecognize) node, enclosingNode, alias, forceNullable);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4929,public InsertNamespace(SqlValidatorImpl validator, SqlInsert node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4946,public UpdateNamespace(SqlValidatorImpl validator, SqlUpdate node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4963,public DeleteNamespace(SqlValidatorImpl validator, SqlDelete node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4980,public MergeNamespace(SqlValidatorImpl validator, SqlMerge node,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4996,public PatternVarVisitor(MatchRecognizeScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5043,public DeriveTypeVisitor(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5203,SqlStdOperatorTable.ITEM,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5204,inputs,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5205,id.getParserPosition());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5498,public NavigationExpander() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5502,public NavigationExpander(SqlOperator operator, SqlNode offset) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5522,? SqlStdOperatorTable.PLUS : SqlStdOperatorTable.MINUS;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5558,public NavigationReplacer(String alpha) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5590,? SqlStdOperatorTable.PREV : SqlStdOperatorTable.LAST;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,658,public static AggregatingSelectScope
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,659,getEnclosingAggregateSelectScope(SqlValidatorScope scope) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,791,private static List<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,792,analyzeGroupTuple(SqlValidatorScope scope, GroupAnalyzer groupAnalyzer,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,793,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,896,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,897,rollup(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,919,public static ImmutableList<ImmutableBitSet>
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,920,cube(List<ImmutableBitSet> bitSets) {
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,55,public TableNamespace(SqlValidatorImpl validator, SqlValidatorTable table) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1530,public RemoveCorrelationRexShuttle(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1725,public RemoveSingleAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1778,public RemoveCorrelationForScalarProjectRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1976,public RemoveCorrelationForScalarAggregateRule() {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2359,public AdjustProjectForCountAggregateRule(boolean flavor) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1872,boolean isDistinct = false;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1873,if (aggCall.getFunctionQuantifier() != null
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1874,&& aggCall.getFunctionQuantifier().getValue().equals(SqlSelectKeyword.DISTINCT)) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1875,isDistinct = true;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2132,new SqlBasicVisitor<RexNode>() {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2134,List<SqlNode> operands = call.getOperandList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2135,List<RexNode> newOperands = Lists.newArrayList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2136,for (SqlNode node : operands) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2137,newOperands.add(node.accept(this));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2139,return rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2140,validator.getUnknownType(), call.getOperator(), newOperands);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2144,assert id.isSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2145,patternVarsSet.add(id.getSimple());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2146,return rexBuilder.makeLiteral(id.getSimple());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2150,if (literal instanceof SqlNumericLiteral) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2151,return rexBuilder.makeExactLiteral(BigDecimal.valueOf(literal.intValue(true)));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2153,return rexBuilder.makeLiteral(literal.booleanValue());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3942,private final Map<RelNode, Map<Integer, Integer>>
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,3943,mapRootRelToFieldProjection = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1266,public AvgVarianceConvertlet(SqlKind kind) {
core/src/main/java/org/apache/calcite/sql2rel/StandardConvertletTable.java,1379,public TrimConvertlet(SqlTrimFunction.Flag flag) {
core/src/main/java/org/apache/calcite/tools/Frameworks.java,286,public StdFrameworkConfig(Context context,
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1485,private static <E> ImmutableList<ImmutableList<E>>
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1486,copy(Iterable<? extends List<E>> tupleList) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1796,public Field(ImmutableSet<String> left, RelDataTypeField right) {
core/src/main/java/org/apache/calcite/tools/RuleSets.java,48,public ListRuleSet(ImmutableList<RelOptRule> rules) {
core/src/main/java/org/apache/calcite/util/BitSets.java,330,public Closure(SortedMap<Integer, BitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/ImmutableBitSet.java,917,public Closure(SortedMap<Integer, ImmutableBitSet> equivalence) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,673,public Node(E e) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,691,public TopBottomNode(boolean top) {
core/src/main/java/org/apache/calcite/util/PartiallyOrderedSet.java,737,public StripList(List<Node<E>> list) {
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,413,public static <R extends ReflectiveVisitor, E>
core/src/main/java/org/apache/calcite/util/ReflectUtil.java,414,ReflectiveVisitDispatcher<R, E> createDispatcher(
core/src/main/java/org/apache/calcite/util/Util.java,2243,public static <E> List<List<E>>
core/src/main/java/org/apache/calcite/util/Util.java,2244,immutableCopy(Iterable<? extends Iterable<E>> lists) {
core/src/main/java/org/apache/calcite/util/XmlOutput.java,543,public StringEscaper() {
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,39,public static <V, E extends DefaultEdge> List<V>
core/src/main/java/org/apache/calcite/util/graph/Graphs.java,40,predecessorListOf(DirectedGraph<V, E> graph, V vertex) {
core/src/main/java/org/apache/calcite/util/javac/JaninoCompiler.java,142,public AccountingClassLoader(
core/src/main/java/org/apache/calcite/util/mapping/MappingType.java,121,private MappingType() {
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,1552,public PartialFunctionImpl(
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,58,private static final ThreadLocal<Function2<Void, File, String>>
core/src/main/java/org/apache/calcite/util/trace/CalciteTrace.java,59,DYNAMIC_HANDLER =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,382,node.accept(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,383,new RexShuttle() {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,385,final int index = positions.indexOf(ref.getIndex());
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,386,return rexBuilder.makeInputRef(belowTypes.get(index), index);
druid/src/main/java/org/apache/calcite/adapter/druid/QueryType.java,28,private QueryType(String queryName) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,68,Translator translator = new Translator(ElasticsearchRules
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,69,.elasticsearchFieldNames(getRowType()));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,70,String match = translator.translateMatch(condition);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,80,HashMultimap.create();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchFilter.java,163,: multimap.asMap().entrySet()) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,60,new ElasticsearchRules.RexToElasticsearchTranslator(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,61,(JavaTypeFactory) getCluster().getTypeFactory(),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,62,ElasticsearchRules.elasticsearchFieldNames(getInput().getRowType()));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,74,+ expr.split(":")[1] + "}");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchProject.java,77,+ expr.replaceAll("\"", "") + "\"}");
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,54,ElasticsearchSortRule.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,55,ElasticsearchFilterRule.INSTANCE,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,56,ElasticsearchProjectRule.INSTANCE
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,72,&& ((RexInputRef) op0).getIndex() == 0
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,73,&& op1 instanceof RexLiteral
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,74,&& ((RexLiteral) op1).getValue2() instanceof String) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,90,GetMappingsResponse response = client.admin().indices().getMappings(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchSchema.java,91,new GetMappingsRequest().indices(index)).get();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,63,public CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,68,public CsvEnumerator(Source source, AtomicBoolean cancelFlag,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,75,public CsvEnumerator(Source source, AtomicBoolean cancelFlag, boolean stream,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,137,+ " for column: " + name
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,138,+ ". Will assume the type of column is string");
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,50,private static final Map<String, CsvFieldType> MAP =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,51,new HashMap<String, CsvFieldType>();
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,33,public JsonEnumerator(Source source) {
example/function/src/main/java/org/apache/calcite/example/maze/Maze.java,42,public Maze(int width, int height) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,658,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,659,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,670,public static <TSource, TKey, TElement> Enumerable<Grouping<TKey, TElement>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,671,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,682,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,683,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,699,public static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,700,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,756,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,757,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,775,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,776,groupByMultiple(Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,777,List<Function1<TSource, TKey>> keySelectors,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,798,public static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,799,groupBy(Enumerable<TSource> enumerable, Function1<TSource, TKey> keySelector,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,819,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,820,groupBy_(final Map<TKey, TAccumulate> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,846,private static <TSource, TKey, TAccumulate, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,847,groupByMultiple_(final Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,848,Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,876,private static <TSource, TKey, TResult> Enumerable<TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,877,groupBy_(final Set<TKey> map, Enumerable<TSource> enumerable,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1393,public static <TSource, TInner, TKey extends Comparable<TKey>, TResult>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1394,Enumerable<TResult> mergeJoin(final Enumerable<TSource> outer,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1678,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1679,Function2<TSource, TSource, TSource> minFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1684,private static <TSource extends Comparable<TSource>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1685,Function2<TSource, TSource, TSource> maxFunction() {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1847,public static <TSource, TKey extends Comparable> Enumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,1848,orderByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2524,public static <TSource, TKey> OrderedEnumerable<TSource>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2525,createOrderedEnumerable(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2535,public static <TSource, TKey extends Comparable<TKey>>
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2536,OrderedEnumerable<TSource> thenBy(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2557,OrderedEnumerable<TSource> thenByDescending(
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2940,public TakeWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,2981,public TakeWhileLongEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3022,public SkipWhileEnumerator(Enumerator<TSource> enumerator,
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3063,public CastingEnumerator(Enumerator<?> enumerator, Class<T> clazz) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3187,public LookupResultEnumerable(Map<TKey, TAccumulate> map,
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,154,public OrdList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,170,public OrdRandomAccessList(List<? extends E> elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/Ord.java,180,public OrdArrayList(E[] elements) {
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,714,public static <T, TKey extends Comparable> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,715,orderByDescending(Queryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1079,public static <T, TKey extends Comparable<TKey>> OrderedQueryable<T>
linq4j/src/main/java/org/apache/calcite/linq4j/QueryableDefaults.java,1080,thenByDescending(OrderedQueryable<T> source,
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,39,public static final Map<Class<? extends Function>, Class>
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,40,FUNCTION_RESULT_TYPES =
linq4j/src/main/java/org/apache/calcite/linq4j/function/Functions.java,651,public GeneratingList(int size, Function1<Integer, E> fn) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/BlockBuilder.java,500,public SubstituteVariableVisitor(Map<ParameterExpression, Expression> map) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,41,private final Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,42,childFactory;
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,93,private static Function1<ClassDeclarationFinder, ClassDeclarationFinder>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ClassDeclarationFinder.java,94,newChildCreator(Class<? extends ClassDeclarationFinder> optimizingClass) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,36,public ExpressionWriter() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,40,public ExpressionWriter(boolean generics) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/ExpressionWriter.java,200,public Indent(int initialCapacity) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1171,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1182,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1183,lambda(Class<F> type, BlockStatement body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1184,ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1194,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1195,lambda(Class<F> type, Expression body,
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1206,public static <T, F extends Function<? extends T>> FunctionExpression<F>
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,1207,lambda(Class<F> type, Expression body, ParameterExpression... parameters) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3232,public FluentArrayList() {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/Expressions.java,3236,public FluentArrayList(Collection<? extends T> c) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/FunctionExpression.java,226,&& ((Class) type).getDeclaredMethods().length == 1) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,54,Integer.class, Long.class, String.class}) {
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,64,private static final
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,65,Map<ExpressionType, ExpressionType> NOT_BINARY_COMPLEMENT =
linq4j/src/main/java/org/apache/calcite/linq4j/tree/OptimizeShuttle.java,176,instanceof ConstantExpression) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoEnumerator.java,43,public MongoEnumerator(Iterator<DBObject> cursor,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,68,MongoSortRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,69,MongoFilterRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,70,MongoProjectRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,71,MongoAggregateRule.INSTANCE,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,251,public MongoConverterRule(
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,252,Class<? extends RelNode> clazz,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,253,RelTrait in,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,254,Convention out,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,255,String description) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggFunction.java,32,private PigAggFunction(SqlKind calciteFunc) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggFunction.java,36,private PigAggFunction(SqlKind calciteFunc, boolean star) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigDataType.java,35,private PigDataType(byte pigType, SqlTypeName sqlType) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,51,+ ')';
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,53,+ "' USING PigStorage() AS " + schema + ';';
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,30,new PigToEnumerableConverterRule();
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,181,private ImmutableList<ImmutableList<RexLiteral>>
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,182,tuples(Ast.ValuesStmt valuesStmt, RelDataType rowType) {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,37,public abstract class Implementor extends JavaRelImplementor {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRel.java,49,public class Result {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkToEnumerableConverter.java,98,public SparkImplementorImpl(EnumerableRelImplementor implementor) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkDriver.java,109,public WrappingSplunkConnection(SplunkConnection connection) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTable.java,81,public SplunkTableQueryable(QueryProvider queryProvider, SchemaPlus schema,
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,226,+ "required, list of fields to request, comma delimited",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,228,+ "uri to splunk's mgmt port, default: https://localhost:8089",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,230,+ "username to use for authentication, default: admin",
splunk/src/main/java/org/apache/calcite/adapter/splunk/search/SplunkConnectionImpl.java,232,+ "password to use for authentication, default: changeme",
core/src/main/java/org/apache/calcite/rel/core/Match.java,91,protected Match(RelOptCluster cluster, RelTraitSet traitSet,
core/src/main/java/org/apache/calcite/rel/core/Match.java,92,RelNode input, RexNode pattern, boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,96,RelDataType rowType) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,103,this.rowType = Preconditions.checkNotNull(rowType);
core/src/main/java/org/apache/calcite/rel/core/Match.java,183,public abstract Match copy(RelNode input, RexNode pattern,
core/src/main/java/org/apache/calcite/rel/core/Match.java,184,boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,188,RelDataType rowType);
core/src/main/java/org/apache/calcite/rel/core/Match.java,196,return copy(inputs.get(0), pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/core/Match.java,198,partitionKeys, orderKeys, rowType);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,399,boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,402,List<RexNode> partitionKeys, RelCollation orderKeys, RelDataType rowType);
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,411,boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,414,List<RexNode> partitionKeys, RelCollation orderKeys, RelDataType rowType) {
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,415,return LogicalMatch.create(input, pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/core/RelFactories.java,416,patternDefinitions, measures, after, subsets, allRows, partitionKeys, orderKeys, rowType);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,58,RelNode input, RexNode pattern, boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,62,RelDataType rowType) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,63,super(cluster, traitSet, input, pattern, strictStart, strictEnd,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,65,orderKeys, rowType);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,71,public static LogicalMatch create(RelNode input, RexNode pattern,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,72,boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,75,List<RexNode> partitionKeys, RelCollation orderKeys, RelDataType rowType) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,78,return new LogicalMatch(cluster, traitSet, input, pattern,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,80,allRows, partitionKeys, orderKeys, rowType);
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,86,boolean strictStart, boolean strictEnd,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,89,boolean allRows, List<RexNode> partitionKeys, RelCollation orderKeys, RelDataType rowType) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,92,input, pattern, strictStart, strictEnd, patternDefinitions, measures,
core/src/main/java/org/apache/calcite/rel/logical/LogicalMatch.java,93,after, subsets, allRows, partitionKeys, orderKeys, rowType);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,455,subsetList, rowsPerMatch, partitionList, orderByList);
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,783,if (clazz == Integer.class) {
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,784,return clazz.cast(((BigDecimal) value).intValue());
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,786,break;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,797,if (clazz == Long.class) {
core/src/main/java/org/apache/calcite/sql/SqlIntervalQualifier.java,371,private int getIntervalSign(String value) {
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,74,SqlNodeList orderList) {
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,271,assert operands.length == 11;
core/src/main/java/org/apache/calcite/sql/SqlMatchRecognize.java,277,(SqlNodeList) operands[9], (SqlNodeList) operands[10]);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2229,matchRecognize.getStrictStart().booleanValue(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2232,subsetMap, allRows, partitionKeys, orders, rowType);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,64,this.keywordList = keywordList != null ? keywordList : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,70,this.windowDecls = windowDecls != null ? windowDecls : new SqlNodeList(pos);
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,94,keywordList = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,112,windowDecls = (SqlNodeList) operand;
core/src/main/java/org/apache/calcite/sql/SqlSelect.java,183,public final SqlNodeList getWindowList() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3355,if ((windowList == null) || (windowList.size() == 0)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3364,for (SqlNode node : windowList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3365,final SqlWindow child = (SqlWindow) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3366,SqlIdentifier declName = child.getDeclName();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3380,for (int i = 0; i < windowList.size(); i++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3381,SqlNode window1 = windowList.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3382,for (int j = i + 1; j < windowList.size(); j++) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3383,SqlNode window2 = windowList.get(j);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2001,false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1282,SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,36,import org.apache.calcite.sql.fun.SqlCountAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,37,import org.apache.calcite.sql.fun.SqlMinMaxAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,39,import org.apache.calcite.sql.fun.SqlSumAggFunction;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,133,int nonDistinctCount = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,134,int distinctCount = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,136,int unsupportedAggCount = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,143,++nonDistinctCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,144,if (!(aggCall.getAggregation() instanceof SqlCountAggFunction
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,145,|| aggCall.getAggregation() instanceof SqlSumAggFunction
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,146,|| aggCall.getAggregation() instanceof SqlMinMaxAggFunction)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,147,++unsupportedAggCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,149,continue;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,151,++distinctCount;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,152,argLists.add(Pair.of(aggCall.getArgList(), aggCall.filterArg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,158,if (nonDistinctCount == 0 && argLists.size() == 1) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,174,if (distinctCount == 1 // one distinct aggregate
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,176,&& unsupportedAggCount == 0 // sum/min/max/count in non-distinct aggregate
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,177,&& nonDistinctCount > 0) { // one or more non-distinct aggregates
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,262,final List<Pair<RexNode, String>> projects = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,263,final Map<Integer, Integer> sourceOf = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,264,SortedSet<Integer> newGroupSet = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,265,final List<RelDataTypeField> childFields =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,266,relBuilder.peek().getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,267,final boolean hasGroupBy = aggregate.getGroupSet().size() > 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,269,final Set<Integer> groupSet = aggregate.getGroupSet().asSet();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,273,newGroupSet.addAll(aggregate.getGroupSet().asList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,274,for (Pair<List<Integer>, Integer> argList : argLists) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,275,newGroupSet.addAll(argList.getKey());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,281,for (int arg : newGroupSet) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,282,sourceOf.put(arg, projects.size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,283,projects.add(RexInputRef.of2(arg, childFields));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,286,final List<AggregateCall> aggCalls = aggregate.getAggCallList();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,287,final List<AggregateCall> newAggCalls = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,288,final List<Integer> fakeArgs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,289,final Map<AggregateCall, Integer> callArgMap = new HashMap<>();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,292,for (final AggregateCall aggCall : aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,293,if (!aggCall.isDistinct()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,294,for (int arg : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,295,if (!groupSet.contains(arg)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,296,sourceOf.put(arg, projects.size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,301,int fakeArg0 = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,302,for (final AggregateCall aggCall : aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,306,|| Util.intersects(groupSet, aggCall.getArgList()))) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,307,while (sourceOf.get(fakeArg0) != null) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,308,++fakeArg0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,310,fakeArgs.add(fakeArg0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,311,++fakeArg0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,314,for (final AggregateCall aggCall : aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,315,if (!aggCall.isDistinct()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,316,for (int arg : aggCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,317,if (!groupSet.contains(arg)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,318,sourceOf.remove(arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,325,int fakeArgIdx = 0;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,326,for (final AggregateCall aggCall : aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,333,ImmutableBitSet.of(newGroupSet).cardinality(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,335,newAggCalls.add(newCall);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,336,if (newCall.getArgList().size() == 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,337,int fakeArg = fakeArgs.get(fakeArgIdx);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,338,callArgMap.put(newCall, fakeArg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,339,sourceOf.put(fakeArg, projects.size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,340,projects.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,341,Pair.of((RexNode) new RexInputRef(fakeArg, newCall.getType()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,342,newCall.getName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,343,++fakeArgIdx;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,345,for (int arg : newCall.getArgList()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,346,if (groupSet.contains(arg)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,347,arg = fakeArgs.get(fakeArgIdx++);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,348,callArgMap.put(newCall, arg);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,350,sourceOf.put(arg, projects.size());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,351,projects.add(
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,352,Pair.of((RexNode) new RexInputRef(arg, newCall.getType()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,353,newCall.getName()));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,362,false, ImmutableBitSet.of(newGroupSet), null, newAggCalls));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,364,final List<AggregateCall> newTopAggCalls =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,365,Lists.newArrayList(aggregate.getAggCallList());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,367,for (int i = 0; i < newTopAggCalls.size(); i++) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,369,final AggregateCall aggCall = newTopAggCalls.get(i);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,370,final int argCount = aggCall.getArgList().size();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,371,final List<Integer> newArgs = new ArrayList<>(argCount);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,373,for (int j = 0; j < argCount; j++) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,374,final Integer arg = aggCall.getArgList().get(j);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,375,if (callArgMap.containsKey(aggCall)) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,376,newArgs.add(sourceOf.get(callArgMap.get(aggCall)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,378,newArgs.add(sourceOf.get(arg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,383,AggregateCall.create(aggCall.getAggregation(), false, newArgs,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,384,-1, aggregate.getGroupSet().cardinality(), relBuilder.peek(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,385,aggCall.getType(), aggCall.name);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,389,if (aggCall.getAggregation() instanceof SqlCountAggFunction) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,390,if (aggCall.getArgList().size() == 0) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,391,newArgs.add(sourceOf.get(callArgMap.get(aggCall)));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,393,if (hasGroupBy) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,394,SqlSumAggFunction sumAgg = new SqlSumAggFunction(null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,395,newCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,396,AggregateCall.create(sumAgg, false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,397,aggregate.getGroupSet().cardinality(), relBuilder.peek(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,398,aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,400,SqlSumEmptyIsZeroAggFunction sumAgg = new SqlSumEmptyIsZeroAggFunction();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,401,newCall =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,402,AggregateCall.create(sumAgg, false, newArgs, -1,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,403,aggregate.getGroupSet().cardinality(), relBuilder.peek(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,404,aggCall.getType(), aggCall.getName());
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,409,aggregate.getGroupSet().cardinality(),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,413,newTopAggCalls.set(i, newCall);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,416,newGroupSet.clear();
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,417,for (int arg : aggregate.getGroupSet()) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,418,newGroupSet.add(sourceOf.get(arg));
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,423,ImmutableBitSet.of(newGroupSet), null, newTopAggCalls));
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1400,ReturnTypes.ARG0,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1402,OperandTypes.NUMERIC_INTEGER,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1437,ReturnTypes.ARG0,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,1439,OperandTypes.NUMERIC_INTEGER,
core/src/main/java/org/apache/calcite/sql/SqlRankFunction.java,29,super(kind.name(), null, kind, ReturnTypes.INTEGER, null,
core/src/main/java/org/apache/calcite/sql/fun/SqlNtileAggFunction.java,35,ReturnTypes.INTEGER,
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,943,new SqlRankFunction(true, SqlKind.CUME_DIST);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,949,new SqlRankFunction(true, SqlKind.DENSE_RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,955,new SqlRankFunction(true, SqlKind.PERCENT_RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,961,new SqlRankFunction(true, SqlKind.RANK);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,967,new SqlRankFunction(false, SqlKind.ROW_NUMBER);
core/src/main/java/org/apache/calcite/rel/core/Project.java,333,Permutation permutation = new Permutation(fieldCount);
core/src/main/java/org/apache/calcite/rel/core/Project.java,337,permutation.set(i, ((RexInputRef) exp).getIndex());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4508,final List<Map.Entry<String, RelDataType>> fields = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4509,if (allRows) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4510,final SqlValidatorNamespace sqlNs = getNamespace(matchRecognize.getTableRef());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4511,final RelDataType inputDataType = sqlNs.getRowType();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4512,fields.addAll(inputDataType.getFieldList());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4521,if (allRows) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4522,RelDataType type = deriveType(scope, identifier);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4523,String name = identifier.names.get(1);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4524,fields.add(Pair.of(name, type));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4551,RESOURCE.patternVarAlreadyDefined(leftString));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4558,RESOURCE.unknownPattern(id.getSimple()));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4576,fields.addAll(validateMeasure(matchRecognize, scope, allRows));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4577,final RelDataType rowType = typeFactory.createStructType(fields);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4792,public SqlNode expandGroupByOrHavingExpr(SqlNode expr, SqlValidatorScope scope, SqlSelect select,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4793,boolean havingExpression) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4794,final Expander expander = new ExtendedExpander(this, scope, select, expr, havingExpression);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,137,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java,118,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,215,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindow.java,216,typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,101,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/enumerable/PhysTypeImpl.java,124,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcSchema.java,280,final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/AggregateNode.java,156,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,201,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,136,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/interpreter/TableScanNode.java,260,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/core/Aggregate.java,342,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/core/Uncollect.java,126,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,195,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,78,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,126,final RelDataTypeFactory.FieldInfoBuilder outputBuilder =
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,333,class FieldInfoBuilder implements FieldInfo {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,342,public FieldInfoBuilder(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,343,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,344,assert typeFactory != null;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,362,public FieldInfoBuilder add(String name, RelDataType type) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,372,public FieldInfoBuilder add(String name, SqlTypeName typeName) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,381,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,382,String name, SqlTypeName typeName, int precision) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,391,public FieldInfoBuilder add(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,392,String name, SqlTypeName typeName, int precision, int scale) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,403,public FieldInfoBuilder nullable(boolean nullable) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,416,public FieldInfoBuilder add(RelDataTypeField field) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,424,public FieldInfoBuilder addAll(
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,432,public FieldInfoBuilder kind(StructKind kind) {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactory.java,440,public FieldInfoBuilder uniquify() {
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFactoryImpl.java,224,final FieldInfoBuilder builder = builder();
core/src/main/java/org/apache/calcite/rex/RexUtil.java,928,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,929,typeFactory.builder();
core/src/main/java/org/apache/calcite/schema/impl/ModifiableViewTable.java,116,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
core/src/main/java/org/apache/calcite/sql/SqlUnnestOperator.java,64,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/SchemaNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/TableNamespace.java,63,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql/validate/WithItemNamespace.java,44,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,305,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4200,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4201,typeFactory.builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1374,final RelDataTypeFactory.FieldInfoBuilder rowTypeBuilder =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1375,cluster.getTypeFactory().builder();
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1379,final RelDataType type = cluster.getTypeFactory().leastRestrictive(
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1389,rowTypeBuilder.add(name, type);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1391,final RelDataType rowType = rowTypeBuilder.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,333,final RelDataTypeFactory.FieldInfoBuilder builder =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidTable.java,139,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,70,final RelDataTypeFactory.FieldInfoBuilder builder =
file/src/main/java/org/apache/calcite/adapter/file/FileTableScan.java,71,final RelDataTypeFactory.FieldInfoBuilder builder =
pig/src/main/java/org/apache/calcite/adapter/pig/PigTable.java,53,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,235,final RelDataTypeFactory.FieldInfoBuilder typeBuilder =
piglet/src/main/java/org/apache/calcite/piglet/Handler.java,287,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpcds/TpcdsSchema.java,168,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,141,final RelDataTypeFactory.FieldInfoBuilder builder = typeFactory.builder();
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkTableScan.java,103,final RelDataTypeFactory.FieldInfoBuilder builder =
core/src/main/java/org/apache/calcite/jdbc/CalciteConnectionImpl.java,398,.put(Variable.TIME_ZONE.camelName, timeZone);
core/src/main/java/org/apache/calcite/util/JsonBuilder.java,81,private void append(StringBuilder buf, int indent, Object o) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRelImplementor.java,108,final EnumerableRel.Result result = rootRel.implement(this, prefer);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,34,import org.apache.calcite.util.BuiltInMethod;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,69,boolean array = false;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,76,array = true;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,87,Expression translated = t.translate(getCall());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,88,if (array && rowType.getFieldCount() == 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,89,translated =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,90,Expressions.call(null, BuiltInMethod.SLICE0.method, translated);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScan.java,92,bb.add(Expressions.return_(null, translated));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1008,final SqlCall sqlCall = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1009,final SqlKind sqlKind = sqlCall.getOperator().getKind();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1010,if (sqlKind.equals(SqlKind.EXTEND)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1011,final SqlIdentifier id = (SqlIdentifier) sqlCall.getOperandList().get(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1015,final SqlNode nested = sqlCall.getOperandList().get(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,1017,&& nested.getKind().equals(SqlKind.EXTEND)) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,138,public void visit(JsonRoot root) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,142,for (JsonSchema schema : root.schemas) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,147,if (root.defaultSchema != null) {
core/src/main/java/org/apache/calcite/model/ModelHandler.java,149,connection.setSchema(root.defaultSchema);
core/src/main/java/org/apache/calcite/runtime/Like.java,24,private static final String JAVA_REGEX_SPECIALS = "[]()|^-+*?{}$\\";
core/src/main/java/org/apache/calcite/jdbc/CalcitePrepare.java,178,THREAD_CONTEXT_STACK.get().push(context);
core/src/main/java/org/apache/calcite/schema/Schemas.java,292,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,310,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,322,final List<String> schemaPath, final String sql, boolean fail) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,327,makeContext(connection, schema, schemaPath, propValues);
core/src/main/java/org/apache/calcite/schema/Schemas.java,330,return prepare.analyzeView(context, sql, fail);
core/src/main/java/org/apache/calcite/schema/Schemas.java,343,makeContext(connection, schema, schemaPath, map);
core/src/main/java/org/apache/calcite/schema/Schemas.java,353,public static CalcitePrepare.Context makeContext(
core/src/main/java/org/apache/calcite/schema/Schemas.java,354,final CalciteConnection connection, final CalciteSchema schema,
core/src/main/java/org/apache/calcite/schema/Schemas.java,355,final List<String> schemaPath,
core/src/main/java/org/apache/calcite/schema/Schemas.java,362,context0.getDataContext(), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,367,createDataContext(connection, schema.root().plus()), schema, schemaPath);
core/src/main/java/org/apache/calcite/schema/Schemas.java,386,final List<String> schemaPath) {
core/src/main/java/org/apache/calcite/schema/Schemas.java,545,public DummyDataContext(CalciteConnection connection,
core/src/main/java/org/apache/calcite/schema/Schemas.java,546,SchemaPlus rootSchema) {
core/src/main/java/org/apache/calcite/schema/impl/ViewTableMacro.java,71,Schemas.analyzeView(MaterializedViewTable.MATERIALIZATION_CONNECTION,
core/src/main/java/org/apache/calcite/schema/impl/ViewTableMacro.java,72,schema, schemaPath, viewSql, modifiable != null && modifiable);
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,104,parentScope.resolveTable(names, nameMatcher,
core/src/main/java/org/apache/calcite/sql/validate/IdentifierNamespace.java,105,SqlValidatorScope.Path.EMPTY, resolved);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,269,final List<String> names = Lists.transform(columnList,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,270,new Function<SqlNode, String>() {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,271,public String apply(SqlNode o) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,272,return ((SqlIdentifier) o).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,278,RESOURCE.duplicateNameInColumnList(names.get(i)));
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,101,if (LOGGER.isInfoEnabled()) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,102,LOGGER.info("Converted time ranges " + ranges + " to interval " + intervals);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4598,expand = navigationInMeasure(expand, allRows);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4623,private SqlNode navigationInMeasure(SqlNode node, boolean allRows) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4626,final List<SqlNode> ops = ((SqlCall) node).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4628,final SqlOperator defaultOp =
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4629,allRows ? SqlStdOperatorTable.RUNNING : SqlStdOperatorTable.FINAL;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4630,final SqlNode op0 = ops.get(0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4632,|| !allRows && op0.getKind() == SqlKind.RUNNING) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4633,SqlNode newNode = defaultOp.createCall(SqlParserPos.ZERO, op0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4634,node = SqlStdOperatorTable.AS.createCall(SqlParserPos.ZERO, newNode, ops.get(1));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4636,return node;
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4657,expand = navigationInDefine(expand, alias);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4694,private SqlNode navigationInDefine(SqlNode node, String alpha) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4697,node = new NavigationExpander().go(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4698,node = new NavigationReplacer(alpha).go(node);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4699,return node;
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,93,replaceTimeUnitOperand(call, timeUnit.name(), timeUnitNode.getParserPosition());
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,94,unparseDatetimeFunction(writer, call, "TRUNC", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,97,String translatedLit = convertToHsqlDb(timeUnit);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,98,replaceTimeUnitOperand(call, translatedLit, timeUnitNode.getParserPosition());
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,99,unparseDatetimeFunction(writer, call, "TRUNC", true);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,102,replaceTimeUnitOperand(call, timeUnit.name(), timeUnitNode.getParserPosition());
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,103,unparseDatetimeFunction(writer, call, "DATE_TRUNC", false);
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,116,private void replaceTimeUnitOperand(SqlCall call, String literal, SqlParserPos pos) {
core/src/main/java/org/apache/calcite/sql/fun/SqlFloorFunction.java,118,call.setOperand(1, literalNode);
core/src/main/java/org/apache/calcite/rel/core/Sort.java,136,double rowCount = mq.getRowCount(this);
core/src/main/java/org/apache/calcite/rel/core/Sort.java,137,double bytesPerRow = getRowType().getFieldCount() * 4;
core/src/main/java/org/apache/calcite/rel/core/Sort.java,138,return planner.getCostFactory().makeCost(
core/src/main/java/org/apache/calcite/rel/core/Sort.java,139,Util.nLogN(rowCount) * bytesPerRow, rowCount, 0);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,5418,return select.getSelectList().get(ordinal);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,332,typeChecker, (AggregateFunction) function, false, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,51,boolean requiresOrder, boolean requiresOver) {
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,59,final RelDataType type =
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,60,typeFactory.createTypeWithNullability(
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,61,typeFactory.createSqlType(SqlTypeName.BOOLEAN), nullable);
core/src/main/java/org/apache/calcite/rex/RexSubQuery.java,62,return new RexSubQuery(type, SqlStdOperatorTable.IN, nodes, rel);
core/src/main/java/org/apache/calcite/sql/SqlKind.java,280,LESS_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,285,GREATER_THAN,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,290,LESS_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,295,GREATER_THAN_OR_EQUAL,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,300,EQUALS,
core/src/main/java/org/apache/calcite/sql/SqlKind.java,305,NOT_EQUALS,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,57,private final boolean isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,66,SqlInOperator(boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,67,super(
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,68,isNotIn ? "NOT IN" : "IN",
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,69,SqlKind.IN,
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,75,this.isNotIn = isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlInOperator.java,86,return isNotIn;
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,374,public static final SqlBinaryOperator IN = new SqlInOperator(false);
core/src/main/java/org/apache/calcite/sql/fun/SqlStdOperatorTable.java,381,new SqlInOperator(true);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,891,TRACER.trace("After unconditional rewrite: " + outermostNode.toString());
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,901,TRACER.trace("After validation: " + outermostNode.toString());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,917,if (inOp.isNotIn()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1040,final boolean notIn = ((SqlInOperator) call.getOperator()).isNotIn();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1051,notIn);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1393,boolean isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1399,rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1415,return rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1426,RexNode result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1427,RexUtil.composeDisjunction(rexBuilder, comparisons, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1428,assert result != null;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1430,if (isNotIn) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1431,result =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1432,rexBuilder.makeCall(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1433,SqlStdOperatorTable.NOT,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1434,result);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1437,return result;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1713,if (((SqlCall) node).getOperator() == SqlStdOperatorTable.NOT_IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1714,logic = logic.negate();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1726,findSubQueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1727,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1728,operand,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1729,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1730,kind == SqlKind.IN || registerOnlyScalarSubQueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1735,findSubQueries(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1736,bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1737,child,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1738,logic,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1739,kind == SqlKind.IN || registerOnlyScalarSubQueries);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1747,if (kind == SqlKind.IN) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4344,final SqlInOperator op = (SqlInOperator) call.getOperator();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4360,final RexSubQuery in = RexSubQuery.in(root.rel, builder.build());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4363,: in;
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,585,((SqlValidatorImpl) validator).setValidatedNodeType(operand, nodeType);
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,88,if (operatorBinding.isOperandNull(i, false)) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,89,if (throwOnFailure) {
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,90,throw callBinding.getValidator().newValidationError(
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,91,callBinding.operand(i), RESOURCE.nullIllegal());
core/src/main/java/org/apache/calcite/sql/type/SameOperandTypeChecker.java,93,return false;
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,151,public RelDataType leastRestrictive(List<RelDataType> types) {
core/src/main/java/org/apache/calcite/sql/type/SqlTypeFactoryImpl.java,197,public RelDataType createTypeWithNullability(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,302,unknownType = typeFactory.createSqlType(SqlTypeName.NULL);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,437,.equals(((RexLiteral) constant).getValue())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,891,final RelMetadataQuery mq = root.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,905,RelOptCost relCost = getCost(rel, mq);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1172,final RelMetadataQuery mq = root.getCluster().getMetadataQuery();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,148,private final RelBuilder relBuilder;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,153,private final ReflectUtil.MethodDispatcher<Frame> dispatcher =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,154,ReflectUtil.createMethodDispatcher(Frame.class, this, "decorrelateRel",
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,160,private RelNode currentRel;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,162,private final Context context;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,167,private final Map<RelNode, Frame> map = new HashMap<>();
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,252,.build();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,29,import java.util.ArrayList;
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,72,final List<SqlNode> columnNames = Util.skip(operands, 2);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,73,for (final SqlNode operand : columnNames) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,74,String name = ((SqlIdentifier) operand).getSimple();
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,75,if (nameList.contains(name)) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,76,throw validator.newValidationError(operand,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,77,RESOURCE.aliasListDuplicate(name));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,79,nameList.add(name);
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,81,if (nameList.size() != rowType.getFieldCount()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,83,final SqlNode node = operands.size() == 3
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,85,: new SqlNodeList(columnNames, SqlParserPos.sum(columnNames));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,86,throw validator.newValidationError(node,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,87,RESOURCE.aliasListDegree(rowType.getFieldCount(), getString(rowType),
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,88,nameList.size()));
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,91,for (RelDataTypeField field : rowType.getFieldList()) {
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,92,typeList.add(field.getType());
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,95,typeList,
core/src/main/java/org/apache/calcite/sql/validate/AliasNamespace.java,96,nameList);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,607,currentRel = parent;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,826,boolean alreadySorted = collation.getFieldCollations().isEmpty();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,827,for (RelCollation inputCollation : mq.collations(input)) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,829,alreadySorted = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,830,break;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,834,boolean alreadySmaller = true;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,836,if (rowCount != null && fetch != null) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,837,final int offsetVal = offset == null ? 0 : RexLiteral.intValue(offset);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,838,final int limit = RexLiteral.intValue(fetch);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,839,if ((double) offsetVal + (double) limit < rowCount) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,840,alreadySmaller = false;
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,843,return alreadySorted && alreadySmaller;
core/src/main/java/org/apache/calcite/sql/type/CompositeOperandTypeChecker.java,213,min = Math.min(min, range.getMax());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1921,case MATCH_RECOGNIZE:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1922,convertMatchRecognize(bb, (SqlCall) from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1923,return;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2080,protected void convertMatchRecognize(Blackboard bb, SqlCall call) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2081,final SqlMatchRecognize matchRecognize = (SqlMatchRecognize) call;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4674,this.bb = bb;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4675,this.aggregatingSelectScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,4676,(AggregatingSelectScope) bb.getValidator().getSelectScope(select);
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,26,import java.net.URLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,31,import javax.net.ssl.HttpsURLConnection;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,42,URLConnection conn = new URL(url).openConnection();
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,43,final HttpURLConnection httpConn = (HttpURLConnection) conn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,48,if (httpConn instanceof HttpsURLConnection) {
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,49,HttpsURLConnection httpsConn = (HttpsURLConnection) httpConn;
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,50,httpsConn.setSSLSocketFactory(
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,51,TrustAllSslSocketFactory.createSSLSocketFactory());
core/src/main/java/org/apache/calcite/runtime/HttpUtils.java,60,return httpConn;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1975,final SqlJoin join = (SqlJoin) from;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1976,final SqlValidatorScope scope = validator.getJoinScope(from);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1977,final Blackboard fromBlackboard = createBlackboard(scope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1978,SqlNode left = join.getLeft();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1979,SqlNode right = join.getRight();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1980,final boolean isNatural = join.isNatural();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1981,final JoinType joinType = join.getJoinType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1982,final SqlValidatorScope leftScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1983,Util.first(validator.getJoinScope(left),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1984,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1985,final Blackboard leftBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1986,createBlackboard(leftScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1987,final SqlValidatorScope rightScope =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1988,Util.first(validator.getJoinScope(right),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1989,((DelegatingScope) bb.scope).getParent());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1990,final Blackboard rightBlackboard =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1991,createBlackboard(rightScope, null, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1992,convertFrom(leftBlackboard, left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1993,RelNode leftRel = leftBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1994,convertFrom(rightBlackboard, right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1995,RelNode rightRel = rightBlackboard.root;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1996,JoinRelType convertedJoinType = convertJoinType(joinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1997,RexNode conditionExp;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1998,final SqlValidatorNamespace leftNamespace = validator.getNamespace(left);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1999,final SqlValidatorNamespace rightNamespace = validator.getNamespace(right);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2000,if (isNatural) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2001,final RelDataType leftRowType = leftNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2002,final RelDataType rightRowType = rightNamespace.getRowType();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2003,final List<String> columnList =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2009,conditionExp =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2010,convertJoinCondition(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2011,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2012,leftNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2013,rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2014,join.getCondition(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2015,join.getConditionType(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2016,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2017,rightRel);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2020,final RelNode joinRel =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2021,createJoin(
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2022,fromBlackboard,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2023,leftRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2024,rightRel,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2025,conditionExp,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2026,convertedJoinType);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2027,bb.setRoot(joinRel, false);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2542,private RexNode convertJoinCondition(Blackboard bb,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2544,SqlValidatorNamespace rightNamespace,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2545,SqlNode condition,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2546,JoinConditionType conditionType,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2549,if (condition == null) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2550,return rexBuilder.makeLiteral(true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2554,switch (conditionType) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2555,case ON:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2556,bb.setRoot(ImmutableList.of(leftRel, rightRel));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2557,return bb.convertExpression(condition);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2558,case USING:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2559,final SqlNodeList list = (SqlNodeList) condition;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2560,final List<String> nameList = new ArrayList<>();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2561,for (SqlNode columnName : list) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2562,final SqlIdentifier id = (SqlIdentifier) columnName;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2563,String name = id.getSimple();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2564,nameList.add(name);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2566,return convertUsing(leftNamespace, rightNamespace, nameList);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2567,default:
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2568,throw Util.unexpected(conditionType);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,33,import io.airlift.tpch.TpchColumn;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,34,import io.airlift.tpch.TpchEntity;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,35,import io.airlift.tpch.TpchTable;
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,121,return tpchColumn.getLong(current);
plus/src/main/java/org/apache/calcite/adapter/tpch/TpchSchema.java,160,return column.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,91,RelTraitSet traitSet = cluster.traitSet();
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorUtil.java,821,final int ref = lookupGroupExpr(groupAnalyzer, groupExpr);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdColumnOrigins.java,65,return mq.getColumnOrigins(rel.getInput(), iOutputColumn);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,819,public SqlImplementor implementor() {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,985,public SqlNode field(int ordinal) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,40,import org.apache.calcite.sql.SqlBinaryOperator;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,282,SqlNode sqlCondition = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,284,SqlNode x = convertConditionToSqlNode(operand, leftContext,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,286,if (sqlCondition == null) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,287,sqlCondition = x;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,289,sqlCondition = op.createCall(POS, sqlCondition, x);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,292,return sqlCondition;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,623,if (op instanceof SqlBinaryOperator && nodeList.size() > 2) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,634,return op.createCall(new SqlNodeList(nodeList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,724,private SqlNode createLeftCall(SqlOperator op, List<SqlNode> nodeList) {
core/src/main/java/org/apache/calcite/config/Lex.java,30,ORACLE(Quoting.DOUBLE_QUOTE, Casing.TO_UPPER, Casing.UNCHANGED, true),
core/src/main/java/org/apache/calcite/config/Lex.java,37,MYSQL(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,45,MYSQL_ANSI(Quoting.DOUBLE_QUOTE, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,51,SQL_SERVER(Quoting.BRACKET, Casing.UNCHANGED, Casing.UNCHANGED, false),
core/src/main/java/org/apache/calcite/config/Lex.java,58,JAVA(Quoting.BACK_TICK, Casing.UNCHANGED, Casing.UNCHANGED, true);
core/src/main/java/org/apache/calcite/config/Lex.java,68,boolean caseSensitive) {
core/src/main/java/org/apache/calcite/config/Lex.java,69,this.quoting = quoting;
core/src/main/java/org/apache/calcite/config/Lex.java,70,this.unquotedCasing = unquotedCasing;
core/src/main/java/org/apache/calcite/config/Lex.java,71,this.quotedCasing = quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlAbstractParserImpl.java,501,public abstract void switchTo(String stateName);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,255,SqlParser.ConfigBuilder configBuilder = SqlParser.configBuilder();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,256,configBuilder.setUnquotedCasing(Casing.UNCHANGED);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraSchema.java,260,parsedQuery = (SqlSelect) SqlParser.create(query, configBuilder.build()).parseQuery();
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,468,return SqlParser.create(sql, parserConfig.build());
core/src/main/java/org/apache/calcite/prepare/CalcitePrepareImpl.java,749,parserConfig.setParserFactory(parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,84,return create(s, configBuilder().build());
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,197,Config DEFAULT = configBuilder().build();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,212,private Casing quotedCasing = Lex.ORACLE.quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,213,private Casing unquotedCasing = Lex.ORACLE.unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,214,private Quoting quoting = Lex.ORACLE.quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,215,private int identifierMaxLength = DEFAULT_IDENTIFIER_MAX_LENGTH;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,216,private boolean caseSensitive = Lex.ORACLE.caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,217,private SqlConformance conformance = SqlConformanceEnum.DEFAULT;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,220,private SqlParserImplFactory parserFactory = SqlParserImpl.FACTORY;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,226,this.quotedCasing = config.quotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,227,this.unquotedCasing = config.unquotedCasing();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,228,this.quoting = config.quoting();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,229,this.identifierMaxLength = config.identifierMaxLength();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,230,this.conformance = config.conformance();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,232,this.parserFactory = config.parserFactory();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,238,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,243,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,248,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,252,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,253,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,257,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,258,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,264,if (allowBangEqual != conformance.isBangEqualAllowed()) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,265,setConformance(
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,266,new SqlDelegatingConformance(conformance) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,276,this.conformance = conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,278,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,283,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,287,setCaseSensitive(lex.caseSensitive);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,288,setUnquotedCasing(lex.unquotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,289,setQuotedCasing(lex.quotedCasing);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,290,setQuoting(lex.quoting);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,291,return this;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,297,return new ConfigImpl(identifierMaxLength, quotedCasing, unquotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,298,quoting, caseSensitive, conformance, parserFactory);
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,306,private static class ConfigImpl implements Config {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,307,private final int identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,308,private final boolean caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,309,private final SqlConformance conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,310,private final Casing quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,311,private final Casing unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,312,private final Quoting quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,313,private final SqlParserImplFactory parserFactory;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,315,private ConfigImpl(int identifierMaxLength, Casing quotedCasing,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,316,Casing unquotedCasing, Quoting quoting, boolean caseSensitive,
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,317,SqlConformance conformance, SqlParserImplFactory parserFactory) {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,318,this.identifierMaxLength = identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,319,this.caseSensitive = caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,327,public int identifierMaxLength() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,328,return identifierMaxLength;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,331,public Casing quotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,332,return quotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,335,public Casing unquotedCasing() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,336,return unquotedCasing;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,339,public Quoting quoting() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,340,return quoting;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,343,public boolean caseSensitive() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,344,return caseSensitive;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,347,public SqlConformance conformance() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,348,return conformance;
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,351,public boolean allowBangEqual() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,352,return conformance.isBangEqualAllowed();
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,355,public SqlParserImplFactory parserFactory() {
core/src/main/java/org/apache/calcite/sql/parser/SqlParser.java,356,return parserFactory;
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1233,for (int i = 0; i < groupCount; i++) {
core/src/main/java/org/apache/calcite/plan/SubstitutionVisitor.java,1241,projects.add(groupCount + i);
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,250,public final ImmutableList<ImmutableBitSet> groupSets;
core/src/main/java/org/apache/calcite/sql/validate/AggregatingSelectScope.java,260,this.groupSets = ImmutableList.copyOf(groupSets);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,127,ImmutableList.copyOf((Iterable) groupKeys);
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,131,final int groupCount = groupKeyList.get(0).nodes.size();
core/src/main/java/org/apache/calcite/tools/PigRelBuilder.java,138,for (Ord<GroupKeyImpl> groupKey : Ord.reverse(groupKeyList)) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1017,if (maxRowCount != null && maxRowCount <= 1D) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1025,final SortedSet<ImmutableBitSet> groupSetSet =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1026,new TreeSet<>(ImmutableBitSet.ORDERING);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1034,groupSetSet.add(groupSet2);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1036,groupSets = ImmutableList.copyOf(groupSetSet);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1046,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1047,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1049,if (aggCall1.filter != null) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1061,final AggregateCall aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1062,if (aggCall instanceof AggCallImpl) {
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1063,final AggCallImpl aggCall1 = (AggCallImpl) aggCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1065,final int filterArg = aggCall1.filter == null ? -1
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1067,aggregateCall =
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1071,aggregateCall = ((AggCallImpl2) aggCall).aggregateCall;
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1073,aggregateCalls.add(aggregateCall);
core/src/main/java/org/apache/calcite/tools/RelBuilder.java,1744,private static class AggCallImpl2 implements AggCall {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1244,boolean allowCast) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,1259,return makeCharLiteral(padRight((NlsString) value, type.getPrecision()));
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,45,import java.util.AbstractList;
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,373,Comparable value,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,375,SqlTypeName typeName,
core/src/main/java/org/apache/calcite/rex/RexLiteral.java,454,assert value == null;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,282,if (simplified != null) {
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,283,return simplified;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,285,return call;
core/src/main/java/org/apache/calcite/rex/RexSimplify.java,786,terms.set(i, term);
core/src/main/java/org/apache/calcite/util/Util.java,1981,if (size < 15) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,115,case BETWEEN:
druid/src/main/java/org/apache/calcite/adapter/druid/DruidDateTimeUtils.java,116,case IN:
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,71,new Translator(MongoRules.mongoFieldNames(getRowType()));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,85,Translator(List<String> fieldNames) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoFilter.java,97,for (RexNode node : RelOptUtil.disjunctions(condition)) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverter.java,83,final MongoRel.Implementor mongoImplementor = new MongoRel.Implementor();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,184,RelDataTypeFamily castFrom = call.getOperandType(0).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,185,RelDataTypeFamily castTo = call.getOperandType(1).getFamily();
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,186,if (castFrom instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,187,&& castTo instanceof SqlTypeFamily
core/src/main/java/org/apache/calcite/sql/fun/SqlCastFunction.java,188,&& nonMonotonicCasts.containsEntry(castFrom, castTo)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3539,inferUnknownTypes(unknownType, groupScope, groupList);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,28,import org.apache.calcite.schema.Function;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,29,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,40,import org.apache.calcite.sql.type.FamilyOperandTypeChecker;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,65,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,153,private Collection<Function> getFunctionsFrom(List<String> names) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,276,final Predicate<Function> predicate;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,308,private SqlOperator toOp(SqlIdentifier name, final Function function) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,309,List<RelDataType> argTypes = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,310,List<SqlTypeFamily> typeFamilies = new ArrayList<>();
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,311,for (FunctionParameter o : function.getParameters()) {
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,312,final RelDataType type = o.getType(typeFactory);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,313,argTypes.add(type);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,314,typeFamilies.add(
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,315,Util.first(type.getSqlTypeName().getFamily(), SqlTypeFamily.ANY));
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,323,final FamilyOperandTypeChecker typeChecker =
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,327,return new SqlUserDefinedFunction(name, infer((ScalarFunction) function),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,328,InferTypes.explicit(argTypes), typeChecker, paramTypes, function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,330,return new SqlUserDefinedAggFunction(name,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,331,infer((AggregateFunction) function), InferTypes.explicit(argTypes),
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,334,return new SqlUserDefinedTableMacro(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,335,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,336,(TableMacro) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,338,return new SqlUserDefinedTableFunction(name, ReturnTypes.CURSOR,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,339,InferTypes.explicit(argTypes), typeChecker, paramTypes,
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,340,(TableFunction) function);
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,384,return null;
core/src/main/java/org/apache/calcite/prepare/CalciteCatalogReader.java,395,public void registerRules(RelOptPlanner planner) throws Exception {
core/src/main/java/org/apache/calcite/sql/SqlAggFunction.java,83,operandTypeChecker, null, funcType);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,123,if (hasAssignment() && !(call.getOperator() instanceof SqlUnresolvedFunction)) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,127,if (call.getOperator() instanceof SqlFunction) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,128,final List<RelDataType> paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,129,((SqlFunction) call.getOperator()).getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,130,if (paramTypes != null && operandList.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,131,final List<SqlNode> list = Lists.newArrayList(operandList);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,132,while (list.size() < paramTypes.size()) {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,133,list.add(DEFAULT_CALL);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,135,return list;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,138,return operandList;
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,156,final SqlFunction operator = (SqlFunction) call.getOperator();
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,30,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,56,private final List<RelDataType> paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,80,operandTypeChecker, null, category);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,120,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,127,this.paramTypes =
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,128,paramTypes == null ? null : ImmutableList.copyOf(paramTypes);
core/src/main/java/org/apache/calcite/sql/SqlFunction.java,155,return paramTypes;
core/src/main/java/org/apache/calcite/sql/SqlOperator.java,505,SqlUtil.lookupRoutine(validator.getOperatorTable(), getNameAsId(),
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,411,SqlOperatorTable opTab,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,412,SqlIdentifier funcName,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,413,List<RelDataType> argTypes,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,414,List<String> argNames,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,415,SqlSyntax sqlSyntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,416,SqlKind sqlKind,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,517,SqlSyntax syntax,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,518,final Iterator<SqlOperator> routines,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,614,private static RelDataType bestMatch(List<SqlFunction> sqlFunctions, int i,
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,618,List<RelDataType> paramTypes = function.getParamTypes();
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,619,if (paramTypes == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,19,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,22,import org.apache.calcite.schema.FunctionParameter;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,33,import com.google.common.collect.Lists;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,35,import java.util.List;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,52,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,53,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,59,public List<RelDataType> getParameterTypes(
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,60,final RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,61,return Lists.transform(function.getParameters(),
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,70,public RelDataType getReturnType(RelDataTypeFactory typeFactory) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedAggFunction.java,71,return function.getReturnType(typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,51,this(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,52,paramTypes, function, SqlFunctionCategory.USER_DEFINED_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,56,protected SqlUserDefinedFunction(SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,59,SqlOperandTypeChecker operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,60,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,63,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,64,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedFunction.java,65,paramTypes, category);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,43,List<RelDataType> paramTypes,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,45,super(opName, returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,46,paramTypes, function, SqlFunctionCategory.USER_DEFINED_TABLE_FUNCTION);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,70,super(Util.last(opName.names), opName, SqlKind.OTHER_FUNCTION,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,71,returnTypeInference, operandTypeInference, operandTypeChecker,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,3077,String clause) {
core/src/main/java/org/apache/calcite/rex/RexFieldAccess.java,63,assert expr.getType().getFieldList().get(field.getIndex()) == field;
core/src/main/java/org/apache/calcite/model/ModelHandler.java,112,for (Map.Entry<String, ScalarFunction> entry
core/src/main/java/org/apache/calcite/model/ModelHandler.java,113,: ScalarFunctionImpl.createAll(clazz).entries()) {
core/src/main/java/org/apache/calcite/sql/SqlAsOperator.java,54,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,219,try {
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,220,final SqlNode node = call.operand(ordinal);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,228,return SqlUtil.isNullLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlCallBinding.java,232,return SqlUtil.isLiteral(call.operand(ordinal), allowCast);
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,241,public SqlKind getKind() {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,259,public <T> T getValueAs(Class<T> clazz) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,394,if (node instanceof SqlIntervalQualifier) {
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,395,SqlIntervalQualifier qualifier = (SqlIntervalQualifier) node;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,396,return qualifier.timeUnitRange;
core/src/main/java/org/apache/calcite/sql/SqlLiteral.java,446,if (node instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,55,OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,212,if (allowCast) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,213,if (node.getKind() == SqlKind.CAST) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,214,SqlCall call = (SqlCall) node;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,215,if (isLiteral(call.operand(0), false)) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,217,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,221,return false;
core/src/main/java/org/apache/calcite/sql/fun/SqlArgumentAssignmentOperator.java,40,InferTypes.RETURN_TYPE, OperandTypes.ANY_ANY);
core/src/main/java/org/apache/calcite/sql/fun/SqlCollectionTableOperator.java,40,OperandTypes.ANY);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,66,SqlTypeFamily family = families.get(iFormalOperand);
core/src/main/java/org/apache/calcite/sql/type/FamilyOperandTypeChecker.java,67,if (family == SqlTypeFamily.ANY) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,57,if (operator instanceof SqlUserDefinedTableFunction) {
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,58,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,59,: "User-defined table function should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,60,final SqlUserDefinedTableFunction udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,61,(SqlUserDefinedTableFunction) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,62,return udf.getRowType(validator.typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,64,assert type.getSqlTypeName() == SqlTypeName.CURSOR
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,65,: "User-defined table macro should have CURSOR type, not " + type;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,66,final SqlUserDefinedTableMacro udf =
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,67,(SqlUserDefinedTableMacro) operator;
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,69,.getRowType(validator.typeFactory);
core/src/main/java/org/apache/calcite/sql/validate/ProcedureNamespace.java,71,return type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,20,import org.apache.calcite.rel.type.RelDataTypeFactory;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,24,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,38,public class SqlUserDefinedTableFunction extends SqlUserDefinedFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,67,public RelDataType getRowType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,68,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,72,return getFunction().getRowType(typeFactory, arguments);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,84,public Type getElementType(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableFunction.java,85,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,20,import org.apache.calcite.linq4j.tree.BlockBuilder;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,21,import org.apache.calcite.linq4j.tree.Expression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,22,import org.apache.calcite.linq4j.tree.Expressions;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,23,import org.apache.calcite.linq4j.tree.FunctionExpression;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,27,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,32,import org.apache.calcite.sql.SqlCall;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,37,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,38,import org.apache.calcite.sql.SqlNode;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,39,import org.apache.calcite.sql.SqlUtil;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,43,import org.apache.calcite.util.ImmutableNullableList;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,44,import org.apache.calcite.util.NlsString;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,45,import org.apache.calcite.util.Pair;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,49,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,53,import java.util.Collections;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,62,public class SqlUserDefinedTableMacro extends SqlFunction {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,83,public TranslatableTable getTable(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,84,List<SqlNode> operandList) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,85,List<Object> arguments = convertArguments(typeFactory, operandList,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,86,tableMacro, getNameAsId(), true);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,101,public static List<Object> convertArguments(RelDataTypeFactory typeFactory,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,102,List<SqlNode> operandList, Function function,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,103,SqlIdentifier opName,
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,104,boolean failOnNonLiteral) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,105,List<Object> arguments = new ArrayList<>(operandList.size());
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,107,for (Pair<FunctionParameter, SqlNode> pair
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,108,: Pair.zip(function.getParameters(), operandList)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,109,try {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,110,final Object o = getValue(pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,111,final Object o2 = coerce(o, pair.left.getType(typeFactory));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,112,arguments.add(o2);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,118,+ ") is not literal: " + pair.right);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,126,private static Object getValue(SqlNode right) throws NonLiteralException {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,127,switch (right.getKind()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,128,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,130,for (SqlNode o : ((SqlCall) right).getOperandList()) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,131,list.add(getValue(o));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,133,return ImmutableNullableList.copyOf(list);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,134,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,135,final ImmutableMap.Builder<Object, Object> builder2 =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,136,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,137,final List<SqlNode> operands = ((SqlCall) right).getOperandList();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,138,for (int i = 0; i < operands.size(); i += 2) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,139,final SqlNode key = operands.get(i);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,140,final SqlNode value = operands.get(i + 1);
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,141,builder2.put(getValue(key), getValue(value));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,143,return builder2.build();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,144,default:
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,145,if (SqlUtil.isNullLiteral(right, true)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,146,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,148,if (SqlUtil.isLiteral(right)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,149,return ((SqlLiteral) right).getValue();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,151,if (right.getKind() == SqlKind.DEFAULT) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,152,return null; // currently NULL is the only default value
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,154,throw new NonLiteralException();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,158,private static Object coerce(Object o, RelDataType type) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,159,if (o == null) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,160,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,162,if (!(type instanceof RelDataTypeFactoryImpl.JavaType)) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,163,return null;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,165,final RelDataTypeFactoryImpl.JavaType javaType =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,166,(RelDataTypeFactoryImpl.JavaType) type;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,167,final Class clazz = javaType.getJavaClass();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,169,if (clazz.isAssignableFrom(o.getClass())) {
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,170,return o;
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,179,BlockBuilder bb = new BlockBuilder();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,180,final Expression expr =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,182,bb.add(Expressions.return_(null, expr));
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,183,final FunctionExpression convert =
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,186,return convert.compile().dynamicInvoke();
core/src/main/java/org/apache/calcite/sql/validate/SqlUserDefinedTableMacro.java,191,private static class NonLiteralException extends Exception {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2294,final TranslatableTable table =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2295,udf.getTable(typeFactory, callBinding.operands());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2307,elementType = udtf.getElementType(typeFactory, callBinding.operands());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,61,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFilterableTable.java,66,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,47,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvScannableTable.java,52,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvSchemaFactory.java,38,static final String ROWTIME_COLUMN_NAME = "ROWTIME";
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,65,final int[] fields = CsvEnumerator.identityList(fieldTypes.size());
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamScannableTable.java,70,new CsvEnumerator.ArrayRowConverter(fieldTypes, fields, true));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,44,class CsvEnumerator<E> implements Enumerator<E> {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,46,private final String[] filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,64,List<CsvFieldType> fieldTypes) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,65,this(source, cancelFlag, fieldTypes, identityList(fieldTypes.size()));
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,69,List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,79,this.filterValues = filterValues;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,93,int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,94,if (fields.length == 1) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,95,final int field = fields[0];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,98,return new ArrayRowConverter(fieldTypes, fields);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,111,static RelDataType deduceRowType(JavaTypeFactory typeFactory, Source source,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,112,List<CsvFieldType> fieldTypes, Boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,117,names.add(CsvSchemaFactory.ROWTIME_COLUMN_NAME);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,174,public static CSVReader openCsv(Source source) throws IOException {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,206,String filterValue = filterValues[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,235,static int[] identityList(int n) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,326,private final CsvFieldType[] fieldTypes;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,327,private final int[] fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,331,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,333,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,334,this.stream = false;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,337,ArrayRowConverter(List<CsvFieldType> fieldTypes, int[] fields, boolean stream) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,339,this.fields = fields;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,352,final Object[] objects = new Object[fields.length];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,353,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,354,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,355,objects[i] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,361,final Object[] objects = new Object[fields.length + 1];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,363,for (int i = 0; i < fields.length; i++) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,364,int field = fields[i];
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,365,objects[i + 1] = convert(fieldTypes[field], strings[field]);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvEnumerator.java,372,private static class SingleColumnRowConverter extends RowConverter {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvFieldType.java,33,enum CsvFieldType {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvStreamReader.java,17,package org.apache.calcite.adapter.csv;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,19,import org.apache.calcite.adapter.csv.CsvFilterableTable;
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,55,this.tables = ImmutableList.copyOf(tables);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,91,final Source baseSource = Sources.of(baseDirectory);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,100,if (files == null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,101,System.out.println("directory " + baseDirectory + " not found");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,102,files = new File[0];
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,105,for (File file : files) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,106,Source source = Sources.of(file);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,107,Source sourceSansGz = source.trim(".gz");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,108,final Source sourceSansJson = sourceSansGz.trimOrNull(".json");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,109,if (sourceSansJson != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,114,final Source sourceSansCsv = sourceSansGz.trimOrNull(".csv");
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,115,if (sourceSansCsv != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,116,addTable(builder, source, sourceSansCsv.relative(baseSource).path(),
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,117,null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchema.java,149,final Table table = new CsvFilterableTable(source, null);
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,37,public FileSchemaFactory() {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,46,File directoryFile = baseDirectory;
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,48,if (baseDirectory != null && directory != null) {
file/src/main/java/org/apache/calcite/adapter/file/FileSchemaFactory.java,50,if (!directoryFile.isAbsolute()) {
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonEnumerator.java,17,package org.apache.calcite.adapter.csv;
example/csv/src/main/java/org/apache/calcite/adapter/csv/JsonTable.java,17,package org.apache.calcite.adapter.csv;
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,402,protected void notifyDiscard(
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,403,RelNode rel) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,559,RelNode joinRel, ImmutableBitSet groupKey) {
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,562,RelNode left = joinRel.getInputs().get(0);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,563,RelNode right = joinRel.getInputs().get(1);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdUtil.java,574,return numDistinctVals(population, mq.getRowCount(joinRel));
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,374,Join joinRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,377,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,384,filters.add(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,394,shiftRightFilter(joinRel, left, multiJoin,
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,751,return selfJoin.getLeftFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,753,return selfJoin.getRightFactor();
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,767,return selfJoin.getLeftFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,780,return selfJoin.getRightFactor() == factIdx;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,796,assert selfJoin.getRightFactor() == rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,797,return selfJoin.getColumnMapping().get(rightOffset);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,831,private class RemovableSelfJoin {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,835,private int leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,841,private int rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,848,private Map<Integer, Integer> columnMapping;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,859,public int getLeftFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,860,return leftFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,863,public int getRightFactor() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,864,return rightFactor;
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,867,public Map<Integer, Integer> getColumnMapping() {
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,868,return columnMapping;
core/src/main/java/org/apache/calcite/sql/SqlCharStringLiteral.java,63,return getNlsString().getCollation();
core/src/main/java/org/apache/calcite/sql/fun/SqlLiteralChainOperator.java,169,NlsString nls = ((SqlCharStringLiteral) rand).getNlsString();
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,192,result.add("  " + fieldName + DISTINCT_FIELD_SUFFIX + " = DISTINCT " + relAlias + '.'
pig/src/main/java/org/apache/calcite/adapter/pig/PigAggregate.java,193,+ fieldName + ";\n");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,24,import org.apache.calcite.plan.RelOptRuleOperand;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,93,protected final Convention out;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,97,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,103,Predicate<? super R> predicate,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,104,String description) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,106,this.out = CassandraRel.CONVENTION;
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,114,private static class CassandraFilterRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,124,private static final CassandraFilterRule INSTANCE = new CassandraFilterRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,126,private CassandraFilterRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,127,super(operand(LogicalFilter.class, operand(CassandraTableScan.class, none())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,210,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,221,public RelNode convert(LogicalFilter filter, CassandraTableScan scan) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,239,private static class CassandraProjectRule extends CassandraConverterRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,240,private static final CassandraProjectRule INSTANCE = new CassandraProjectRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,242,private CassandraProjectRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,243,super(LogicalProject.class, "CassandraProjectRule");
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,257,public RelNode convert(RelNode rel) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,270,private static class CassandraSortRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,285,private static final RelOptRuleOperand CASSANDRA_OP =
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,286,operand(CassandraToEnumerableConverter.class,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,289,private static final CassandraSortRule INSTANCE = new CassandraSortRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,291,private CassandraSortRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,304,public boolean matches(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,371,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,385,private static class CassandraLimitRule extends RelOptRule {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,386,private static final CassandraLimitRule INSTANCE = new CassandraLimitRule();
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,388,private CassandraLimitRule() {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,389,super(operand(EnumerableLimit.class, operand(CassandraToEnumerableConverter.class, any())),
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java,401,public void onMatch(RelOptRuleCall call) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,31,EnumerableAggregateRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,32,super(LogicalAggregate.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,33,EnumerableConvention.INSTANCE, "EnumerableAggregateRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableBindable.java,88,public static final EnumerableToBindableConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,30,EnumerableCalcRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCalcRule.java,37,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,30,EnumerableCollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,31,super(Collect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableCorrelateRule.java,34,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,30,EnumerableFilterRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,29,public class EnumerableFilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableFilterToCalcRule.java,34,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableInterpreterRule.java,29,public static final EnumerableInterpreterRule INSTANCE =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,31,EnumerableIntersectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,32,super(LogicalIntersect.class, Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,33,EnumerableConvention.INSTANCE, "EnumerableIntersectRule");
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableIntersectRule.java,36,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,36,EnumerableJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,37,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,38,LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,39,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableJoinRule.java,40,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,31,class EnumerableLimitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,33,super(
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableLimitRule.java,34,operand(Sort.class, any()),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,44,EnumerableMergeJoinRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,45,super(LogicalJoin.class,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,46,Convention.NONE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoinRule.java,47,EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,30,EnumerableMinusRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,31,super(LogicalMinus.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMinusRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,20,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,30,EnumerableProjectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,26,public class EnumerableProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableProjectToCalcRule.java,31,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,34,new EnumerableJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,37,new EnumerableMergeJoinRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,49,new EnumerableProjectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,52,new EnumerableFilterRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,55,new EnumerableCalcRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,58,new EnumerableAggregateRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,61,new EnumerableSortRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,64,new EnumerableLimitRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,67,new EnumerableUnionRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,70,new EnumerableIntersectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,73,new EnumerableMinusRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,82,new EnumerableWindowRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,85,new EnumerableCollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableRules.java,88,new EnumerableUncollectRule();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,29,EnumerableSortRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableSortRule.java,30,super(Sort.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,30,public EnumerableTableFunctionScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,38,LogicalTableFunctionScan tbl = (LogicalTableFunctionScan) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableFunctionScanRule.java,41,tbl.getCall(), tbl.getColumnMappings());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableTableScanRule.java,32,public EnumerableTableScanRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,30,EnumerableUncollectRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,31,super(Uncollect.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollectRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,30,EnumerableUnionRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,31,super(LogicalUnion.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,30,EnumerableWindowRule() {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,31,super(LogicalWindow.class, Convention.NONE, EnumerableConvention.INSTANCE,
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableWindowRule.java,35,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,27,import org.apache.calcite.plan.RelTrait;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,129,protected final JdbcConvention out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,132,JdbcConvention out, String description) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,134,this.out = out;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,353,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,414,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,457,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,539,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,587,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,630,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcRules.java,674,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,30,import org.apache.calcite.plan.RelOptUtil;
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,249,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,312,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,362,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,412,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,475,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,614,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,672,public RelNode convert(RelNode rel) {
core/src/main/java/org/apache/calcite/interpreter/NoneToBindableConverterRule.java,30,public static final ConverterRule INSTANCE =
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,25,public abstract class CommonRelSubExprRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/CommonRelSubExprRule.java,34,super(operand);
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,417,protected boolean equals(RelOptRule that) {
core/src/main/java/org/apache/calcite/plan/RelOptRule.java,618,private static class ConverterRelOptRuleOperand extends RelOptRuleOperand {
core/src/main/java/org/apache/calcite/plan/hep/HepProgramBuilder.java,115,instruction.rule = rule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,22,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,101,public static class ExpandConversionRule extends RelOptRule {
core/src/main/java/org/apache/calcite/plan/volcano/AbstractConverter.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,34,public abstract class ConverterRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,67,super(convertOperand(clazz, predicate, in),
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,75,assert in.getTraitDef() == out.getTraitDef();
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,80,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/convert/ConverterRule.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,31,public class TraitMatchingRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,34,private final ConverterRule converter;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,46,operand(
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,47,converterRule.getOperand().getMatchedClass(),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,48,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,50,assert converterRule.getOperand().childPolicy
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,51,== RelOptRuleOperandChildPolicy.ANY;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,52,this.converter = converterRule;
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,59,return converter.getOutConvention();
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,62,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,64,if (input.getTraitSet().contains(converter.getOutTrait())) {
core/src/main/java/org/apache/calcite/rel/convert/TraitMatchingRule.java,65,converter.onMatch(call);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,84,public static final AggregateExpandDistinctAggregatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,90,public static final AggregateExpandDistinctAggregatesRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,96,public final boolean useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,104,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,105,this.useGroupingSets = useGroupingSets;
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,125,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,167,if (useGroupingSets) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,59,public static final AggregateFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,63,this(
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,64,operand(Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,65,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,66,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,71,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,74,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,67,public static final AggregateJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,72,public static final AggregateJoinTransposeRule EXTENDED =
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,76,private final boolean allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,82,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,85,this.allowFunctions = allowFunctions;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,203,if (!allowFunctions) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,51,public static final AggregateProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,59,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,60,operand(projectClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,61,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,63,public static final AggregateProjectPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,69,public static final AggregateProjectPullUpConstantsRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,88,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,90,operand(inputClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,91,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,87,public static final AggregateReduceFunctionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,95,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,108,public void onMatch(RelOptRuleCall ruleCall) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,36,public static final AggregateRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,51,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,59,public static final AggregateStarTableRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,65,public static final AggregateStarTableRule INSTANCE2 =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,42,public static final AggregateUnionAggregateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,55,operand(unionClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,72,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,54,public static final AggregateUnionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,71,super(
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,72,operand(aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,73,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,74,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,86,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/AggregateValuesRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,44,super(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,45,operand(
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,46,Calc.class,
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,23,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,38,public static final CalcRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,49,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,50,LogicalCalc calc = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,51,RexProgram program = calc.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,52,if (!program.isTrivial()) {
core/src/main/java/org/apache/calcite/rel/rules/CalcRemoveRule.java,53,return;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,42,public static final CalcSplitRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,46,super(operand(Calc.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,37,private final Class consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,39,private final boolean coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,54,operand(consumerRelClass, any()),
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,56,this.consumerRelClass = consumerRelClass;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,57,this.coerceNames = coerceNames;
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,68,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,70,if (consumerRel.getClass() != consumerRelClass) {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,84,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,92,coerceNames);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,84,private static final Predicate<Filter> FILTER_PREDICATE =
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,99,new FilterDateRangeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,141,relBuilderFactory, "FilterDateRangeRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,52,public static final FilterAggregateTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,66,RelBuilderFactory builderFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,68,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,69,operand(filterClass,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,70,operand(aggregateClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,71,builderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,75,RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,76,super(operand, builderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,40,public static final FilterCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,46,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,47,operand(
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,48,Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,54,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,61,if (calc.getProgram().containsAggs()) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,44,public static final FilterCorrelateRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,52,public FilterCorrelateRule(RelBuilderFactory builderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,53,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,54,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,55,operand(Correlate.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,56,builderFactory, "FilterCorrelateRule");
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,60,public static final FilterJoinRule FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,67,public static final FilterJoinRule DUMB_FILTER_ON_JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,72,public static final FilterJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,76,private final boolean smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,81,private final Predicate predicate;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,89,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,90,boolean smart, RelBuilderFactory relBuilderFactory, Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,91,super(operand, relBuilderFactory, "FilterJoinRule:" + id);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,92,this.smart = smart;
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,101,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,102,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,103,RelFactories.ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,104,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,113,protected FilterJoinRule(RelOptRuleOperand operand, String id,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,114,boolean smart, RelFactories.FilterFactory filterFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,115,RelFactories.ProjectFactory projectFactory,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,116,Predicate predicate) {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,117,this(operand, id, smart, RelBuilder.proto(filterFactory, projectFactory),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,118,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,146,if (smart
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,305,public static class JoinConditionPushRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,308,super(RelOptRule.operand(Join.class, RelOptRule.any()),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,310,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,327,public static class FilterIntoJoinRule extends FilterJoinRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,330,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,331,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,332,operand(Join.class, RelOptRule.any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,334,predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,342,this(smart, RelBuilder.proto(filterFactory, projectFactory), predicate);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,36,public static final FilterMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,45,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,46,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,47,operand(Filter.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,48,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,21,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,32,public static final FilterMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,41,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,48,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,28,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,45,public static final FilterProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,49,private final boolean copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,50,private final boolean copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,65,this(
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,68,copyFilter, copyProject, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,78,projectFactory == null,
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,79,RelBuilder.proto(filterFactory, projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,87,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,88,this.copyFilter = copyFilter;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,89,this.copyProject = copyProject;
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,94,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,98,if (RexOver.containsOver(project.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,121,if (copyFilter) {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,132,RelNode newProjRel =
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,133,copyProject
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,140,call.transformTo(newProjRel);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,43,public static final FilterRemoveIsNotDistinctFromRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,54,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,87,private class RemoveIsNotDistinctFromRexShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,88,RexBuilder rexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,96,public RexNode visitCall(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,41,public static final FilterSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,51,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,52,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,53,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,58,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,41,public static final FilterTableFunctionTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,50,super(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,51,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,58,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,52,public abstract class FilterTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,65,public static final FilterTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,78,public static final FilterTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,70,public static final IntersectToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,76,public IntersectToDistinctRule(Class<? extends Intersect> intersectClazz,
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,78,super(operand(intersectClazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,83,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,38,public static final JoinAddRedundantSemiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,52,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,60,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,61,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,62,operand(Join.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,68,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,61,private final boolean swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,71,this.swapOuter = swapOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,75,this(LogicalJoin.class, RelFactories.LOGICAL_BUILDER, swapOuter);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,140,public void onMatch(final RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,45,public static final JoinExtractFilterRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,61,public static final JoinProjectTransposeRule BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,68,public static final JoinProjectTransposeRule LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,74,public static final JoinProjectTransposeRule RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,82,public static final JoinProjectTransposeRule BOTH_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,90,public static final JoinProjectTransposeRule LEFT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,97,public static final JoinProjectTransposeRule RIGHT_PROJECT_INCLUDE_OUTER =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,106,private final boolean includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,114,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,115,this.includeOuter = includeOuter;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,122,this(operand, description, false, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,128,this(operand, description, false,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,129,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,136,this(operand, description, includeOuter,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,137,RelBuilder.proto(Contexts.of(projectFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,143,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,144,Join joinRel = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,145,JoinRelType joinType = joinRel.getJoinType();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,147,Project leftProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,148,Project rightProj;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,155,&& (includeOuter || !joinType.generatesNullsOnLeft())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,156,leftProj = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,157,leftJoinChild = getProjectChild(call, leftProj, true);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,159,leftProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,163,&& (includeOuter || !joinType.generatesNullsOnRight())) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,164,rightProj = getRightChild(call);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,165,rightJoinChild = getProjectChild(call, rightProj, false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,167,rightProj = null;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,168,rightJoinChild = joinRel.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,170,if ((leftProj == null) && (rightProj == null)) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,183,RelDataType joinChildrenRowType =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,188,joinRel.getCluster().getTypeFactory(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,197,int nProjExprs = joinRel.getRowType().getFieldCount();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,199,final RexBuilder rexBuilder = joinRel.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,202,leftProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,209,List<RelDataTypeField> leftFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,211,int nFieldsLeft = leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,213,rightProj,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,230,RexProgram bottomProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,237,RexProgramBuilder topProgramBuilder =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,242,topProgramBuilder.addCondition(joinRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,243,RexProgram topProgram = topProgramBuilder.getProgram();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,244,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,253,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,256,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,257,joinRel.copy(joinRel.getTraitSet(), newCondition,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,258,leftJoinChild, rightJoinChild, joinRel.getJoinType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,259,joinRel.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,264,List<RexLocalRef> projList = mergedProgram.getProjectList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,265,List<RelDataTypeField> newJoinFields =
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,266,newJoinRel.getRowType().getFieldList();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,267,int nJoinFields = newJoinFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,285,relBuilder.push(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,286,relBuilder.project(newProjExprs, joinRel.getRowType().getFieldNames());
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,290,relBuilder.convert(joinRel.getRowType(), false);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,352,Project projRel,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,360,if (projRel != null) {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,362,projRel.getNamedProjects();
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,387,(RexNode) rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,388,field.getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,40,public static final JoinPushExpressionsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,44,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,46,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,50,public JoinPushExpressionsRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,52,this(clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,68,public static final RelOptRule RIGHT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,69,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,71,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,75,public static final RelOptRule LEFT =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,76,new JoinPushThroughJoinRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,78,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,80,private final boolean right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,86,Class<? extends Join> clazz, RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,87,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,88,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,89,operand(clazz, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,91,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,92,this.right = right;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,97,Class<? extends Join> clazz, ProjectFactory projectFactory) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,98,this(description, right, clazz, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,102,if (right) {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,27,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,44,public static final JoinPushTransitivePredicatesRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,49,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,51,super(operand(clazz, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,55,public JoinPushTransitivePredicatesRule(Class<? extends Join> clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,57,this(clazz, RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,70,final RexBuilder rexBuilder = join.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,73,RelNode lChild = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,75,RelNode curr = lChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,78,call.getPlanner().onCopy(curr, lChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,81,RelNode rChild = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,83,RelNode curr = rChild;
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,86,call.getPlanner().onCopy(curr, rChild);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,90,lChild, rChild, join.getJoinType(), join.isSemiJoinDone());
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,77,this(RelBuilder.proto(Contexts.of(filterFactory)));
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,82,public boolean matches(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,96,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,104,public static final JoinToMultiJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,113,super(
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,114,operand(clazz,
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,115,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,121,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,36,public static final JoinUnionTransposeRule LEFT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,43,public static final JoinUnionTransposeRule RIGHT_UNION =
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,55,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,71,public static final LoptOptimizeJoinRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,76,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,88,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,297,final TreeSet<Integer> sortedFactors = new TreeSet<>();
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,298,sortedFactors.addAll(simpleFactors.keySet());
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1642,Pair.of(
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,1643,(RexNode) rexBuilder.makeInputRef(currFields.get(i).getType(), i),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,23,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,48,public static final MaterializedViewFilterScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,54,.build();
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,60,super(operand(Filter.class, operand(TableScan.class, null, none())),
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,61,relBuilderFactory, "MaterializedViewFilterScanRule");
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,66,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,80,Collections.singletonList((RelNode) scan));
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,88,new HepPlanner(program, planner.getContext());
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,69,public static final MultiJoinOptimizeBushyRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,78,super(operand(MultiJoin.class, any()), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,60,public static final MultiJoinProjectTransposeRule MULTI_BOTH_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,61,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,62,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,63,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,64,operand(MultiJoin.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,65,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,66,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,69,public static final MultiJoinProjectTransposeRule MULTI_LEFT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,70,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,71,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,72,some(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,73,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,74,operand(MultiJoin.class, any())))),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,77,public static final MultiJoinProjectTransposeRule MULTI_RIGHT_PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,78,new MultiJoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,79,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,80,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,81,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinProjectTransposeRule.java,82,operand(MultiJoin.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,46,public static final ProjectCalcMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,53,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,54,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,60,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,61,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,62,final LogicalCalc calc = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,29,import org.apache.calcite.rex.RexOver;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,46,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,56,public ProjectFilterTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,57,Class<? extends Project> projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,58,Class<? extends Filter> filterClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,59,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,61,this(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,62,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,63,projectClass,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,64,operand(filterClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,71,super(operand, relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,72,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,40,public static final ProjectJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,50,private final PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,62,RelBuilderFactory relFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,67,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,74,Project origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,84,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,86,origProj,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,89,preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,91,if (pushProject.locateAllRefs()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,97,RelNode leftProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,98,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,102,RelNode rightProjRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,103,pushProject.createProjectRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,110,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,112,List<RelDataTypeField> projJoinFieldList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,113,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,115,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,116,leftProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,117,projJoinFieldList.addAll(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,118,rightProjRel.getRowType().getFieldList());
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,120,pushProject.convertRefsAndExprs(
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,122,projJoinFieldList,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,127,Join newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,131,leftProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,132,rightProjRel,
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,138,RelNode topProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,139,pushProject.createNewProject(newJoinRel, adjustments);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,40,public static final ProjectMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,46,private final boolean force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,57,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,58,operand(Project.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,59,relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,61,this.force = force;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,66,this(force, RelBuilder.proto(projectFactory));
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,71,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,101,if (!force) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,112,if (force
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,36,public static final ProjectMultiJoinMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,43,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,44,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,45,operand(MultiJoin.class, any())), relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,50,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectRemoveRule.java,65,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,42,public static final ProjectSetOpTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,51,private PushProjector.ExprCondition preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,64,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,65,operand(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,66,LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,67,operand(SetOp.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,69,this.preserveExprCondition = preserveExprCondition;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,75,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,76,LogicalProject origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,77,SetOp setOp = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,85,PushProjector pushProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,86,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,87,origProj, null, setOp, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,88,pushProject.locateAllRefs();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,90,List<RelNode> newSetOpInputs = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,91,int[] adjustments = pushProject.getAdjustments();
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,17,package org.apache.calcite.rel.rules;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,20,import org.apache.calcite.plan.RelOptRuleCall;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,22,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,23,import org.apache.calcite.rel.core.Project;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,24,import org.apache.calcite.rel.core.Sort;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,26,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,36,public static final ProjectSortTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,50,protected ProjectSortTransposeRule(RelOptRuleOperand operand) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,57,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,58,final Sort sort = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,59,if (sort.getClass() != Sort.class) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,60,return;
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,62,RelNode newProject =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,63,project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,64,project.getTraitSet(), ImmutableList.of(sort.getInput()));
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,65,final Sort newSort =
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,66,sort.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,67,sort.getTraitSet(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,68,newProject,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,69,sort.getCollation(),
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,70,sort.offset,
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,71,sort.fetch);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,72,call.transformTo(newSort);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,50,public abstract class ProjectTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,61,public static final ProjectTableScanRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,74,public static final ProjectTableScanRule INTERPRETER =
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,53,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,23,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,48,public static final ProjectWindowTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,52,super(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,53,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,58,final LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,59,final LogicalWindow window = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,172,final LogicalProject newTopProj = project.copy(
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,185,private ImmutableBitSet findReference(final LogicalProject project,
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,186,final LogicalWindow window) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,45,import static org.apache.calcite.plan.RelOptRule.any;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,46,import static org.apache.calcite.plan.RelOptRule.none;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,47,import static org.apache.calcite.plan.RelOptRule.operand;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,48,import static org.apache.calcite.plan.RelOptRule.some;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,49,import static org.apache.calcite.plan.RelOptRule.unordered;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,77,operand(LogicalUnion.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,80,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,81,final LogicalUnion union = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,83,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,85,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,86,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,95,builder.push(union).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,108,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,125,operand(LogicalMinus.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,128,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,129,final LogicalMinus minus = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,131,assert inputs != null;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,133,for (RelNode input : inputs) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,134,if (!isEmpty(input)) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,139,break;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,147,builder.push(minus).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,160,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,178,operand(LogicalIntersect.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,181,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,182,LogicalIntersect intersect = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,183,final RelBuilder builder = call.builder();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,184,builder.push(intersect).empty();
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,185,call.transformTo(builder.build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,219,new RemoveEmptySingleRule(Filter.class, "PruneEmptyFilter");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,232,new RemoveEmptySingleRule(Sort.class, "PruneEmptySort");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,246,operand(Sort.class, any()), "PruneSortLimit0") {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,248,Sort sort = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,249,if (sort.fetch != null
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,250,&& RexLiteral.intValue(sort.fetch) == 0) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,273,RelFactories.LOGICAL_BUILDER, "PruneEmptyAggregate");
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,287,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,288,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,290,operand(RelNode.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,293,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,294,if (join.getJoinType().generatesNullsOnLeft()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,297,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,299,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,315,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,316,some(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,317,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,321,Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,322,if (join.getJoinType().generatesNullsOnRight()) {
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,325,return;
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,327,call.transformTo(call.builder().push(join).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,338,description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,345,super(
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,348,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,351,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,82,public Convention getOutConvention() {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,87,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,121,public class DecimalShuttle extends RexShuttle {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,126,public DecimalShuttle(RexBuilder rexBuilder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,219,private class ExpanderMap {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,268,public RexExpander getExpander(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,290,public abstract class RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,294,RexBuilder builder;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,300,RelDataType int8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,306,RelDataType real8;
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,311,public RexExpander(RexBuilder builder) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,722,private class CastExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,821,private class BinaryArithmeticExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,832,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1012,private class FloorExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1061,private class CeilExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1112,private class CaseExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1149,private class PassThroughExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1154,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1184,private class CastArgAsDoubleExpander extends CastArgAsTypeExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1204,private abstract class CastArgAsTypeExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1211,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1244,private class ReinterpretExpander extends RexExpander {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1249,public boolean canExpand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,1254,public RexNode expand(RexCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,21,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,111,public static final ReduceExpressionsRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,118,public static final ReduceExpressionsRule JOIN_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,125,public static final ReduceExpressionsRule CALC_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,133,public static class FilterReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,253,public static class ProjectReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,283,public static class JoinReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,332,public static class CalcReduceExpressionsRule extends ReduceExpressionsRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,427,protected ReduceExpressionsRule(Class<? extends RelNode> clazz,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,746,private final RelDataTypeFactory typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,765,this.typeFactory = typeFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,39,public static final SemiJoinFilterTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,48,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,56,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,58,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,60,RelNode newSemiJoin =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,47,public static final SemiJoinJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,56,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,64,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,76,int nFieldsX = join.getLeft().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,77,int nFieldsY = join.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,78,int nFieldsZ = semiJoin.getRight().getRowType().getFieldList().size();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,79,int nTotalFields = nFieldsX + nFieldsY + nFieldsZ;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,109,RexNode newSemiJoinFilter;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,151,RelNode leftSemiJoinOp;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,164,RelNode leftJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,165,RelNode rightJoinRel;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,167,leftJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,168,rightJoinRel = join.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,170,leftJoinRel = join.getLeft();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,171,rightJoinRel = newSemiJoin;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,174,RelNode newJoinRel =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,178,leftJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,179,rightJoinRel,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,183,call.transformTo(newJoinRel);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,36,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,56,public static final SemiJoinProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,65,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,67,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,68,relBuilderFactory, null);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,75,LogicalProject project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,121,RexBuilder rexBuilder = project.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,122,RelDataTypeFactory typeFactory = rexBuilder.getTypeFactory();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,123,RelNode rightChild = semiJoin.getRight();
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,35,public static final SemiJoinRemoveRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,47,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,69,public static final SemiJoinRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,73,public static final SemiJoinRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,77,protected SemiJoinRule(Class<Project> projectClass, Class<Join> joinClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,78,Class<Aggregate> aggregateClass, RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,79,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,80,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,81,operand(projectClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,82,some(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,84,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,85,operand(aggregateClass, any()))))),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,86,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,89,protected SemiJoinRule(Class<Join> joinClass, Class<Aggregate> aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,90,RelBuilderFactory relBuilderFactory, String description) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,91,super(
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,93,some(operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,95,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,163,super(projectClass, joinClass, aggregateClass,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,164,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,184,super(joinClass, aggregateClass, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,189,final Join join = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,190,final RelNode left = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,191,final Aggregate aggregate = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,192,perform(call, null, join, left, aggregate);
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,46,public static final SortJoinTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,55,super(
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,56,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,52,public static final SortProjectTransposeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,70,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,76,super(operand);
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,81,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,133,equiv = ImmutableMap.of((RelNode) newSort, project.getInput());
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,52,private final boolean matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,57,this(Sort.class, Union.class, matchNullFetch, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,70,super(
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,71,operand(sortClass,
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,72,operand(unionClass, any())),
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,73,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,74,this.matchNullFetch = matchNullFetch;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,87,&& (matchNullFetch || sort.fetch != null);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,90,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,21,import org.apache.calcite.plan.RelOptRuleOperand;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,43,import org.apache.calcite.tools.RelBuilderFactory;
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,66,public static final SubQueryRemoveRule PROJECT =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,91,public static final SubQueryRemoveRule FILTER =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,123,public static final SubQueryRemoveRule JOIN =
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,149,RelBuilderFactory relBuilderFactory,
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,150,String description) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,151,super(operand, relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,44,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,30,public static final UnionEliminatorRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,43,public static final UnionMergeRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,46,public static final UnionMergeRule INTERSECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,49,public static final UnionMergeRule MINUS_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,56,public UnionMergeRule(Class<? extends SetOp> unionClazz, String description,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,58,super(
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,59,operand(unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,60,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,61,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,62,relBuilderFactory, description);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,66,public UnionMergeRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,68,this(unionClazz, null, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,73,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,20,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,50,public static final UnionPullUpConstantsRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,19,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,36,public static final UnionToDistinctRule INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,44,public UnionToDistinctRule(Class<? extends Union> unionClazz,
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,52,this(unionClazz, RelBuilder.proto(setOpFactory));
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,57,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,73,public static final ValuesReduceRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,89,public static final ValuesReduceRule PROJECT_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,105,public static final ValuesReduceRule PROJECT_FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,129,Util.discard(LOGGER);
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,70,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,71,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,90,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,91,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,109,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,110,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,131,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,132,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,151,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,152,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,179,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,180,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,213,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,214,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,244,super(
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,245,operand(Delta.class,
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,249,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,24,import org.apache.calcite.plan.RelOptRule;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1724,private final class RemoveSingleAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1726,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1727,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1729,operand(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1734,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1777,private final class RemoveCorrelationForScalarProjectRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1779,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1781,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1787,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1795,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1834,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1900,if (!checkCorVars(correlate, project, filter, correlatedKeyList)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1914,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1925,if (!checkCorVars(correlate, project, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1940,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1965,projectJoinOutputWithNullability(join, project, nullIndicatorPos);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1969,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1974,private final class RemoveCorrelationForScalarAggregateRule
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1975,extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1977,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1979,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1986,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,1995,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2045,&& cm.mapRefRelToCorRef.containsKey(right)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2086,removeCorrelationExpr(joinKey, false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2109,if (!checkCorVars(correlate,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2110,aggInputProject,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2111,filter,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2159,joinCond =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2160,removeCorrelationExpr(filter.getCondition(), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2168,if (!checkCorVars(correlate, aggInputProject, null, null)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2232,right =
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2233,createProjectWithAdditionalExprs(right,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2234,ImmutableList.of(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2266,removeCorrelationExpr(aggInputProjExpr,
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2327,removeCorrelationExpr(aggOutputProjects.get(0), false);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2343,removeCorVarFromTree(correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2356,private final class AdjustProjectForCountAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2357,final boolean flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2360,super(
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2361,flavor
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2363,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2367,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2369,this.flavor = flavor;
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2372,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2377,if (flavor) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2405,if (generatedCorRels.contains(correlate)) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2411,setCurrent(call.getPlanner().getRoot(), correlate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2471,generatedCorRels.add(newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2476,if (cm.mapCorToCorRel.get(correlate.getCorrelationId()) == correlate) {
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2477,cm.mapCorToCorRel.put(correlate.getCorrelationId(), newCorrelate);
core/src/main/java/org/apache/calcite/sql2rel/RelDecorrelator.java,2481,aggregateCorrelatorOutput(newCorrelate, aggOutputProject, isCount);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,30,import org.apache.calcite.rel.core.RelFactories;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,83,public static final DruidAggregateProjectRule AGGREGATE_PROJECT =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,86,public static final DruidSortProjectTransposeRule SORT_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,88,public static final DruidProjectSortTransposeRule PROJECT_SORT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,90,public static final DruidProjectFilterTransposeRule PROJECT_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,92,public static final DruidFilterProjectTransposeRule FILTER_PROJECT_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,94,public static final DruidAggregateFilterTransposeRule AGGREGATE_FILTER_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,96,public static final DruidFilterAggregateTransposeRule FILTER_AGGREGATE_TRANSPOSE =
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,176,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,308,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,402,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,438,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,439,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,440,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,444,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,551,extends SortProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,553,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,554,operand(Sort.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,567,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,568,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,582,public void onMatch(RelOptRuleCall call) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,724,extends ProjectFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,726,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,727,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,728,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,729,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,741,extends FilterProjectTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,743,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,744,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,745,operand(Project.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,746,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,757,extends AggregateFilterTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,759,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,760,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,761,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,762,operand(DruidQuery.class, none()))),
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,773,extends FilterAggregateTransposeRule {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,775,super(
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,776,operand(Filter.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,777,operand(Aggregate.class,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,778,operand(DruidQuery.class, none()))),
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,24,import org.apache.calcite.plan.RelTrait;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,165,final Convention out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,167,ElasticsearchConverterRule(Class<? extends RelNode> clazz, RelTrait in, Convention out,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,168,String description) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,169,super(clazz, in, out, description);
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,170,this.out = out;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,181,private ElasticsearchSortRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,199,private static final ElasticsearchFilterRule INSTANCE = new ElasticsearchFilterRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,201,private ElasticsearchFilterRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,202,super(LogicalFilter.class, Convention.NONE, ElasticsearchRel.CONVENTION,
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,220,private static final ElasticsearchProjectRule INSTANCE = new ElasticsearchProjectRule();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,222,private ElasticsearchProjectRule() {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,223,super(LogicalProject.class, Convention.NONE, ElasticsearchRel.CONVENTION,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,19,import org.apache.calcite.plan.RelOptRule;
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,32,public class CsvProjectTableScanRule extends RelOptRule {
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,33,public static final CsvProjectTableScanRule INSTANCE =
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,37,super(
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,38,operand(LogicalProject.class,
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvProjectTableScanRule.java,39,operand(CsvTableScan.class, none())),
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,24,import org.apache.calcite.plan.RelTrait;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,250,protected final Convention out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,256,super(clazz, in, out, description);
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,257,this.out = out;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,266,public static final MongoSortRule INSTANCE = new MongoSortRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,268,private MongoSortRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,269,super(Sort.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,273,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,289,private static final MongoFilterRule INSTANCE = new MongoFilterRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,291,private MongoFilterRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,292,super(LogicalFilter.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,296,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,312,private static final MongoProjectRule INSTANCE = new MongoProjectRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,314,private MongoProjectRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,315,super(LogicalProject.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,319,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,502,public static final RelOptRule INSTANCE = new MongoAggregateRule();
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,504,private MongoAggregateRule() {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,505,super(LogicalAggregate.class, Convention.NONE, MongoRel.CONVENTION,
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,509,public RelNode convert(RelNode rel) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,54,private static final PigFilterRule INSTANCE = new PigFilterRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,56,private PigFilterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,57,super(LogicalFilter.class, Convention.NONE, PigRel.CONVENTION, "PigFilterRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,60,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,73,private static final PigTableScanRule INSTANCE = new PigTableScanRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,75,private PigTableScanRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,76,super(LogicalTableScan.class, Convention.NONE, PigRel.CONVENTION, "PigTableScanRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,79,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,81,final RelTraitSet traitSet = scan.getTraitSet().replace(PigRel.CONVENTION);
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,91,private static final PigProjectRule INSTANCE = new PigProjectRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,93,private PigProjectRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,94,super(LogicalProject.class, Convention.NONE, PigRel.CONVENTION, "PigProjectRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,97,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,110,private static final PigAggregateRule INSTANCE = new PigAggregateRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,112,private PigAggregateRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,113,super(LogicalAggregate.class, Convention.NONE, PigRel.CONVENTION, "PigAggregateRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,116,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,129,private static final PigJoinRule INSTANCE = new PigJoinRule();
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,131,private PigJoinRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,132,super(LogicalJoin.class, Convention.NONE, PigRel.CONVENTION, "PigJoinRule");
pig/src/main/java/org/apache/calcite/adapter/pig/PigRules.java,135,public RelNode convert(RelNode rel) {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,29,public static final ConverterRule INSTANCE =
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,32,private PigToEnumerableConverterRule() {
pig/src/main/java/org/apache/calcite/adapter/pig/PigToEnumerableConverterRule.java,33,super(RelNode.class, PigRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,17,package org.apache.calcite.adapter.spark;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableConvention;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,20,import org.apache.calcite.plan.RelTraitSet;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,21,import org.apache.calcite.rel.RelNode;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,22,import org.apache.calcite.rel.convert.ConverterRule;
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,29,public class EnumerableToSparkConverterRule extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,30,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,39,public RelNode convert(RelNode rel) {
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,40,RelTraitSet newTraitSet = rel.getTraitSet().replace(getOutTrait());
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,41,return new EnumerableToSparkConverter(
spark/src/main/java/org/apache/calcite/adapter/spark/EnumerableToSparkConverterRule.java,42,rel.getCluster(), newTraitSet, rel);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,92,EnumerableToSparkConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,93,SparkToEnumerableConverterRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,100,public static final EnumerableToSparkConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,101,new EnumerableToSparkConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,103,private EnumerableToSparkConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,104,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,105,RelNode.class, EnumerableConvention.INSTANCE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,117,public static final SparkToEnumerableConverterRule INSTANCE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,118,new SparkToEnumerableConverterRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,120,private SparkToEnumerableConverterRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,121,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,122,RelNode.class, SparkRel.CONVENTION, EnumerableConvention.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,132,public static final SparkValuesRule SPARK_VALUES_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,133,new SparkValuesRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,137,private SparkValuesRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,138,super(LogicalValues.class, Convention.NONE, SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,212,public static final SparkCalcRule SPARK_CALC_RULE =
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,213,new SparkCalcRule();
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,219,private static class SparkCalcRule
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,220,extends ConverterRule {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,221,private SparkCalcRule() {
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,222,super(
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,223,LogicalCalc.class,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,224,Convention.NONE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,225,SparkRel.CONVENTION,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,229,public RelNode convert(RelNode rel) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,21,import org.apache.calcite.plan.RelOptRule;
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,55,extends RelOptRule {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,74,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,81,operand(SplunkTableScan.class, none())))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,85,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,90,operand(SplunkTableScan.class, none()))),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,94,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,100,new SplunkPushDownRule(
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,103,operand(SplunkTableScan.class, none())),
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,114,public void onMatch(RelOptRuleCall call) {
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,300,s = s.append(" NOT ");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,258,defineUnary(UNARY_MINUS, Negate, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,259,defineUnary(UNARY_PLUS, UnaryPlus, NullPolicy.STRICT);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcToEnumerableConverter.java,299,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,110,final Result leftResult = visitChild(0, e.getLeft()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,111,final Result rightResult = visitChild(1, e.getRight()).resetAlias();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,140,Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,152,final Builder builder = x.builder(e, Clause.WHERE);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,160,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,162,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,164,final Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,165,x.builder(e, Clause.SELECT);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,166,final List<SqlNode> selectList = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,168,SqlNode sqlExpr = builder.context.toSql(null, ref);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,169,addSelect(selectList, sqlExpr, e.getRowType());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,172,builder.setSelect(new SqlNodeList(selectList, POS));
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,179,final Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,208,return builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,241,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,243,Builder builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,246,: x.builder(e);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,278,Result x = visitChild(0, e.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,279,Builder builder = x.builder(e, Clause.ORDER_BY);
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,286,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,291,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,296,x = builder.result();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,298,return x;
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,315,visitChild(0, modify.getInput()).asQueryOrValues();
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,324,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,336,final Result input = visitChild(0, modify.getInput());
core/src/main/java/org/apache/calcite/rel/rel2sql/RelToSqlConverter.java,378,final Result x = visitChild(0, input);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,241,final Result result = visitChild(input.i, input.e);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,457,final ImmutableMap.Builder<String, RelDataType> builder =
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,458,ImmutableMap.builder();
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,929,final Expressions.FluentList<Clause> clauses;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,937,this.clauses = Expressions.list(clauses);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,989,return ((SqlCall) selectItem).operand(0);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1017,Clause maxClause = null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1018,for (Clause clause : clauses) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1019,if (maxClause == null || clause.ordinal() > maxClause.ordinal()) {
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1020,maxClause = clause;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1023,assert maxClause != null;
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1024,return maxClause;
spark/src/main/java/org/apache/calcite/adapter/spark/JdbcToSparkConverter.java,116,jdbcImplementor.visitChild(0, getInput());
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,71,boolean deep, Resolved resolved) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,72,if (names.size() == 1
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,73,&& names.equals(withItem.name.names)) {
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,74,final SqlValidatorNamespace ns = validator.getNamespace(withItem);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,75,final Step path = Path.EMPTY.plus(ns.getRowType(), 0, names.get(0),
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,76,StructKind.FULLY_QUALIFIED);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,77,resolved.found(ns, false, null, path, null);
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,78,return;
core/src/main/java/org/apache/calcite/sql/validate/WithScope.java,80,super.resolve(names, nameMatcher, deep, resolved);
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTableScan.java,66,planner.addRule(CassandraToEnumerableConverterRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,23,import org.apache.calcite.rel.rules.FilterSetOpTransposeRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,24,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,69,planner.addRule(FilterSetOpTransposeRule.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/jdbc/JdbcConvention.java,70,planner.addRule(ProjectRemoveRule.INSTANCE);
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,114,ImmutableList.of(
core/src/main/java/org/apache/calcite/interpreter/Bindables.java,115,NoneToBindableConverterRule.INSTANCE,
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,31,import org.apache.calcite.rel.rules.CalcSplitRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,32,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/interpreter/Interpreter.java,33,import org.apache.calcite.rel.rules.ProjectTableScanRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,28,import org.apache.calcite.rel.rules.AggregateFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,29,import org.apache.calcite.rel.rules.AggregateProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,30,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,31,import org.apache.calcite.rel.rules.JoinProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,32,import org.apache.calcite.rel.rules.ProjectFilterTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,33,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,34,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,205,ImmutableList.of(ProjectFilterTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,206,AggregateProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,207,AggregateFilterTransposeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,274,ImmutableList.of(
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,275,JoinProjectTransposeRule.RIGHT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,276,JoinProjectTransposeRule.LEFT_PROJECT,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,277,FilterJoinRule.FilterIntoJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,278,ProjectRemoveRule.INSTANCE,
core/src/main/java/org/apache/calcite/plan/RelOptMaterialization.java,279,ProjectMergeRule.INSTANCE),
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,24,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,25,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/plan/RelOptMaterializations.java,26,import org.apache.calcite.rel.rules.ProjectRemoveRule;
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,165,public boolean isDistinct() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,171,public boolean isKey(ImmutableBitSet columns) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,186,public final RelOptQuery getQuery() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,212,public boolean isValid(boolean fail) {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,245,public final double getRows() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,254,public final Set<String> getVariablesStopped() {
core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java,287,public final RelOptCost computeSelfCost(RelOptPlanner planner) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,85,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, true,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,86,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,91,new AggregateExpandDistinctAggregatesRule(LogicalAggregate.class, false,
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,92,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,60,new AggregateFilterTransposeRule();
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,62,private AggregateFilterTransposeRule() {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,29,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,68,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,69,RelFactories.LOGICAL_BUILDER, false);
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,73,new AggregateJoinTransposeRule(LogicalAggregate.class, LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,74,RelFactories.LOGICAL_BUILDER, true);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,52,new AggregateProjectMergeRule(Aggregate.class, Project.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,26,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,64,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,65,LogicalProject.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,70,new AggregateProjectPullUpConstantsRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,71,RelNode.class, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,26,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,88,new AggregateReduceFunctionsRule(operand(LogicalAggregate.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,89,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/AggregateRemoveRule.java,23,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,32,import org.apache.calcite.rel.RelNode;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,60,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,62,some(operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,66,new AggregateStarTableRule(
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,68,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,69,operand(StarTable.StarTableScan.class, none()))),
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,72,final Aggregate aggregate = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,73,final Project project = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,74,final StarTable.StarTableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,75,final RelNode rel =
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,76,AggregateProjectMergeRule.apply(call, aggregate, project);
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,77,final Aggregate aggregate2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,78,final Project project2;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,79,if (rel instanceof Aggregate) {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,80,project2 = null;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,81,aggregate2 = (Aggregate) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,83,project2 = (Project) rel;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,84,aggregate2 = (Aggregate) project2.getInput();
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,86,return;
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,88,apply(call, project2, aggregate2, scan);
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,25,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,26,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,43,new AggregateUnionAggregateRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalAggregate;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,28,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,55,new AggregateUnionTransposeRule(LogicalAggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,56,LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,43,new CalcSplitRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,53,new FilterAggregateTransposeRule(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,54,RelFactories.LOGICAL_BUILDER, Aggregate.class);
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,45,new FilterCorrelateRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,61,new FilterIntoJoinRule(true, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,68,new FilterIntoJoinRule(false, RelFactories.LOGICAL_BUILDER,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,37,new FilterMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,47,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,42,new FilterSetOpTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,66,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,67,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,70,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,71,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,72,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,73,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,79,new FilterTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,80,operand(Filter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,81,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,84,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,85,final Filter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,86,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/FilterTableScanRule.java,87,apply(call, filter, scan);
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,25,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,71,new IntersectToDistinctRule(LogicalIntersect.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,56,public static final JoinCommuteRule INSTANCE = new JoinCommuteRule(false);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,59,public static final JoinCommuteRule SWAP_OUTER = new JoinCommuteRule(true);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,74,private JoinCommuteRule(boolean swapOuter) {
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/JoinExtractFilterRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,62,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,63,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,64,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,65,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,69,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,70,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,71,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,75,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,76,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,77,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,78,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,79,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,83,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,84,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,85,operand(LogicalProject.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,86,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,88,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,91,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,92,operand(LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,93,some(operand(LogicalProject.class, any()))),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,95,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,98,new JoinProjectTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,99,operand(
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,100,LogicalJoin.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,101,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,102,operand(LogicalProject.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,104,true, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,41,new JoinPushExpressionsRule(Join.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,45,new JoinPushTransitivePredicatesRule(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,46,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,25,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,37,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,38,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,39,operand(Union.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,40,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,44,new JoinUnionTransposeRule(
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,45,operand(Join.class,
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,46,operand(RelNode.class, any()),
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,47,operand(Union.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,72,new LoptOptimizeJoinRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,32,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,49,new MaterializedViewFilterScanRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,70,new MultiJoinOptimizeBushyRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,25,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,26,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,27,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,43,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,22,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,37,new ProjectMultiJoinMergeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,19,import org.apache.calcite.adapter.enumerable.EnumerableInterpreter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,62,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,63,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,67,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,68,final TableScan scan = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,69,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,75,new ProjectTableScanRule(
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,76,operand(Project.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,77,operand(EnumerableInterpreter.class,
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,81,final Project project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,82,final TableScan scan = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ProjectTableScanRule.java,83,apply(call, project, scan);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,31,import org.apache.calcite.rel.logical.LogicalCalc;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,32,import org.apache.calcite.rel.logical.LogicalFilter;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,33,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,104,public static final ReduceExpressionsRule FILTER_INSTANCE =
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,23,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,57,new SemiJoinProjectTransposeRule(RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,64,private SemiJoinProjectTransposeRule(RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,28,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,70,new ProjectToSemiJoinRule(Project.class, Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,71,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:project");
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,74,new JoinToSemiJoinRule(Join.class, Aggregate.class,
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,75,RelFactories.LOGICAL_BUILDER, "SemiJoinRule:join");
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalJoin;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,31,import org.apache.calcite.rel.logical.LogicalSort;
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,47,new SortJoinTransposeRule(LogicalSort.class,
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,30,import org.apache.calcite.rel.logical.LogicalProject;
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,42,public static final SortUnionTransposeRule INSTANCE = new SortUnionTransposeRule(false);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,48,public static final SortUnionTransposeRule MATCH_NULL_FETCH = new SortUnionTransposeRule(true);
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,56,private SortUnionTransposeRule(boolean matchNullFetch) {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,30,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionEliminatorRule.java,22,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,27,import org.apache.calcite.rel.logical.LogicalIntersect;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,28,import org.apache.calcite.rel.logical.LogicalMinus;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,29,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,44,new UnionMergeRule(LogicalUnion.class, "UnionMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,45,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,47,new UnionMergeRule(LogicalIntersect.class, "IntersectMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,48,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,50,new UnionMergeRule(LogicalMinus.class, "MinusMergeRule",
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,51,RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,24,import org.apache.calcite.rel.core.RelFactories;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,51,new UnionPullUpConstantsRule(Union.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,23,import org.apache.calcite.rel.logical.LogicalUnion;
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,37,new UnionToDistinctRule(LogicalUnion.class, RelFactories.LOGICAL_BUILDER);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,24,import org.apache.calcite.rel.core.Values;
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,74,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,75,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,78,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,79,LogicalFilter filter = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,80,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,81,apply(call, null, filter, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,90,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,91,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,94,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,95,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,96,LogicalValues values = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,97,apply(call, project, null, values);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,106,new ValuesReduceRule(
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,107,operand(LogicalProject.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,108,operand(LogicalFilter.class,
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,110,none()))),
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,112,public void onMatch(RelOptRuleCall call) {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,113,LogicalProject project = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,114,LogicalFilter filter = call.rel(1);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,115,LogicalValues values = call.rel(2);
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,116,apply(call, project, filter, values);
core/src/main/java/org/apache/calcite/tools/Programs.java,40,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,41,import org.apache.calcite.rel.rules.AggregateReduceFunctionsRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,42,import org.apache.calcite.rel.rules.AggregateStarTableRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,44,import org.apache.calcite.rel.rules.FilterAggregateTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,46,import org.apache.calcite.rel.rules.FilterJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,47,import org.apache.calcite.rel.rules.FilterProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,48,import org.apache.calcite.rel.rules.FilterTableScanRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,50,import org.apache.calcite.rel.rules.JoinAssociateRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,51,import org.apache.calcite.rel.rules.JoinCommuteRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,53,import org.apache.calcite.rel.rules.JoinToMultiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,54,import org.apache.calcite.rel.rules.LoptOptimizeJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,55,import org.apache.calcite.rel.rules.MultiJoinOptimizeBushyRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,57,import org.apache.calcite.rel.rules.ProjectMergeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,59,import org.apache.calcite.rel.rules.SemiJoinRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,60,import org.apache.calcite.rel.rules.SortProjectTransposeRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,61,import org.apache.calcite.rel.rules.SubQueryRemoveRule;
core/src/main/java/org/apache/calcite/tools/Programs.java,130,SemiJoinRule.PROJECT,
core/src/main/java/org/apache/calcite/tools/Programs.java,131,SemiJoinRule.JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,134,? JoinAssociateRule.INSTANCE
core/src/main/java/org/apache/calcite/tools/Programs.java,135,: ProjectMergeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,136,AggregateStarTableRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,137,AggregateStarTableRule.INSTANCE2,
core/src/main/java/org/apache/calcite/tools/Programs.java,138,FilterTableScanRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,139,FilterProjectTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,140,FilterJoinRule.FILTER_ON_JOIN,
core/src/main/java/org/apache/calcite/tools/Programs.java,141,AggregateExpandDistinctAggregatesRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,142,AggregateReduceFunctionsRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,143,FilterAggregateTransposeRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,144,JoinCommuteRule.INSTANCE,
core/src/main/java/org/apache/calcite/tools/Programs.java,147,SortProjectTransposeRule.INSTANCE);
example/csv/src/main/java/org/apache/calcite/adapter/csv/CsvTableScan.java,79,planner.addRule(CsvProjectTableScanRule.INSTANCE);
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,27,import org.apache.calcite.rel.rules.AggregateExpandDistinctAggregatesRule;
pig/src/main/java/org/apache/calcite/adapter/pig/PigTableScan.java,85,planner.removeRule(AggregateExpandDistinctAggregatesRule.INSTANCE);
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,49,import org.apache.calcite.rel.rules.FilterToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,50,import org.apache.calcite.rel.rules.ProjectToCalcRule;
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,90,ProjectToCalcRule.INSTANCE,
spark/src/main/java/org/apache/calcite/adapter/spark/SparkRules.java,91,FilterToCalcRule.INSTANCE,
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,182,private static String literalValue(RexLiteral literal) {
cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraFilter.java,183,Object value = literal.getValue2();
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,19,import org.apache.calcite.avatica.util.DateTimeUtils;
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,473,final SimpleDateFormat format =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,474,new SimpleDateFormat(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,476,Locale.ROOT);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,477,format.setTimeZone(DateTimeUtils.UTC_ZONE);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,54,import java.util.Locale;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,58,import java.util.TimeZone;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,75,final TimeZone utc = DateTimeUtils.UTC_ZONE;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,77,new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.ROOT);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidConnectionImpl.java,78,UTC_TIMESTAMP_FORMAT.setTimeZone(utc);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2126,scopes.put(node, parentScope);
core/src/main/java/org/apache/calcite/rel/externalize/RelJson.java,221,map.put("agg", toJson(node.getAggregation()));
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1012,needNew ? null : aliases);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,227,return type.isNullable() ? Integer.class : int.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumUtils.java,229,return type.isNullable() ? Long.class : long.class;
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,34,AND,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,37,OR,
core/src/main/java/org/apache/calcite/adapter/enumerable/NullPolicy.java,40,NOT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,22,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,77,import static org.apache.calcite.linq4j.tree.ExpressionType.AndAlso;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,86,import static org.apache.calcite.linq4j.tree.ExpressionType.Not;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,88,import static org.apache.calcite.linq4j.tree.ExpressionType.OrElse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,100,import static org.apache.calcite.sql.fun.SqlStdOperatorTable.CASE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,212,private final Map<SqlOperator, CallImplementor> map = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,219,defineMethod(ROW, BuiltInMethod.ARRAY.method, NullPolicy.ANY);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,235,final TrimImplementor trimImplementor = new TrimImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,236,defineImplementor(TRIM, NullPolicy.STRICT, trimImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,239,defineBinary(AND, AndAlso, NullPolicy.AND, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,240,defineBinary(OR, OrElse, NullPolicy.OR, null);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,241,defineUnary(NOT, Not, NullPolicy.NOT);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,268,defineImplementor(RAND, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,269,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,270,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,274,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,275,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,276,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,277,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,280,defineImplementor(RAND_INTEGER, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,281,new NotNullImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,282,final NotNullImplementor[] implementors = {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,285,BuiltInMethod.RAND_INTEGER.method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,289,public Expression implement(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,290,RexCall call, List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,291,return implementors[call.getOperands().size()]
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,292,.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,318,defineImplementor(DATETIME_PLUS, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,319,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,320,defineImplementor(MINUS_DATE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,321,new DatetimeArithmeticImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,324,defineImplementor(FLOOR, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,327,BuiltInMethod.UNIX_DATE_FLOOR.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,328,defineImplementor(CEIL, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,331,BuiltInMethod.UNIX_DATE_CEIL.method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,333,map.put(IS_NULL, new IsXxxImplementor(null, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,334,map.put(IS_NOT_NULL, new IsXxxImplementor(null, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,335,map.put(IS_TRUE, new IsXxxImplementor(true, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,336,map.put(IS_NOT_TRUE, new IsXxxImplementor(true, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,337,map.put(IS_FALSE, new IsXxxImplementor(false, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,338,map.put(IS_NOT_FALSE, new IsXxxImplementor(false, true));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,342,new MethodImplementor(BuiltInMethod.LIKE.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,343,defineImplementor(LIKE, NullPolicy.STRICT, likeImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,344,defineImplementor(NOT_LIKE, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,345,NotImplementor.of(likeImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,347,new MethodImplementor(BuiltInMethod.SIMILAR.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,348,defineImplementor(SIMILAR_TO, NullPolicy.STRICT, similarImplementor, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,349,defineImplementor(NOT_SIMILAR_TO, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,350,NotImplementor.of(similarImplementor), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,358,map.put(CASE, new CaseImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,360,map.put(CAST, new CastOptimizedImplementor());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,362,defineImplementor(REINTERPRET, NullPolicy.STRICT,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,363,new ReinterpretImplementor(), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,365,final CallImplementor value = new ValueConstructorImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,446,private void defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,447,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,448,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,449,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,450,boolean harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,451,CallImplementor callImplementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,452,createImplementor(implementor, nullPolicy, harmonize);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,453,map.put(operator, callImplementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,456,private static RexCall call2(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,457,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,458,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,459,RexCall call) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,460,if (!harmonize) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,461,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,463,final List<RexNode> operands2 =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,464,harmonize(translator, call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,465,if (operands2.equals(call.getOperands())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,466,return call;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,468,return call.clone(call.getType(), operands2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,475,switch (nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,476,case ANY:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,477,case STRICT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,486,case AND:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,488,if (nullAs == NullAs.FALSE) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,489,nullPolicy2 = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,536,case OR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,581,case NOT:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,585,return new CallImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,586,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,587,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,588,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,589,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,590,return Expressions.call(BuiltInMethod.NOT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,591,translator.translateList(call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,592,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,593,return Expressions.not(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,594,translator.translate(call.getOperands().get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,595,negate(nullAs)));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,599,private NullAs negate(NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,600,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,601,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,602,return NullAs.TRUE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,603,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,604,return NullAs.FALSE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,605,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,606,return nullAs;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,610,case NONE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,619,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,620,throw new AssertionError(nullPolicy);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,624,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,625,SqlOperator operator, String functionName, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,626,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,627,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,628,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,629,new MethodNameImplementor(functionName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,630,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,633,private void defineMethod(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,634,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,635,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,636,operator, nullPolicy, new MethodImplementor(method), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,639,private void defineMethodReflective(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,640,SqlOperator operator, Method method, NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,641,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,642,operator, nullPolicy, new ReflectiveCallNotNullImplementor(method),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,643,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,646,private void defineUnary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,647,SqlOperator operator, ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,648,NullPolicy nullPolicy) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,649,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,650,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,651,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,652,new UnaryImplementor(expressionType), false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,655,private void defineBinary(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,656,SqlOperator operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,657,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,658,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,659,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,660,defineImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,661,operator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,662,nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,663,new BinaryImplementor(expressionType, backupMethodName),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,664,true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,667,public static final RexImpTable INSTANCE = new RexImpTable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,669,public CallImplementor get(final SqlOperator operator) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,677,return ((ImplementableFunction) udf).getImplementor();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,711,static Expression maybeNegate(boolean negate, Expression expression) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,712,if (!negate) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,713,return expression;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,715,return Expressions.not(expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,730,Expressions.equal(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,731,operand,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,732,NULL_EXPR),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,738,private static boolean nullable(RexCall call, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,739,return call.getOperands().get(i).getType().isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,743,private static List<RexNode> harmonize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,744,final RexToLixTranslator translator, final List<RexNode> operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,745,int nullCount = 0;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,746,final List<RelDataType> types = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,747,final RelDataTypeFactory typeFactory =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,748,translator.builder.getTypeFactory();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,749,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,750,RelDataType type = operand.getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,751,type = toSql(typeFactory, type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,752,if (translator.isNullable(operand)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,753,++nullCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,755,type = typeFactory.createTypeWithNullability(type, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,757,types.add(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,759,if (allSame(types)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,762,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,764,final RelDataType type = typeFactory.leastRestrictive(types);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,765,if (type == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,769,return operands;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,771,assert (nullCount > 0) == type.isNullable();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,772,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,773,for (RexNode operand : operands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,774,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,775,translator.builder.ensureType(type, operand, false));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,777,return list;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,804,private static Expression implementNullSemantics0(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,805,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,806,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,807,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,808,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,809,boolean harmonize,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,810,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,811,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,812,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,816,return Expressions.foldAnd(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,817,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,818,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,820,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,821,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,825,return Expressions.foldOr(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,826,translator.translateList(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,827,call.getOperands(), nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,829,break;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,831,final RexCall call2 = call2(harmonize, translator, call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,832,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,833,return implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,834,translator, call2, nullAs, nullPolicy, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,836,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,837,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,838,throw e;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,839,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,840,return FALSE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,841,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,842,return TRUE_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,843,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,844,return NULL_EXPR;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,849,private static Expression implementNullSemantics(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,850,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,851,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,852,NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,853,NullPolicy nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,854,NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,855,final List<Expression> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,856,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,857,case NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,860,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,861,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,862,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,863,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,864,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,867,final Expression box =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,868,Expressions.box(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,869,implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,870,return optimize(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,871,Expressions.condition(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,872,Expressions.foldOr(list),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,874,box));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,875,case FALSE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,878,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,879,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,880,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,881,operand.e, NullAs.IS_NOT_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,882,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,885,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,886,return Expressions.foldAnd(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,887,case TRUE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,890,if (translator.isNullable(operand.e)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,891,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,892,translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,893,operand.e, NullAs.IS_NULL));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,894,translator = translator.setNullable(operand.e, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,897,list.add(implementCall(translator, call, implementor, nullAs));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,898,return Expressions.foldOr(list);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,899,case NOT_POSSIBLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,906,final Map<RexNode, Boolean> nullable = new HashMap<>();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,910,for (RexNode arg : call.getOperands()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,911,if (translator.isNullable(arg) && !nullable.containsKey(arg)) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,912,nullable.put(arg, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,916,nullable.put(call, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,917,translator = translator.setNullable(nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,919,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,920,return implementCall(translator, call, implementor, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,924,private static Expression implementCall(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,926,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,927,NotNullImplementor implementor,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,930,translator.translateList(call.getOperands());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,931,Expression result =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,932,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,991,x,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1001,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1002,BuiltInMethod.IS_TRUE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1003,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1005,return Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1006,BuiltInMethod.IS_NOT_FALSE.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1007,x);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1548,private static class TrimImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1549,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1550,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1551,final Object value =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1552,((ConstantExpression) translatedOperands.get(0)).value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1562,translatedOperands.get(1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1574,super(methodName);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1579,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1580,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1588,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1603,final ConstantExpression tur =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1604,(ConstantExpression) translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1605,final TimeUnitRange timeUnitRange = (TimeUnitRange) tur.value;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1629,private static class MethodImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1632,MethodImplementor(Method method) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1636,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1637,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1638,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1639,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1648,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1649,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1679,private static class MethodNameImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1682,MethodNameImplementor(String methodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1686,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1687,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1688,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1689,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1693,translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1698,private static class BinaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1722,BinaryImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1723,ExpressionType expressionType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1724,String backupMethodName) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1729,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1730,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1731,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1732,List<Expression> expressions) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1749,return callBackupMethodAnyType(translator, call, expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1752,final Type type0 = expressions.get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1753,final Type type1 = expressions.get(1).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1761,expressions);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1765,final Type returnType =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1766,translator.typeFactory.getJavaClass(call.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1768,Expressions.makeBinary(expressionType, expressions.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1804,private static class UnaryImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1807,UnaryImplementor(ExpressionType expressionType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1811,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1812,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1813,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1814,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1822,private static class CaseImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1823,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1824,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1825,return implementRecurse(translator, call, nullAs, 0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1828,private Expression implementRecurse(RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1829,RexCall call, NullAs nullAs, int i) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1830,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1831,if (i == operands.size() - 1) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1833,return translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1834,translator.builder.ensureType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1835,call.getType(), operands.get(i), false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1837,Expression ifTrue;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1838,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1839,ifTrue = translator.translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1840,translator.builder.ensureType(call.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1841,operands.get(i + 1),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1842,false), nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1844,ifTrue = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1847,Expression ifFalse;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1848,try {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1849,ifFalse = implementRecurse(translator, call, nullAs, i + 2);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1851,if (ifTrue == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1852,throw RexToLixTranslator.AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1854,ifFalse = null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1857,Expression test = translator.translate(operands.get(i), NullAs.FALSE);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1859,return ifTrue == null || ifFalse == null
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1861,: Expressions.condition(test, ifTrue, ifFalse);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1868,private static class CastOptimizedImplementor implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1869,private final CallImplementor accurate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1871,private CastOptimizedImplementor() {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1872,accurate = createImplementor(new CastImplementor(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1873,NullPolicy.STRICT, false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1876,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1877,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1880,if (call.getType().equals(arg.getType())) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1882,return translator.translate(arg, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1886,&& nullAs == NullAs.NULL
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1890,translator.typeFactory, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1892,return accurate.implement(translator, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1897,private static class CastImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1898,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1899,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1900,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1901,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1902,assert call.getOperands().size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1903,final RelDataType sourceType = call.getOperands().get(0).getType();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1908,final boolean nullable =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1911,&& !Primitive.is(translatedOperands.get(0).getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1913,translator.nullifyType(call.getType(), nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1915,targetType,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1916,translatedOperands.get(0));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1921,private static class ReinterpretImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1922,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1923,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1924,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1925,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1927,return translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1933,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1934,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1935,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1936,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1937,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1938,return translator.translateConstructor(call.getOperands(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1939,call.getOperator().getKind());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1944,private static class ItemImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1945,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1946,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1947,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1948,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1949,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1951,getImplementor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1952,call.getOperands().get(0).getType().getSqlTypeName());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1957,final NullPolicy nullPolicy = NullPolicy.ANY;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1958,return implementNullSemantics0(translator, call, nullAs, nullPolicy,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1959,false, implementor);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1965,return new MethodImplementor(BuiltInMethod.ARRAY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1967,return new MethodImplementor(BuiltInMethod.MAP_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1969,return new MethodImplementor(BuiltInMethod.ANY_ITEM.method);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1979,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1980,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1981,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1982,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1983,NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1984,switch (nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1985,case IS_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1986,return Expressions.constant(false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1987,case IS_NOT_NULL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1988,return Expressions.constant(true);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2028,private static class IsXxxImplementor
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2029,implements CallImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2030,private final Boolean seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2031,private final boolean negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2034,this.seek = seek;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2035,this.negate = negate;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2038,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2039,RexToLixTranslator translator, RexCall call, NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2040,List<RexNode> operands = call.getOperands();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2041,assert operands.size() == 1;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2042,if (seek == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2043,return translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2044,negate ? NullAs.IS_NOT_NULL : NullAs.IS_NULL);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2046,return maybeNegate(negate == seek,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2047,translator.translate(operands.get(0),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2048,seek ? NullAs.FALSE : NullAs.TRUE));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2054,private static class NotImplementor implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2055,private final NotNullImplementor implementor;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2061,private static NotNullImplementor of(NotNullImplementor implementor) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2065,public Expression implement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2066,RexToLixTranslator translator,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2067,RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2068,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2070,implementor.implement(translator, call, translatedOperands);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2077,implements NotNullImplementor {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2078,public Expression implement(RexToLixTranslator translator, RexCall call,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2079,List<Expression> translatedOperands) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2081,Expression trop0 = translatedOperands.get(0);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,2084,Expression trop1 = translatedOperands.get(1);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,33,import org.apache.calcite.rel.type.RelDataTypeFactoryImpl;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,46,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,54,import com.google.common.collect.ImmutableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,61,import java.util.Collections;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,62,import java.util.LinkedHashMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,76,public class RexToLixTranslator {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,96,private final Map<? extends RexNode, Boolean> exprNullableMap;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,97,private final RexToLixTranslator parent;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,147,Map<? extends RexNode, Boolean> exprNullableMap,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,149,RexToLixTranslator parent,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,221,Expression expression = translate0(expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,223,assert expression != null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,224,return list.append("v", expression);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,456,private Expression translate0(RexNode expr, RexImpTable.NullAs nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,457,Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,458,if (nullAs == RexImpTable.NullAs.NULL && !expr.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,459,nullAs = RexImpTable.NullAs.NOT_POSSIBLE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,461,switch (expr.getKind()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,499,case LOCAL_REF:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,500,return translate(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,501,deref(expr),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,502,nullAs,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,503,storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,504,case LITERAL:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,505,return translateLiteral(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,506,(RexLiteral) expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,507,nullifyType(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,508,expr.getType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,510,&& nullAs != RexImpTable.NullAs.NOT_POSSIBLE),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,511,typeFactory,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,512,nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,513,case DYNAMIC_PARAM:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,514,return translateParameter((RexDynamicParam) expr, nullAs, storageType);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,515,case CORREL_VARIABLE:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,516,throw new RuntimeException("Cannot translate " + expr + ". Correlated"
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,517,+ " variables should always be referenced by field access");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,519,RexFieldAccess fieldAccess = (RexFieldAccess) expr;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,520,RexNode target = deref(fieldAccess.getReferenceExpr());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,533,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,534,if (expr instanceof RexCall) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,535,return translateCall((RexCall) expr, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,537,throw new RuntimeException(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,556,private Expression translateCall(RexCall call, RexImpTable.NullAs nullAs) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,557,final SqlOperator operator = call.getOperator();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,558,CallImplementor implementor =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,559,RexImpTable.INSTANCE.get(operator);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,560,if (implementor == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,561,throw new RuntimeException("cannot translate call " + call);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,563,return implementor.implement(this, call, nullAs);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,567,private Expression translateParameter(RexDynamicParam expr,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,568,RexImpTable.NullAs nullAs, Type storageType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,569,if (storageType == null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,570,storageType = typeFactory.getJavaClass(expr.getType());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,572,return nullAs.handle(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,574,Expressions.call(root, BuiltInMethod.DATA_CONTEXT_GET.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,575,Expressions.constant("?" + expr.getIndex())),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,576,storageType));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,598,throw AlwaysNull.INSTANCE;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,960,public Expression translateConstructor(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,961,List<RexNode> operandList, SqlKind kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,962,switch (kind) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,963,case MAP_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,964,Expression map =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,965,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,967,Expressions.new_(LinkedHashMap.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,968,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,969,for (int i = 0; i < operandList.size(); i++) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,970,RexNode key = operandList.get(i++);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,971,RexNode value = operandList.get(i);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,972,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,973,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,974,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,975,map,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,976,BuiltInMethod.MAP_PUT.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,977,Expressions.box(translate(key)),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,978,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,980,return map;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,981,case ARRAY_VALUE_CONSTRUCTOR:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,982,Expression lyst =
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,983,list.append(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,985,Expressions.new_(ArrayList.class),
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,986,false);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,987,for (RexNode value : operandList) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,988,list.add(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,989,Expressions.statement(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,990,Expressions.call(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,991,lyst,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,992,BuiltInMethod.COLLECTION_ADD.method,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,993,Expressions.box(translate(value)))));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,995,return lyst;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,996,default:
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,997,throw new AssertionError("unexpected: " + kind);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1013,if (!e.getType().isNullable()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1014,return false;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1016,final Boolean b = isKnownNullable(e);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1017,return b == null || b;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1026,protected Boolean isKnownNullable(RexNode node) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1027,if (!exprNullableMap.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1028,Boolean nullable = exprNullableMap.get(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1029,if (nullable != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1030,return nullable;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1033,return parent == null ? null : parent.isKnownNullable(node);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1038,public RexToLixTranslator setNullable(RexNode e, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1039,return setNullable(Collections.singletonMap(e, nullable));
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1046,if (nullable == null || nullable.isEmpty()) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1047,return this;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1049,return new RexToLixTranslator(program, typeFactory, root, inputGetter, list,
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1070,public RelDataType nullifyType(RelDataType type, boolean nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1071,if (!nullable) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1072,final Primitive primitive = javaPrimitive(type);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1073,if (primitive != null) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1074,return typeFactory.createJavaType(primitive.primitiveClass);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1077,return typeFactory.createTypeWithNullability(type, nullable);
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1080,private Primitive javaPrimitive(RelDataType type) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1081,if (type instanceof RelDataTypeFactoryImpl.JavaType) {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1082,return Primitive.ofBox(
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1083,((RelDataTypeFactoryImpl.JavaType) type).getJavaClass());
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1085,return null;
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1126,static class AlwaysNull extends ControlFlowException {
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1128,public static final AlwaysNull INSTANCE = new AlwaysNull();
core/src/main/java/org/apache/calcite/adapter/enumerable/RexToLixTranslator.java,1130,private AlwaysNull() {}
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,19,import org.apache.calcite.runtime.FlatLists;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,41,private final String string;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,58,this.string = computeString();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,472,List<RelTrait> newTraits;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,473,switch (traits.length) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,474,case 0:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,475,newTraits = ImmutableList.of(canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,476,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,477,case 1:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,478,newTraits = FlatLists.of(traits[0], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,479,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,480,case 2:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,481,newTraits = FlatLists.of(traits[0], traits[1], canonizedTrait);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,482,break;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,483,default:
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,485,.add(canonizedTrait).build();
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,487,return cache.getOrAdd(newTraits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,548,RelTraitSet getOrAdd(List<RelTrait> traits) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,549,RelTraitSet traitSet1 = map.get(traits);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,550,if (traitSet1 != null) {
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,551,return traitSet1;
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,555,map.put(traits, traitSet);
core/src/main/java/org/apache/calcite/plan/RelTraitSet.java,556,return traitSet;
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,52,return index
core/src/main/java/org/apache/calcite/rel/type/RelDataTypeFieldImpl.java,54,^ type.hashCode();
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,105,fieldCounts.add(elementType.getFieldCount());
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,106,inputTypes.add(FlatProductInputType.LIST);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,114,final Expression lambda =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUncollect.java,115,Expressions.call(BuiltInMethod.FLAT_PRODUCT.method,
core/src/main/java/org/apache/calcite/sql/SqlOverOperator.java,95,SqlWindow w = validator.resolveWindow(window, scope, false);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,522,SqlWindow win = validator.resolveWindow(this, operandScope, false);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,2703,public boolean isAggregate(SqlNode selectNode) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,36,import org.apache.calcite.rel.rules.ProjectSortTransposeRule;
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,565,extends ProjectSortTransposeRule {
spark/src/main/java/org/apache/calcite/adapter/spark/HttpServer.java,65,connector.setSoLingerTime(-1);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,390,return dummyProject(fieldCount, newInput);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,417,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,439,relBuilder.project(ImmutableList.<RexNode>of(expr), ImmutableList.of("DUMMY"));
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,440,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,880,return result(relBuilder.build(), mapping);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,60,PushProjector.ExprCondition preserveExprCondition) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,65,preserveExprCondition, relBuilderFactory);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,69,PushProjector.ExprCondition preserveExprCondition,
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,70,RelBuilderFactory relBuilderFactory) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,79,Project origProj;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,80,Filter filter;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,82,origProj = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,85,origProj = null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,88,RelNode rel = filter.getInput();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,89,RexNode origFilter = filter.getCondition();
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,92,&& RexOver.containsOver(origProj.getProjects(), null)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,101,PushProjector pushProjector =
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,102,new PushProjector(
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,103,origProj, origFilter, rel, preserveExprCondition, call.builder());
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,104,RelNode topProject = pushProjector.convertProject(null);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2414,final ImmutableBitSet inputBits = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2637,final List<RexNode> list = new ArrayList<>();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2638,pushShuttle(project).visitList(nodes, list);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,2639,return list;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3598,super(true);
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3599,this.inputBitSet = ImmutableBitSet.builder();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3600,this.extraFields = extraFields;
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3614,return analyze(node).inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3624,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,3628,inputBitSet.set(inputRef.getIndex());
core/src/main/java/org/apache/calcite/rel/core/Match.java,219,private static class AggregateFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,245,for (RexNode rex : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,246,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,289,private static class PatternVarFinder extends RexVisitorImpl {
core/src/main/java/org/apache/calcite/rel/core/Match.java,302,for (RexNode node : call.getOperands()) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,303,node.accept(this);
core/src/main/java/org/apache/calcite/rel/core/Match.java,314,for (RexNode rex : rexNodeList) {
core/src/main/java/org/apache/calcite/rel/core/Match.java,315,rex.accept(this);
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,35,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,122,for (RexNode expr : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalCalc.java,123,expr.accept(vuv);
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,268,final List<RexNode> rexNodesWindow = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,269,for (RexNode rexNode : program.getExprList()) {
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,270,rexNodesWindow.add(rexNode.accept(shuttle));
core/src/main/java/org/apache/calcite/rel/logical/LogicalWindow.java,272,final List<RexNode> refToWindow = toInputRefs(rexNodesWindow);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,135,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/metadata/RelMdAllPredicates.java,220,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,135,.visitList(bottom, newBottomList);
core/src/main/java/org/apache/calcite/rel/rules/LoptMultiJoin.java,457,return inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,19,import org.apache.calcite.linq4j.Ord;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,38,import org.apache.calcite.rex.RexVisitorImpl;
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,347,for (final Ord<RexNode> expr : Ord.zip(exprs)) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,348,expr.e.accept(
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,349,new RexVisitorImpl<Void>(true) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,350,public Void visitLocalRef(RexLocalRef localRef) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,351,graph.addEdge(localRef.getIndex(), expr.i);
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,352,return null;
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,167,final List<RexNode> topProjExps = new ArrayList<>();
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,168,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,169,topProjExps.add(rexNode.accept(indexAdjustment));
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,201,for (RexNode rexNode : project.getChildExps()) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,202,rexNode.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,222,for (Window.RexWinAggCall rexWinAggCall : group.aggCalls) {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,223,rexWinAggCall.accept(referenceFinder);
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,113,topChildExprs = ImmutableList.copyOf(RexUtil.apply(mapping, topChildExprs));
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,32,public class LogicVisitor implements RexBiVisitor<Logic, Logic> {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,80,public Logic visitCall(RexCall call, Logic logic) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,117,private Logic end(RexNode node, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,124,public Logic visitInputRef(RexInputRef inputRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,125,return end(inputRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,128,public Logic visitLocalRef(RexLocalRef localRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,129,return end(localRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,132,public Logic visitLiteral(RexLiteral literal, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,133,return end(literal, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,136,public Logic visitOver(RexOver over, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,140,public Logic visitCorrelVariable(RexCorrelVariable correlVariable,
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,141,Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,142,return end(correlVariable, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,145,public Logic visitDynamicParam(RexDynamicParam dynamicParam, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,146,return end(dynamicParam, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,149,public Logic visitRangeRef(RexRangeRef rangeRef, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,150,return end(rangeRef, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,153,public Logic visitFieldAccess(RexFieldAccess fieldAccess, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,157,public Logic visitSubQuery(RexSubQuery subQuery, Logic arg) {
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,167,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/LogicVisitor.java,171,return end(ref, arg);
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,114,for (RexNode expr : exprList) {
core/src/main/java/org/apache/calcite/rex/RexProgramBuilder.java,115,expr.accept(shuttle);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,165,public void visitList(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,166,List<? extends RexNode> exprs, List<RexNode> outExprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,167,for (RexNode expr : exprs) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,168,outExprs.add(expr.accept(this));
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1252,public static Iterable<RexNode> apply(Mappings.TargetMapping mapping,
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1254,final RexPermuteInputsShuttle shuttle = RexPermuteInputsShuttle.of(mapping);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1566,public static Iterable<RexNode> shift(Iterable<RexNode> nodes, int offset) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1567,return new RexShiftShuttle(offset).apply(nodes);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2026,RexVisitor<Void> visitor =
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2033,for (RexNode e : nodes) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2034,e.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2187,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,2188,operand.accept(this);
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,61,for (RexNode partitionKey : window.partitionKeys) {
core/src/main/java/org/apache/calcite/rex/RexVisitorImpl.java,62,partitionKey.accept(this);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,372,ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,461,new RelOptUtil.InputFinder(inputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,462,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,464,final ImmutableBitSet inputFieldsUsed = inputFinder.inputBitSet.build();
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,563,new RelOptUtil.InputFinder(combinedInputExtraFields);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,564,inputFinder.inputBitSet.addAll(fieldsUsed);
core/src/main/java/org/apache/calcite/sql2rel/RelFieldTrimmer.java,566,final ImmutableBitSet fieldsUsedPlus = inputFinder.inputBitSet.build();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,361,private static Pair<List<RexNode>, List<RexNode>> splitProjects(final RexBuilder rexBuilder,
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,362,final RelNode input, List<RexNode> nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,363,final RelOptUtil.InputReferencedVisitor visitor = new RelOptUtil.InputReferencedVisitor();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,364,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,365,node.accept(visitor);
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,379,final List<RexNode> aboveNodes = new ArrayList<>();
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,380,for (RexNode node : nodes) {
druid/src/main/java/org/apache/calcite/adapter/druid/DruidRules.java,381,aboveNodes.add(
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,44,import java.util.ArrayList;
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,151,List<String> visitList(List<RexNode> list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,152,final List<String> strings = new ArrayList<>();
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,153,for (RexNode node: list) {
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,154,strings.add(node.accept(this));
elasticsearch/src/main/java/org/apache/calcite/adapter/elasticsearch/ElasticsearchRules.java,156,return strings;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,52,import java.util.ArrayList;
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,238,public List<String> visitList(List<RexNode> list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,240,for (RexNode node : list) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,241,strings.add(node.accept(this));
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java,243,return strings;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,984,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,985,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,986,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,987,return getSubset(rel, traits, false);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,990,public RelSubset getSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,991,RelNode rel,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,992,RelTraitSet traits,
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,993,boolean createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1001,if (createIfMissing) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1002,return set.getOrCreateSubset(rel.getCluster(), traits);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1416,root =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1417,set.getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1418,root.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1419,root.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1340,subset.getCluster(), subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1670,return subset;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,216,private static final BigDecimal TWO = BigDecimal.valueOf(2L);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2368,final Join originalJoin =
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,2369,(Join) RelFactories.DEFAULT_JOIN_FACTORY.createJoin(leftRel, rightRel,
core/src/main/java/org/apache/calcite/sql/SqlInsert.java,65,return ImmutableNullableList.of(keywords, targetTable, source, columnList);
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,90,operand(RelNode.class, any())),
core/src/main/java/org/apache/calcite/rel/rules/AggregateExpandDistinctAggregatesRule.java,80,public final class AggregateExpandDistinctAggregatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateFilterTransposeRule.java,58,public class AggregateFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateJoinTransposeRule.java,66,public class AggregateJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectMergeRule.java,50,public class AggregateProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateProjectPullUpConstantsRule.java,59,public class AggregateProjectPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateReduceFunctionsRule.java,83,public class AggregateReduceFunctionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateStarTableRule.java,58,public class AggregateStarTableRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionAggregateRule.java,41,public class AggregateUnionAggregateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/AggregateUnionTransposeRule.java,53,public class AggregateUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcMergeRule.java,36,public class CalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CalcSplitRule.java,41,public class CalcSplitRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/CoerceInputsRule.java,34,public class CoerceInputsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/DateRangeRules.java,138,public static class FilterDateRangeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterAggregateTransposeRule.java,46,public class FilterAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCalcMergeRule.java,37,public class FilterCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterCorrelateRule.java,42,public class FilterCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterJoinRule.java,49,public abstract class FilterJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterMultiJoinMergeRule.java,31,public class FilterMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterProjectTransposeRule.java,39,public class FilterProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterRemoveIsNotDistinctFromRule.java,39,public final class FilterRemoveIsNotDistinctFromRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterSetOpTransposeRule.java,40,public class FilterSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterTableFunctionTransposeRule.java,40,public class FilterTableFunctionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/FilterToCalcRule.java,43,public class FilterToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/IntersectToDistinctRule.java,69,public class IntersectToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAddRedundantSemiJoinRule.java,37,public class JoinAddRedundantSemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinAssociateRule.java,48,public class JoinAssociateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,52,public class JoinCommuteRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinProjectTransposeRule.java,58,public class JoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushExpressionsRule.java,38,public class JoinPushExpressionsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushThroughJoinRule.java,65,public class JoinPushThroughJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinPushTransitivePredicatesRule.java,42,public class JoinPushTransitivePredicatesRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToCorrelateRule.java,60,public class JoinToCorrelateRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinToMultiJoinRule.java,103,public class JoinToMultiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/JoinUnionTransposeRule.java,35,public class JoinUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/LoptOptimizeJoinRule.java,70,public class LoptOptimizeJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MaterializedViewFilterScanRule.java,47,public class MaterializedViewFilterScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/MultiJoinOptimizeBushyRule.java,68,public class MultiJoinOptimizeBushyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectCalcMergeRule.java,43,public class ProjectCalcMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectFilterTransposeRule.java,36,public class ProjectFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectJoinTransposeRule.java,39,public class ProjectJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMergeRule.java,39,public class ProjectMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectMultiJoinMergeRule.java,35,public class ProjectMultiJoinMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSetOpTransposeRule.java,41,public class ProjectSetOpTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectSortTransposeRule.java,35,public class ProjectSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToCalcRule.java,40,public class ProjectToCalcRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectToWindowRule.java,76,public abstract class ProjectToWindowRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ProjectWindowTransposeRule.java,45,public class ProjectWindowTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceDecimalsRule.java,67,public class ReduceDecimalsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinFilterTransposeRule.java,38,public class SemiJoinFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinJoinTransposeRule.java,46,public class SemiJoinJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinProjectTransposeRule.java,55,public class SemiJoinProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRemoveRule.java,34,public class SemiJoinRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SemiJoinRule.java,47,public abstract class SemiJoinRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortJoinTransposeRule.java,44,public class SortJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortProjectTransposeRule.java,51,public class SortProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortRemoveRule.java,32,public class SortRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SortUnionTransposeRule.java,37,public class SortUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/SubQueryRemoveRule.java,65,public abstract class SubQueryRemoveRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/TableScanRule.java,31,public class TableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionMergeRule.java,42,public class UnionMergeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionPullUpConstantsRule.java,48,public class UnionPullUpConstantsRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/UnionToDistinctRule.java,35,public class UnionToDistinctRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ValuesReduceRule.java,64,public abstract class ValuesReduceRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,68,public static class DeltaProjectTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,88,public static class DeltaFilterTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,107,public static class DeltaAggregateTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,129,public static class DeltaSortTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,149,public static class DeltaUnionTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,177,public static class DeltaTableScanRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,211,public static class DeltaTableScanToEmptyRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/stream/StreamRules.java,241,public static class DeltaJoinTransposeRule extends RelOptRule {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,35,import org.apache.calcite.rel.type.RelDataType;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,60,import org.apache.calcite.sql.fun.SqlStdOperatorTable;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,495,predicates.constantMap, constExps, addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,496,if (constExps.isEmpty() && removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,504,if (!removableCasts.isEmpty()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,506,for (RexNode exp : removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,507,RexCall call = (RexCall) exp;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,508,reducedExprs.add(call.getOperands().get(0));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,510,RexReplacer replacer =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,512,Collections.nCopies(removableCasts.size(), false));
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,513,replacer.mutate(expList);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,517,return true;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,588,List<RexNode> constExps, List<Boolean> addCasts,
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,589,List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,592,addCasts, removableCasts);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,756,private final List<RexNode> removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,762,List<Boolean> addCasts, List<RexNode> removableCasts) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,769,this.removableCasts = removableCasts;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,904,if (call.getOperator() == SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,905,reduceCasts(call);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,919,private void reduceCasts(RexCall outerCast) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,920,List<RexNode> operands = outerCast.getOperands();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,921,if (operands.size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,922,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,924,RelDataType outerCastType = outerCast.getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,925,RelDataType operandType = operands.get(0).getType();
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,926,if (operandType.equals(outerCastType)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,927,removableCasts.add(outerCast);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,928,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,936,if (!(operands.get(0) instanceof RexCall)) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,937,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,939,RexCall innerCast = (RexCall) operands.get(0);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,940,if (innerCast.getOperator() != SqlStdOperatorTable.CAST) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,941,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,943,if (innerCast.getOperands().size() != 1) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,944,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,946,RelDataType outerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,947,typeFactory.createTypeWithNullability(outerCastType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,948,RelDataType innerTypeNullable =
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,949,typeFactory.createTypeWithNullability(operandType, true);
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,950,if (outerTypeNullable != innerTypeNullable) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,951,return;
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,953,if (operandType.isNullable()) {
core/src/main/java/org/apache/calcite/rel/rules/ReduceExpressionsRule.java,954,removableCasts.add(innerCast);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,65,ImmutableIntList list = ImmutableIntList.copyOf(numbers);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,66,if (numbers.size() > 1
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,67,&& !Ordering.natural().isOrdered(list)) {
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,68,list = ImmutableIntList.copyOf(Ordering.natural().sortedCopy(list));
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,135,return getTraitDef().canonize(
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,136,new RelDistributionImpl(type,
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,137,ImmutableIntList.copyOf(
core/src/main/java/org/apache/calcite/rex/RexUtil.java,1237,newFieldCollations.add(apply(mapping, fieldCollation));
core/src/main/java/org/apache/calcite/util/Permutation.java,418,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,419,return targets[source];
core/src/main/java/org/apache/calcite/util/Permutation.java,421,throw new Mappings.NoElementException("invalid source " + source);
core/src/main/java/org/apache/calcite/util/Permutation.java,429,try {
core/src/main/java/org/apache/calcite/util/Permutation.java,430,return sources[target];
core/src/main/java/org/apache/calcite/util/Permutation.java,432,throw new Mappings.NoElementException("invalid target " + target);
core/src/main/java/org/apache/calcite/util/mapping/Mappings.java,849,int getTarget(int target);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,24,import org.apache.calcite.rex.RexBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,25,import org.apache.calcite.rex.RexNode;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,26,import org.apache.calcite.rex.RexProgram;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,27,import org.apache.calcite.rex.RexProgramBuilder;
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,65,RexBuilder rexBuilder = topFilter.getCluster().getRexBuilder();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,66,RexProgram bottomProgram = createProgram(bottomFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,67,RexProgram topProgram = createProgram(topFilter);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,69,RexProgram mergedProgram =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,70,RexProgramBuilder.mergePrograms(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,71,topProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,72,bottomProgram,
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,73,rexBuilder);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,75,RexNode newCondition =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,76,mergedProgram.expandLocalRef(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,77,mergedProgram.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,81,.filter(newCondition);
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,92,private RexProgram createProgram(Filter filterRel) {
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,93,RexProgramBuilder programBuilder =
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,94,new RexProgramBuilder(
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,95,filterRel.getRowType(),
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,96,filterRel.getCluster().getRexBuilder());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,97,programBuilder.addIdentity();
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,98,programBuilder.addCondition(filterRel.getCondition());
core/src/main/java/org/apache/calcite/rel/rules/FilterMergeRule.java,99,return programBuilder.getProgram();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,331,planner.reregister(this, otherRel);
core/src/main/java/org/apache/calcite/sql/SqlSplittableAggFunction.java,221,return rexBuilder.makeInputRef(field.getType(), arg);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValues.java,81,return create(getCluster(), rowType, tuples);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,35,LogicalValues values = (LogicalValues) rel;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,36,return EnumerableValues.create(values.getCluster(), values.getRowType(),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableValuesRule.java,37,values.getTuples());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,251,call.transformTo(call.builder().push(sort).empty().build());
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,352,SingleRel single = call.rel(0);
core/src/main/java/org/apache/calcite/rel/rules/PruneEmptyRules.java,353,call.transformTo(call.builder().push(single).empty().build());
core/src/main/java/org/apache/calcite/rel/core/TableModify.java,124,Preconditions.checkArgument(updateColumnList == null);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,70,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,71,new RelDistributionImpl(RelDistribution.Type.HASH_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,72,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,78,RelDistributionImpl trait =
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,79,new RelDistributionImpl(RelDistribution.Type.RANGE_DISTRIBUTED, list);
core/src/main/java/org/apache/calcite/rel/RelDistributions.java,80,return RelDistributionTraitDef.INSTANCE.canonize(trait);
core/src/main/java/org/apache/calcite/plan/AbstractRelOptPlanner.java,413,protected MulticastRelOptListener getListener() {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,244,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,258,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,277,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,258,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,265,planner.listener.relEquivalenceFound(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,293,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,298,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,450,if (planner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,455,planner.listener.relChosen(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,29,import org.apache.calcite.plan.RelOptListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,217,RelOptListener listener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1674,public void addListener(RelOptListener newListener) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1677,if (listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1678,throw Util.needToImplement("multiple VolcanoPlanner listeners");
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,1680,listener = newListener;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,118,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,125,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,138,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,145,volcanoPlanner.listener.ruleProductionSucceeded(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,198,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,205,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,225,if (volcanoPlanner.listener != null) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoRuleCall.java,232,volcanoPlanner.listener.ruleAttempted(event);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,39,&& rel.equals(((MutableScan) obj).rel);
core/src/main/java/org/apache/calcite/rel/mutable/MutableScan.java,43,return rel.hashCode();
core/src/main/java/org/apache/calcite/util/Sources.java,89,this.url = null;
core/src/main/java/org/apache/calcite/util/Sources.java,93,return (url != null ? url : file).toString();
core/src/main/java/org/apache/calcite/util/Sources.java,97,if (url == null) {
core/src/main/java/org/apache/calcite/util/Sources.java,98,throw new UnsupportedOperationException();
core/src/main/java/org/apache/calcite/util/Sources.java,143,if (url != null) {
core/src/main/java/org/apache/calcite/util/Sources.java,165,if (url != null) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,180,if (withDetail) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,184,printPrecision = true;
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,186,if (typeName.getDefaultScale() > -1) {
core/src/main/java/org/apache/calcite/sql/type/BasicSqlType.java,187,printScale = true;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2087,int y = m / 12;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2088,y0 += y;
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,2089,m0 += m - y * 12;
core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java,609,MetaResultSet.create(h.connectionId, h.id, false, signature, null);
core/src/main/java/org/apache/calcite/rel/metadata/RelMdMinRowCount.java,61,return rowCount;
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,38,final RelTraitSet traitSet =
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,39,agg.getTraitSet().replace(EnumerableConvention.INSTANCE);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableAggregateRule.java,44,convert(agg.getInput(), EnumerableConvention.INSTANCE),
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,38,final RelTraitSet traitSet = union.getTraitSet().replace(out);
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableUnionRule.java,40,convertList(union.getInputs(), out), union.all);
core/src/main/java/org/apache/calcite/plan/Convention.java,47,boolean canConvertConvention(Convention toConvention);
core/src/main/java/org/apache/calcite/plan/Convention.java,62,boolean useAbstractConvertersForConversion(RelTraitSet fromTraits,
core/src/main/java/org/apache/calcite/plan/Convention.java,63,RelTraitSet toTraits);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,147,final RelSubset subset = getOrCreateSubset(rel.getCluster(), traitSet);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,153,VolcanoPlanner planner, RelOptCluster cluster, RelSubset subset, boolean subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,156,for (RelSubset other : subsets) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,171,subset.getTraitSet().difference(other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,173,boolean addAbstractConverter = true;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,174,int numTraitNeedConvert = 0;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,176,for (RelTrait curOtherTrait : difference) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,177,RelTraitDef traitDef = curOtherTrait.getTraitDef();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,178,RelTrait curRelTrait = subset.getTraitSet().getTrait(traitDef);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,182,if (curRelTrait == null) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,183,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,184,break;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,187,boolean canConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,188,boolean needConvert = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,189,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,192,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,193,cluster.getPlanner(), curRelTrait, curOtherTrait, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,194,needConvert = !curRelTrait.satisfies(curOtherTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,197,canConvert = traitDef.canConvert(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,198,cluster.getPlanner(), curOtherTrait, curRelTrait, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,199,needConvert = !curOtherTrait.satisfies(curRelTrait);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,202,if (!canConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,203,addAbstractConverter = false;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,207,if (needConvert) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,208,numTraitNeedConvert++;
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,212,if (addAbstractConverter && numTraitNeedConvert > 0) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,213,if (subsetToOthers) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,214,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,215,new AbstractConverter(cluster, subset, null, other.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,216,planner.register(converter, other);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,218,final AbstractConverter converter =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,219,new AbstractConverter(cluster, other, null, subset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,220,planner.register(converter, subset);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,227,RelOptCluster cluster,
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,228,RelTraitSet traits) {
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,233,final VolcanoPlanner planner =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,234,(VolcanoPlanner) cluster.getPlanner();
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,236,addAbstractConverters(planner, cluster, subset, true);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,242,addAbstractConverters(planner, cluster, subset, false);
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,322,RelSubset subset =
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,323,getOrCreateSubset(
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,324,otherSubset.getCluster(),
core/src/main/java/org/apache/calcite/plan/volcano/RelSet.java,325,otherSubset.getTraitSet());
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,96,boolean boosted;
core/src/main/java/org/apache/calcite/plan/volcano/RelSubset.java,106,this.boosted = false;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,553,return rel2.set.getOrCreateSubset(rel.getCluster(), toTraits.simplify());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,32,import org.apache.calcite.rex.RexCall;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,38,import com.google.common.collect.ImmutableList;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,121,RexNode condition = variableReplacer.go(oldCondition);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,187,private static class VariableReplacer {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,201,public RexNode go(RexNode rex) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,202,if (rex instanceof RexCall) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,203,ImmutableList.Builder<RexNode> builder =
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,204,ImmutableList.builder();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,205,final RexCall call = (RexCall) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,206,for (RexNode operand : call.operands) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,207,builder.add(go(operand));
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,209,return call.clone(call.getType(), builder.build());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,211,RexInputRef var = (RexInputRef) rex;
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,212,int index = var.getIndex();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,213,if (index < leftFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,215,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,216,leftFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,217,rightFields.size() + index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,219,index -= leftFields.size();
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,220,if (index < rightFields.size()) {
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,222,return rexBuilder.makeInputRef(
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,223,rightFields.get(index).getType(),
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,224,index);
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,228,+ ", rightFieldCount=" + rightFields.size());
core/src/main/java/org/apache/calcite/rel/rules/JoinCommuteRule.java,230,return rex;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,423,if (canAssignFrom(left.getType(), operand.getType())) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,455,private static boolean canAssignFrom(RelDataType type1, RelDataType type2) {
core/src/main/java/org/apache/calcite/rex/RexUtil.java,461,return name1.compareTo(name2) >= 0;
core/src/main/java/org/apache/calcite/rex/RexUtil.java,463,return true;
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,447,routines = filterRoutinesByTypePrecedence(sqlSyntax, routines, argTypes);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,516,private static Iterator<SqlOperator> filterRoutinesByParameterType(
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,582,List<RelDataType> argTypes) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,593,final RelDataType bestMatch = bestMatch(sqlFunctions, argType.i, precList);
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,615,RelDataTypePrecedenceList precList) {
core/src/main/java/org/apache/calcite/sql/SqlUtil.java,622,final RelDataType paramType = paramTypes.get(i);
core/src/main/java/org/apache/calcite/rel/core/Window.java,232,assert orderKeys != null : "precondition: ordinals != null";
core/src/main/java/org/apache/calcite/rel/core/Window.java,233,assert keys != null;
core/src/main/java/org/apache/calcite/rel/core/Window.java,234,this.keys = keys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,236,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,237,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rel/core/Window.java,238,this.orderKeys = orderKeys;
core/src/main/java/org/apache/calcite/rel/core/Window.java,248,final StringBuilder buf = new StringBuilder();
core/src/main/java/org/apache/calcite/rel/core/Window.java,249,buf.append("window(partition ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,250,buf.append(keys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,251,buf.append(" order by ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,252,buf.append(orderKeys);
core/src/main/java/org/apache/calcite/rel/core/Window.java,253,buf.append(isRows ? " rows " : " range ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,254,if (lowerBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,255,if (upperBound != null) {
core/src/main/java/org/apache/calcite/rel/core/Window.java,256,buf.append("between ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,257,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,258,buf.append(" and ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,259,buf.append(upperBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,261,buf.append(lowerBound);
core/src/main/java/org/apache/calcite/rel/core/Window.java,266,buf.append(" aggs ");
core/src/main/java/org/apache/calcite/rel/core/Window.java,267,buf.append(aggCalls);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,331,RelDataType type,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,332,SqlAggFunction operator,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,333,List<RexNode> exprs,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,334,List<RexNode> partitionKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,335,ImmutableList<RexFieldCollation> orderKeys,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,336,RexWindowBound lowerBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,337,RexWindowBound upperBound,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,338,boolean physical,
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,342,assert operator != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,343,assert exprs != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,344,assert partitionKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,345,assert orderKeys != null;
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,352,physical);
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,382,Preconditions.checkArgument(physical, "DISALLOW PARTIAL over RANGE");
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,423,boolean isRows) {
core/src/main/java/org/apache/calcite/rex/RexBuilder.java,429,isRows);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,66,RexWindowBound lowerBound = window.getLowerBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,67,RexWindowBound upperBound = window.getUpperBound().accept(this);
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,68,if (update[0]
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,70,|| (upperBound != window.getUpperBound() && upperBound != null)) {
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,71,return new RexWindow(
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,72,clonedPartitionKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,73,clonedOrderKeys,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,74,lowerBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,75,upperBound,
core/src/main/java/org/apache/calcite/rex/RexShuttle.java,76,window.isRows());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,21,import java.io.PrintWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,22,import java.io.StringWriter;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,59,this.lowerBound = lowerBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,60,this.upperBound = upperBound;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,84,StringWriter sw = new StringWriter();
core/src/main/java/org/apache/calcite/rex/RexWindow.java,85,PrintWriter pw = new PrintWriter(sw);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,86,int clauseCount = 0;
core/src/main/java/org/apache/calcite/rex/RexWindow.java,88,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,89,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,91,pw.print("PARTITION BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,94,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,96,RexNode partitionKey = partitionKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,97,pw.print(partitionKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,101,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,102,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,104,pw.print("ORDER BY ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,107,pw.print(", ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,109,RexFieldCollation orderKey = orderKeys.get(i);
core/src/main/java/org/apache/calcite/rex/RexWindow.java,110,pw.print(orderKey.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,113,if (lowerBound == null) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,116,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,117,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,119,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,120,pw.print("ROWS ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,122,pw.print("RANGE ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,124,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,126,if (clauseCount++ > 0) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,127,pw.print(' ');
core/src/main/java/org/apache/calcite/rex/RexWindow.java,129,if (isRows) {
core/src/main/java/org/apache/calcite/rex/RexWindow.java,130,pw.print("ROWS BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,132,pw.print("RANGE BETWEEN ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,134,pw.print(lowerBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,135,pw.print(" AND ");
core/src/main/java/org/apache/calcite/rex/RexWindow.java,136,pw.print(upperBound.toString());
core/src/main/java/org/apache/calcite/rex/RexWindow.java,138,return sw.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,19,import org.apache.calcite.sql.SqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,20,import org.apache.calcite.sql.SqlLiteral;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,22,import org.apache.calcite.sql.SqlWindow;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,38,|| SqlWindow.isUnboundedFollowing(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,39,return new RexWindowBoundUnbounded(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,41,if (SqlWindow.isCurrentRow(node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,42,return new RexWindowBoundCurrentRow();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,44,return new RexWindowBoundBounded(rexNode);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,109,private static class RexWindowBoundUnbounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,110,private final SqlNode node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,113,this.node = node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,117,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,121,return SqlWindow.isUnboundedPreceding(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,125,return SqlWindow.isUnboundedFollowing(node);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,129,return ((SqlLiteral) node).getValue().toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,133,return isPreceding() ? 0 : 2;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,137,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,138,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,140,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,141,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,144,RexWindowBoundUnbounded that = (RexWindowBoundUnbounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,146,if (!node.equals(that.node)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,147,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,150,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,154,return node.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,161,private static class RexWindowBoundCurrentRow extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,163,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,167,return "CURRENT ROW";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,171,return 1;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,175,return getClass() == obj.getClass();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,179,return 123;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,186,private static class RexWindowBoundBounded extends RexWindowBound {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,187,private final SqlKind sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,188,private final RexNode offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,191,assert node instanceof RexCall
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,192,: "RexWindowBoundBounded window bound should be either 'X preceding'"
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,193,+ " or 'X following' call. Actual type is " + node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,194,RexCall call = (RexCall) node;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,195,this.offset = call.getOperands().get(0);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,196,this.sqlKind = call.getKind();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,197,assert this.offset != null
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,198,: "RexWindowBoundBounded offset should not be null";
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,201,private RexWindowBoundBounded(SqlKind sqlKind, RexNode offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,202,this.sqlKind = sqlKind;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,203,this.offset = offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,207,return sqlKind == SqlKind.PRECEDING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,211,return sqlKind == SqlKind.FOLLOWING;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,215,return offset;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,219,R r = offset.accept(visitor);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,220,if (r instanceof RexNode && r != offset) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,221,return new RexWindowBoundBounded(sqlKind, (RexNode) r);
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,223,return this;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,227,return offset.toString() + " " + sqlKind.toString();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,231,if (this == o) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,232,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,234,if (o == null || getClass() != o.getClass()) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,235,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,238,RexWindowBoundBounded that = (RexWindowBoundBounded) o;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,240,if (!offset.equals(that.offset)) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,241,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,243,if (sqlKind != that.sqlKind) {
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,244,return false;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,247,return true;
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,251,int result = sqlKind.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,252,result = 31 * result + offset.hashCode();
core/src/main/java/org/apache/calcite/rex/RexWindowBound.java,253,return result;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,233,final SqlWindow tmp;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,234,if (lowerBound == null || upperBound == null) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,236,tmp = new SqlWindow(getParserPosition(), null, null, partitionList,
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,237,orderList, isRows, lowerBound, upperBound, allowPartial);
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,238,tmp.populateBounds();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,240,tmp = this;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,242,if (tmp.lowerBound instanceof SqlLiteral
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,243,&& tmp.upperBound instanceof SqlLiteral) {
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,244,int lowerKey = RexWindowBound.create(tmp.lowerBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,245,int upperKey = RexWindowBound.create(tmp.upperBound, null).getOrderKey();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,246,return lowerKey > -1 && lowerKey <= upperKey;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,248,return false;
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,755,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,756,SqlWindow.createUnboundedPreceding(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,759,setLowerBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,760,SqlWindow.createCurrentRow(getParserPosition()));
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,763,SqlParserPos pos = orderList.getParserPosition();
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,764,setUpperBound(
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,765,orderList.size() == 0
core/src/main/java/org/apache/calcite/sql/SqlWindow.java,767,: SqlWindow.createCurrentRow(pos));
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,381,SqlWindow resolveWindow(
core/src/main/java/org/apache/calcite/sql/validate/SqlValidator.java,384,boolean populateBounds);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4412,SqlValidatorScope scope,
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4413,boolean populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4433,if (populateBounds) {
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,4434,window.populateBounds();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1824,validator.resolveWindow(windowOrRef, bb.scope, true);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1827,if (aggCall.getKind() == SqlKind.ROW_NUMBER) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1828,window.setLowerBound(SqlWindow.createUnboundedPreceding(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1829,window.setUpperBound(SqlWindow.createCurrentRow(SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1830,window.setRows(SqlLiteral.createBoolean(true, SqlParserPos.ZERO));
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1838,RexNode lowerBound = bb.convertExpression(window.getLowerBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1839,RexNode upperBound = bb.convertExpression(window.getUpperBound());
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1840,SqlNodeList orderList = window.getOrderList();
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1841,if ((orderList.size() == 0) && !window.isRows()) {
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1881,RexWindowBound.create(window.getLowerBound(), lowerBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1882,RexWindowBound.create(window.getUpperBound(), upperBound),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1883,window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1885,RexNode overNode = rexAgg.accept(visitor);
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,1887,return overNode;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5083,private final SqlWindow window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5090,SqlWindow window,
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5096,this.window = window;
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5151,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5152,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5192,window.isRows(),
core/src/main/java/org/apache/calcite/sql2rel/SqlToRelConverter.java,5193,window.isAllowPartial(),
core/src/main/java/org/apache/calcite/rex/RexOver.java,151,public static boolean containsOver(List<RexNode> exprs, RexNode condition) {
core/src/main/java/org/apache/calcite/adapter/enumerable/EnumerableMergeJoin.java,186,joinType.generatesNullsOnRight())))).toBlock());
core/src/main/java/org/apache/calcite/util/BuiltInMethod.java,148,boolean.class, boolean.class),
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3230,Function2<TSource, TInner, TResult> resultSelector) {
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3257,int c = leftKey.compareTo(rightKey);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3286,int c = leftKey.compareTo(leftKey2);
linq4j/src/main/java/org/apache/calcite/linq4j/EnumerableDefaults.java,3302,int c = rightKey.compareTo(rightKey2);
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1033,return SqlStdOperatorTable.AS.createCall(POS, node,
core/src/main/java/org/apache/calcite/rel/rel2sql/SqlImplementor.java,1034,new SqlIdentifier(neededAlias, POS));
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,70,super(kind.name(),
core/src/main/java/org/apache/calcite/sql/fun/SqlMinMaxAggFunction.java,75,OperandTypes.COMPARABLE_ORDERED,
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1395,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1406,return s.replaceAll("0*E", "E").replace("E+", "E");
core/src/main/java/org/apache/calcite/runtime/SqlFunctions.java,1412,if (s.startsWith("0")) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,261,if (identifierQuoteString == null) {
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,262,return val; // quoting is not supported
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,264,String val2 =
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,265,val.replaceAll(
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,266,identifierEndQuoteString,
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,267,identifierEscapedQuote);
core/src/main/java/org/apache/calcite/sql/SqlDialect.java,268,return identifierQuoteString + val2 + identifierEndQuoteString;
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,309,s = s.replaceAll(" ", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,310,s = s.replaceAll("\n", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,311,s = s.replaceAll("\t", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,312,s = s.replaceAll("\r", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,313,s = s.replaceAll("\f", "");
core/src/main/java/org/apache/calcite/sql/parser/SqlParserUtil.java,314,s = s.replaceAll("'", "");
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,901,String qName = name;
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,904,qName = dialect.quoteIdentifier(name);
core/src/main/java/org/apache/calcite/sql/pretty/SqlPrettyWriter.java,906,maybeWhitespace(qName);
core/src/main/java/org/apache/calcite/sql/validate/SqlValidatorImpl.java,862,sig = sig.replaceAll("'", "");
core/src/main/java/org/apache/calcite/util/BitString.java,51,assert bits.replaceAll("1", "").replaceAll("0", "").length() == 0
core/src/main/java/org/apache/calcite/util/Util.java,712,return s.replaceAll("\r\n", "\n");
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,198,private static Integer parseIntString(String valueString) {
mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoTable.java,199,return Integer.parseInt(valueString.replaceAll("[^0-9]", ""));
splunk/src/main/java/org/apache/calcite/adapter/splunk/SplunkPushDownRule.java,401,value = value.replaceAll("%", "*");
core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java,1609,return Expressions.call(floorMethod, tur,
core/src/main/java/org/apache/calcite/plan/RelOptUtil.java,71,import org.apache.calcite.rex.RexMultisetUtil;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,70,import com.google.common.collect.LinkedHashMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,76,import com.google.common.collect.SetMultimap;
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,249,private final SetMultimap<String, Class> ruleNames =
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,250,LinkedHashMultimap.create();
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,462,if (ruleNames.put(ruleName, rule.getClass())) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,463,Set<Class> x = ruleNames.get(ruleName);
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,464,if (x.size() > 1) {
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,465,throw new RuntimeException("Rule description '" + ruleName
core/src/main/java/org/apache/calcite/plan/volcano/VolcanoPlanner.java,466,+ "' is not unique; classes: " + x);
